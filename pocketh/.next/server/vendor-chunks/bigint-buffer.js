"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bigint-buffer";
exports.ids = ["vendor-chunks/bigint-buffer"];
exports.modules = {

/***/ "(ssr)/./node_modules/bigint-buffer/dist/node.js":
/*!*************************************************!*\
  !*** ./node_modules/bigint-buffer/dist/node.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nlet converter;\n{\n    try {\n        converter = __webpack_require__(/*! bindings */ \"(ssr)/./node_modules/bindings/bindings.js\")(\"bigint_buffer\");\n    } catch (e) {\n        console.warn(\"bigint: Failed to load bindings, pure JS will be used (try npm run rebuild?)\");\n    }\n}/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */ function toBigIntLE(buf) {\n    if (converter === undefined) {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString(\"hex\");\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */ function toBigIntBE(buf) {\n    if (converter === undefined) {\n        const hex = buf.toString(\"hex\");\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */ function toBufferLE(num, width) {\n    if (converter === undefined) {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, \"0\").slice(0, width * 2), \"hex\");\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */ function toBufferBE(num, width) {\n    if (converter === undefined) {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, \"0\").slice(0, width * 2), \"hex\");\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmlnaW50LWJ1ZmZlci9kaXN0L25vZGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsSUFBSUM7QUFDSjtJQUNJLElBQUk7UUFDQUEsWUFBWUMsbUJBQU9BLENBQUMsNkRBQVk7SUFDcEMsRUFDQSxPQUFPQyxHQUFHO1FBQ05DLFFBQVFDLElBQUksQ0FBQztJQUNqQjtBQUNKLENBQ0E7Ozs7Q0FJQyxHQUNELFNBQVNDLFdBQVdDLEdBQUc7SUFDbkIsSUFBSU4sY0FBY08sV0FBVztRQUN6QixNQUFNQyxXQUFXQyxPQUFPQyxJQUFJLENBQUNKO1FBQzdCRSxTQUFTRyxPQUFPO1FBQ2hCLE1BQU1DLE1BQU1KLFNBQVNLLFFBQVEsQ0FBQztRQUM5QixJQUFJRCxJQUFJRSxNQUFNLEtBQUssR0FBRztZQUNsQixPQUFPQyxPQUFPO1FBQ2xCO1FBQ0EsT0FBT0EsT0FBTyxDQUFDLEVBQUUsRUFBRUgsSUFBSSxDQUFDO0lBQzVCO0lBQ0EsT0FBT1osVUFBVWdCLFFBQVEsQ0FBQ1YsS0FBSztBQUNuQztBQUNBUixrQkFBa0IsR0FBR087QUFDckI7Ozs7Q0FJQyxHQUNELFNBQVNZLFdBQVdYLEdBQUc7SUFDbkIsSUFBSU4sY0FBY08sV0FBVztRQUN6QixNQUFNSyxNQUFNTixJQUFJTyxRQUFRLENBQUM7UUFDekIsSUFBSUQsSUFBSUUsTUFBTSxLQUFLLEdBQUc7WUFDbEIsT0FBT0MsT0FBTztRQUNsQjtRQUNBLE9BQU9BLE9BQU8sQ0FBQyxFQUFFLEVBQUVILElBQUksQ0FBQztJQUM1QjtJQUNBLE9BQU9aLFVBQVVnQixRQUFRLENBQUNWLEtBQUs7QUFDbkM7QUFDQVIsa0JBQWtCLEdBQUdtQjtBQUNyQjs7Ozs7Q0FLQyxHQUNELFNBQVNDLFdBQVdDLEdBQUcsRUFBRUMsS0FBSztJQUMxQixJQUFJcEIsY0FBY08sV0FBVztRQUN6QixNQUFNSyxNQUFNTyxJQUFJTixRQUFRLENBQUM7UUFDekIsTUFBTVEsU0FBU1osT0FBT0MsSUFBSSxDQUFDRSxJQUFJVSxRQUFRLENBQUNGLFFBQVEsR0FBRyxLQUFLRyxLQUFLLENBQUMsR0FBR0gsUUFBUSxJQUFJO1FBQzdFQyxPQUFPVixPQUFPO1FBQ2QsT0FBT1U7SUFDWDtJQUNBLDhEQUE4RDtJQUM5RCxPQUFPckIsVUFBVXdCLFVBQVUsQ0FBQ0wsS0FBS1YsT0FBT2dCLFdBQVcsQ0FBQ0wsUUFBUTtBQUNoRTtBQUNBdEIsa0JBQWtCLEdBQUdvQjtBQUNyQjs7Ozs7Q0FLQyxHQUNELFNBQVNRLFdBQVdQLEdBQUcsRUFBRUMsS0FBSztJQUMxQixJQUFJcEIsY0FBY08sV0FBVztRQUN6QixNQUFNSyxNQUFNTyxJQUFJTixRQUFRLENBQUM7UUFDekIsT0FBT0osT0FBT0MsSUFBSSxDQUFDRSxJQUFJVSxRQUFRLENBQUNGLFFBQVEsR0FBRyxLQUFLRyxLQUFLLENBQUMsR0FBR0gsUUFBUSxJQUFJO0lBQ3pFO0lBQ0EsT0FBT3BCLFVBQVV3QixVQUFVLENBQUNMLEtBQUtWLE9BQU9nQixXQUFXLENBQUNMLFFBQVE7QUFDaEU7QUFDQXRCLGtCQUFrQixHQUFHNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL2JpZ2ludC1idWZmZXIvZGlzdC9ub2RlLmpzP2JmZGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5sZXQgY29udmVydGVyO1xue1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnZlcnRlciA9IHJlcXVpcmUoJ2JpbmRpbmdzJykoJ2JpZ2ludF9idWZmZXInKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdiaWdpbnQ6IEZhaWxlZCB0byBsb2FkIGJpbmRpbmdzLCBwdXJlIEpTIHdpbGwgYmUgdXNlZCAodHJ5IG5wbSBydW4gcmVidWlsZD8pJyk7XG4gICAgfVxufVxuLyoqXG4gKiBDb252ZXJ0IGEgbGl0dGxlLWVuZGlhbiBidWZmZXIgaW50byBhIEJpZ0ludC5cbiAqIEBwYXJhbSBidWYgVGhlIGxpdHRsZS1lbmRpYW4gYnVmZmVyIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIEEgQmlnSW50IHdpdGggdGhlIGxpdHRsZS1lbmRpYW4gcmVwcmVzZW50YXRpb24gb2YgYnVmLlxuICovXG5mdW5jdGlvbiB0b0JpZ0ludExFKGJ1Zikge1xuICAgIGlmIChjb252ZXJ0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCByZXZlcnNlZCA9IEJ1ZmZlci5mcm9tKGJ1Zik7XG4gICAgICAgIHJldmVyc2VkLnJldmVyc2UoKTtcbiAgICAgICAgY29uc3QgaGV4ID0gcmV2ZXJzZWQudG9TdHJpbmcoJ2hleCcpO1xuICAgICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCgwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQmlnSW50KGAweCR7aGV4fWApO1xuICAgIH1cbiAgICByZXR1cm4gY29udmVydGVyLnRvQmlnSW50KGJ1ZiwgZmFsc2UpO1xufVxuZXhwb3J0cy50b0JpZ0ludExFID0gdG9CaWdJbnRMRTtcbi8qKlxuICogQ29udmVydCBhIGJpZy1lbmRpYW4gYnVmZmVyIGludG8gYSBCaWdJbnRcbiAqIEBwYXJhbSBidWYgVGhlIGJpZy1lbmRpYW4gYnVmZmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyBBIEJpZ0ludCB3aXRoIHRoZSBiaWctZW5kaWFuIHJlcHJlc2VudGF0aW9uIG9mIGJ1Zi5cbiAqL1xuZnVuY3Rpb24gdG9CaWdJbnRCRShidWYpIHtcbiAgICBpZiAoY29udmVydGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgaGV4ID0gYnVmLnRvU3RyaW5nKCdoZXgnKTtcbiAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBCaWdJbnQoMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJpZ0ludChgMHgke2hleH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnZlcnRlci50b0JpZ0ludChidWYsIHRydWUpO1xufVxuZXhwb3J0cy50b0JpZ0ludEJFID0gdG9CaWdJbnRCRTtcbi8qKlxuICogQ29udmVydCBhIEJpZ0ludCB0byBhIGxpdHRsZS1lbmRpYW4gYnVmZmVyLlxuICogQHBhcmFtIG51bSAgIFRoZSBCaWdJbnQgdG8gY29udmVydC5cbiAqIEBwYXJhbSB3aWR0aCBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRoYXQgdGhlIHJlc3VsdGluZyBidWZmZXIgc2hvdWxkIGJlLlxuICogQHJldHVybnMgQSBsaXR0bGUtZW5kaWFuIGJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBudW0uXG4gKi9cbmZ1bmN0aW9uIHRvQnVmZmVyTEUobnVtLCB3aWR0aCkge1xuICAgIGlmIChjb252ZXJ0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBoZXggPSBudW0udG9TdHJpbmcoMTYpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShoZXgucGFkU3RhcnQod2lkdGggKiAyLCAnMCcpLnNsaWNlKDAsIHdpZHRoICogMiksICdoZXgnKTtcbiAgICAgICAgYnVmZmVyLnJldmVyc2UoKTtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gICAgLy8gQWxsb2NhdGlvbiBpcyBkb25lIGhlcmUsIHNpbmNlIGl0IGlzIHNsb3dlciB1c2luZyBuYXBpIGluIENcbiAgICByZXR1cm4gY29udmVydGVyLmZyb21CaWdJbnQobnVtLCBCdWZmZXIuYWxsb2NVbnNhZmUod2lkdGgpLCBmYWxzZSk7XG59XG5leHBvcnRzLnRvQnVmZmVyTEUgPSB0b0J1ZmZlckxFO1xuLyoqXG4gKiBDb252ZXJ0IGEgQmlnSW50IHRvIGEgYmlnLWVuZGlhbiBidWZmZXIuXG4gKiBAcGFyYW0gbnVtICAgVGhlIEJpZ0ludCB0byBjb252ZXJ0LlxuICogQHBhcmFtIHdpZHRoIFRoZSBudW1iZXIgb2YgYnl0ZXMgdGhhdCB0aGUgcmVzdWx0aW5nIGJ1ZmZlciBzaG91bGQgYmUuXG4gKiBAcmV0dXJucyBBIGJpZy1lbmRpYW4gYnVmZmVyIHJlcHJlc2VudGF0aW9uIG9mIG51bS5cbiAqL1xuZnVuY3Rpb24gdG9CdWZmZXJCRShudW0sIHdpZHRoKSB7XG4gICAgaWYgKGNvbnZlcnRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGhleCA9IG51bS50b1N0cmluZygxNik7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShoZXgucGFkU3RhcnQod2lkdGggKiAyLCAnMCcpLnNsaWNlKDAsIHdpZHRoICogMiksICdoZXgnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnZlcnRlci5mcm9tQmlnSW50KG51bSwgQnVmZmVyLmFsbG9jVW5zYWZlKHdpZHRoKSwgdHJ1ZSk7XG59XG5leHBvcnRzLnRvQnVmZmVyQkUgPSB0b0J1ZmZlckJFO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29udmVydGVyIiwicmVxdWlyZSIsImUiLCJjb25zb2xlIiwid2FybiIsInRvQmlnSW50TEUiLCJidWYiLCJ1bmRlZmluZWQiLCJyZXZlcnNlZCIsIkJ1ZmZlciIsImZyb20iLCJyZXZlcnNlIiwiaGV4IiwidG9TdHJpbmciLCJsZW5ndGgiLCJCaWdJbnQiLCJ0b0JpZ0ludCIsInRvQmlnSW50QkUiLCJ0b0J1ZmZlckxFIiwibnVtIiwid2lkdGgiLCJidWZmZXIiLCJwYWRTdGFydCIsInNsaWNlIiwiZnJvbUJpZ0ludCIsImFsbG9jVW5zYWZlIiwidG9CdWZmZXJCRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bigint-buffer/dist/node.js\n");

/***/ })

};
;