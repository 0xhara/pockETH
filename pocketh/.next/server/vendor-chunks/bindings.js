/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bindings";
exports.ids = ["vendor-chunks/bindings"];
exports.modules = {

/***/ "(ssr)/./node_modules/bindings/bindings.js":
/*!*******************************************!*\
  !*** ./node_modules/bindings/bindings.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */ var fs = __webpack_require__(/*! fs */ \"fs\"), path = __webpack_require__(/*! path */ \"path\"), fileURLToPath = __webpack_require__(/*! file-uri-to-path */ \"(ssr)/./node_modules/file-uri-to-path/index.js\"), join = path.join, dirname = path.dirname, exists = fs.accessSync && function(path) {\n    try {\n        fs.accessSync(path);\n    } catch (e) {\n        return false;\n    }\n    return true;\n} || fs.existsSync || path.existsSync, defaults = {\n    arrow: process.env.NODE_BINDINGS_ARROW || \" â†’ \",\n    compiled: process.env.NODE_BINDINGS_COMPILED_DIR || \"compiled\",\n    platform: process.platform,\n    arch: process.arch,\n    nodePreGyp: \"node-v\" + process.versions.modules + \"-\" + process.platform + \"-\" + process.arch,\n    version: process.versions.node,\n    bindings: \"bindings.node\",\n    try: [\n        // node-gyp's linked version in the \"build\" dir\n        [\n            \"module_root\",\n            \"build\",\n            \"bindings\"\n        ],\n        // node-waf and gyp_addon (a.k.a node-gyp)\n        [\n            \"module_root\",\n            \"build\",\n            \"Debug\",\n            \"bindings\"\n        ],\n        [\n            \"module_root\",\n            \"build\",\n            \"Release\",\n            \"bindings\"\n        ],\n        // Debug files, for development (legacy behavior, remove for node v0.9)\n        [\n            \"module_root\",\n            \"out\",\n            \"Debug\",\n            \"bindings\"\n        ],\n        [\n            \"module_root\",\n            \"Debug\",\n            \"bindings\"\n        ],\n        // Release files, but manually compiled (legacy behavior, remove for node v0.9)\n        [\n            \"module_root\",\n            \"out\",\n            \"Release\",\n            \"bindings\"\n        ],\n        [\n            \"module_root\",\n            \"Release\",\n            \"bindings\"\n        ],\n        // Legacy from node-waf, node <= 0.4.x\n        [\n            \"module_root\",\n            \"build\",\n            \"default\",\n            \"bindings\"\n        ],\n        // Production \"Release\" buildtype binary (meh...)\n        [\n            \"module_root\",\n            \"compiled\",\n            \"version\",\n            \"platform\",\n            \"arch\",\n            \"bindings\"\n        ],\n        // node-qbs builds\n        [\n            \"module_root\",\n            \"addon-build\",\n            \"release\",\n            \"install-root\",\n            \"bindings\"\n        ],\n        [\n            \"module_root\",\n            \"addon-build\",\n            \"debug\",\n            \"install-root\",\n            \"bindings\"\n        ],\n        [\n            \"module_root\",\n            \"addon-build\",\n            \"default\",\n            \"install-root\",\n            \"bindings\"\n        ],\n        // node-pre-gyp path ./lib/binding/{node_abi}-{platform}-{arch}\n        [\n            \"module_root\",\n            \"lib\",\n            \"binding\",\n            \"nodePreGyp\",\n            \"bindings\"\n        ]\n    ]\n};\n/**\n * The main `bindings()` function loads the compiled bindings for a given module.\n * It uses V8's Error API to determine the parent filename that this function is\n * being invoked from, which is then used to find the root directory.\n */ function bindings(opts) {\n    // Argument surgery\n    if (typeof opts == \"string\") {\n        opts = {\n            bindings: opts\n        };\n    } else if (!opts) {\n        opts = {};\n    }\n    // maps `defaults` onto `opts` object\n    Object.keys(defaults).map(function(i) {\n        if (!(i in opts)) opts[i] = defaults[i];\n    });\n    // Get the module root\n    if (!opts.module_root) {\n        opts.module_root = exports.getRoot(exports.getFileName());\n    }\n    // Ensure the given bindings name ends with .node\n    if (path.extname(opts.bindings) != \".node\") {\n        opts.bindings += \".node\";\n    }\n    // https://github.com/webpack/webpack/issues/4175#issuecomment-342931035\n    var requireFunc =  true ? require : 0;\n    var tries = [], i = 0, l = opts.try.length, n, b, err;\n    for(; i < l; i++){\n        n = join.apply(null, opts.try[i].map(function(p) {\n            return opts[p] || p;\n        }));\n        tries.push(n);\n        try {\n            b = opts.path ? requireFunc.resolve(n) : requireFunc(n);\n            if (!opts.path) {\n                b.path = n;\n            }\n            return b;\n        } catch (e) {\n            if (e.code !== \"MODULE_NOT_FOUND\" && e.code !== \"QUALIFIED_PATH_RESOLUTION_FAILED\" && !/not find/i.test(e.message)) {\n                throw e;\n            }\n        }\n    }\n    err = new Error(\"Could not locate the bindings file. Tried:\\n\" + tries.map(function(a) {\n        return opts.arrow + a;\n    }).join(\"\\n\"));\n    err.tries = tries;\n    throw err;\n}\nmodule.exports = exports = bindings;\n/**\n * Gets the filename of the JavaScript file that invokes this function.\n * Used to help find the root directory of a module.\n * Optionally accepts an filename argument to skip when searching for the invoking filename\n */ exports.getFileName = function getFileName(calling_file) {\n    var origPST = Error.prepareStackTrace, origSTL = Error.stackTraceLimit, dummy = {}, fileName;\n    Error.stackTraceLimit = 10;\n    Error.prepareStackTrace = function(e, st) {\n        for(var i = 0, l = st.length; i < l; i++){\n            fileName = st[i].getFileName();\n            if (fileName !== __filename) {\n                if (calling_file) {\n                    if (fileName !== calling_file) {\n                        return;\n                    }\n                } else {\n                    return;\n                }\n            }\n        }\n    };\n    // run the 'prepareStackTrace' function above\n    Error.captureStackTrace(dummy);\n    dummy.stack;\n    // cleanup\n    Error.prepareStackTrace = origPST;\n    Error.stackTraceLimit = origSTL;\n    // handle filename that starts with \"file://\"\n    var fileSchema = \"file://\";\n    if (fileName.indexOf(fileSchema) === 0) {\n        fileName = fileURLToPath(fileName);\n    }\n    return fileName;\n};\n/**\n * Gets the root directory of a module, given an arbitrary filename\n * somewhere in the module tree. The \"root directory\" is the directory\n * containing the `package.json` file.\n *\n *   In:  /home/nate/node-native-module/lib/index.js\n *   Out: /home/nate/node-native-module\n */ exports.getRoot = function getRoot(file) {\n    var dir = dirname(file), prev;\n    while(true){\n        if (dir === \".\") {\n            // Avoids an infinite loop in rare cases, like the REPL\n            dir = process.cwd();\n        }\n        if (exists(join(dir, \"package.json\")) || exists(join(dir, \"node_modules\"))) {\n            // Found the 'package.json' file or 'node_modules' dir; we're done\n            return dir;\n        }\n        if (prev === dir) {\n            // Got to the top\n            throw new Error('Could not find module root given file: \"' + file + '\". Do you have a `package.json` file? ');\n        }\n        // Try the parent dir next\n        prev = dir;\n        dir = join(dir, \"..\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bindings/bindings.js\n");

/***/ })

};
;