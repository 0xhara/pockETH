"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sturdy-websocket";
exports.ids = ["vendor-chunks/sturdy-websocket"];
exports.modules = {

/***/ "(ssr)/./node_modules/sturdy-websocket/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/sturdy-websocket/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar SHOULD_RECONNECT_FALSE_MESSAGE = \"Provided shouldReconnect() returned false. Closing permanently.\";\nvar SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE = \"Provided shouldReconnect() resolved to false. Closing permanently.\";\nvar SturdyWebSocket = /** @class */ function() {\n    function SturdyWebSocket(url, protocolsOrOptions, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        this.url = url;\n        this.onclose = null;\n        this.onerror = null;\n        this.onmessage = null;\n        this.onopen = null;\n        this.ondown = null;\n        this.onreopen = null;\n        this.CONNECTING = SturdyWebSocket.CONNECTING;\n        this.OPEN = SturdyWebSocket.OPEN;\n        this.CLOSING = SturdyWebSocket.CLOSING;\n        this.CLOSED = SturdyWebSocket.CLOSED;\n        this.hasBeenOpened = false;\n        this.isClosed = false;\n        this.messageBuffer = [];\n        this.nextRetryTime = 0;\n        this.reconnectCount = 0;\n        this.lastKnownExtensions = \"\";\n        this.lastKnownProtocol = \"\";\n        this.listeners = {};\n        if (protocolsOrOptions == null || typeof protocolsOrOptions === \"string\" || Array.isArray(protocolsOrOptions)) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\"WebSocket not present in global scope and no \" + \"wsConstructor option was provided.\");\n            }\n        }\n        this.openNewWebSocket();\n    }\n    Object.defineProperty(SturdyWebSocket.prototype, \"binaryType\", {\n        get: function() {\n            return this.binaryTypeInternal || \"blob\";\n        },\n        set: function(binaryType) {\n            this.binaryTypeInternal = binaryType;\n            if (this.ws) {\n                this.ws.binaryType = binaryType;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"bufferedAmount\", {\n        get: function() {\n            var sum = this.ws ? this.ws.bufferedAmount : 0;\n            var hasUnknownAmount = false;\n            this.messageBuffer.forEach(function(data) {\n                var byteLength = getDataByteLength(data);\n                if (byteLength != null) {\n                    sum += byteLength;\n                } else {\n                    hasUnknownAmount = true;\n                }\n            });\n            if (hasUnknownAmount) {\n                this.debugLog(\"Some buffered data had unknown length. bufferedAmount()\" + \" return value may be below the correct amount.\");\n            }\n            return sum;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"extensions\", {\n        get: function() {\n            return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"protocol\", {\n        get: function() {\n            return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"readyState\", {\n        get: function() {\n            return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SturdyWebSocket.prototype.close = function(code, reason) {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    };\n    SturdyWebSocket.prototype.send = function(data) {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    };\n    SturdyWebSocket.prototype.reconnect = function() {\n        if (this.isClosed) {\n            throw new Error(\"Cannot call reconnect() on socket which is permanently closed.\");\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    };\n    SturdyWebSocket.prototype.addEventListener = function(type, listener) {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    };\n    SturdyWebSocket.prototype.dispatchEvent = function(event) {\n        return this.dispatchEventOfType(event.type, event);\n    };\n    SturdyWebSocket.prototype.removeEventListener = function(type, listener) {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(function(l) {\n                return l !== listener;\n            });\n        }\n    };\n    SturdyWebSocket.prototype.openNewWebSocket = function() {\n        var _this = this;\n        if (this.isClosed) {\n            return;\n        }\n        var _a = this.options, connectTimeout = _a.connectTimeout, wsConstructor = _a.wsConstructor;\n        this.debugLog(\"Opening new WebSocket to \" + this.url + \".\");\n        var ws = new wsConstructor(this.url, this.protocols);\n        ws.onclose = function(event) {\n            return _this.handleClose(event);\n        };\n        ws.onerror = function(event) {\n            return _this.handleError(event);\n        };\n        ws.onmessage = function(event) {\n            return _this.handleMessage(event);\n        };\n        ws.onopen = function(event) {\n            return _this.handleOpen(event);\n        };\n        this.connectTimeoutId = setTimeout(function() {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            _this.clearConnectTimeout();\n            _this.disposeSocket();\n            _this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    };\n    SturdyWebSocket.prototype.handleOpen = function(event) {\n        var _this = this;\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        var allClearResetTime = this.options.allClearResetTime;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(function(message) {\n            return _this.send(message);\n        });\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(function() {\n            _this.clearAllClearTimeout();\n            _this.nextRetryTime = 0;\n            _this.reconnectCount = 0;\n            var openTime = allClearResetTime / 1000 | 0;\n            _this.debugLog(\"WebSocket remained open for \" + openTime + \" seconds. Resetting\" + \" retry time and count.\");\n        }, allClearResetTime);\n    };\n    SturdyWebSocket.prototype.handleMessage = function(event) {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    };\n    SturdyWebSocket.prototype.handleClose = function(event) {\n        var _this = this;\n        if (this.isClosed) {\n            return;\n        }\n        var _a = this.options, maxReconnectAttempts = _a.maxReconnectAttempts, shouldReconnect = _a.shouldReconnect;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(event, this.getTooManyFailedReconnectsMessage());\n            return;\n        }\n        var willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(willReconnect, event, SHOULD_RECONNECT_FALSE_MESSAGE);\n        } else {\n            willReconnect.then(function(willReconnectResolved) {\n                if (_this.isClosed) {\n                    return;\n                }\n                _this.handleWillReconnect(willReconnectResolved, event, SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE);\n            });\n        }\n    };\n    SturdyWebSocket.prototype.handleError = function(event) {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    };\n    SturdyWebSocket.prototype.handleWillReconnect = function(willReconnect, event, denialReason) {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    };\n    SturdyWebSocket.prototype.reestablishConnection = function() {\n        var _this = this;\n        var _a = this.options, minReconnectDelay = _a.minReconnectDelay, maxReconnectDelay = _a.maxReconnectDelay, reconnectBackoffFactor = _a.reconnectBackoffFactor;\n        this.reconnectCount++;\n        var retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(minReconnectDelay, Math.min(this.nextRetryTime * reconnectBackoffFactor, maxReconnectDelay));\n        setTimeout(function() {\n            return _this.openNewWebSocket();\n        }, retryTime);\n        var retryTimeSeconds = retryTime / 1000 | 0;\n        this.debugLog(\"WebSocket was closed. Re-opening in \" + retryTimeSeconds + \" seconds.\");\n    };\n    SturdyWebSocket.prototype.stopReconnecting = function(event, debugReason) {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    };\n    SturdyWebSocket.prototype.shutdown = function() {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    };\n    SturdyWebSocket.prototype.disposeSocket = function(closeCode, reason) {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    };\n    SturdyWebSocket.prototype.clearAllTimeouts = function() {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    };\n    SturdyWebSocket.prototype.clearConnectTimeout = function() {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    };\n    SturdyWebSocket.prototype.clearAllClearTimeout = function() {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    };\n    SturdyWebSocket.prototype.dispatchEventOfType = function(type, event) {\n        var _this = this;\n        switch(type){\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type].slice().forEach(function(listener) {\n                return _this.callListener(listener, event);\n            });\n        }\n        return !event || !event.defaultPrevented;\n    };\n    SturdyWebSocket.prototype.callListener = function(listener, event) {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    };\n    SturdyWebSocket.prototype.debugLog = function(message) {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    };\n    SturdyWebSocket.prototype.getTooManyFailedReconnectsMessage = function() {\n        var maxReconnectAttempts = this.options.maxReconnectAttempts;\n        return \"Failed to reconnect after \" + maxReconnectAttempts + \" \" + pluralize(\"attempt\", maxReconnectAttempts) + \". Closing permanently.\";\n    };\n    SturdyWebSocket.DEFAULT_OPTIONS = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: function() {\n            return true;\n        },\n        wsConstructor: undefined\n    };\n    SturdyWebSocket.CONNECTING = 0;\n    SturdyWebSocket.OPEN = 1;\n    SturdyWebSocket.CLOSING = 2;\n    SturdyWebSocket.CLOSED = 3;\n    return SturdyWebSocket;\n}();\nexports[\"default\"] = SturdyWebSocket;\nfunction applyDefaultOptions(options) {\n    var result = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(function(key) {\n        var value = options[key];\n        result[key] = value === undefined ? SturdyWebSocket.DEFAULT_OPTIONS[key] : value;\n    });\n    return result;\n}\nfunction getDataByteLength(data) {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\nfunction pluralize(s, n) {\n    return n === 1 ? s : s + \"s\";\n}\nfunction noop() {\n// Nothing.\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3R1cmR5LXdlYnNvY2tldC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDLGlDQUFpQztBQUNyQyxJQUFJQyx5Q0FBeUM7QUFDN0MsSUFBSUMsa0JBQWtCLFdBQVcsR0FBSTtJQUNqQyxTQUFTQSxnQkFBZ0JDLEdBQUcsRUFBRUMsa0JBQWtCLEVBQUVDLE9BQU87UUFDckQsSUFBSUEsWUFBWSxLQUFLLEdBQUc7WUFBRUEsVUFBVSxDQUFDO1FBQUc7UUFDeEMsSUFBSSxDQUFDRixHQUFHLEdBQUdBO1FBQ1gsSUFBSSxDQUFDRyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0MsU0FBUyxHQUFHO1FBQ2pCLElBQUksQ0FBQ0MsTUFBTSxHQUFHO1FBQ2QsSUFBSSxDQUFDQyxNQUFNLEdBQUc7UUFDZCxJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNDLFVBQVUsR0FBR1YsZ0JBQWdCVSxVQUFVO1FBQzVDLElBQUksQ0FBQ0MsSUFBSSxHQUFHWCxnQkFBZ0JXLElBQUk7UUFDaEMsSUFBSSxDQUFDQyxPQUFPLEdBQUdaLGdCQUFnQlksT0FBTztRQUN0QyxJQUFJLENBQUNDLE1BQU0sR0FBR2IsZ0JBQWdCYSxNQUFNO1FBQ3BDLElBQUksQ0FBQ0MsYUFBYSxHQUFHO1FBQ3JCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0MsYUFBYSxHQUFHLEVBQUU7UUFDdkIsSUFBSSxDQUFDQyxhQUFhLEdBQUc7UUFDckIsSUFBSSxDQUFDQyxjQUFjLEdBQUc7UUFDdEIsSUFBSSxDQUFDQyxtQkFBbUIsR0FBRztRQUMzQixJQUFJLENBQUNDLGlCQUFpQixHQUFHO1FBQ3pCLElBQUksQ0FBQ0MsU0FBUyxHQUFHLENBQUM7UUFDbEIsSUFBSW5CLHNCQUFzQixRQUN0QixP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NkQsWUFDSjFELGdCQUFnQmtILGVBQWUsQ0FBQ00sSUFBSSxHQUNwQzNIO0lBQ2Q7SUFDQSxPQUFPeUg7QUFDWDtBQUNBLFNBQVMxRSxrQkFBa0JGLElBQUk7SUFDM0IsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDMUIsOENBQThDO1FBQzlDLE9BQU8sSUFBSUEsS0FBSytFLE1BQU07SUFDMUIsT0FDSyxJQUFJL0UsZ0JBQWdCZ0YsYUFBYTtRQUNsQyxPQUFPaEYsS0FBS0MsVUFBVTtJQUMxQixPQUNLLElBQUlELGdCQUFnQmlGLE1BQU07UUFDM0IsT0FBT2pGLEtBQUtrRixJQUFJO0lBQ3BCLE9BQ0s7UUFDRCxPQUFPbEU7SUFDWDtBQUNKO0FBQ0EsU0FBU3VELFVBQVVZLENBQUMsRUFBRUMsQ0FBQztJQUNuQixPQUFPQSxNQUFNLElBQUlELElBQUlBLElBQUk7QUFDN0I7QUFDQSxTQUFTdEI7QUFDTCxXQUFXO0FBQ2YsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL3N0dXJkeS13ZWJzb2NrZXQvZGlzdC9pbmRleC5qcz9iMzBjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFNIT1VMRF9SRUNPTk5FQ1RfRkFMU0VfTUVTU0FHRSA9IFwiUHJvdmlkZWQgc2hvdWxkUmVjb25uZWN0KCkgcmV0dXJuZWQgZmFsc2UuIENsb3NpbmcgcGVybWFuZW50bHkuXCI7XG52YXIgU0hPVUxEX1JFQ09OTkVDVF9QUk9NSVNFX0ZBTFNFX01FU1NBR0UgPSBcIlByb3ZpZGVkIHNob3VsZFJlY29ubmVjdCgpIHJlc29sdmVkIHRvIGZhbHNlLiBDbG9zaW5nIHBlcm1hbmVudGx5LlwiO1xudmFyIFN0dXJkeVdlYlNvY2tldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdHVyZHlXZWJTb2NrZXQodXJsLCBwcm90b2NvbHNPck9wdGlvbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMub25jbG9zZSA9IG51bGw7XG4gICAgICAgIHRoaXMub25lcnJvciA9IG51bGw7XG4gICAgICAgIHRoaXMub25tZXNzYWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbm9wZW4gPSBudWxsO1xuICAgICAgICB0aGlzLm9uZG93biA9IG51bGw7XG4gICAgICAgIHRoaXMub25yZW9wZW4gPSBudWxsO1xuICAgICAgICB0aGlzLkNPTk5FQ1RJTkcgPSBTdHVyZHlXZWJTb2NrZXQuQ09OTkVDVElORztcbiAgICAgICAgdGhpcy5PUEVOID0gU3R1cmR5V2ViU29ja2V0Lk9QRU47XG4gICAgICAgIHRoaXMuQ0xPU0lORyA9IFN0dXJkeVdlYlNvY2tldC5DTE9TSU5HO1xuICAgICAgICB0aGlzLkNMT1NFRCA9IFN0dXJkeVdlYlNvY2tldC5DTE9TRUQ7XG4gICAgICAgIHRoaXMuaGFzQmVlbk9wZW5lZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzQ2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWVzc2FnZUJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLm5leHRSZXRyeVRpbWUgPSAwO1xuICAgICAgICB0aGlzLnJlY29ubmVjdENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5sYXN0S25vd25FeHRlbnNpb25zID0gXCJcIjtcbiAgICAgICAgdGhpcy5sYXN0S25vd25Qcm90b2NvbCA9IFwiXCI7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgICAgIGlmIChwcm90b2NvbHNPck9wdGlvbnMgPT0gbnVsbCB8fFxuICAgICAgICAgICAgdHlwZW9mIHByb3RvY29sc09yT3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShwcm90b2NvbHNPck9wdGlvbnMpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3RvY29scyA9IHByb3RvY29sc09yT3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBwcm90b2NvbHNPck9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zID0gYXBwbHlEZWZhdWx0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMud3NDb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBXZWJTb2NrZXQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMud3NDb25zdHJ1Y3RvciA9IFdlYlNvY2tldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldlYlNvY2tldCBub3QgcHJlc2VudCBpbiBnbG9iYWwgc2NvcGUgYW5kIG5vIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJ3c0NvbnN0cnVjdG9yIG9wdGlvbiB3YXMgcHJvdmlkZWQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMub3Blbk5ld1dlYlNvY2tldCgpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZSwgXCJiaW5hcnlUeXBlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iaW5hcnlUeXBlSW50ZXJuYWwgfHwgXCJibG9iXCI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGJpbmFyeVR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuYmluYXJ5VHlwZUludGVybmFsID0gYmluYXJ5VHlwZTtcbiAgICAgICAgICAgIGlmICh0aGlzLndzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53cy5iaW5hcnlUeXBlID0gYmluYXJ5VHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUsIFwiYnVmZmVyZWRBbW91bnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdW0gPSB0aGlzLndzID8gdGhpcy53cy5idWZmZXJlZEFtb3VudCA6IDA7XG4gICAgICAgICAgICB2YXIgaGFzVW5rbm93bkFtb3VudCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlQnVmZmVyLmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnl0ZUxlbmd0aCA9IGdldERhdGFCeXRlTGVuZ3RoKGRhdGEpO1xuICAgICAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VtICs9IGJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoYXNVbmtub3duQW1vdW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChoYXNVbmtub3duQW1vdW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z0xvZyhcIlNvbWUgYnVmZmVyZWQgZGF0YSBoYWQgdW5rbm93biBsZW5ndGguIGJ1ZmZlcmVkQW1vdW50KClcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIHJldHVybiB2YWx1ZSBtYXkgYmUgYmVsb3cgdGhlIGNvcnJlY3QgYW1vdW50LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdW07XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLCBcImV4dGVuc2lvbnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndzID8gdGhpcy53cy5leHRlbnNpb25zIDogdGhpcy5sYXN0S25vd25FeHRlbnNpb25zO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZSwgXCJwcm90b2NvbFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud3MgPyB0aGlzLndzLnByb3RvY29sIDogdGhpcy5sYXN0S25vd25Qcm90b2NvbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUsIFwicmVhZHlTdGF0ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNDbG9zZWQgPyBTdHVyZHlXZWJTb2NrZXQuQ0xPU0VEIDogU3R1cmR5V2ViU29ja2V0Lk9QRU47XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoY29kZSwgcmVhc29uKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZVNvY2tldChjb2RlLCByZWFzb24pO1xuICAgICAgICB0aGlzLnNodXRkb3duKCk7XG4gICAgICAgIHRoaXMuZGVidWdMb2coXCJXZWJTb2NrZXQgcGVybWFuZW50bHkgY2xvc2VkIGJ5IGNsaWVudC5cIik7XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5pc0Nsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2ViU29ja2V0IGlzIGFscmVhZHkgaW4gQ0xPU0lORyBvciBDTE9TRUQgc3RhdGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMud3MgJiYgdGhpcy53cy5yZWFkeVN0YXRlID09PSB0aGlzLk9QRU4pIHtcbiAgICAgICAgICAgIHRoaXMud3Muc2VuZChkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZUJ1ZmZlci5wdXNoKGRhdGEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjYWxsIHJlY29ubmVjdCgpIG9uIHNvY2tldCB3aGljaCBpcyBwZXJtYW5lbnRseSBjbG9zZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcG9zZVNvY2tldCgxMDAwLCBcIkNsaWVudCByZXF1ZXN0ZWQgcmVjb25uZWN0LlwiKTtcbiAgICAgICAgdGhpcy5oYW5kbGVDbG9zZSh1bmRlZmluZWQpO1xuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2hFdmVudE9mVHlwZShldmVudC50eXBlLCBldmVudCk7XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXSA9IHRoaXMubGlzdGVuZXJzW3R5cGVdLmZpbHRlcihmdW5jdGlvbiAobCkgeyByZXR1cm4gbCAhPT0gbGlzdGVuZXI7IH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLm9wZW5OZXdXZWJTb2NrZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmlzQ2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gdGhpcy5vcHRpb25zLCBjb25uZWN0VGltZW91dCA9IF9hLmNvbm5lY3RUaW1lb3V0LCB3c0NvbnN0cnVjdG9yID0gX2Eud3NDb25zdHJ1Y3RvcjtcbiAgICAgICAgdGhpcy5kZWJ1Z0xvZyhcIk9wZW5pbmcgbmV3IFdlYlNvY2tldCB0byBcIiArIHRoaXMudXJsICsgXCIuXCIpO1xuICAgICAgICB2YXIgd3MgPSBuZXcgd3NDb25zdHJ1Y3Rvcih0aGlzLnVybCwgdGhpcy5wcm90b2NvbHMpO1xuICAgICAgICB3cy5vbmNsb3NlID0gZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBfdGhpcy5oYW5kbGVDbG9zZShldmVudCk7IH07XG4gICAgICAgIHdzLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIF90aGlzLmhhbmRsZUVycm9yKGV2ZW50KTsgfTtcbiAgICAgICAgd3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBfdGhpcy5oYW5kbGVNZXNzYWdlKGV2ZW50KTsgfTtcbiAgICAgICAgd3Mub25vcGVuID0gZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBfdGhpcy5oYW5kbGVPcGVuKGV2ZW50KTsgfTtcbiAgICAgICAgdGhpcy5jb25uZWN0VGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIHJ1bm5pbmcsIHdlIHN0aWxsIGhhdmVuJ3Qgb3BlbmVkIHRoZSB3ZWJzb2NrZXQuXG4gICAgICAgICAgICAvLyBLaWxsIGl0IHNvIHdlIGNhbiB0cnkgYWdhaW4uXG4gICAgICAgICAgICBfdGhpcy5jbGVhckNvbm5lY3RUaW1lb3V0KCk7XG4gICAgICAgICAgICBfdGhpcy5kaXNwb3NlU29ja2V0KCk7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVDbG9zZSh1bmRlZmluZWQpO1xuICAgICAgICB9LCBjb25uZWN0VGltZW91dCk7XG4gICAgICAgIHRoaXMud3MgPSB3cztcbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuaGFuZGxlT3BlbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMud3MgfHwgdGhpcy5pc0Nsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbGxDbGVhclJlc2V0VGltZSA9IHRoaXMub3B0aW9ucy5hbGxDbGVhclJlc2V0VGltZTtcbiAgICAgICAgdGhpcy5kZWJ1Z0xvZyhcIldlYlNvY2tldCBvcGVuZWQuXCIpO1xuICAgICAgICBpZiAodGhpcy5iaW5hcnlUeXBlSW50ZXJuYWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy53cy5iaW5hcnlUeXBlID0gdGhpcy5iaW5hcnlUeXBlSW50ZXJuYWw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJpbmFyeVR5cGVJbnRlcm5hbCA9IHRoaXMud3MuYmluYXJ5VHlwZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFyQ29ubmVjdFRpbWVvdXQoKTtcbiAgICAgICAgaWYgKHRoaXMuaGFzQmVlbk9wZW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50T2ZUeXBlKFwicmVvcGVuXCIsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudE9mVHlwZShcIm9wZW5cIiwgZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5oYXNCZWVuT3BlbmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1lc3NhZ2VCdWZmZXIuZm9yRWFjaChmdW5jdGlvbiAobWVzc2FnZSkgeyByZXR1cm4gX3RoaXMuc2VuZChtZXNzYWdlKTsgfSk7XG4gICAgICAgIHRoaXMubWVzc2FnZUJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLmFsbENsZWFyVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5jbGVhckFsbENsZWFyVGltZW91dCgpO1xuICAgICAgICAgICAgX3RoaXMubmV4dFJldHJ5VGltZSA9IDA7XG4gICAgICAgICAgICBfdGhpcy5yZWNvbm5lY3RDb3VudCA9IDA7XG4gICAgICAgICAgICB2YXIgb3BlblRpbWUgPSAoYWxsQ2xlYXJSZXNldFRpbWUgLyAxMDAwKSB8IDA7XG4gICAgICAgICAgICBfdGhpcy5kZWJ1Z0xvZyhcIldlYlNvY2tldCByZW1haW5lZCBvcGVuIGZvciBcIiArIG9wZW5UaW1lICsgXCIgc2Vjb25kcy4gUmVzZXR0aW5nXCIgK1xuICAgICAgICAgICAgICAgIFwiIHJldHJ5IHRpbWUgYW5kIGNvdW50LlwiKTtcbiAgICAgICAgfSwgYWxsQ2xlYXJSZXNldFRpbWUpO1xuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5oYW5kbGVNZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50T2ZUeXBlKFwibWVzc2FnZVwiLCBldmVudCk7XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmhhbmRsZUNsb3NlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmlzQ2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gdGhpcy5vcHRpb25zLCBtYXhSZWNvbm5lY3RBdHRlbXB0cyA9IF9hLm1heFJlY29ubmVjdEF0dGVtcHRzLCBzaG91bGRSZWNvbm5lY3QgPSBfYS5zaG91bGRSZWNvbm5lY3Q7XG4gICAgICAgIHRoaXMuY2xlYXJDb25uZWN0VGltZW91dCgpO1xuICAgICAgICB0aGlzLmNsZWFyQWxsQ2xlYXJUaW1lb3V0KCk7XG4gICAgICAgIGlmICh0aGlzLndzKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RLbm93bkV4dGVuc2lvbnMgPSB0aGlzLndzLmV4dGVuc2lvbnM7XG4gICAgICAgICAgICB0aGlzLmxhc3RLbm93blByb3RvY29sID0gdGhpcy53cy5wcm90b2NvbDtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZVNvY2tldCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudE9mVHlwZShcImRvd25cIiwgZXZlbnQpO1xuICAgICAgICBpZiAodGhpcy5yZWNvbm5lY3RDb3VudCA+PSBtYXhSZWNvbm5lY3RBdHRlbXB0cykge1xuICAgICAgICAgICAgdGhpcy5zdG9wUmVjb25uZWN0aW5nKGV2ZW50LCB0aGlzLmdldFRvb01hbnlGYWlsZWRSZWNvbm5lY3RzTWVzc2FnZSgpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2lsbFJlY29ubmVjdCA9ICFldmVudCB8fCBzaG91bGRSZWNvbm5lY3QoZXZlbnQpO1xuICAgICAgICBpZiAodHlwZW9mIHdpbGxSZWNvbm5lY3QgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVdpbGxSZWNvbm5lY3Qod2lsbFJlY29ubmVjdCwgZXZlbnQsIFNIT1VMRF9SRUNPTk5FQ1RfRkFMU0VfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aWxsUmVjb25uZWN0LnRoZW4oZnVuY3Rpb24gKHdpbGxSZWNvbm5lY3RSZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc0Nsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZVdpbGxSZWNvbm5lY3Qod2lsbFJlY29ubmVjdFJlc29sdmVkLCBldmVudCwgU0hPVUxEX1JFQ09OTkVDVF9QUk9NSVNFX0ZBTFNFX01FU1NBR0UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50T2ZUeXBlKFwiZXJyb3JcIiwgZXZlbnQpO1xuICAgICAgICB0aGlzLmRlYnVnTG9nKFwiV2ViU29ja2V0IGVuY291bnRlcmVkIGFuIGVycm9yLlwiKTtcbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuaGFuZGxlV2lsbFJlY29ubmVjdCA9IGZ1bmN0aW9uICh3aWxsUmVjb25uZWN0LCBldmVudCwgZGVuaWFsUmVhc29uKSB7XG4gICAgICAgIGlmICh3aWxsUmVjb25uZWN0KSB7XG4gICAgICAgICAgICB0aGlzLnJlZXN0YWJsaXNoQ29ubmVjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdG9wUmVjb25uZWN0aW5nKGV2ZW50LCBkZW5pYWxSZWFzb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLnJlZXN0YWJsaXNoQ29ubmVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcy5vcHRpb25zLCBtaW5SZWNvbm5lY3REZWxheSA9IF9hLm1pblJlY29ubmVjdERlbGF5LCBtYXhSZWNvbm5lY3REZWxheSA9IF9hLm1heFJlY29ubmVjdERlbGF5LCByZWNvbm5lY3RCYWNrb2ZmRmFjdG9yID0gX2EucmVjb25uZWN0QmFja29mZkZhY3RvcjtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3RDb3VudCsrO1xuICAgICAgICB2YXIgcmV0cnlUaW1lID0gdGhpcy5uZXh0UmV0cnlUaW1lO1xuICAgICAgICB0aGlzLm5leHRSZXRyeVRpbWUgPSBNYXRoLm1heChtaW5SZWNvbm5lY3REZWxheSwgTWF0aC5taW4odGhpcy5uZXh0UmV0cnlUaW1lICogcmVjb25uZWN0QmFja29mZkZhY3RvciwgbWF4UmVjb25uZWN0RGVsYXkpKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5vcGVuTmV3V2ViU29ja2V0KCk7IH0sIHJldHJ5VGltZSk7XG4gICAgICAgIHZhciByZXRyeVRpbWVTZWNvbmRzID0gKHJldHJ5VGltZSAvIDEwMDApIHwgMDtcbiAgICAgICAgdGhpcy5kZWJ1Z0xvZyhcIldlYlNvY2tldCB3YXMgY2xvc2VkLiBSZS1vcGVuaW5nIGluIFwiICsgcmV0cnlUaW1lU2Vjb25kcyArIFwiIHNlY29uZHMuXCIpO1xuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5zdG9wUmVjb25uZWN0aW5nID0gZnVuY3Rpb24gKGV2ZW50LCBkZWJ1Z1JlYXNvbikge1xuICAgICAgICB0aGlzLmRlYnVnTG9nKGRlYnVnUmVhc29uKTtcbiAgICAgICAgdGhpcy5zaHV0ZG93bigpO1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudE9mVHlwZShcImNsb3NlXCIsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5zaHV0ZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc0Nsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xlYXJBbGxUaW1lb3V0cygpO1xuICAgICAgICB0aGlzLm1lc3NhZ2VCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5kaXNwb3NlU29ja2V0KCk7XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmRpc3Bvc2VTb2NrZXQgPSBmdW5jdGlvbiAoY2xvc2VDb2RlLCByZWFzb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLndzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXNlIG5vb3AgaGFuZGxlcnMgaW5zdGVhZCBvZiBudWxsIGJlY2F1c2Ugc29tZSBXZWJTb2NrZXRcbiAgICAgICAgLy8gaW1wbGVtZW50YXRpb25zLCBzdWNoIGFzIHRoZSBvbmUgZnJvbSBpc29tb3JwaGljLXdzLCByYWlzZSBhIHN0aW5rIG9uXG4gICAgICAgIC8vIHVuaGFuZGxlZCBldmVudHMuXG4gICAgICAgIHRoaXMud3Mub25lcnJvciA9IG5vb3A7XG4gICAgICAgIHRoaXMud3Mub25jbG9zZSA9IG5vb3A7XG4gICAgICAgIHRoaXMud3Mub25tZXNzYWdlID0gbm9vcDtcbiAgICAgICAgdGhpcy53cy5vbm9wZW4gPSBub29wO1xuICAgICAgICB0aGlzLndzLmNsb3NlKGNsb3NlQ29kZSwgcmVhc29uKTtcbiAgICAgICAgdGhpcy53cyA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuY2xlYXJBbGxUaW1lb3V0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jbGVhckNvbm5lY3RUaW1lb3V0KCk7XG4gICAgICAgIHRoaXMuY2xlYXJBbGxDbGVhclRpbWVvdXQoKTtcbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuY2xlYXJDb25uZWN0VGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdFRpbWVvdXRJZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5jb25uZWN0VGltZW91dElkKTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdFRpbWVvdXRJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5jbGVhckFsbENsZWFyVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWxsQ2xlYXJUaW1lb3V0SWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYWxsQ2xlYXJUaW1lb3V0SWQpO1xuICAgICAgICAgICAgdGhpcy5hbGxDbGVhclRpbWVvdXRJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50T2ZUeXBlID0gZnVuY3Rpb24gKHR5cGUsIGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImNsb3NlXCI6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25jbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uY2xvc2UoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmVycm9yKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9ubWVzc2FnZShldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm9wZW5cIjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbm9wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbm9wZW4oZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkb3duXCI6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25kb3duKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25kb3duKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicmVvcGVuXCI6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25yZW9wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbnJlb3BlbihldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlIGluIHRoaXMubGlzdGVuZXJzKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXVxuICAgICAgICAgICAgICAgIC5zbGljZSgpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7IHJldHVybiBfdGhpcy5jYWxsTGlzdGVuZXIobGlzdGVuZXIsIGV2ZW50KTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFldmVudCB8fCAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuY2FsbExpc3RlbmVyID0gZnVuY3Rpb24gKGxpc3RlbmVyLCBldmVudCkge1xuICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXIuaGFuZGxlRXZlbnQuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuZGVidWdMb2cgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuZ2V0VG9vTWFueUZhaWxlZFJlY29ubmVjdHNNZXNzYWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWF4UmVjb25uZWN0QXR0ZW1wdHMgPSB0aGlzLm9wdGlvbnMubWF4UmVjb25uZWN0QXR0ZW1wdHM7XG4gICAgICAgIHJldHVybiBcIkZhaWxlZCB0byByZWNvbm5lY3QgYWZ0ZXIgXCIgKyBtYXhSZWNvbm5lY3RBdHRlbXB0cyArIFwiIFwiICsgcGx1cmFsaXplKFwiYXR0ZW1wdFwiLCBtYXhSZWNvbm5lY3RBdHRlbXB0cykgKyBcIi4gQ2xvc2luZyBwZXJtYW5lbnRseS5cIjtcbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5ERUZBVUxUX09QVElPTlMgPSB7XG4gICAgICAgIGFsbENsZWFyUmVzZXRUaW1lOiA1MDAwLFxuICAgICAgICBjb25uZWN0VGltZW91dDogNTAwMCxcbiAgICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICBtaW5SZWNvbm5lY3REZWxheTogMTAwMCxcbiAgICAgICAgbWF4UmVjb25uZWN0RGVsYXk6IDMwMDAwLFxuICAgICAgICBtYXhSZWNvbm5lY3RBdHRlbXB0czogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICByZWNvbm5lY3RCYWNrb2ZmRmFjdG9yOiAxLjUsXG4gICAgICAgIHNob3VsZFJlY29ubmVjdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgd3NDb25zdHJ1Y3RvcjogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LkNPTk5FQ1RJTkcgPSAwO1xuICAgIFN0dXJkeVdlYlNvY2tldC5PUEVOID0gMTtcbiAgICBTdHVyZHlXZWJTb2NrZXQuQ0xPU0lORyA9IDI7XG4gICAgU3R1cmR5V2ViU29ja2V0LkNMT1NFRCA9IDM7XG4gICAgcmV0dXJuIFN0dXJkeVdlYlNvY2tldDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTdHVyZHlXZWJTb2NrZXQ7XG5mdW5jdGlvbiBhcHBseURlZmF1bHRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgT2JqZWN0LmtleXMoU3R1cmR5V2ViU29ja2V0LkRFRkFVTFRfT1BUSU9OUykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgcmVzdWx0W2tleV0gPVxuICAgICAgICAgICAgdmFsdWUgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gU3R1cmR5V2ViU29ja2V0LkRFRkFVTFRfT1BUSU9OU1trZXldXG4gICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0RGF0YUJ5dGVMZW5ndGgoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAvLyBVVEYtMTYgc3RyaW5ncyB1c2UgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIuXG4gICAgICAgIHJldHVybiAyICogZGF0YS5sZW5ndGg7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gZGF0YS5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICByZXR1cm4gZGF0YS5zaXplO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5mdW5jdGlvbiBwbHVyYWxpemUocywgbikge1xuICAgIHJldHVybiBuID09PSAxID8gcyA6IHMgKyBcInNcIjtcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgLy8gTm90aGluZy5cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNIT1VMRF9SRUNPTk5FQ1RfRkFMU0VfTUVTU0FHRSIsIlNIT1VMRF9SRUNPTk5FQ1RfUFJPTUlTRV9GQUxTRV9NRVNTQUdFIiwiU3R1cmR5V2ViU29ja2V0IiwidXJsIiwicHJvdG9jb2xzT3JPcHRpb25zIiwib3B0aW9ucyIsIm9uY2xvc2UiLCJvbmVycm9yIiwib25tZXNzYWdlIiwib25vcGVuIiwib25kb3duIiwib25yZW9wZW4iLCJDT05ORUNUSU5HIiwiT1BFTiIsIkNMT1NJTkciLCJDTE9TRUQiLCJoYXNCZWVuT3BlbmVkIiwiaXNDbG9zZWQiLCJtZXNzYWdlQnVmZmVyIiwibmV4dFJldHJ5VGltZSIsInJlY29ubmVjdENvdW50IiwibGFzdEtub3duRXh0ZW5zaW9ucyIsImxhc3RLbm93blByb3RvY29sIiwibGlzdGVuZXJzIiwiQXJyYXkiLCJpc0FycmF5IiwicHJvdG9jb2xzIiwiYXBwbHlEZWZhdWx0T3B0aW9ucyIsIndzQ29uc3RydWN0b3IiLCJXZWJTb2NrZXQiLCJFcnJvciIsIm9wZW5OZXdXZWJTb2NrZXQiLCJwcm90b3R5cGUiLCJnZXQiLCJiaW5hcnlUeXBlSW50ZXJuYWwiLCJzZXQiLCJiaW5hcnlUeXBlIiwid3MiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwic3VtIiwiYnVmZmVyZWRBbW91bnQiLCJoYXNVbmtub3duQW1vdW50IiwiZm9yRWFjaCIsImRhdGEiLCJieXRlTGVuZ3RoIiwiZ2V0RGF0YUJ5dGVMZW5ndGgiLCJkZWJ1Z0xvZyIsImV4dGVuc2lvbnMiLCJwcm90b2NvbCIsImNsb3NlIiwiY29kZSIsInJlYXNvbiIsImRpc3Bvc2VTb2NrZXQiLCJzaHV0ZG93biIsInNlbmQiLCJyZWFkeVN0YXRlIiwicHVzaCIsInJlY29ubmVjdCIsImhhbmRsZUNsb3NlIiwidW5kZWZpbmVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInR5cGUiLCJsaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJldmVudCIsImRpc3BhdGNoRXZlbnRPZlR5cGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZmlsdGVyIiwibCIsIl90aGlzIiwiX2EiLCJjb25uZWN0VGltZW91dCIsImhhbmRsZUVycm9yIiwiaGFuZGxlTWVzc2FnZSIsImhhbmRsZU9wZW4iLCJjb25uZWN0VGltZW91dElkIiwic2V0VGltZW91dCIsImNsZWFyQ29ubmVjdFRpbWVvdXQiLCJhbGxDbGVhclJlc2V0VGltZSIsIm1lc3NhZ2UiLCJhbGxDbGVhclRpbWVvdXRJZCIsImNsZWFyQWxsQ2xlYXJUaW1lb3V0Iiwib3BlblRpbWUiLCJtYXhSZWNvbm5lY3RBdHRlbXB0cyIsInNob3VsZFJlY29ubmVjdCIsInN0b3BSZWNvbm5lY3RpbmciLCJnZXRUb29NYW55RmFpbGVkUmVjb25uZWN0c01lc3NhZ2UiLCJ3aWxsUmVjb25uZWN0IiwiaGFuZGxlV2lsbFJlY29ubmVjdCIsInRoZW4iLCJ3aWxsUmVjb25uZWN0UmVzb2x2ZWQiLCJkZW5pYWxSZWFzb24iLCJyZWVzdGFibGlzaENvbm5lY3Rpb24iLCJtaW5SZWNvbm5lY3REZWxheSIsIm1heFJlY29ubmVjdERlbGF5IiwicmVjb25uZWN0QmFja29mZkZhY3RvciIsInJldHJ5VGltZSIsIk1hdGgiLCJtYXgiLCJtaW4iLCJyZXRyeVRpbWVTZWNvbmRzIiwiZGVidWdSZWFzb24iLCJjbGVhckFsbFRpbWVvdXRzIiwiY2xvc2VDb2RlIiwibm9vcCIsImNsZWFyVGltZW91dCIsInNsaWNlIiwiY2FsbExpc3RlbmVyIiwiZGVmYXVsdFByZXZlbnRlZCIsImNhbGwiLCJoYW5kbGVFdmVudCIsImRlYnVnIiwiY29uc29sZSIsImxvZyIsInBsdXJhbGl6ZSIsIkRFRkFVTFRfT1BUSU9OUyIsIk51bWJlciIsIlBPU0lUSVZFX0lORklOSVRZIiwiZGVmYXVsdCIsInJlc3VsdCIsImtleXMiLCJrZXkiLCJsZW5ndGgiLCJBcnJheUJ1ZmZlciIsIkJsb2IiLCJzaXplIiwicyIsIm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sturdy-websocket/dist/index.js\n");

/***/ })

};
;