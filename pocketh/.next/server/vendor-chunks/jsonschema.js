"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsonschema";
exports.ids = ["vendor-chunks/jsonschema"];
exports.modules = {

/***/ "(ssr)/./node_modules/jsonschema/lib/attribute.js":
/*!**************************************************!*\
  !*** ./node_modules/jsonschema/lib/attribute.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar helpers = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/jsonschema/lib/helpers.js\");\n/** @type ValidatorResult */ var ValidatorResult = helpers.ValidatorResult;\n/** @type SchemaError */ var SchemaError = helpers.SchemaError;\nvar attribute = {};\nattribute.ignoreProperties = {\n    // informative properties\n    \"id\": true,\n    \"default\": true,\n    \"description\": true,\n    \"title\": true,\n    // arguments to other properties\n    \"additionalItems\": true,\n    \"then\": true,\n    \"else\": true,\n    // special-handled properties\n    \"$schema\": true,\n    \"$ref\": true,\n    \"extends\": true\n};\n/**\n * @name validators\n */ var validators = attribute.validators = {};\n/**\n * Validates whether the instance if of a certain type\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */ validators.type = function validateType(instance, schema, options, ctx) {\n    // Ignore undefined instances\n    if (instance === undefined) {\n        return null;\n    }\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var types = Array.isArray(schema.type) ? schema.type : [\n        schema.type\n    ];\n    if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {\n        var list = types.map(function(v) {\n            if (!v) return;\n            var id = v.$id || v.id;\n            return id ? \"<\" + id + \">\" : v + \"\";\n        });\n        result.addError({\n            name: \"type\",\n            argument: list,\n            message: \"is not of a type(s) \" + list\n        });\n    }\n    return result;\n};\nfunction testSchemaNoThrow(instance, options, ctx, callback, schema) {\n    var throwError = options.throwError;\n    var throwAll = options.throwAll;\n    options.throwError = false;\n    options.throwAll = false;\n    var res = this.validateSchema(instance, schema, options, ctx);\n    options.throwError = throwError;\n    options.throwAll = throwAll;\n    if (!res.valid && callback instanceof Function) {\n        callback(res);\n    }\n    return res.valid;\n}\n/**\n * Validates whether the instance matches some of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */ validators.anyOf = function validateAnyOf(instance, schema, options, ctx) {\n    // Ignore undefined instances\n    if (instance === undefined) {\n        return null;\n    }\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var inner = new ValidatorResult(instance, schema, options, ctx);\n    if (!Array.isArray(schema.anyOf)) {\n        throw new SchemaError(\"anyOf must be an array\");\n    }\n    if (!schema.anyOf.some(testSchemaNoThrow.bind(this, instance, options, ctx, function(res) {\n        inner.importErrors(res);\n    }))) {\n        var list = schema.anyOf.map(function(v, i) {\n            var id = v.$id || v.id;\n            if (id) return \"<\" + id + \">\";\n            return v.title && JSON.stringify(v.title) || v[\"$ref\"] && \"<\" + v[\"$ref\"] + \">\" || \"[subschema \" + i + \"]\";\n        });\n        if (options.nestedErrors) {\n            result.importErrors(inner);\n        }\n        result.addError({\n            name: \"anyOf\",\n            argument: list,\n            message: \"is not any of \" + list.join(\",\")\n        });\n    }\n    return result;\n};\n/**\n * Validates whether the instance matches every given schema\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */ validators.allOf = function validateAllOf(instance, schema, options, ctx) {\n    // Ignore undefined instances\n    if (instance === undefined) {\n        return null;\n    }\n    if (!Array.isArray(schema.allOf)) {\n        throw new SchemaError(\"allOf must be an array\");\n    }\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var self = this;\n    schema.allOf.forEach(function(v, i) {\n        var valid = self.validateSchema(instance, v, options, ctx);\n        if (!valid.valid) {\n            var id = v.$id || v.id;\n            var msg = id || v.title && JSON.stringify(v.title) || v[\"$ref\"] && \"<\" + v[\"$ref\"] + \">\" || \"[subschema \" + i + \"]\";\n            result.addError({\n                name: \"allOf\",\n                argument: {\n                    id: msg,\n                    length: valid.errors.length,\n                    valid: valid\n                },\n                message: \"does not match allOf schema \" + msg + \" with \" + valid.errors.length + \" error[s]:\"\n            });\n            result.importErrors(valid);\n        }\n    });\n    return result;\n};\n/**\n * Validates whether the instance matches exactly one of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */ validators.oneOf = function validateOneOf(instance, schema, options, ctx) {\n    // Ignore undefined instances\n    if (instance === undefined) {\n        return null;\n    }\n    if (!Array.isArray(schema.oneOf)) {\n        throw new SchemaError(\"oneOf must be an array\");\n    }\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var inner = new ValidatorResult(instance, schema, options, ctx);\n    var count = schema.oneOf.filter(testSchemaNoThrow.bind(this, instance, options, ctx, function(res) {\n        inner.importErrors(res);\n    })).length;\n    var list = schema.oneOf.map(function(v, i) {\n        var id = v.$id || v.id;\n        return id || v.title && JSON.stringify(v.title) || v[\"$ref\"] && \"<\" + v[\"$ref\"] + \">\" || \"[subschema \" + i + \"]\";\n    });\n    if (count !== 1) {\n        if (options.nestedErrors) {\n            result.importErrors(inner);\n        }\n        result.addError({\n            name: \"oneOf\",\n            argument: list,\n            message: \"is not exactly one from \" + list.join(\",\")\n        });\n    }\n    return result;\n};\n/**\n * Validates \"then\" or \"else\" depending on the result of validating \"if\"\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */ validators.if = function validateIf(instance, schema, options, ctx) {\n    // Ignore undefined instances\n    if (instance === undefined) return null;\n    if (!helpers.isSchema(schema.if)) throw new Error('Expected \"if\" keyword to be a schema');\n    var ifValid = testSchemaNoThrow.call(this, instance, options, ctx, null, schema.if);\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var res;\n    if (ifValid) {\n        if (schema.then === undefined) return;\n        if (!helpers.isSchema(schema.then)) throw new Error('Expected \"then\" keyword to be a schema');\n        res = this.validateSchema(instance, schema.then, options, ctx.makeChild(schema.then));\n        result.importErrors(res);\n    } else {\n        if (schema.else === undefined) return;\n        if (!helpers.isSchema(schema.else)) throw new Error('Expected \"else\" keyword to be a schema');\n        res = this.validateSchema(instance, schema.else, options, ctx.makeChild(schema.else));\n        result.importErrors(res);\n    }\n    return result;\n};\nfunction getEnumerableProperty(object, key) {\n    // Determine if `key` shows up in `for(var key in object)`\n    // First test Object.hasOwnProperty.call as an optimization: that guarantees it does\n    if (Object.hasOwnProperty.call(object, key)) return object[key];\n    // Test `key in object` as an optimization; false means it won't\n    if (!(key in object)) return;\n    while(object = Object.getPrototypeOf(object)){\n        if (Object.propertyIsEnumerable.call(object, key)) return object[key];\n    }\n}\n/**\n * Validates propertyNames\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */ validators.propertyNames = function validatePropertyNames(instance, schema, options, ctx) {\n    if (!this.types.object(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var subschema = schema.propertyNames !== undefined ? schema.propertyNames : {};\n    if (!helpers.isSchema(subschema)) throw new SchemaError('Expected \"propertyNames\" to be a schema (object or boolean)');\n    for(var property in instance){\n        if (getEnumerableProperty(instance, property) !== undefined) {\n            var res = this.validateSchema(property, subschema, options, ctx.makeChild(subschema));\n            result.importErrors(res);\n        }\n    }\n    return result;\n};\n/**\n * Validates properties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */ validators.properties = function validateProperties(instance, schema, options, ctx) {\n    if (!this.types.object(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var properties = schema.properties || {};\n    for(var property in properties){\n        var subschema = properties[property];\n        if (subschema === undefined) {\n            continue;\n        } else if (subschema === null) {\n            throw new SchemaError('Unexpected null, expected schema in \"properties\"');\n        }\n        if (typeof options.preValidateProperty == \"function\") {\n            options.preValidateProperty(instance, property, subschema, options, ctx);\n        }\n        var prop = getEnumerableProperty(instance, property);\n        var res = this.validateSchema(prop, subschema, options, ctx.makeChild(subschema, property));\n        if (res.instance !== result.instance[property]) result.instance[property] = res.instance;\n        result.importErrors(res);\n    }\n    return result;\n};\n/**\n * Test a specific property within in instance against the additionalProperties schema attribute\n * This ignores properties with definitions in the properties schema attribute, but no other attributes.\n * If too many more types of property-existence tests pop up they may need their own class of tests (like `type` has)\n * @private\n * @return {boolean}\n */ function testAdditionalProperty(instance, schema, options, ctx, property, result) {\n    if (!this.types.object(instance)) return;\n    if (schema.properties && schema.properties[property] !== undefined) {\n        return;\n    }\n    if (schema.additionalProperties === false) {\n        result.addError({\n            name: \"additionalProperties\",\n            argument: property,\n            message: \"is not allowed to have the additional property \" + JSON.stringify(property)\n        });\n    } else {\n        var additionalProperties = schema.additionalProperties || {};\n        if (typeof options.preValidateProperty == \"function\") {\n            options.preValidateProperty(instance, property, additionalProperties, options, ctx);\n        }\n        var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));\n        if (res.instance !== result.instance[property]) result.instance[property] = res.instance;\n        result.importErrors(res);\n    }\n}\n/**\n * Validates patternProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */ validators.patternProperties = function validatePatternProperties(instance, schema, options, ctx) {\n    if (!this.types.object(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var patternProperties = schema.patternProperties || {};\n    for(var property in instance){\n        var test = true;\n        for(var pattern in patternProperties){\n            var subschema = patternProperties[pattern];\n            if (subschema === undefined) {\n                continue;\n            } else if (subschema === null) {\n                throw new SchemaError('Unexpected null, expected schema in \"patternProperties\"');\n            }\n            try {\n                var regexp = new RegExp(pattern, \"u\");\n            } catch (_e) {\n                // In the event the stricter handling causes an error, fall back on the forgiving handling\n                // DEPRECATED\n                regexp = new RegExp(pattern);\n            }\n            if (!regexp.test(property)) {\n                continue;\n            }\n            test = false;\n            if (typeof options.preValidateProperty == \"function\") {\n                options.preValidateProperty(instance, property, subschema, options, ctx);\n            }\n            var res = this.validateSchema(instance[property], subschema, options, ctx.makeChild(subschema, property));\n            if (res.instance !== result.instance[property]) result.instance[property] = res.instance;\n            result.importErrors(res);\n        }\n        if (test) {\n            testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n        }\n    }\n    return result;\n};\n/**\n * Validates additionalProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */ validators.additionalProperties = function validateAdditionalProperties(instance, schema, options, ctx) {\n    if (!this.types.object(instance)) return;\n    // if patternProperties is defined then we'll test when that one is called instead\n    if (schema.patternProperties) {\n        return null;\n    }\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    for(var property in instance){\n        testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n    }\n    return result;\n};\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.minProperties = function validateMinProperties(instance, schema, options, ctx) {\n    if (!this.types.object(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var keys = Object.keys(instance);\n    if (!(keys.length >= schema.minProperties)) {\n        result.addError({\n            name: \"minProperties\",\n            argument: schema.minProperties,\n            message: \"does not meet minimum property length of \" + schema.minProperties\n        });\n    }\n    return result;\n};\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.maxProperties = function validateMaxProperties(instance, schema, options, ctx) {\n    if (!this.types.object(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var keys = Object.keys(instance);\n    if (!(keys.length <= schema.maxProperties)) {\n        result.addError({\n            name: \"maxProperties\",\n            argument: schema.maxProperties,\n            message: \"does not meet maximum property length of \" + schema.maxProperties\n        });\n    }\n    return result;\n};\n/**\n * Validates items when instance is an array\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */ validators.items = function validateItems(instance, schema, options, ctx) {\n    var self = this;\n    if (!this.types.array(instance)) return;\n    if (schema.items === undefined) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    instance.every(function(value, i) {\n        if (Array.isArray(schema.items)) {\n            var items = schema.items[i] === undefined ? schema.additionalItems : schema.items[i];\n        } else {\n            var items = schema.items;\n        }\n        if (items === undefined) {\n            return true;\n        }\n        if (items === false) {\n            result.addError({\n                name: \"items\",\n                message: \"additionalItems not permitted\"\n            });\n            return false;\n        }\n        var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));\n        if (res.instance !== result.instance[i]) result.instance[i] = res.instance;\n        result.importErrors(res);\n        return true;\n    });\n    return result;\n};\n/**\n * Validates the \"contains\" keyword\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */ validators.contains = function validateContains(instance, schema, options, ctx) {\n    var self = this;\n    if (!this.types.array(instance)) return;\n    if (schema.contains === undefined) return;\n    if (!helpers.isSchema(schema.contains)) throw new Error('Expected \"contains\" keyword to be a schema');\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var count = instance.some(function(value, i) {\n        var res = self.validateSchema(value, schema.contains, options, ctx.makeChild(schema.contains, i));\n        return res.errors.length === 0;\n    });\n    if (count === false) {\n        result.addError({\n            name: \"contains\",\n            argument: schema.contains,\n            message: \"must contain an item matching given schema\"\n        });\n    }\n    return result;\n};\n/**\n * Validates minimum and exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.minimum = function validateMinimum(instance, schema, options, ctx) {\n    if (!this.types.number(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {\n        if (!(instance > schema.minimum)) {\n            result.addError({\n                name: \"minimum\",\n                argument: schema.minimum,\n                message: \"must be greater than \" + schema.minimum\n            });\n        }\n    } else {\n        if (!(instance >= schema.minimum)) {\n            result.addError({\n                name: \"minimum\",\n                argument: schema.minimum,\n                message: \"must be greater than or equal to \" + schema.minimum\n            });\n        }\n    }\n    return result;\n};\n/**\n * Validates maximum and exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.maximum = function validateMaximum(instance, schema, options, ctx) {\n    if (!this.types.number(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {\n        if (!(instance < schema.maximum)) {\n            result.addError({\n                name: \"maximum\",\n                argument: schema.maximum,\n                message: \"must be less than \" + schema.maximum\n            });\n        }\n    } else {\n        if (!(instance <= schema.maximum)) {\n            result.addError({\n                name: \"maximum\",\n                argument: schema.maximum,\n                message: \"must be less than or equal to \" + schema.maximum\n            });\n        }\n    }\n    return result;\n};\n/**\n * Validates the number form of exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.exclusiveMinimum = function validateExclusiveMinimum(instance, schema, options, ctx) {\n    // Support the boolean form of exclusiveMinimum, which is handled by the \"minimum\" keyword.\n    if (typeof schema.exclusiveMinimum === \"boolean\") return;\n    if (!this.types.number(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var valid = instance > schema.exclusiveMinimum;\n    if (!valid) {\n        result.addError({\n            name: \"exclusiveMinimum\",\n            argument: schema.exclusiveMinimum,\n            message: \"must be strictly greater than \" + schema.exclusiveMinimum\n        });\n    }\n    return result;\n};\n/**\n * Validates the number form of exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.exclusiveMaximum = function validateExclusiveMaximum(instance, schema, options, ctx) {\n    // Support the boolean form of exclusiveMaximum, which is handled by the \"maximum\" keyword.\n    if (typeof schema.exclusiveMaximum === \"boolean\") return;\n    if (!this.types.number(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var valid = instance < schema.exclusiveMaximum;\n    if (!valid) {\n        result.addError({\n            name: \"exclusiveMaximum\",\n            argument: schema.exclusiveMaximum,\n            message: \"must be strictly less than \" + schema.exclusiveMaximum\n        });\n    }\n    return result;\n};\n/**\n * Perform validation for multipleOf and divisibleBy, which are essentially the same.\n * @param instance\n * @param schema\n * @param validationType\n * @param errorMessage\n * @returns {String|null}\n */ var validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy(instance, schema, options, ctx, validationType, errorMessage) {\n    if (!this.types.number(instance)) return;\n    var validationArgument = schema[validationType];\n    if (validationArgument == 0) {\n        throw new SchemaError(validationType + \" cannot be zero\");\n    }\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var instanceDecimals = helpers.getDecimalPlaces(instance);\n    var divisorDecimals = helpers.getDecimalPlaces(validationArgument);\n    var maxDecimals = Math.max(instanceDecimals, divisorDecimals);\n    var multiplier = Math.pow(10, maxDecimals);\n    if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {\n        result.addError({\n            name: validationType,\n            argument: validationArgument,\n            message: errorMessage + JSON.stringify(validationArgument)\n        });\n    }\n    return result;\n};\n/**\n * Validates divisibleBy when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.multipleOf = function validateMultipleOf(instance, schema, options, ctx) {\n    return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"multipleOf\", \"is not a multiple of (divisible by) \");\n};\n/**\n * Validates multipleOf when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.divisibleBy = function validateDivisibleBy(instance, schema, options, ctx) {\n    return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"divisibleBy\", \"is not divisible by (multiple of) \");\n};\n/**\n * Validates whether the instance value is present.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.required = function validateRequired(instance, schema, options, ctx) {\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    if (instance === undefined && schema.required === true) {\n        // A boolean form is implemented for reverse-compatibility with schemas written against older drafts\n        result.addError({\n            name: \"required\",\n            message: \"is required\"\n        });\n    } else if (this.types.object(instance) && Array.isArray(schema.required)) {\n        schema.required.forEach(function(n) {\n            if (getEnumerableProperty(instance, n) === undefined) {\n                result.addError({\n                    name: \"required\",\n                    argument: n,\n                    message: \"requires property \" + JSON.stringify(n)\n                });\n            }\n        });\n    }\n    return result;\n};\n/**\n * Validates whether the instance value matches the regular expression, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.pattern = function validatePattern(instance, schema, options, ctx) {\n    if (!this.types.string(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var pattern = schema.pattern;\n    try {\n        var regexp = new RegExp(pattern, \"u\");\n    } catch (_e) {\n        // In the event the stricter handling causes an error, fall back on the forgiving handling\n        // DEPRECATED\n        regexp = new RegExp(pattern);\n    }\n    if (!instance.match(regexp)) {\n        result.addError({\n            name: \"pattern\",\n            argument: schema.pattern,\n            message: \"does not match pattern \" + JSON.stringify(schema.pattern.toString())\n        });\n    }\n    return result;\n};\n/**\n * Validates whether the instance value is of a certain defined format or a custom\n * format.\n * The following formats are supported for string types:\n *   - date-time\n *   - date\n *   - time\n *   - ip-address\n *   - ipv6\n *   - uri\n *   - color\n *   - host-name\n *   - alpha\n *   - alpha-numeric\n *   - utc-millisec\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {String|null}\n */ validators.format = function validateFormat(instance, schema, options, ctx) {\n    if (instance === undefined) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {\n        result.addError({\n            name: \"format\",\n            argument: schema.format,\n            message: \"does not conform to the \" + JSON.stringify(schema.format) + \" format\"\n        });\n    }\n    return result;\n};\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.minLength = function validateMinLength(instance, schema, options, ctx) {\n    if (!this.types.string(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n    var length = instance.length - (hsp ? hsp.length : 0);\n    if (!(length >= schema.minLength)) {\n        result.addError({\n            name: \"minLength\",\n            argument: schema.minLength,\n            message: \"does not meet minimum length of \" + schema.minLength\n        });\n    }\n    return result;\n};\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.maxLength = function validateMaxLength(instance, schema, options, ctx) {\n    if (!this.types.string(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    // TODO if this was already computed in \"minLength\", use that value instead of re-computing\n    var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n    var length = instance.length - (hsp ? hsp.length : 0);\n    if (!(length <= schema.maxLength)) {\n        result.addError({\n            name: \"maxLength\",\n            argument: schema.maxLength,\n            message: \"does not meet maximum length of \" + schema.maxLength\n        });\n    }\n    return result;\n};\n/**\n * Validates whether instance contains at least a minimum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.minItems = function validateMinItems(instance, schema, options, ctx) {\n    if (!this.types.array(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    if (!(instance.length >= schema.minItems)) {\n        result.addError({\n            name: \"minItems\",\n            argument: schema.minItems,\n            message: \"does not meet minimum length of \" + schema.minItems\n        });\n    }\n    return result;\n};\n/**\n * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */ validators.maxItems = function validateMaxItems(instance, schema, options, ctx) {\n    if (!this.types.array(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    if (!(instance.length <= schema.maxItems)) {\n        result.addError({\n            name: \"maxItems\",\n            argument: schema.maxItems,\n            message: \"does not meet maximum length of \" + schema.maxItems\n        });\n    }\n    return result;\n};\n/**\n * Deep compares arrays for duplicates\n * @param v\n * @param i\n * @param a\n * @private\n * @return {boolean}\n */ function testArrays(v, i, a) {\n    var j, len = a.length;\n    for(j = i + 1, len; j < len; j++){\n        if (helpers.deepCompareStrict(v, a[j])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Validates whether there are no duplicates, when the instance is an Array.\n * @param instance\n * @return {String|null}\n */ validators.uniqueItems = function validateUniqueItems(instance, schema, options, ctx) {\n    if (schema.uniqueItems !== true) return;\n    if (!this.types.array(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    if (!instance.every(testArrays)) {\n        result.addError({\n            name: \"uniqueItems\",\n            message: \"contains duplicate item\"\n        });\n    }\n    return result;\n};\n/**\n * Validate for the presence of dependency properties, if the instance is an object.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */ validators.dependencies = function validateDependencies(instance, schema, options, ctx) {\n    if (!this.types.object(instance)) return;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    for(var property in schema.dependencies){\n        if (instance[property] === undefined) {\n            continue;\n        }\n        var dep = schema.dependencies[property];\n        var childContext = ctx.makeChild(dep, property);\n        if (typeof dep == \"string\") {\n            dep = [\n                dep\n            ];\n        }\n        if (Array.isArray(dep)) {\n            dep.forEach(function(prop) {\n                if (instance[prop] === undefined) {\n                    result.addError({\n                        // FIXME there's two different \"dependencies\" errors here with slightly different outputs\n                        // Can we make these the same? Or should we create different error types?\n                        name: \"dependencies\",\n                        argument: childContext.propertyPath,\n                        message: \"property \" + prop + \" not found, required by \" + childContext.propertyPath\n                    });\n                }\n            });\n        } else {\n            var res = this.validateSchema(instance, dep, options, childContext);\n            if (result.instance !== res.instance) result.instance = res.instance;\n            if (res && res.errors.length) {\n                result.addError({\n                    name: \"dependencies\",\n                    argument: childContext.propertyPath,\n                    message: \"does not meet dependency required by \" + childContext.propertyPath\n                });\n                result.importErrors(res);\n            }\n        }\n    }\n    return result;\n};\n/**\n * Validates whether the instance value is one of the enumerated values.\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */ validators[\"enum\"] = function validateEnum(instance, schema, options, ctx) {\n    if (instance === undefined) {\n        return null;\n    }\n    if (!Array.isArray(schema[\"enum\"])) {\n        throw new SchemaError(\"enum expects an array\", schema);\n    }\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    if (!schema[\"enum\"].some(helpers.deepCompareStrict.bind(null, instance))) {\n        result.addError({\n            name: \"enum\",\n            argument: schema[\"enum\"],\n            message: \"is not one of enum values: \" + schema[\"enum\"].map(String).join(\",\")\n        });\n    }\n    return result;\n};\n/**\n * Validates whether the instance exactly matches a given value\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */ validators[\"const\"] = function validateEnum(instance, schema, options, ctx) {\n    if (instance === undefined) {\n        return null;\n    }\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    if (!helpers.deepCompareStrict(schema[\"const\"], instance)) {\n        result.addError({\n            name: \"const\",\n            argument: schema[\"const\"],\n            message: \"does not exactly match expected constant: \" + schema[\"const\"]\n        });\n    }\n    return result;\n};\n/**\n * Validates whether the instance if of a prohibited type.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */ validators.not = validators.disallow = function validateNot(instance, schema, options, ctx) {\n    var self = this;\n    if (instance === undefined) return null;\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    var notTypes = schema.not || schema.disallow;\n    if (!notTypes) return null;\n    if (!Array.isArray(notTypes)) notTypes = [\n        notTypes\n    ];\n    notTypes.forEach(function(type) {\n        if (self.testType(instance, schema, options, ctx, type)) {\n            var id = type && (type.$id || type.id);\n            var schemaId = id || type;\n            result.addError({\n                name: \"not\",\n                argument: schemaId,\n                message: \"is of prohibited type \" + schemaId\n            });\n        }\n    });\n    return result;\n};\nmodule.exports = attribute;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonschema/lib/attribute.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonschema/lib/helpers.js":
/*!************************************************!*\
  !*** ./node_modules/jsonschema/lib/helpers.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar uri = __webpack_require__(/*! url */ \"url\");\nvar ValidationError = exports.ValidationError = function ValidationError(message, instance, schema, path, name, argument) {\n    if (Array.isArray(path)) {\n        this.path = path;\n        this.property = path.reduce(function(sum, item) {\n            return sum + makeSuffix(item);\n        }, \"instance\");\n    } else if (path !== undefined) {\n        this.property = path;\n    }\n    if (message) {\n        this.message = message;\n    }\n    if (schema) {\n        var id = schema.$id || schema.id;\n        this.schema = id || schema;\n    }\n    if (instance !== undefined) {\n        this.instance = instance;\n    }\n    this.name = name;\n    this.argument = argument;\n    this.stack = this.toString();\n};\nValidationError.prototype.toString = function toString() {\n    return this.property + \" \" + this.message;\n};\nvar ValidatorResult = exports.ValidatorResult = function ValidatorResult(instance, schema, options, ctx) {\n    this.instance = instance;\n    this.schema = schema;\n    this.options = options;\n    this.path = ctx.path;\n    this.propertyPath = ctx.propertyPath;\n    this.errors = [];\n    this.throwError = options && options.throwError;\n    this.throwFirst = options && options.throwFirst;\n    this.throwAll = options && options.throwAll;\n    this.disableFormat = options && options.disableFormat === true;\n};\nValidatorResult.prototype.addError = function addError(detail) {\n    var err;\n    if (typeof detail == \"string\") {\n        err = new ValidationError(detail, this.instance, this.schema, this.path);\n    } else {\n        if (!detail) throw new Error(\"Missing error detail\");\n        if (!detail.message) throw new Error(\"Missing error message\");\n        if (!detail.name) throw new Error(\"Missing validator type\");\n        err = new ValidationError(detail.message, this.instance, this.schema, this.path, detail.name, detail.argument);\n    }\n    this.errors.push(err);\n    if (this.throwFirst) {\n        throw new ValidatorResultError(this);\n    } else if (this.throwError) {\n        throw err;\n    }\n    return err;\n};\nValidatorResult.prototype.importErrors = function importErrors(res) {\n    if (typeof res == \"string\" || res && res.validatorType) {\n        this.addError(res);\n    } else if (res && res.errors) {\n        this.errors = this.errors.concat(res.errors);\n    }\n};\nfunction stringizer(v, i) {\n    return i + \": \" + v.toString() + \"\\n\";\n}\nValidatorResult.prototype.toString = function toString(res) {\n    return this.errors.map(stringizer).join(\"\");\n};\nObject.defineProperty(ValidatorResult.prototype, \"valid\", {\n    get: function() {\n        return !this.errors.length;\n    }\n});\nmodule.exports.ValidatorResultError = ValidatorResultError;\nfunction ValidatorResultError(result) {\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, ValidatorResultError);\n    }\n    this.instance = result.instance;\n    this.schema = result.schema;\n    this.options = result.options;\n    this.errors = result.errors;\n}\nValidatorResultError.prototype = new Error();\nValidatorResultError.prototype.constructor = ValidatorResultError;\nValidatorResultError.prototype.name = \"Validation Error\";\n/**\n * Describes a problem with a Schema which prevents validation of an instance\n * @name SchemaError\n * @constructor\n */ var SchemaError = exports.SchemaError = function SchemaError(msg, schema) {\n    this.message = msg;\n    this.schema = schema;\n    Error.call(this, msg);\n    Error.captureStackTrace(this, SchemaError);\n};\nSchemaError.prototype = Object.create(Error.prototype, {\n    constructor: {\n        value: SchemaError,\n        enumerable: false\n    },\n    name: {\n        value: \"SchemaError\",\n        enumerable: false\n    }\n});\nvar SchemaContext = exports.SchemaContext = function SchemaContext(schema, options, path, base, schemas) {\n    this.schema = schema;\n    this.options = options;\n    if (Array.isArray(path)) {\n        this.path = path;\n        this.propertyPath = path.reduce(function(sum, item) {\n            return sum + makeSuffix(item);\n        }, \"instance\");\n    } else {\n        this.propertyPath = path;\n    }\n    this.base = base;\n    this.schemas = schemas;\n};\nSchemaContext.prototype.resolve = function resolve(target) {\n    return uri.resolve(this.base, target);\n};\nSchemaContext.prototype.makeChild = function makeChild(schema, propertyName) {\n    var path = propertyName === undefined ? this.path : this.path.concat([\n        propertyName\n    ]);\n    var id = schema.$id || schema.id;\n    var base = uri.resolve(this.base, id || \"\");\n    var ctx = new SchemaContext(schema, this.options, path, base, Object.create(this.schemas));\n    if (id && !ctx.schemas[base]) {\n        ctx.schemas[base] = schema;\n    }\n    return ctx;\n};\nvar FORMAT_REGEXPS = exports.FORMAT_REGEXPS = {\n    // 7.3.1. Dates, Times, and Duration\n    \"date-time\": /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\\.\\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,\n    \"date\": /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,\n    \"time\": /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,\n    \"duration\": /P(T\\d+(H(\\d+M(\\d+S)?)?|M(\\d+S)?|S)|\\d+(D|M(\\d+D)?|Y(\\d+M(\\d+D)?)?)(T\\d+(H(\\d+M(\\d+S)?)?|M(\\d+S)?|S))?|\\d+W)/i,\n    // 7.3.2. Email Addresses\n    // TODO: fix the email production\n    \"email\": /^(?:[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/,\n    \"idn-email\": /^(\"(?:[!#-\\[\\]-\\u{10FFFF}]|\\\\[\\t -\\u{10FFFF}])*\"|[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}](?:\\.?[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}])*)@([!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}](?:\\.?[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}])*|\\[[!-Z\\^-\\u{10FFFF}]*\\])$/u,\n    // 7.3.3. Hostnames\n    // 7.3.4. IP Addresses\n    \"ip-address\": /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n    // FIXME whitespace is invalid\n    \"ipv6\": /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n    // 7.3.5. Resource Identifiers\n    // TODO: A more accurate regular expression for \"uri\" goes:\n    // [A-Za-z][+\\-.0-9A-Za-z]*:((/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?)?#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])|/?%[0-9A-Fa-f]{2}|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*(#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)?)?\n    \"uri\": /^[a-zA-Z][a-zA-Z0-9+.-]*:[^\\s]*$/,\n    \"uri-reference\": /^(((([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(([A-Za-z][+\\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~]|[A-Za-z][+\\-.0-9A-Za-z]*[!$&-*,;=@_~])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)?|[A-Za-z][+\\-.0-9A-Za-z]*:?)?$/,\n    \"iri\": /^[a-zA-Z][a-zA-Z0-9+.-]*:[^\\s]*$/,\n    \"iri-reference\": /^(((([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|([A-Za-z][+\\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|(\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|(([A-Za-z][+\\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~-\\u{10FFFF}]|[A-Za-z][+\\-.0-9A-Za-z]*[!$&-*,;=@_~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~-\\u{10FFFF}])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*)?|([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)?|[A-Za-z][+\\-.0-9A-Za-z]*:?)?$/u,\n    \"uuid\": /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n    // 7.3.6. uri-template\n    \"uri-template\": /(%[0-9a-f]{2}|[!#$&(-;=?@\\[\\]_a-z~]|\\{[!#&+,./;=?@|]?(%[0-9a-f]{2}|[0-9_a-z])(\\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\\d{0,3}|\\*)?(,(%[0-9a-f]{2}|[0-9_a-z])(\\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\\d{0,3}|\\*)?)*\\})*/iu,\n    // 7.3.7. JSON Pointers\n    \"json-pointer\": /^(\\/([\\x00-\\x2e0-@\\[-}\\x7f]|~[01])*)*$/iu,\n    \"relative-json-pointer\": /^\\d+(#|(\\/([\\x00-\\x2e0-@\\[-}\\x7f]|~[01])*)*)$/iu,\n    // hostname regex from: http://stackoverflow.com/a/1420225/5628\n    \"hostname\": /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n    \"host-name\": /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n    \"utc-millisec\": function(input) {\n        return typeof input === \"string\" && parseFloat(input) === parseInt(input, 10) && !isNaN(input);\n    },\n    // 7.3.8. regex\n    \"regex\": function(input) {\n        var result = true;\n        try {\n            new RegExp(input);\n        } catch (e) {\n            result = false;\n        }\n        return result;\n    },\n    // Other definitions\n    // \"style\" was removed from JSON Schema in draft-4 and is deprecated\n    \"style\": /[\\r\\n\\t ]*[^\\r\\n\\t ][^:]*:[\\r\\n\\t ]*[^\\r\\n\\t ;]*[\\r\\n\\t ]*;?/,\n    // \"color\" was removed from JSON Schema in draft-4 and is deprecated\n    \"color\": /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/,\n    \"phone\": /^\\+(?:[0-9] ?){6,14}[0-9]$/,\n    \"alpha\": /^[a-zA-Z]+$/,\n    \"alphanumeric\": /^[a-zA-Z0-9]+$/\n};\nFORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS[\"ip-address\"];\nexports.isFormat = function isFormat(input, format, validator) {\n    if (typeof input === \"string\" && FORMAT_REGEXPS[format] !== undefined) {\n        if (FORMAT_REGEXPS[format] instanceof RegExp) {\n            return FORMAT_REGEXPS[format].test(input);\n        }\n        if (typeof FORMAT_REGEXPS[format] === \"function\") {\n            return FORMAT_REGEXPS[format](input);\n        }\n    } else if (validator && validator.customFormats && typeof validator.customFormats[format] === \"function\") {\n        return validator.customFormats[format](input);\n    }\n    return true;\n};\nvar makeSuffix = exports.makeSuffix = function makeSuffix(key) {\n    key = key.toString();\n    // This function could be capable of outputting valid a ECMAScript string, but the\n    // resulting code for testing which form to use would be tens of thousands of characters long\n    // That means this will use the name form for some illegal forms\n    if (!key.match(/[.\\s\\[\\]]/) && !key.match(/^[\\d]/)) {\n        return \".\" + key;\n    }\n    if (key.match(/^\\d+$/)) {\n        return \"[\" + key + \"]\";\n    }\n    return \"[\" + JSON.stringify(key) + \"]\";\n};\nexports.deepCompareStrict = function deepCompareStrict(a, b) {\n    if (typeof a !== typeof b) {\n        return false;\n    }\n    if (Array.isArray(a)) {\n        if (!Array.isArray(b)) {\n            return false;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        return a.every(function(v, i) {\n            return deepCompareStrict(a[i], b[i]);\n        });\n    }\n    if (typeof a === \"object\") {\n        if (!a || !b) {\n            return a === b;\n        }\n        var aKeys = Object.keys(a);\n        var bKeys = Object.keys(b);\n        if (aKeys.length !== bKeys.length) {\n            return false;\n        }\n        return aKeys.every(function(v) {\n            return deepCompareStrict(a[v], b[v]);\n        });\n    }\n    return a === b;\n};\nfunction deepMerger(target, dst, e, i) {\n    if (typeof e === \"object\") {\n        dst[i] = deepMerge(target[i], e);\n    } else {\n        if (target.indexOf(e) === -1) {\n            dst.push(e);\n        }\n    }\n}\nfunction copyist(src, dst, key) {\n    dst[key] = src[key];\n}\nfunction copyistWithDeepMerge(target, src, dst, key) {\n    if (typeof src[key] !== \"object\" || !src[key]) {\n        dst[key] = src[key];\n    } else {\n        if (!target[key]) {\n            dst[key] = src[key];\n        } else {\n            dst[key] = deepMerge(target[key], src[key]);\n        }\n    }\n}\nfunction deepMerge(target, src) {\n    var array = Array.isArray(src);\n    var dst = array && [] || {};\n    if (array) {\n        target = target || [];\n        dst = dst.concat(target);\n        src.forEach(deepMerger.bind(null, target, dst));\n    } else {\n        if (target && typeof target === \"object\") {\n            Object.keys(target).forEach(copyist.bind(null, target, dst));\n        }\n        Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));\n    }\n    return dst;\n}\nmodule.exports.deepMerge = deepMerge;\n/**\n * Validates instance against the provided schema\n * Implements URI+JSON Pointer encoding, e.g. \"%7e\"=\"~0\"=>\"~\", \"~1\"=\"%2f\"=>\"/\"\n * @param o\n * @param s The path to walk o along\n * @return any\n */ exports.objectGetPath = function objectGetPath(o, s) {\n    var parts = s.split(\"/\").slice(1);\n    var k;\n    while(typeof (k = parts.shift()) == \"string\"){\n        var n = decodeURIComponent(k.replace(/~0/, \"~\").replace(/~1/g, \"/\"));\n        if (!(n in o)) return;\n        o = o[n];\n    }\n    return o;\n};\nfunction pathEncoder(v) {\n    return \"/\" + encodeURIComponent(v).replace(/~/g, \"%7E\");\n}\n/**\n * Accept an Array of property names and return a JSON Pointer URI fragment\n * @param Array a\n * @return {String}\n */ exports.encodePath = function encodePointer(a) {\n    // ~ must be encoded explicitly because hacks\n    // the slash is encoded by encodeURIComponent\n    return a.map(pathEncoder).join(\"\");\n};\n/**\n * Calculate the number of decimal places a number uses\n * We need this to get correct results out of multipleOf and divisibleBy\n * when either figure is has decimal places, due to IEEE-754 float issues.\n * @param number\n * @returns {number}\n */ exports.getDecimalPlaces = function getDecimalPlaces(number) {\n    var decimalPlaces = 0;\n    if (isNaN(number)) return decimalPlaces;\n    if (typeof number !== \"number\") {\n        number = Number(number);\n    }\n    var parts = number.toString().split(\"e\");\n    if (parts.length === 2) {\n        if (parts[1][0] !== \"-\") {\n            return decimalPlaces;\n        } else {\n            decimalPlaces = Number(parts[1].slice(1));\n        }\n    }\n    var decimalParts = parts[0].split(\".\");\n    if (decimalParts.length === 2) {\n        decimalPlaces += decimalParts[1].length;\n    }\n    return decimalPlaces;\n};\nexports.isSchema = function isSchema(val) {\n    return typeof val === \"object\" && val || typeof val === \"boolean\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonschema/lib/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonschema/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/jsonschema/lib/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Validator = module.exports.Validator = __webpack_require__(/*! ./validator */ \"(ssr)/./node_modules/jsonschema/lib/validator.js\");\nmodule.exports.ValidatorResult = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/jsonschema/lib/helpers.js\").ValidatorResult;\nmodule.exports.ValidatorResultError = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/jsonschema/lib/helpers.js\").ValidatorResultError;\nmodule.exports.ValidationError = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/jsonschema/lib/helpers.js\").ValidationError;\nmodule.exports.SchemaError = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/jsonschema/lib/helpers.js\").SchemaError;\nmodule.exports.SchemaScanResult = __webpack_require__(/*! ./scan */ \"(ssr)/./node_modules/jsonschema/lib/scan.js\").SchemaScanResult;\nmodule.exports.scan = __webpack_require__(/*! ./scan */ \"(ssr)/./node_modules/jsonschema/lib/scan.js\").scan;\nmodule.exports.validate = function(instance, schema, options) {\n    var v = new Validator();\n    return v.validate(instance, schema, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbnNjaGVtYS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxZQUFZQyxxSEFBbUM7QUFFbkRBLHVJQUFxRTtBQUNyRUEsaUpBQStFO0FBQy9FQSx1SUFBcUU7QUFDckVBLCtIQUE2RDtBQUM3REEsbUlBQW9FO0FBQ3BFQSwyR0FBNEM7QUFFNUNBLHVCQUF1QixHQUFHLFNBQVVVLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQzNELElBQUlDLElBQUksSUFBSWQ7SUFDWixPQUFPYyxFQUFFSixRQUFRLENBQUNDLFVBQVVDLFFBQVFDO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9qc29uc2NoZW1hL2xpYi9pbmRleC5qcz8yYWI1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFZhbGlkYXRvciA9IG1vZHVsZS5leHBvcnRzLlZhbGlkYXRvciA9IHJlcXVpcmUoJy4vdmFsaWRhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzLlZhbGlkYXRvclJlc3VsdCA9IHJlcXVpcmUoJy4vaGVscGVycycpLlZhbGlkYXRvclJlc3VsdDtcbm1vZHVsZS5leHBvcnRzLlZhbGlkYXRvclJlc3VsdEVycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzJykuVmFsaWRhdG9yUmVzdWx0RXJyb3I7XG5tb2R1bGUuZXhwb3J0cy5WYWxpZGF0aW9uRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMnKS5WYWxpZGF0aW9uRXJyb3I7XG5tb2R1bGUuZXhwb3J0cy5TY2hlbWFFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycycpLlNjaGVtYUVycm9yO1xubW9kdWxlLmV4cG9ydHMuU2NoZW1hU2NhblJlc3VsdCA9IHJlcXVpcmUoJy4vc2NhbicpLlNjaGVtYVNjYW5SZXN1bHQ7XG5tb2R1bGUuZXhwb3J0cy5zY2FuID0gcmVxdWlyZSgnLi9zY2FuJykuc2NhbjtcblxubW9kdWxlLmV4cG9ydHMudmFsaWRhdGUgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIHNjaGVtYSwgb3B0aW9ucykge1xuICB2YXIgdiA9IG5ldyBWYWxpZGF0b3IoKTtcbiAgcmV0dXJuIHYudmFsaWRhdGUoaW5zdGFuY2UsIHNjaGVtYSwgb3B0aW9ucyk7XG59O1xuIl0sIm5hbWVzIjpbIlZhbGlkYXRvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiVmFsaWRhdG9yUmVzdWx0IiwiVmFsaWRhdG9yUmVzdWx0RXJyb3IiLCJWYWxpZGF0aW9uRXJyb3IiLCJTY2hlbWFFcnJvciIsIlNjaGVtYVNjYW5SZXN1bHQiLCJzY2FuIiwidmFsaWRhdGUiLCJpbnN0YW5jZSIsInNjaGVtYSIsIm9wdGlvbnMiLCJ2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonschema/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonschema/lib/scan.js":
/*!*********************************************!*\
  !*** ./node_modules/jsonschema/lib/scan.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar urilib = __webpack_require__(/*! url */ \"url\");\nvar helpers = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/jsonschema/lib/helpers.js\");\nmodule.exports.SchemaScanResult = SchemaScanResult;\nfunction SchemaScanResult(found, ref) {\n    this.id = found;\n    this.ref = ref;\n}\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */ module.exports.scan = function scan(base, schema) {\n    function scanSchema(baseuri, schema) {\n        if (!schema || typeof schema != \"object\") return;\n        // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n        if (schema.$ref) {\n            var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n            ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri] + 1 : 0;\n            return;\n        }\n        var id = schema.$id || schema.id;\n        var ourBase = id ? urilib.resolve(baseuri, id) : baseuri;\n        if (ourBase) {\n            // If there's no fragment, append an empty one\n            if (ourBase.indexOf(\"#\") < 0) ourBase += \"#\";\n            if (found[ourBase]) {\n                if (!helpers.deepCompareStrict(found[ourBase], schema)) {\n                    throw new Error(\"Schema <\" + ourBase + \"> already exists with different definition\");\n                }\n                return found[ourBase];\n            }\n            found[ourBase] = schema;\n            // strip trailing fragment\n            if (ourBase[ourBase.length - 1] == \"#\") {\n                found[ourBase.substring(0, ourBase.length - 1)] = schema;\n            }\n        }\n        scanArray(ourBase + \"/items\", Array.isArray(schema.items) ? schema.items : [\n            schema.items\n        ]);\n        scanArray(ourBase + \"/extends\", Array.isArray(schema.extends) ? schema.extends : [\n            schema.extends\n        ]);\n        scanSchema(ourBase + \"/additionalItems\", schema.additionalItems);\n        scanObject(ourBase + \"/properties\", schema.properties);\n        scanSchema(ourBase + \"/additionalProperties\", schema.additionalProperties);\n        scanObject(ourBase + \"/definitions\", schema.definitions);\n        scanObject(ourBase + \"/patternProperties\", schema.patternProperties);\n        scanObject(ourBase + \"/dependencies\", schema.dependencies);\n        scanArray(ourBase + \"/disallow\", schema.disallow);\n        scanArray(ourBase + \"/allOf\", schema.allOf);\n        scanArray(ourBase + \"/anyOf\", schema.anyOf);\n        scanArray(ourBase + \"/oneOf\", schema.oneOf);\n        scanSchema(ourBase + \"/not\", schema.not);\n    }\n    function scanArray(baseuri, schemas) {\n        if (!Array.isArray(schemas)) return;\n        for(var i = 0; i < schemas.length; i++){\n            scanSchema(baseuri + \"/\" + i, schemas[i]);\n        }\n    }\n    function scanObject(baseuri, schemas) {\n        if (!schemas || typeof schemas != \"object\") return;\n        for(var p in schemas){\n            scanSchema(baseuri + \"/\" + p, schemas[p]);\n        }\n    }\n    var found = {};\n    var ref = {};\n    scanSchema(base, schema);\n    return new SchemaScanResult(found, ref);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbnNjaGVtYS9saWIvc2Nhbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLFVBQVVELG1CQUFPQSxDQUFDO0FBRXRCRSwrQkFBK0IsR0FBR0U7QUFDbEMsU0FBU0EsaUJBQWlCQyxLQUFLLEVBQUVDLEdBQUc7SUFDbEMsSUFBSSxDQUFDQyxFQUFFLEdBQUdGO0lBQ1YsSUFBSSxDQUFDQyxHQUFHLEdBQUdBO0FBQ2I7QUFFQTs7Ozs7Q0FLQyxHQUNESixtQkFBbUIsR0FBRyxTQUFTTSxLQUFLQyxJQUFJLEVBQUVDLE1BQU07SUFDOUMsU0FBU0MsV0FBV0MsT0FBTyxFQUFFRixNQUFNO1FBQ2pDLElBQUcsQ0FBQ0EsVUFBVSxPQUFPQSxVQUFRLFVBQVU7UUFDdkMsb0dBQW9HO1FBQ3BHLElBQUdBLE9BQU9HLElBQUksRUFBQztZQUNiLElBQUlDLGNBQWNmLE9BQU9nQixPQUFPLENBQUNILFNBQVNGLE9BQU9HLElBQUk7WUFDckRQLEdBQUcsQ0FBQ1EsWUFBWSxHQUFHUixHQUFHLENBQUNRLFlBQVksR0FBR1IsR0FBRyxDQUFDUSxZQUFZLEdBQUMsSUFBSTtZQUMzRDtRQUNGO1FBQ0EsSUFBSVAsS0FBS0csT0FBT00sR0FBRyxJQUFJTixPQUFPSCxFQUFFO1FBQ2hDLElBQUlVLFVBQVVWLEtBQUtSLE9BQU9nQixPQUFPLENBQUNILFNBQVNMLE1BQU1LO1FBQ2pELElBQUlLLFNBQVM7WUFDWCw4Q0FBOEM7WUFDOUMsSUFBR0EsUUFBUUMsT0FBTyxDQUFDLE9BQUssR0FBR0QsV0FBVztZQUN0QyxJQUFHWixLQUFLLENBQUNZLFFBQVEsRUFBQztnQkFDaEIsSUFBRyxDQUFDaEIsUUFBUWtCLGlCQUFpQixDQUFDZCxLQUFLLENBQUNZLFFBQVEsRUFBRVAsU0FBUTtvQkFDcEQsTUFBTSxJQUFJVSxNQUFNLGFBQVdILFVBQVE7Z0JBQ3JDO2dCQUNBLE9BQU9aLEtBQUssQ0FBQ1ksUUFBUTtZQUN2QjtZQUNBWixLQUFLLENBQUNZLFFBQVEsR0FBR1A7WUFDakIsMEJBQTBCO1lBQzFCLElBQUdPLE9BQU8sQ0FBQ0EsUUFBUUksTUFBTSxHQUFDLEVBQUUsSUFBRSxLQUFJO2dCQUNoQ2hCLEtBQUssQ0FBQ1ksUUFBUUssU0FBUyxDQUFDLEdBQUdMLFFBQVFJLE1BQU0sR0FBQyxHQUFHLEdBQUdYO1lBQ2xEO1FBQ0Y7UUFDQWEsVUFBVU4sVUFBUSxVQUFXTyxNQUFNQyxPQUFPLENBQUNmLE9BQU9nQixLQUFLLElBQUVoQixPQUFPZ0IsS0FBSyxHQUFDO1lBQUNoQixPQUFPZ0IsS0FBSztTQUFDO1FBQ3BGSCxVQUFVTixVQUFRLFlBQWFPLE1BQU1DLE9BQU8sQ0FBQ2YsT0FBT2lCLE9BQU8sSUFBRWpCLE9BQU9pQixPQUFPLEdBQUM7WUFBQ2pCLE9BQU9pQixPQUFPO1NBQUM7UUFDNUZoQixXQUFXTSxVQUFRLG9CQUFvQlAsT0FBT2tCLGVBQWU7UUFDN0RDLFdBQVdaLFVBQVEsZUFBZVAsT0FBT29CLFVBQVU7UUFDbkRuQixXQUFXTSxVQUFRLHlCQUF5QlAsT0FBT3FCLG9CQUFvQjtRQUN2RUYsV0FBV1osVUFBUSxnQkFBZ0JQLE9BQU9zQixXQUFXO1FBQ3JESCxXQUFXWixVQUFRLHNCQUFzQlAsT0FBT3VCLGlCQUFpQjtRQUNqRUosV0FBV1osVUFBUSxpQkFBaUJQLE9BQU93QixZQUFZO1FBQ3ZEWCxVQUFVTixVQUFRLGFBQWFQLE9BQU95QixRQUFRO1FBQzlDWixVQUFVTixVQUFRLFVBQVVQLE9BQU8wQixLQUFLO1FBQ3hDYixVQUFVTixVQUFRLFVBQVVQLE9BQU8yQixLQUFLO1FBQ3hDZCxVQUFVTixVQUFRLFVBQVVQLE9BQU80QixLQUFLO1FBQ3hDM0IsV0FBV00sVUFBUSxRQUFRUCxPQUFPNkIsR0FBRztJQUN2QztJQUNBLFNBQVNoQixVQUFVWCxPQUFPLEVBQUU0QixPQUFPO1FBQ2pDLElBQUcsQ0FBQ2hCLE1BQU1DLE9BQU8sQ0FBQ2UsVUFBVTtRQUM1QixJQUFJLElBQUlDLElBQUUsR0FBR0EsSUFBRUQsUUFBUW5CLE1BQU0sRUFBRW9CLElBQUk7WUFDakM5QixXQUFXQyxVQUFRLE1BQUk2QixHQUFHRCxPQUFPLENBQUNDLEVBQUU7UUFDdEM7SUFDRjtJQUNBLFNBQVNaLFdBQVdqQixPQUFPLEVBQUU0QixPQUFPO1FBQ2xDLElBQUcsQ0FBQ0EsV0FBVyxPQUFPQSxXQUFTLFVBQVU7UUFDekMsSUFBSSxJQUFJRSxLQUFLRixRQUFRO1lBQ25CN0IsV0FBV0MsVUFBUSxNQUFJOEIsR0FBR0YsT0FBTyxDQUFDRSxFQUFFO1FBQ3RDO0lBQ0Y7SUFFQSxJQUFJckMsUUFBUSxDQUFDO0lBQ2IsSUFBSUMsTUFBTSxDQUFDO0lBQ1hLLFdBQVdGLE1BQU1DO0lBQ2pCLE9BQU8sSUFBSU4saUJBQWlCQyxPQUFPQztBQUNyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvanNvbnNjaGVtYS9saWIvc2Nhbi5qcz9iNGJmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgdXJpbGliID0gcmVxdWlyZSgndXJsJyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG5tb2R1bGUuZXhwb3J0cy5TY2hlbWFTY2FuUmVzdWx0ID0gU2NoZW1hU2NhblJlc3VsdDtcbmZ1bmN0aW9uIFNjaGVtYVNjYW5SZXN1bHQoZm91bmQsIHJlZil7XG4gIHRoaXMuaWQgPSBmb3VuZDtcbiAgdGhpcy5yZWYgPSByZWY7XG59XG5cbi8qKlxuICogQWRkcyBhIHNjaGVtYSB3aXRoIGEgY2VydGFpbiB1cm4gdG8gdGhlIFZhbGlkYXRvciBpbnN0YW5jZS5cbiAqIEBwYXJhbSBzdHJpbmcgdXJpXG4gKiBAcGFyYW0gb2JqZWN0IHNjaGVtYVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5tb2R1bGUuZXhwb3J0cy5zY2FuID0gZnVuY3Rpb24gc2NhbihiYXNlLCBzY2hlbWEpe1xuICBmdW5jdGlvbiBzY2FuU2NoZW1hKGJhc2V1cmksIHNjaGVtYSl7XG4gICAgaWYoIXNjaGVtYSB8fCB0eXBlb2Ygc2NoZW1hIT0nb2JqZWN0JykgcmV0dXJuO1xuICAgIC8vIE1hcmsgYWxsIHJlZmVyZW5jZWQgc2NoZW1hcyBzbyB3ZSBjYW4gdGVsbCBsYXRlciB3aGljaCBzY2hlbWFzIGFyZSByZWZlcnJlZCB0bywgYnV0IG5ldmVyIGRlZmluZWRcbiAgICBpZihzY2hlbWEuJHJlZil7XG4gICAgICB2YXIgcmVzb2x2ZWRVcmkgPSB1cmlsaWIucmVzb2x2ZShiYXNldXJpLCBzY2hlbWEuJHJlZik7XG4gICAgICByZWZbcmVzb2x2ZWRVcmldID0gcmVmW3Jlc29sdmVkVXJpXSA/IHJlZltyZXNvbHZlZFVyaV0rMSA6IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpZCA9IHNjaGVtYS4kaWQgfHwgc2NoZW1hLmlkO1xuICAgIHZhciBvdXJCYXNlID0gaWQgPyB1cmlsaWIucmVzb2x2ZShiYXNldXJpLCBpZCkgOiBiYXNldXJpO1xuICAgIGlmIChvdXJCYXNlKSB7XG4gICAgICAvLyBJZiB0aGVyZSdzIG5vIGZyYWdtZW50LCBhcHBlbmQgYW4gZW1wdHkgb25lXG4gICAgICBpZihvdXJCYXNlLmluZGV4T2YoJyMnKTwwKSBvdXJCYXNlICs9ICcjJztcbiAgICAgIGlmKGZvdW5kW291ckJhc2VdKXtcbiAgICAgICAgaWYoIWhlbHBlcnMuZGVlcENvbXBhcmVTdHJpY3QoZm91bmRbb3VyQmFzZV0sIHNjaGVtYSkpe1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2NoZW1hIDwnK291ckJhc2UrJz4gYWxyZWFkeSBleGlzdHMgd2l0aCBkaWZmZXJlbnQgZGVmaW5pdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3VuZFtvdXJCYXNlXTtcbiAgICAgIH1cbiAgICAgIGZvdW5kW291ckJhc2VdID0gc2NoZW1hO1xuICAgICAgLy8gc3RyaXAgdHJhaWxpbmcgZnJhZ21lbnRcbiAgICAgIGlmKG91ckJhc2Vbb3VyQmFzZS5sZW5ndGgtMV09PScjJyl7XG4gICAgICAgIGZvdW5kW291ckJhc2Uuc3Vic3RyaW5nKDAsIG91ckJhc2UubGVuZ3RoLTEpXSA9IHNjaGVtYTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2NhbkFycmF5KG91ckJhc2UrJy9pdGVtcycsIChBcnJheS5pc0FycmF5KHNjaGVtYS5pdGVtcyk/c2NoZW1hLml0ZW1zOltzY2hlbWEuaXRlbXNdKSk7XG4gICAgc2NhbkFycmF5KG91ckJhc2UrJy9leHRlbmRzJywgKEFycmF5LmlzQXJyYXkoc2NoZW1hLmV4dGVuZHMpP3NjaGVtYS5leHRlbmRzOltzY2hlbWEuZXh0ZW5kc10pKTtcbiAgICBzY2FuU2NoZW1hKG91ckJhc2UrJy9hZGRpdGlvbmFsSXRlbXMnLCBzY2hlbWEuYWRkaXRpb25hbEl0ZW1zKTtcbiAgICBzY2FuT2JqZWN0KG91ckJhc2UrJy9wcm9wZXJ0aWVzJywgc2NoZW1hLnByb3BlcnRpZXMpO1xuICAgIHNjYW5TY2hlbWEob3VyQmFzZSsnL2FkZGl0aW9uYWxQcm9wZXJ0aWVzJywgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzKTtcbiAgICBzY2FuT2JqZWN0KG91ckJhc2UrJy9kZWZpbml0aW9ucycsIHNjaGVtYS5kZWZpbml0aW9ucyk7XG4gICAgc2Nhbk9iamVjdChvdXJCYXNlKycvcGF0dGVyblByb3BlcnRpZXMnLCBzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpO1xuICAgIHNjYW5PYmplY3Qob3VyQmFzZSsnL2RlcGVuZGVuY2llcycsIHNjaGVtYS5kZXBlbmRlbmNpZXMpO1xuICAgIHNjYW5BcnJheShvdXJCYXNlKycvZGlzYWxsb3cnLCBzY2hlbWEuZGlzYWxsb3cpO1xuICAgIHNjYW5BcnJheShvdXJCYXNlKycvYWxsT2YnLCBzY2hlbWEuYWxsT2YpO1xuICAgIHNjYW5BcnJheShvdXJCYXNlKycvYW55T2YnLCBzY2hlbWEuYW55T2YpO1xuICAgIHNjYW5BcnJheShvdXJCYXNlKycvb25lT2YnLCBzY2hlbWEub25lT2YpO1xuICAgIHNjYW5TY2hlbWEob3VyQmFzZSsnL25vdCcsIHNjaGVtYS5ub3QpO1xuICB9XG4gIGZ1bmN0aW9uIHNjYW5BcnJheShiYXNldXJpLCBzY2hlbWFzKXtcbiAgICBpZighQXJyYXkuaXNBcnJheShzY2hlbWFzKSkgcmV0dXJuO1xuICAgIGZvcih2YXIgaT0wOyBpPHNjaGVtYXMubGVuZ3RoOyBpKyspe1xuICAgICAgc2NhblNjaGVtYShiYXNldXJpKycvJytpLCBzY2hlbWFzW2ldKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2Nhbk9iamVjdChiYXNldXJpLCBzY2hlbWFzKXtcbiAgICBpZighc2NoZW1hcyB8fCB0eXBlb2Ygc2NoZW1hcyE9J29iamVjdCcpIHJldHVybjtcbiAgICBmb3IodmFyIHAgaW4gc2NoZW1hcyl7XG4gICAgICBzY2FuU2NoZW1hKGJhc2V1cmkrJy8nK3AsIHNjaGVtYXNbcF0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmb3VuZCA9IHt9O1xuICB2YXIgcmVmID0ge307XG4gIHNjYW5TY2hlbWEoYmFzZSwgc2NoZW1hKTtcbiAgcmV0dXJuIG5ldyBTY2hlbWFTY2FuUmVzdWx0KGZvdW5kLCByZWYpO1xufTtcbiJdLCJuYW1lcyI6WyJ1cmlsaWIiLCJyZXF1aXJlIiwiaGVscGVycyIsIm1vZHVsZSIsImV4cG9ydHMiLCJTY2hlbWFTY2FuUmVzdWx0IiwiZm91bmQiLCJyZWYiLCJpZCIsInNjYW4iLCJiYXNlIiwic2NoZW1hIiwic2NhblNjaGVtYSIsImJhc2V1cmkiLCIkcmVmIiwicmVzb2x2ZWRVcmkiLCJyZXNvbHZlIiwiJGlkIiwib3VyQmFzZSIsImluZGV4T2YiLCJkZWVwQ29tcGFyZVN0cmljdCIsIkVycm9yIiwibGVuZ3RoIiwic3Vic3RyaW5nIiwic2NhbkFycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiaXRlbXMiLCJleHRlbmRzIiwiYWRkaXRpb25hbEl0ZW1zIiwic2Nhbk9iamVjdCIsInByb3BlcnRpZXMiLCJhZGRpdGlvbmFsUHJvcGVydGllcyIsImRlZmluaXRpb25zIiwicGF0dGVyblByb3BlcnRpZXMiLCJkZXBlbmRlbmNpZXMiLCJkaXNhbGxvdyIsImFsbE9mIiwiYW55T2YiLCJvbmVPZiIsIm5vdCIsInNjaGVtYXMiLCJpIiwicCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonschema/lib/scan.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonschema/lib/validator.js":
/*!**************************************************!*\
  !*** ./node_modules/jsonschema/lib/validator.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar urilib = __webpack_require__(/*! url */ \"url\");\nvar attribute = __webpack_require__(/*! ./attribute */ \"(ssr)/./node_modules/jsonschema/lib/attribute.js\");\nvar helpers = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/jsonschema/lib/helpers.js\");\nvar scanSchema = (__webpack_require__(/*! ./scan */ \"(ssr)/./node_modules/jsonschema/lib/scan.js\").scan);\nvar ValidatorResult = helpers.ValidatorResult;\nvar ValidatorResultError = helpers.ValidatorResultError;\nvar SchemaError = helpers.SchemaError;\nvar SchemaContext = helpers.SchemaContext;\n//var anonymousBase = 'vnd.jsonschema:///';\nvar anonymousBase = \"/\";\n/**\n * Creates a new Validator object\n * @name Validator\n * @constructor\n */ var Validator = function Validator() {\n    // Allow a validator instance to override global custom formats or to have their\n    // own custom formats.\n    this.customFormats = Object.create(Validator.prototype.customFormats);\n    this.schemas = {};\n    this.unresolvedRefs = [];\n    // Use Object.create to make this extensible without Validator instances stepping on each other's toes.\n    this.types = Object.create(types);\n    this.attributes = Object.create(attribute.validators);\n};\n// Allow formats to be registered globally.\nValidator.prototype.customFormats = {};\n// Hint at the presence of a property\nValidator.prototype.schemas = null;\nValidator.prototype.types = null;\nValidator.prototype.attributes = null;\nValidator.prototype.unresolvedRefs = null;\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param schema\n * @param urn\n * @return {Object}\n */ Validator.prototype.addSchema = function addSchema(schema, base) {\n    var self = this;\n    if (!schema) {\n        return null;\n    }\n    var scan = scanSchema(base || anonymousBase, schema);\n    var ourUri = base || schema.$id || schema.id;\n    for(var uri in scan.id){\n        this.schemas[uri] = scan.id[uri];\n    }\n    for(var uri in scan.ref){\n        // If this schema is already defined, it will be filtered out by the next step\n        this.unresolvedRefs.push(uri);\n    }\n    // Remove newly defined schemas from unresolvedRefs\n    this.unresolvedRefs = this.unresolvedRefs.filter(function(uri) {\n        return typeof self.schemas[uri] === \"undefined\";\n    });\n    return this.schemas[ourUri];\n};\nValidator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {\n    if (!Array.isArray(schemas)) return;\n    for(var i = 0; i < schemas.length; i++){\n        this.addSubSchema(baseuri, schemas[i]);\n    }\n};\nValidator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {\n    if (!schemas || typeof schemas != \"object\") return;\n    for(var p in schemas){\n        this.addSubSchema(baseuri, schemas[p]);\n    }\n};\n/**\n * Sets all the schemas of the Validator instance.\n * @param schemas\n */ Validator.prototype.setSchemas = function setSchemas(schemas) {\n    this.schemas = schemas;\n};\n/**\n * Returns the schema of a certain urn\n * @param urn\n */ Validator.prototype.getSchema = function getSchema(urn) {\n    return this.schemas[urn];\n};\n/**\n * Validates instance against the provided schema\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {Array}\n */ Validator.prototype.validate = function validate(instance, schema, options, ctx) {\n    if (typeof schema !== \"boolean\" && typeof schema !== \"object\" || schema === null) {\n        throw new SchemaError(\"Expected `schema` to be an object or boolean\");\n    }\n    if (!options) {\n        options = {};\n    }\n    // This section indexes subschemas in the provided schema, so they don't need to be added with Validator#addSchema\n    // This will work so long as the function at uri.resolve() will resolve a relative URI to a relative URI\n    var id = schema.$id || schema.id;\n    var base = urilib.resolve(options.base || anonymousBase, id || \"\");\n    if (!ctx) {\n        ctx = new SchemaContext(schema, options, [], base, Object.create(this.schemas));\n        if (!ctx.schemas[base]) {\n            ctx.schemas[base] = schema;\n        }\n        var found = scanSchema(base, schema);\n        for(var n in found.id){\n            var sch = found.id[n];\n            ctx.schemas[n] = sch;\n        }\n    }\n    if (options.required && instance === undefined) {\n        var result = new ValidatorResult(instance, schema, options, ctx);\n        result.addError(\"is required, but is undefined\");\n        return result;\n    }\n    var result = this.validateSchema(instance, schema, options, ctx);\n    if (!result) {\n        throw new Error(\"Result undefined\");\n    } else if (options.throwAll && result.errors.length) {\n        throw new ValidatorResultError(result);\n    }\n    return result;\n};\n/**\n* @param Object schema\n* @return mixed schema uri or false\n*/ function shouldResolve(schema) {\n    var ref = typeof schema === \"string\" ? schema : schema.$ref;\n    if (typeof ref == \"string\") return ref;\n    return false;\n}\n/**\n * Validates an instance against the schema (the actual work horse)\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @private\n * @return {ValidatorResult}\n */ Validator.prototype.validateSchema = function validateSchema(instance, schema, options, ctx) {\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    // Support for the true/false schemas\n    if (typeof schema === \"boolean\") {\n        if (schema === true) {\n            // `true` is always valid\n            schema = {};\n        } else if (schema === false) {\n            // `false` is always invalid\n            schema = {\n                type: []\n            };\n        }\n    } else if (!schema) {\n        // This might be a string\n        throw new Error(\"schema is undefined\");\n    }\n    if (schema[\"extends\"]) {\n        if (Array.isArray(schema[\"extends\"])) {\n            var schemaobj = {\n                schema: schema,\n                ctx: ctx\n            };\n            schema[\"extends\"].forEach(this.schemaTraverser.bind(this, schemaobj));\n            schema = schemaobj.schema;\n            schemaobj.schema = null;\n            schemaobj.ctx = null;\n            schemaobj = null;\n        } else {\n            schema = helpers.deepMerge(schema, this.superResolve(schema[\"extends\"], ctx));\n        }\n    }\n    // If passed a string argument, load that schema URI\n    var switchSchema = shouldResolve(schema);\n    if (switchSchema) {\n        var resolved = this.resolve(schema, switchSchema, ctx);\n        var subctx = new SchemaContext(resolved.subschema, options, ctx.path, resolved.switchSchema, ctx.schemas);\n        return this.validateSchema(instance, resolved.subschema, options, subctx);\n    }\n    var skipAttributes = options && options.skipAttributes || [];\n    // Validate each schema attribute against the instance\n    for(var key in schema){\n        if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {\n            var validatorErr = null;\n            var validator = this.attributes[key];\n            if (validator) {\n                validatorErr = validator.call(this, instance, schema, options, ctx);\n            } else if (options.allowUnknownAttributes === false) {\n                // This represents an error with the schema itself, not an invalid instance\n                throw new SchemaError(\"Unsupported attribute: \" + key, schema);\n            }\n            if (validatorErr) {\n                result.importErrors(validatorErr);\n            }\n        }\n    }\n    if (typeof options.rewrite == \"function\") {\n        var value = options.rewrite.call(this, instance, schema, options, ctx);\n        result.instance = value;\n    }\n    return result;\n};\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/ Validator.prototype.schemaTraverser = function schemaTraverser(schemaobj, s) {\n    schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));\n};\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/ Validator.prototype.superResolve = function superResolve(schema, ctx) {\n    var ref = shouldResolve(schema);\n    if (ref) {\n        return this.resolve(schema, ref, ctx).subschema;\n    }\n    return schema;\n};\n/**\n* @private\n* @param Object schema\n* @param Object switchSchema\n* @param SchemaContext ctx\n* @return Object resolved schemas {subschema:String, switchSchema: String}\n* @throws SchemaError\n*/ Validator.prototype.resolve = function resolve(schema, switchSchema, ctx) {\n    switchSchema = ctx.resolve(switchSchema);\n    // First see if the schema exists under the provided URI\n    if (ctx.schemas[switchSchema]) {\n        return {\n            subschema: ctx.schemas[switchSchema],\n            switchSchema: switchSchema\n        };\n    }\n    // Else try walking the property pointer\n    var parsed = urilib.parse(switchSchema);\n    var fragment = parsed && parsed.hash;\n    var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);\n    if (!document || !ctx.schemas[document]) {\n        throw new SchemaError(\"no such schema <\" + switchSchema + \">\", schema);\n    }\n    var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));\n    if (subschema === undefined) {\n        throw new SchemaError(\"no such schema \" + fragment + \" located in <\" + document + \">\", schema);\n    }\n    return {\n        subschema: subschema,\n        switchSchema: switchSchema\n    };\n};\n/**\n * Tests whether the instance if of a certain type.\n * @private\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @param type\n * @return {boolean}\n */ Validator.prototype.testType = function validateType(instance, schema, options, ctx, type) {\n    if (type === undefined) {\n        return;\n    } else if (type === null) {\n        throw new SchemaError('Unexpected null in \"type\" keyword');\n    }\n    if (typeof this.types[type] == \"function\") {\n        return this.types[type].call(this, instance);\n    }\n    if (type && typeof type == \"object\") {\n        var res = this.validateSchema(instance, type, options, ctx);\n        return res === undefined || !(res && res.errors.length);\n    }\n    // Undefined or properties not on the list are acceptable, same as not being defined\n    return true;\n};\nvar types = Validator.prototype.types = {};\ntypes.string = function testString(instance) {\n    return typeof instance == \"string\";\n};\ntypes.number = function testNumber(instance) {\n    // isFinite returns false for NaN, Infinity, and -Infinity\n    return typeof instance == \"number\" && isFinite(instance);\n};\ntypes.integer = function testInteger(instance) {\n    return typeof instance == \"number\" && instance % 1 === 0;\n};\ntypes.boolean = function testBoolean(instance) {\n    return typeof instance == \"boolean\";\n};\ntypes.array = function testArray(instance) {\n    return Array.isArray(instance);\n};\ntypes[\"null\"] = function testNull(instance) {\n    return instance === null;\n};\ntypes.date = function testDate(instance) {\n    return instance instanceof Date;\n};\ntypes.any = function testAny(instance) {\n    return true;\n};\ntypes.object = function testObject(instance) {\n    // TODO: fix this - see #15\n    return instance && typeof instance === \"object\" && !Array.isArray(instance) && !(instance instanceof Date);\n};\nmodule.exports = Validator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonschema/lib/validator.js\n");

/***/ })

};
;