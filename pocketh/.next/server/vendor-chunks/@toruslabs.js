/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@toruslabs";
exports.ids = ["vendor-chunks/@toruslabs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCOUNT_CATEGORY: () => (/* binding */ ACCOUNT_CATEGORY),\n/* harmony export */   ACTIVITY_ACTION: () => (/* binding */ ACTIVITY_ACTION),\n/* harmony export */   ACTIVITY_ACTION_ACCEPT_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_ACCEPT_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_ALL: () => (/* binding */ ACTIVITY_ACTION_ALL),\n/* harmony export */   ACTIVITY_ACTION_BURN: () => (/* binding */ ACTIVITY_ACTION_BURN),\n/* harmony export */   ACTIVITY_ACTION_CANCEL_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_CANCEL_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_CREATE_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_CREATE_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_CREATE_TRUSTLINE: () => (/* binding */ ACTIVITY_ACTION_CREATE_TRUSTLINE),\n/* harmony export */   ACTIVITY_ACTION_RECEIVE: () => (/* binding */ ACTIVITY_ACTION_RECEIVE),\n/* harmony export */   ACTIVITY_ACTION_REMOVE_TRUSTLINE: () => (/* binding */ ACTIVITY_ACTION_REMOVE_TRUSTLINE),\n/* harmony export */   ACTIVITY_ACTION_SEND: () => (/* binding */ ACTIVITY_ACTION_SEND),\n/* harmony export */   ACTIVITY_ACTION_TOPUP: () => (/* binding */ ACTIVITY_ACTION_TOPUP),\n/* harmony export */   ACTIVITY_PERIOD_ALL: () => (/* binding */ ACTIVITY_PERIOD_ALL),\n/* harmony export */   ACTIVITY_PERIOD_MONTH_ONE: () => (/* binding */ ACTIVITY_PERIOD_MONTH_ONE),\n/* harmony export */   ACTIVITY_PERIOD_MONTH_SIX: () => (/* binding */ ACTIVITY_PERIOD_MONTH_SIX),\n/* harmony export */   ACTIVITY_PERIOD_WEEK_ONE: () => (/* binding */ ACTIVITY_PERIOD_WEEK_ONE),\n/* harmony export */   ACTIVITY_STATUS_CANCELLED: () => (/* binding */ ACTIVITY_STATUS_CANCELLED),\n/* harmony export */   ACTIVITY_STATUS_CANCELLING: () => (/* binding */ ACTIVITY_STATUS_CANCELLING),\n/* harmony export */   ACTIVITY_STATUS_PENDING: () => (/* binding */ ACTIVITY_STATUS_PENDING),\n/* harmony export */   ACTIVITY_STATUS_SUCCESSFUL: () => (/* binding */ ACTIVITY_STATUS_SUCCESSFUL),\n/* harmony export */   ACTIVITY_STATUS_UNSUCCESSFUL: () => (/* binding */ ACTIVITY_STATUS_UNSUCCESSFUL),\n/* harmony export */   BROADCAST_CHANNELS: () => (/* binding */ BROADCAST_CHANNELS),\n/* harmony export */   BROADCAST_CHANNELS_MSGS: () => (/* binding */ BROADCAST_CHANNELS_MSGS),\n/* harmony export */   BaseBlockTracker: () => (/* binding */ BaseBlockTracker),\n/* harmony export */   BaseController: () => (/* binding */ BaseController),\n/* harmony export */   BaseCurrencyController: () => (/* binding */ BaseCurrencyController),\n/* harmony export */   BaseEmbedController: () => (/* binding */ BaseEmbedController),\n/* harmony export */   BaseKeyringController: () => (/* binding */ BaseKeyringController),\n/* harmony export */   BasePreferencesController: () => (/* binding */ BasePreferencesController),\n/* harmony export */   BaseTransactionStateManager: () => (/* binding */ BaseTransactionStateManager),\n/* harmony export */   BroadcastChannelHandler: () => (/* binding */ BroadcastChannelHandler),\n/* harmony export */   COMMUNICATION_JRPC_METHODS: () => (/* binding */ COMMUNICATION_JRPC_METHODS),\n/* harmony export */   COMMUNICATION_NOTIFICATIONS: () => (/* binding */ COMMUNICATION_NOTIFICATIONS),\n/* harmony export */   CommunicationWindowManager: () => (/* binding */ CommunicationWindowManager),\n/* harmony export */   DEFAULT_PREFERENCES: () => (/* binding */ DEFAULT_PREFERENCES),\n/* harmony export */   FEATURES_CONFIRM_WINDOW: () => (/* binding */ FEATURES_CONFIRM_WINDOW),\n/* harmony export */   FEATURES_DEFAULT_POPUP_WINDOW: () => (/* binding */ FEATURES_DEFAULT_POPUP_WINDOW),\n/* harmony export */   FEATURES_DEFAULT_WALLET_WINDOW: () => (/* binding */ FEATURES_DEFAULT_WALLET_WINDOW),\n/* harmony export */   FEATURES_PROVIDER_CHANGE_WINDOW: () => (/* binding */ FEATURES_PROVIDER_CHANGE_WINDOW),\n/* harmony export */   LOGIN_PROVIDER: () => (/* binding */ LOGIN_PROVIDER),\n/* harmony export */   PAYMENT_PROVIDER: () => (/* binding */ PAYMENT_PROVIDER),\n/* harmony export */   POPUP_LOADED: () => (/* binding */ POPUP_LOADED),\n/* harmony export */   POPUP_RESULT: () => (/* binding */ POPUP_RESULT),\n/* harmony export */   PROVIDER_JRPC_METHODS: () => (/* binding */ PROVIDER_JRPC_METHODS),\n/* harmony export */   PROVIDER_NOTIFICATIONS: () => (/* binding */ PROVIDER_NOTIFICATIONS),\n/* harmony export */   PopupHandler: () => (/* binding */ PopupHandler),\n/* harmony export */   PopupStoreChannel: () => (/* binding */ PopupStoreChannel),\n/* harmony export */   PopupWithBcHandler: () => (/* binding */ PopupWithBcHandler),\n/* harmony export */   RedirectHandler: () => (/* binding */ RedirectHandler),\n/* harmony export */   SETUP_COMPLETE: () => (/* binding */ SETUP_COMPLETE),\n/* harmony export */   StreamWindow: () => (/* binding */ StreamWindow),\n/* harmony export */   TRANSACTION_TYPES: () => (/* binding */ TRANSACTION_TYPES),\n/* harmony export */   TX_EVENTS: () => (/* binding */ TX_EVENTS),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   UserError: () => (/* binding */ UserError),\n/* harmony export */   addressSlicer: () => (/* binding */ addressSlicer),\n/* harmony export */   broadcastChannelOptions: () => (/* binding */ broadcastChannelOptions),\n/* harmony export */   concatSig: () => (/* binding */ concatSig),\n/* harmony export */   createChangeProviderMiddlewareMiddleware: () => (/* binding */ createChangeProviderMiddlewareMiddleware),\n/* harmony export */   createCommunicationMiddleware: () => (/* binding */ createCommunicationMiddleware),\n/* harmony export */   createEventEmitterProxy: () => (/* binding */ createEventEmitterProxy),\n/* harmony export */   createFetchConfigFromReq: () => (/* binding */ createFetchConfigFromReq),\n/* harmony export */   createFetchMiddleware: () => (/* binding */ createFetchMiddleware),\n/* harmony export */   createGenericJRPCMiddleware: () => (/* binding */ createGenericJRPCMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createOriginMiddleware: () => (/* binding */ createOriginMiddleware),\n/* harmony export */   createRandomId: () => (/* binding */ createRandomId),\n/* harmony export */   createSwappableProxy: () => (/* binding */ createSwappableProxy),\n/* harmony export */   createTopupMiddleware: () => (/* binding */ createTopupMiddleware),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   formatSmallNumbers: () => (/* binding */ formatSmallNumbers),\n/* harmony export */   formatTime: () => (/* binding */ formatTime),\n/* harmony export */   getCustomDeviceInfo: () => (/* binding */ getCustomDeviceInfo),\n/* harmony export */   getHeaders: () => (/* binding */ getHeaders),\n/* harmony export */   getPopupFeatures: () => (/* binding */ getPopupFeatures),\n/* harmony export */   getTxStatusText: () => (/* binding */ getTxStatusText),\n/* harmony export */   handleRedirectParameters: () => (/* binding */ handleRedirectParameters),\n/* harmony export */   hashMessage: () => (/* binding */ hashMessage),\n/* harmony export */   intToHex: () => (/* binding */ intToHex),\n/* harmony export */   padWithZeroes: () => (/* binding */ padWithZeroes),\n/* harmony export */   randomId: () => (/* binding */ randomId),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   significantDigits: () => (/* binding */ significantDigits),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   timeout: () => (/* binding */ timeout$1),\n/* harmony export */   transactionMatchesNetwork: () => (/* binding */ transactionMatchesNetwork)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @metamask/rpc-errors */ \"(ssr)/./node_modules/@metamask/rpc-errors/dist/index.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @toruslabs/broadcast-channel */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js\");\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/bowser/src/bowser.js\");\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/cloneDeep */ \"(ssr)/./node_modules/lodash/cloneDeep.js\");\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var lodash_pickBy__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/pickBy */ \"(ssr)/./node_modules/lodash/pickBy.js\");\n/* harmony import */ var lodash_pickBy__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(lodash_pickBy__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var lodash_omitBy__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/omitBy */ \"(ssr)/./node_modules/lodash/omitBy.js\");\n/* harmony import */ var lodash_omitBy__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_omitBy__WEBPACK_IMPORTED_MODULE_11__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Controller class that provides configuration, state management, and subscriptions\n */ class BaseController extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter {\n    /**\n   * Creates a BaseController instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */ constructor(_ref){\n        let { config = {}, state = {} } = _ref;\n        super();\n        // Use assign since generics can't be spread: https://git.io/vpRhY\n        /**\n     * Default options used to configure this controller\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultConfig\", {});\n        /**\n     * Default state set on this controller\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultState\", {});\n        /**\n     * Determines if listeners are notified of state changes\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"disabled\", false);\n        /**\n     * Name of this controller used during composition\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"BaseController\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initialConfig\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initialState\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"internalConfig\", this.defaultConfig);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"internalState\", this.defaultState);\n        this.initialState = state;\n        this.initialConfig = config;\n    }\n    /**\n   * Retrieves current controller configuration options\n   *\n   * @returns - Current configuration\n   */ get config() {\n        return this.internalConfig;\n    }\n    /**\n   * Retrieves current controller state\n   *\n   * @returns - Current state\n   */ get state() {\n        return this.internalState;\n    }\n    /**\n   * Updates controller configuration\n   *\n   * @param config - New configuration options\n   * @param overwrite - Overwrite config instead of merging\n   * @param fullUpdate - Boolean that defines if the update is partial or not\n   */ configure(config) {\n        let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        let fullUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        if (fullUpdate) {\n            this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n            for(const key in this.internalConfig){\n                if (typeof this.internalConfig[key] !== \"undefined\") {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    this[key] = this.internalConfig[key];\n                }\n            }\n        } else {\n            for(const key in config){\n                /* istanbul ignore else */ if (typeof this.internalConfig[key] !== \"undefined\") {\n                    this.internalConfig[key] = config[key];\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n    /**\n   * Updates controller state\n   *\n   * @param state - New state\n   * @param overwrite - Overwrite state instead of merging\n   */ update(state) {\n        let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        this.internalState = overwrite ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, state) : _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.internalState), state);\n        this.emit(\"store\", this.internalState);\n    }\n    /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns - This controller instance\n   */ initialize() {\n        this.internalState = this.defaultState;\n        this.internalConfig = this.defaultConfig;\n        this.configure(this.initialConfig);\n        this.update(this.initialState);\n        return this;\n    }\n}\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue)=>accumulator + currentValue;\nconst blockTrackerEvents = [\n    \"sync\",\n    \"latest\"\n];\nclass BaseBlockTracker extends BaseController {\n    constructor(_ref){\n        let { config = {}, state = {} } = _ref;\n        super({\n            config,\n            state\n        });\n        // config\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"BaseBlockTracker\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_blockResetTimeout\", void 0);\n        this.defaultState = {\n            _currentBlock: {\n                idempotencyKey: \"\"\n            },\n            _isRunning: false\n        };\n        this.defaultConfig = {\n            blockResetDuration: 20 * sec\n        };\n        this.initialize();\n        // bind functions for internal use\n        this._onNewListener = this._onNewListener.bind(this);\n        this._onRemoveListener = this._onRemoveListener.bind(this);\n        this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n        // listen for handler changes\n        this._setupInternalEvents();\n    }\n    isRunning() {\n        return this.state._isRunning;\n    }\n    getCurrentBlock() {\n        return this.state._currentBlock;\n    }\n    async getLatestBlock() {\n        // return if available\n        if (this.state._currentBlock.idempotencyKey) {\n            return this.state._currentBlock;\n        }\n        // wait for a new latest block\n        const latestBlock = await new Promise((resolve)=>{\n            this.once(\"latest\", (block)=>{\n                if (block) {\n                    resolve(block);\n                }\n            });\n        });\n        // return newly set current block\n        return latestBlock;\n    }\n    // dont allow module consumer to remove our internal event listeners\n    removeAllListeners(eventName) {\n        if (eventName) {\n            super.removeAllListeners(eventName);\n        } else {\n            super.removeAllListeners();\n        }\n        // re-add internal events\n        this._setupInternalEvents();\n        // trigger stop check just in case\n        this._onRemoveListener();\n        return this;\n    }\n    /**\n   * To be implemented in subclass.\n   */ _start() {\n    // default behavior is noop\n    }\n    /**\n   * To be implemented in subclass.\n   */ _end() {\n    // default behavior is noop\n    }\n    _newPotentialLatest(newBlock) {\n        const currentBlock = this.state._currentBlock;\n        // only update if block number is higher\n        if (currentBlock && newBlock.idempotencyKey === currentBlock.idempotencyKey) {\n            return;\n        }\n        this._setCurrentBlock(newBlock);\n    }\n    _setupInternalEvents() {\n        // first remove listeners for idempotency\n        this.removeListener(\"newListener\", this._onNewListener);\n        this.removeListener(\"removeListener\", this._onRemoveListener);\n        // then add them\n        this.on(\"removeListener\", this._onRemoveListener);\n        this.on(\"newListener\", this._onNewListener);\n    }\n    _onNewListener() {\n        this._maybeStart();\n    }\n    _onRemoveListener() {\n        // `removeListener` is called *after* the listener is removed\n        if (this._getBlockTrackerEventCount() > 0) {\n            return;\n        }\n        this._maybeEnd();\n    }\n    _maybeStart() {\n        if (this.state._isRunning) {\n            return;\n        }\n        this.state._isRunning = true;\n        // cancel setting latest block to stale\n        this._cancelBlockResetTimeout();\n        this._start();\n    }\n    _maybeEnd() {\n        if (!this.state._isRunning) {\n            return;\n        }\n        this.state._isRunning = false;\n        this._setupBlockResetTimeout();\n        this._end();\n    }\n    _getBlockTrackerEventCount() {\n        return blockTrackerEvents.map((eventName)=>this.listenerCount(eventName)).reduce(calculateSum);\n    }\n    _setCurrentBlock(newBlock) {\n        const oldBlock = this.state._currentBlock;\n        this.update({\n            _currentBlock: newBlock\n        });\n        this.emit(\"latest\", newBlock);\n        this.emit(\"sync\", {\n            oldBlock,\n            newBlock\n        });\n    }\n    _setupBlockResetTimeout() {\n        // clear any existing timeout\n        this._cancelBlockResetTimeout();\n        // clear latest block when stale\n        this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this.config.blockResetDuration);\n        // nodejs - dont hold process open\n        if (this._blockResetTimeout.unref) {\n            this._blockResetTimeout.unref();\n        }\n    }\n    _cancelBlockResetTimeout() {\n        if (this._blockResetTimeout) {\n            clearTimeout(this._blockResetTimeout);\n        }\n    }\n    _resetCurrentBlock() {\n        this.update({\n            _currentBlock: {\n                idempotencyKey: \"\"\n            }\n        });\n    }\n}\nconst filterNoop = ()=>true;\nconst internalEvents = [\n    \"newListener\",\n    \"removeListener\"\n];\nconst externalEventFilter = (name)=>!internalEvents.includes(name);\nfunction getRawListeners(eventEmitter, name) {\n    // prefer native\n    return typeof eventEmitter.rawListeners !== \"undefined\" ? eventEmitter.rawListeners(name) : eventEmitter.listeners(name);\n}\nfunction createEventEmitterProxy(initialTarget, opts) {\n    // parse options\n    const finalOpts = opts || {};\n    let eventFilter = finalOpts.eventFilter || filterNoop;\n    if (typeof eventFilter === \"string\" && eventFilter === \"skipInternal\") eventFilter = externalEventFilter;\n    if (typeof eventFilter !== \"function\") throw new Error(\"createEventEmitterProxy - Invalid eventFilter\");\n    let target = initialTarget;\n    let setTarget = (newTarget)=>{\n        const oldTarget = target;\n        target = newTarget;\n        oldTarget.eventNames().filter(eventFilter).forEach((name)=>{\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            getRawListeners(oldTarget, name).forEach((handler)=>newTarget.on(name, handler));\n        });\n        // remove old listeners\n        oldTarget.removeAllListeners();\n    };\n    const proxy = new Proxy({}, {\n        get: (_, name)=>{\n            // override `setTarget` access\n            if (name === \"setTarget\") return setTarget;\n            return target[name];\n        },\n        set: (_, name, value)=>{\n            // allow `setTarget` overrides\n            if (name === \"setTarget\") {\n                setTarget = value;\n                return true;\n            }\n            target[name] = value;\n            return true;\n        }\n    });\n    return proxy;\n}\nfunction createSwappableProxy(initialTarget) {\n    let target = initialTarget;\n    let setTarget = (newTarget)=>{\n        target = newTarget;\n    };\n    const proxy = new Proxy({}, {\n        get: (_, name)=>{\n            // override `setTarget` access\n            if (name === \"setTarget\") return setTarget;\n            return target[name];\n        },\n        set: (_, name, value)=>{\n            // allow `setTarget` overrides\n            if (name === \"setTarget\") {\n                setTarget = value;\n                return true;\n            }\n            target[name] = value;\n            return true;\n        }\n    });\n    return proxy;\n}\n// every ten minutes\nconst POLLING_INTERVAL = 600000;\nclass BaseCurrencyController extends BaseController {\n    constructor(_ref){\n        let { config = {}, state } = _ref;\n        super({\n            config,\n            state\n        });\n        this.defaultState = {\n            currentCurrency: \"usd\",\n            conversionRate: 0,\n            conversionDate: \"N/A\",\n            nativeCurrency: \"ETH\"\n        };\n        this.defaultConfig = {\n            pollInterval: POLLING_INTERVAL\n        };\n        this.initialize();\n    }\n    //\n    // PUBLIC METHODS\n    //\n    getNativeCurrency() {\n        return this.state.nativeCurrency;\n    }\n    setNativeCurrency(nativeCurrency) {\n        this.update({\n            nativeCurrency,\n            ticker: nativeCurrency\n        });\n    }\n    getCurrentCurrency() {\n        return this.state.currentCurrency;\n    }\n    setCurrentCurrency(currentCurrency) {\n        this.update({\n            currentCurrency\n        });\n    }\n    /**\n   * A getter for the conversionRate property\n   *\n   * @returns The conversion rate from ETH to the selected currency.\n   *\n   */ getConversionRate() {\n        return this.state.conversionRate;\n    }\n    setConversionRate(conversionRate) {\n        this.update({\n            conversionRate\n        });\n    }\n    /**\n   * A getter for the conversionDate property\n   *\n   * @returns The date at which the conversion rate was set. Expressed in milliseconds since midnight of\n   * January 1, 1970\n   *\n   */ getConversionDate() {\n        return this.state.conversionDate;\n    }\n    setConversionDate(conversionDate) {\n        this.update({\n            conversionDate\n        });\n    }\n}\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n    height: 660,\n    width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n    height: 740,\n    width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n    height: 700,\n    width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n    height: 700,\n    width: 450\n};\nconst POPUP_LOADED = \"popup_loaded\";\nconst POPUP_RESULT = \"popup_result\";\nconst SETUP_COMPLETE = \"setup_complete\";\nconst ACTIVITY_ACTION_ALL = \"walletActivity.allTransactions\";\nconst ACTIVITY_ACTION_SEND = \"walletActivity.send\";\nconst ACTIVITY_ACTION_BURN = \"walletActivity.burn\";\nconst ACTIVITY_ACTION_RECEIVE = \"walletActivity.receive\";\nconst ACTIVITY_ACTION_TOPUP = \"walletActivity.topup\";\nconst ACTIVITY_ACTION_CREATE_TRUSTLINE = \"walletActivity.createTrustline\";\nconst ACTIVITY_ACTION_REMOVE_TRUSTLINE = \"walletActivity.removeTrustline\";\nconst ACTIVITY_ACTION_CREATE_NFT_OFFER = \"walletActivity.createNftOffer\";\nconst ACTIVITY_ACTION_ACCEPT_NFT_OFFER = \"walletActivity.acceptNftOffer\";\nconst ACTIVITY_ACTION_CANCEL_NFT_OFFER = \"walletActivity.cancelNftOffer\";\nconst ACTIVITY_PERIOD_ALL = \"walletActivity.all\";\nconst ACTIVITY_PERIOD_WEEK_ONE = \"walletActivity.lastOneWeek\";\nconst ACTIVITY_PERIOD_MONTH_ONE = \"walletActivity.lastOneMonth\";\nconst ACTIVITY_PERIOD_MONTH_SIX = \"walletActivity.lastSixMonts\";\nconst ACTIVITY_STATUS_SUCCESSFUL = \"walletActivity.successful\";\nconst ACTIVITY_STATUS_UNSUCCESSFUL = \"walletActivity.unsuccessful\";\nconst ACTIVITY_STATUS_PENDING = \"walletActivity.pending\";\nconst ACTIVITY_STATUS_CANCELLED = \"walletActivity.cancelled\";\nconst ACTIVITY_STATUS_CANCELLING = \"walletActivity.cancelling\";\nconst COMMUNICATION_NOTIFICATIONS = {\n    IFRAME_STATUS: \"iframe_status\",\n    // Tell embed to create the window\n    CREATE_WINDOW: \"create_window\",\n    // Tell embed to close the window\n    CLOSE_WINDOW: \"close_window\",\n    USER_LOGGED_IN: \"user_logged_in\",\n    USER_LOGGED_OUT: \"user_logged_out\"\n};\nconst COMMUNICATION_JRPC_METHODS = {\n    LOGOUT: \"logout\",\n    WALLET_INSTANCE_ID: \"wallet_instance_id\",\n    USER_INFO: \"user_info\",\n    SET_PROVIDER: \"set_provider\",\n    TOPUP: \"topup\",\n    IFRAME_STATUS: \"iframe_status\",\n    // embed has opened the window as requested\n    OPENED_WINDOW: \"opened_window\",\n    // user has closed the window from embed's side\n    CLOSED_WINDOW: \"closed_window\",\n    WINDOW_BLOCKED: \"window_blocked\",\n    GET_PROVIDER_STATE: \"get_provider_state\",\n    LOGIN_WITH_PRIVATE_KEY: \"login_with_private_key\",\n    SHOW_WALLET_CONNECT: \"show_wallet_connect\",\n    SHOW_CHECKOUT: \"show_checkout\",\n    SHOW_WALLET_UI: \"show_wallet_ui\"\n};\nconst PROVIDER_JRPC_METHODS = {\n    GET_PROVIDER_STATE: \"wallet_get_provider_state\"\n};\nconst PROVIDER_NOTIFICATIONS = {\n    ACCOUNTS_CHANGED: \"wallet_accounts_changed\",\n    CHAIN_CHANGED: \"wallet_chain_changed\",\n    UNLOCK_STATE_CHANGED: \"wallet_unlock_state_changed\"\n};\nconst BROADCAST_CHANNELS = {\n    REDIRECT_CHANNEL: \"redirect_channel\",\n    PROVIDER_CHANGE_CHANNEL: \"torus_provider_change_channel\",\n    TRANSACTION_CHANNEL: \"torus_channel\",\n    MESSAGE_CHANNEL: \"torus_message_channel\",\n    WALLET_LOGOUT_CHANNEL: \"wallet_logout_channel\",\n    WALLET_SELECTED_ADDRESS_CHANNEL: \"wallet_selected_address_channel\",\n    WALLET_NETWORK_CHANGE_CHANNEL: \"wallet_network_change_channel\",\n    WALLET_ACCOUNT_IMPORT_CHANNEL: \"wallet_account_import_channel\",\n    THEME_CHANGE: \"theme_change_channel\",\n    TOP_UP_CHANNEL: \"top_up_channel\"\n};\nconst BROADCAST_CHANNELS_MSGS = {\n    LOGOUT: \"logout\",\n    ACCOUNT_IMPORTED: \"account_imported\",\n    SELECTED_ADDRESS_CHANGE: \"selected_address_change\",\n    NETWORK_CHANGE: \"network_change\",\n    SET_THEME: \"set_theme\"\n};\nfunction createChangeProviderMiddlewareMiddleware(_ref) {\n    let { changeProvider } = _ref;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== COMMUNICATION_JRPC_METHODS.SET_PROVIDER) return next();\n        if (!changeProvider) throw new Error(\"CommunicationMiddleware - opts.changeProvider not provided\");\n        response.result = await changeProvider(request);\n    });\n}\nfunction createTopupMiddleware(_ref2) {\n    let { topup } = _ref2;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== COMMUNICATION_JRPC_METHODS.TOPUP) return next();\n        if (!topup) throw new Error(\"CommunicationMiddleware - opts.topup not provided\");\n        response.result = await topup(request);\n    });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== targetMethod) return next();\n        if (!handler) throw new Error(`CommunicationMiddleware - ${targetMethod} not provided`);\n        const result = await handler(request);\n        if (!result) {\n            return next();\n        }\n        response.result = result;\n        return undefined;\n    });\n}\nfunction createCommunicationMiddleware(providerHandlers) {\n    const { getUserInfo, getWalletInstanceId, topup, logout, changeProvider, setIFrameStatus, handleWindowRpc, getProviderState, loginWithPrivateKey, showWalletConnect, showCheckout, showWalletUi, showWindowBlockAlert } = providerHandlers;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.mergeMiddleware)([\n        createChangeProviderMiddlewareMiddleware({\n            changeProvider\n        }),\n        createTopupMiddleware({\n            topup\n        }),\n        (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createScaffoldMiddleware)({\n            [COMMUNICATION_JRPC_METHODS.LOGOUT]: logout,\n            [COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID]: getWalletInstanceId,\n            [COMMUNICATION_JRPC_METHODS.USER_INFO]: getUserInfo,\n            [COMMUNICATION_JRPC_METHODS.IFRAME_STATUS]: setIFrameStatus,\n            // Do this in the orchestrator because communicationWindowManager needs to be passed into PopupHandlers\n            [COMMUNICATION_JRPC_METHODS.OPENED_WINDOW]: handleWindowRpc,\n            [COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW]: handleWindowRpc,\n            [COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE]: getProviderState,\n            [COMMUNICATION_JRPC_METHODS.SHOW_WALLET_CONNECT]: showWalletConnect,\n            [COMMUNICATION_JRPC_METHODS.SHOW_CHECKOUT]: showCheckout,\n            [COMMUNICATION_JRPC_METHODS.SHOW_WALLET_UI]: showWalletUi,\n            [COMMUNICATION_JRPC_METHODS.WINDOW_BLOCKED]: showWindowBlockAlert\n        }),\n        createGenericJRPCMiddleware(COMMUNICATION_JRPC_METHODS.LOGIN_WITH_PRIVATE_KEY, loginWithPrivateKey)\n    ]);\n}\nclass BaseEmbedController extends BaseController {\n    constructor(_ref){\n        let { config = {}, state } = _ref;\n        super({\n            config,\n            state\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_communicationProviderProxy\", void 0);\n        this.defaultState = {\n            buttonPosition: \"bottom-right\",\n            isIFrameFullScreen: true,\n            apiKey: \"torus-default\",\n            oauthModalVisibility: false,\n            loginInProgress: false,\n            dappMetadata: {\n                name: \"\",\n                icon: \"\"\n            }\n        };\n        this.initialize();\n    }\n    /**\n   * Called by orchestrator once while initializing the class\n   * @param handlers - JRPC handlers for provider\n   * @returns - provider - Returns the providerProxy\n   */ initializeProvider(handlers) {\n        const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.JRPCEngine();\n        const communicationMiddleware = createCommunicationMiddleware(handlers);\n        engine.push(communicationMiddleware);\n        const communicationProvider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.providerFromEngine)(engine);\n        this.setCommunicationProvider(communicationProvider);\n    }\n    setCommunicationProvider(communicationProvider) {\n        if (this._communicationProviderProxy) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            this._communicationProviderProxy.setTarget(communicationProvider);\n        } else {\n            this._communicationProviderProxy = createSwappableProxy(communicationProvider);\n        }\n    }\n}\nclass CommunicationWindowManager extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter {\n    constructor(){\n        super(...arguments);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleWindowRpc\", (request, response, next, end)=>{\n            const { method, params } = request;\n            if (method === COMMUNICATION_JRPC_METHODS.OPENED_WINDOW) {\n                const { windowId } = params;\n                // I've been informed that a window has been opened\n                this.emit(`${windowId}:opened`);\n                response.result = true;\n                end();\n            } else if (method === COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW) {\n                const { windowId } = params;\n                // I've been informed that a window has been closed\n                this.emit(`${windowId}:closed`);\n                response.result = true;\n                end();\n            } else {\n                next();\n            }\n        });\n    }\n}\n/**\n * State change callbacks\n */ /**\n * Base controller configuration\n */ /**\n * Base state representation\n */ const LOGIN_PROVIDER = {\n    GOOGLE: \"google\",\n    FACEBOOK: \"facebook\",\n    REDDIT: \"reddit\",\n    DISCORD: \"discord\",\n    TWITCH: \"twitch\",\n    APPLE: \"apple\",\n    LINE: \"line\",\n    GITHUB: \"github\",\n    KAKAO: \"kakao\",\n    LINKEDIN: \"linkedin\",\n    TWITTER: \"twitter\",\n    WEIBO: \"weibo\",\n    WECHAT: \"wechat\",\n    EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\n/**\n * {@label loginProviderType}\n */ const PAYMENT_PROVIDER = {\n    MOONPAY: \"moonpay\",\n    WYRE: \"wyre\",\n    RAMPNETWORK: \"rampnetwork\",\n    XANPOOL: \"xanpool\",\n    MERCURYO: \"mercuryo\",\n    TRANSAK: \"transak\"\n};\nconst getTxStatusText = (txStatus)=>{\n    switch(txStatus){\n        case \"rejected\":\n        case \"unapproved\":\n        case \"failed\":\n            return ACTIVITY_STATUS_UNSUCCESSFUL;\n        case \"confirmed\":\n            return ACTIVITY_STATUS_SUCCESSFUL;\n        case \"submitted\":\n            return ACTIVITY_STATUS_PENDING;\n        case \"cancelled\":\n            return ACTIVITY_STATUS_CANCELLED;\n        default:\n            return \"\";\n    }\n};\n/**\n * General utility functions\n */ function intToHex(i) {\n    const hex = i.toString(16);\n    return `0x${hex}`;\n}\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */ const randomId = ()=>Math.random().toString(36).slice(2);\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */ function padWithZeroes(hexString, targetLength) {\n    if (hexString !== \"\" && !/^[a-f0-9]+$/iu.test(hexString)) {\n        throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);\n    }\n    if (targetLength < 0) {\n        throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);\n    }\n    return String.prototype.padStart.call(hexString, targetLength, \"0\");\n}\n/**\n * Concatenate an extended ECDSA signature into a hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature.\n */ function concatSig(v, r, s) {\n    const rSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.fromSigned)(r);\n    const sSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.fromSigned)(s);\n    const vSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(v);\n    const rStr = padWithZeroes(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.toUnsigned)(rSig)).toString(\"hex\"), 64);\n    const sStr = padWithZeroes(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.toUnsigned)(sSig)).toString(\"hex\"), 64);\n    const vStr = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.bigIntToHex)(vSig));\n    return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.addHexPrefix)(rStr.concat(sStr, vStr));\n}\nfunction timeout$1(duration) {\n    return new Promise((resolve)=>{\n        const timeoutRef = window.setTimeout(()=>{\n            resolve();\n            window.clearTimeout(timeoutRef);\n        }, duration);\n    });\n}\nconst getHeaders = (jwt)=>{\n    return {\n        headers: {\n            Authorization: `Bearer ${jwt}`,\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n};\n/**\n * Text/number formatting utilities\n */ const formatSmallNumbers = function(number) {\n    let currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"usd\";\n    let noTilde = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const finalNumber = bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber.isBigNumber(number) ? number.toNumber() : number;\n    if (!Number.isFinite(finalNumber)) return \"\";\n    const value = currency.toLowerCase() === \"usd\" ? parseFloat(Number(finalNumber).toFixed(2)) : parseFloat(Number(finalNumber).toFixed(5));\n    const tilde = value > 0 ? \"~ \" : \"\";\n    return `${currency.toLowerCase() === \"usd\" || noTilde ? \"\" : tilde}${Number(value)} ${currency.toUpperCase()}`;\n};\nconst addressSlicer = function(address) {\n    let sliceLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    if (!address) return \"\";\n    if (address.length < 11) {\n        return address;\n    }\n    if (typeof address !== \"string\") return \"\";\n    return `${address.slice(0, sliceLength)}...${address.slice(-sliceLength)}`;\n};\nconst significantDigits = function(number) {\n    let perc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let length_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    let input = !bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber.isBigNumber(number) ? new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(number) : number;\n    if (input.isZero()) return input;\n    if (perc) {\n        input = input.times(new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(100));\n    }\n    let depth;\n    if (input.gte(new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(1))) {\n        depth = length_;\n    } else {\n        depth = length_ - 1 + Math.ceil(Math.log10(new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(\"1\").div(input).toNumber()));\n    }\n    const shift = new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(10).pow(new bignumber_js__WEBPACK_IMPORTED_MODULE_4__.BigNumber(depth));\n    const roundedNumber = Math.round(shift.times(input).toNumber()) / shift.toNumber();\n    return roundedNumber;\n};\nconst formatDate = (inputDate)=>{\n    const monthList = [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\"\n    ];\n    const date = new Date(inputDate);\n    const day = date.getDate();\n    const month = monthList[date.getMonth()];\n    const year = date.getFullYear();\n    return `${day} ${month} ${year}`;\n};\nconst formatTime = (time)=>{\n    return new Date(time).toTimeString().slice(0, 8);\n};\n/**\n * Network utilities\n */ const transactionMatchesNetwork = (transaction, chainId)=>{\n    if (typeof transaction.chainId !== \"undefined\") {\n        return transaction.chainId === chainId;\n    }\n    return false;\n};\n/**\n * Signing utils\n */ const hashMessage = (message)=>{\n    const bufferedMessage = Buffer.from(message, \"utf8\");\n    const el = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.hashPersonalMessage)(bufferedMessage);\n    return Buffer.from(el);\n};\nconst signMessage = async (privateKey, data)=>{\n    const privKey = Buffer.from(privateKey, \"hex\");\n    const message = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(data);\n    const msgSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.ecsign)(Buffer.from(message, \"hex\"), privKey);\n    const rawMsgSig = concatSig(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.bigIntToBytes)(msgSig.v)), Buffer.from(msgSig.r), Buffer.from(msgSig.s));\n    return rawMsgSig;\n};\n/**\n * popup handler utils\n */ function getPopupFeatures(_ref) {\n    let { width: w, height: h } = _ref;\n    // Fixes dual-screen position                             Most browsers      Firefox\n    const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n    const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n    const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n    const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n    const systemZoom = 1; // No reliable estimate\n    const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n    const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n    const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n    return features;\n}\nconst broadcastChannelOptions = {\n    type: \"server\",\n    // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n    webWorkerSupport: false // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\nfunction getCustomDeviceInfo() {\n    var _navigator;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.brave) {\n        return {\n            browser: \"Brave\"\n        };\n    }\n}\nclass UserError extends Error {\n}\nconst handleRedirectParameters = (hash, queryParameters)=>{\n    const hashParameters = {};\n    const hashUrl = new URL(`${window.location.origin}/?${hash.slice(1)}`);\n    hashUrl.searchParams.forEach((value, key)=>{\n        hashParameters[key] = value;\n    });\n    let instanceParameters = {};\n    let error = \"\";\n    if (!queryParameters.windowId) {\n        if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n            instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n            error = hashParameters.error_description || hashParameters.error || error;\n        } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n            instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n            if (queryParameters.error) error = queryParameters.error;\n        }\n    }\n    return {\n        error,\n        instanceParameters,\n        hashParameters\n    };\n};\nfunction sleep(ms) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, ms);\n    });\n}\nclass BaseKeyringController extends BaseController {\n    constructor(_ref){\n        var _state$wallets;\n        let { config = {}, state } = _ref;\n        super({\n            config,\n            state\n        });\n        this.defaultState = {\n            wallets: (_state$wallets = state.wallets) !== null && _state$wallets !== void 0 ? _state$wallets : []\n        };\n        this.initialize();\n    }\n    // for signing auth message\n    async signAuthMessage(address, message) {\n        const keyring = this.state.wallets.find((x)=>x.address === address);\n        if (!keyring) {\n            throw new Error(\"key does not exist\");\n        }\n        const hashedMessage = hashMessage(message).toString(\"hex\");\n        const rawMessageSig = await signMessage(keyring.privateKey, hashedMessage);\n        return rawMessageSig;\n    }\n}\nconst RETRIABLE_ERRORS = [\n    // ignore server overload errors\n    \"Gateway timeout\",\n    \"ETIMEDOUT\",\n    // ignore server sent html error pages\n    // or truncated json responses\n    \"failed to parse response body\",\n    // ignore errors where http req failed to establish\n    \"Failed to fetch\"\n];\nfunction checkForHttpErrors(fetchRes) {\n    // check for errors\n    switch(fetchRes.status){\n        case 405:\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.methodNotFound();\n        case 418:\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal({\n                message: `Request is being rate limited.`\n            });\n        case 503:\n        case 504:\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal({\n                message: `Gateway timeout. The request took too long to process.` + `This can happen when querying over too wide a block range.`\n            });\n    }\n}\nfunction timeout(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, duration);\n    });\n}\nfunction parseResponse(fetchRes, body) {\n    // check for error code\n    if (fetchRes.status !== 200) {\n        throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal({\n            message: `Non-200 status code: '${fetchRes.status}'`,\n            data: body\n        });\n    }\n    // check for rpc error\n    if (body.error) {\n        throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal({\n            data: body.error\n        });\n    }\n    // return successful result\n    return body.result;\n}\nfunction createFetchConfigFromReq(_ref) {\n    let { req, rpcTarget, originHttpHeaderKey } = _ref;\n    const parsedUrl = new URL(rpcTarget);\n    // prepare payload\n    // copy only canonical json rpc properties\n    const payload = {\n        id: req.id,\n        jsonrpc: req.jsonrpc,\n        method: req.method,\n        params: req.params\n    };\n    // extract 'origin' parameter from request\n    const originDomain = req.origin;\n    // serialize request body\n    const serializedPayload = JSON.stringify(payload);\n    // configure fetch params\n    const fetchParams = {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        },\n        body: serializedPayload\n    };\n    // optional: add request origin as header\n    if (originHttpHeaderKey && originDomain) {\n        fetchParams.headers[originHttpHeaderKey] = originDomain;\n    }\n    return {\n        fetchUrl: parsedUrl.href,\n        fetchParams\n    };\n}\nfunction createFetchMiddleware(_ref2) {\n    let { rpcTarget, originHttpHeaderKey } = _ref2;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (req, res, _next)=>{\n        const { fetchUrl, fetchParams } = createFetchConfigFromReq({\n            req,\n            rpcTarget,\n            originHttpHeaderKey\n        });\n        // attempt request multiple times\n        const maxAttempts = 5;\n        const retryInterval = 1000;\n        for(let attempt = 0; attempt < maxAttempts; attempt++){\n            try {\n                const fetchRes = await fetch(fetchUrl, fetchParams);\n                // check for http errrors\n                checkForHttpErrors(fetchRes);\n                // parse response body\n                const fetchBody = await fetchRes.json();\n                const result = parseResponse(fetchRes, fetchBody);\n                // set result and exit retry loop\n                res.result = result;\n                return;\n            } catch (err) {\n                const errMsg = err.toString();\n                const isRetriable = RETRIABLE_ERRORS.some((phrase)=>errMsg.includes(phrase));\n                // re-throw error if not retriable\n                if (!isRetriable) {\n                    throw err;\n                }\n            }\n            // delay before retrying\n            await timeout(retryInterval);\n        }\n    });\n}\nfunction createLoggerMiddleware(options) {\n    return function loggerMiddleware(request, response, next) {\n        next((callback)=>{\n            if (response.error) {\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().warn(\"Error in RPC response:\\n\", response);\n            }\n            if (request.isTorusInternal) return;\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(`RPC (${options.origin}):`, request, \"->\", response);\n            callback();\n        });\n    };\n}\nfunction createOriginMiddleware(options) {\n    return function originMiddleware(request, _, next) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        request.origin = options.origin;\n        next();\n    };\n}\nconst createRandomId = ()=>Math.random().toString(36).substring(2);\n/**\n * Custom network properties\n * @example isEIP1559Compatible: true etc.\n */ /**\n *\n */ class BroadcastChannelHandler {\n    constructor(channelPrefix){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"bc\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"channel\", void 0);\n        const queryParameters = new URLSearchParams(window.location.search);\n        const instanceId = queryParameters.get(\"instanceId\");\n        this.channel = `${channelPrefix}_${instanceId}`;\n        this.bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(this.channel, broadcastChannelOptions);\n    }\n    getMessageFromChannel() {\n        return new Promise((resolve, reject)=>{\n            this.bc.addEventListener(\"message\", async (ev)=>{\n                this.bc.close();\n                if (ev.error) {\n                    reject(ev.error);\n                } else {\n                    resolve(ev.data);\n                }\n            });\n            this.bc.postMessage({\n                data: {\n                    type: POPUP_LOADED\n                }\n            });\n        });\n    }\n}\nclass StreamWindow extends BaseController {\n    constructor(_ref){\n        let { config, state = {} } = _ref;\n        super({\n            config,\n            state\n        });\n        // if window has been closed by users\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"closed\", false);\n        this.initialize();\n    }\n    async open() {\n        return new Promise((resolve, reject)=>{\n            const { communicationEngine, communicationWindowManager } = this.config;\n            let popupSuccess = false;\n            communicationWindowManager.once(`${this.state.windowId}:closed`, ()=>{\n                this.closed = true;\n            });\n            // Window is not open yet\n            if (!this.state.windowId) {\n                this.update({\n                    windowId: randomId()\n                });\n                communicationWindowManager.once(`${this.state.windowId}:opened`, ()=>{\n                    resolve(this);\n                });\n                // Tell the other party to create a window by prompting the user to click on something\n                communicationEngine.emit(\"notification\", {\n                    method: COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW,\n                    params: {\n                        windowId: this.state.windowId,\n                        url: this.state.url.href\n                    }\n                });\n            } else {\n                // Send this window with `windowId` the url to open via bc\n                const bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(this.state.windowId, broadcastChannelOptions);\n                bc.addEventListener(\"message\", async (ev)=>{\n                    try {\n                        loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(ev, `receiving data on channel: ${bc.name}`);\n                        const { error } = ev;\n                        if (error) {\n                            // Popup says some error. so, we say it's not really opened\n                            reject(new Error(error));\n                            return;\n                        }\n                        const { message } = ev.data;\n                        if (message === POPUP_LOADED) {\n                            popupSuccess = true;\n                            await bc.postMessage({\n                                data: {\n                                    url: this.state.url.href,\n                                    message: \"\" // No need of a msg\n                                }\n                            });\n                            resolve(this);\n                            bc.close();\n                        }\n                    } catch (error) {\n                        reject(error);\n                        bc.close();\n                        // Something went wrong. so, we close that window\n                        this.close();\n                    }\n                });\n                // We don't know if the other end is ready to receive this msg. So, we keep writing until it receives and sends back something\n                // we need backoff strategy\n                // we need to wait for first attempt to succeed/fail until the second attempt\n                // If we get 429, we need to wait for a while and then try again\n                const postMsg = async ()=>{\n                    // this never throws\n                    const localResponse = await bc.postMessage({\n                        data: {\n                            message: SETUP_COMPLETE\n                        }\n                    });\n                    return localResponse;\n                };\n                let currentDelay = bc.type === \"server\" ? 1000 : 200;\n                const recursiveFn = async ()=>{\n                    if (!popupSuccess && !this.closed) {\n                        const localResponse = await postMsg();\n                        if (bc.type === \"server\") {\n                            const serverResponse = localResponse;\n                            if (serverResponse.status >= 400) {\n                                // We need to wait for a while and then try again\n                                currentDelay = Math.round(currentDelay * 1.5);\n                            }\n                        }\n                        await sleep(currentDelay);\n                        await recursiveFn();\n                    }\n                };\n                recursiveFn();\n            }\n        });\n    }\n    close() {\n        const { communicationEngine } = this.config;\n        communicationEngine.emit(\"notification\", {\n            method: COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW,\n            params: {\n                windowId: this.state.windowId\n            }\n        });\n    }\n}\n/*\nScenarios:\n1. Open a normal popup window and no communication with it - Use PopupHandler\n2. Open a popup window and communicate with it - Use PopupWithBcHandler (can initiate communication by waiting for window to open or not)\n\n3. If window is already opened, pass in windowId to the popup handler. \n   This will establish communication with the popup window and sends it a new url to redirect to\n\n\nIf you're trying to open a window and it gets blocked (happens if you're in iframe or delay b/w click and opening window),\nStreamWindow is invoked and it writes in a channel to display a message to the user\n\nOnce user clicks on that modal/dialog, we pre-open the window and pass in the windowId (goes to 3)\n*/ /**\n * Handles popup window management.\n * For broadcast channel communication, use url with `instanceId` coded into state parameter.\n * This state parameter will be passed across redirects according to OAuth spec.\n */ class PopupHandler extends BaseController {\n    constructor(_ref){\n        let { config, state } = _ref;\n        super({\n            config,\n            state\n        });\n        // this.id = randomId()\n        // Add in dapp storage key to all popups as a hash parameter\n        this.defaultConfig = {\n            dappStorageKey: \"\",\n            features: getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW),\n            target: \"_blank\",\n            communicationEngine: null,\n            communicationWindowManager: null,\n            timeout: 30000\n        };\n        this.defaultState = {\n            windowTimer: null,\n            window: null,\n            iClosedWindow: false,\n            windowId: \"\",\n            url: state.url\n        };\n        this.initialize();\n        this._setupTimer();\n    }\n    async open() {\n        // if window is already open\n        const { target, features, dappStorageKey, communicationEngine, communicationWindowManager } = this.config;\n        const { windowId, url } = this.state;\n        if (dappStorageKey) {\n            const urlHashParams = new URLSearchParams(url.hash.slice(1));\n            urlHashParams.append(\"dappStorageKey\", dappStorageKey);\n            url.hash = urlHashParams.toString();\n            this.update({\n                url\n            });\n        }\n        // No window has been pre-opened\n        if (!windowId) {\n            // try to open a window first\n            let localWindow = window.open(url.href, target, features);\n            if (!localWindow) {\n                // if it's blocked, open StreamWindow\n                localWindow = new StreamWindow({\n                    config: {\n                        communicationEngine,\n                        communicationWindowManager\n                    },\n                    state: {\n                        url\n                    }\n                });\n                localWindow.open();\n            }\n            this.update({\n                window: localWindow\n            });\n            return;\n        }\n        // A window has been pre-opened with a query parameter `windowId`\n        const localWindow = new StreamWindow({\n            config: {\n                communicationEngine,\n                communicationWindowManager\n            },\n            state: {\n                url,\n                windowId\n            }\n        });\n        this.update({\n            window: localWindow\n        });\n        await localWindow.open();\n    }\n    close() {\n        this.update({\n            iClosedWindow: true\n        });\n        const { window: window1 } = this.state;\n        if (window1) window1.close();\n    }\n    _setupTimer() {\n        const timer = window.setInterval(()=>{\n            const { window: window1, windowTimer, iClosedWindow } = this.state;\n            if (window1 && window1.closed) {\n                if (windowTimer) clearInterval(windowTimer);\n                setTimeout(()=>{\n                    if (!iClosedWindow) {\n                        this.emit(\"close\");\n                    }\n                    this.update({\n                        iClosedWindow: false,\n                        window: null\n                    });\n                }, this.config.timeout);\n            }\n            if (window1 === null && windowTimer) clearInterval(windowTimer);\n        }, 500);\n        this.update({\n            windowTimer: timer\n        });\n    }\n}\nclass PopupStoreChannel {\n    constructor(_ref){\n        let { instanceId, handleLogout, handleAccountImport, handleNetworkChange, handleSelectedAddressChange, handleThemeChange } = _ref;\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleLogout\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleAccountImport\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleNetworkChange\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleThemeChange\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleSelectedAddressChange\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"instanceId\", void 0);\n        this.instanceId = instanceId;\n        this.handleLogout = handleLogout;\n        this.handleAccountImport = handleAccountImport;\n        this.handleNetworkChange = handleNetworkChange;\n        this.handleSelectedAddressChange = handleSelectedAddressChange;\n        this.handleThemeChange = handleThemeChange;\n    }\n    setupStoreChannels() {\n        this.logoutChannel();\n        this.importAccountChannel();\n        this.networkChangeChannel();\n        this.selectedAddressChangeChannel();\n        this.themeChangedChannel();\n    }\n    logoutChannel() {\n        const logoutChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_LOGOUT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        logoutChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data;\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"received logout message\", ev);\n            if (!ev.error && ((_ev$data = ev.data) === null || _ev$data === void 0 ? void 0 : _ev$data.type) === BROADCAST_CHANNELS_MSGS.LOGOUT) {\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"Logging Out\");\n                this.handleLogout();\n            }\n        });\n    }\n    importAccountChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_ACCOUNT_IMPORT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data2;\n            if (!ev.error && ((_ev$data2 = ev.data) === null || _ev$data2 === void 0 ? void 0 : _ev$data2.type) === BROADCAST_CHANNELS_MSGS.ACCOUNT_IMPORTED) {\n                var _ev$data3;\n                this.handleAccountImport((_ev$data3 = ev.data) === null || _ev$data3 === void 0 ? void 0 : _ev$data3.privKey);\n            }\n        });\n    }\n    networkChangeChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_NETWORK_CHANGE_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data4;\n            if (!ev.error && ((_ev$data4 = ev.data) === null || _ev$data4 === void 0 ? void 0 : _ev$data4.type) === BROADCAST_CHANNELS_MSGS.NETWORK_CHANGE) {\n                var _ev$data5;\n                this.handleNetworkChange((_ev$data5 = ev.data) === null || _ev$data5 === void 0 ? void 0 : _ev$data5.network);\n            }\n        });\n    }\n    themeChangedChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.THEME_CHANGE}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data6;\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info({\n                ev\n            });\n            if (!ev.error && ((_ev$data6 = ev.data) === null || _ev$data6 === void 0 ? void 0 : _ev$data6.type) === BROADCAST_CHANNELS_MSGS.SET_THEME) {\n                var _ev$data7;\n                this.handleThemeChange((_ev$data7 = ev.data) === null || _ev$data7 === void 0 ? void 0 : _ev$data7.theme);\n            }\n        });\n    }\n    selectedAddressChangeChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_SELECTED_ADDRESS_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data8;\n            if (!ev.error && ((_ev$data8 = ev.data) === null || _ev$data8 === void 0 ? void 0 : _ev$data8.type) === BROADCAST_CHANNELS_MSGS.SELECTED_ADDRESS_CHANGE) {\n                var _ev$data9;\n                this.handleSelectedAddressChange((_ev$data9 = ev.data) === null || _ev$data9 === void 0 ? void 0 : _ev$data9.selectedAddress);\n            }\n        });\n    }\n}\n/**\n * PopupWithBcHandler is a PopupHandler which uses broadcast channel to communicate with the popup window.\n */ class PopupWithBcHandler extends PopupHandler {\n    constructor(_ref){\n        let { config, state, instanceId } = _ref;\n        super({\n            config,\n            state\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"bc\", void 0);\n        this.bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(instanceId, broadcastChannelOptions);\n    }\n    /**\n   * Receives the data from popup window and closes the window\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */ handle(successExtraFn) {\n        return new Promise((resolve, reject)=>{\n            const closeListener = ()=>{\n                this.bc.close();\n                reject(new UserError(\"user closed popup\"));\n                this.removeListener(\"close\", closeListener);\n            };\n            this.on(\"close\", closeListener);\n            this.bc.addEventListener(\"message\", async (ev)=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(ev, `receiving data on channel: ${this.bc.name}`);\n                try {\n                    const { error, data } = ev;\n                    if (error) {\n                        reject(new Error(error));\n                        return;\n                    }\n                    if (successExtraFn) await successExtraFn.call(this, data);\n                    resolve(data);\n                } catch (error) {\n                    reject(error);\n                } finally{\n                    this.bc.close();\n                    this.close();\n                }\n            });\n            this.open().then(()=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(`opened window ${this.bc.name}`);\n                // Opened window. yay.  let the bc events do their job\n                return undefined;\n            }).catch((err)=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(err, \"something went wrong while opening window\");\n                reject(err);\n            });\n        });\n    }\n    /**\n   * Use this if we have to send large payloads which don't fit in query/hash params.\n   * Waits for ack that popup window is ready to receive data.\n   * Receives the data from popup window and closes the window\n   * @param payload - The data to be sent to the popup window once we have ack that window is ready to receive data\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */ handleWithHandshake(payload, successExtraFn) {\n        return new Promise((resolve, reject)=>{\n            const closeListener = ()=>{\n                this.bc.close();\n                reject(new UserError(\"user closed popup\"));\n                this.removeListener(\"close\", closeListener);\n            };\n            this.on(\"close\", closeListener);\n            this.bc.addEventListener(\"message\", async (ev)=>{\n                try {\n                    loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(ev, `receiving data on channel: ${this.bc.name}`);\n                    const { error, data } = ev;\n                    if (error) {\n                        reject(new Error(error));\n                        return;\n                    }\n                    // Do handshake\n                    const { type = \"\" } = data;\n                    if (type === POPUP_LOADED) {\n                        // Hack with generic to use the same type for both send and receive\n                        await this.bc.postMessage({\n                            data: payload\n                        });\n                    } else if (type === POPUP_RESULT) {\n                        if (successExtraFn) await successExtraFn.call(this, data);\n                        resolve(data);\n                        // Must only close the bc after result is done\n                        this.bc.close();\n                        this.close();\n                    }\n                } catch (error) {\n                    reject(error);\n                    this.bc.close();\n                    this.close();\n                }\n            });\n            this.open().then(()=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(`opened window ${this.bc.name}`);\n                // Opened window. yay.  let the bc events do their job\n                return undefined;\n            }).catch((err)=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(err, \"something went wrong while opening window\");\n                reject(err);\n            });\n        });\n    }\n}\nclass RedirectHandler {\n    constructor(){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"error\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"finalQueryParams\", {});\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"instanceParameters\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"hashParameters\", void 0);\n        const { hash } = window.location;\n        const queryParameters = new URLSearchParams(window.location.search);\n        queryParameters.forEach((value, key)=>{\n            this.finalQueryParams[key] = value;\n        });\n        const { error, instanceParameters, hashParameters } = handleRedirectParameters(hash, this.finalQueryParams);\n        this.error = error;\n        this.instanceParameters = instanceParameters;\n        this.hashParameters = hashParameters;\n    }\n    async handle() {\n        return new Promise((resolve, reject)=>{\n            const { finalQueryParams, instanceParameters, hashParameters, error } = this;\n            let bc;\n            try {\n                if (!finalQueryParams.windowId) {\n                    bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${instanceParameters.instanceId}`, broadcastChannelOptions);\n                    bc.addEventListener(\"message\", async (ev)=>{\n                        if (ev.error) {\n                            reject(ev.error);\n                            window.close();\n                        } else {\n                            resolve();\n                            bc.close();\n                            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"posted\", {\n                                finalQueryParams,\n                                hashParameters,\n                                instanceParameters\n                            });\n                        }\n                    });\n                    bc.postMessage({\n                        data: {\n                            instanceParams: instanceParameters,\n                            hashParams: hashParameters,\n                            queryParams: finalQueryParams\n                        },\n                        error\n                    });\n                    setTimeout(()=>{\n                        resolve();\n                        window.location.href = window.location.origin + window.location.search + window.location.hash;\n                    }, 5000);\n                } else {\n                    bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${finalQueryParams.windowId}`, broadcastChannelOptions);\n                    bc.addEventListener(\"message\", async (ev)=>{\n                        const { url, message } = ev.data;\n                        if (url) {\n                            resolve();\n                            window.location.href = url;\n                        } else if (message === SETUP_COMPLETE) {\n                            await bc.postMessage({\n                                data: {\n                                    windowId: finalQueryParams.windowId,\n                                    message: POPUP_LOADED\n                                }\n                            });\n                        }\n                        if (ev.error && ev.error !== \"\") {\n                            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(ev.error);\n                            resolve();\n                            bc.close();\n                        }\n                    });\n                }\n            } catch (err) {\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(err, \"something went wrong\");\n                reject(err);\n                if (bc) bc.close();\n                window.close();\n            }\n        });\n    }\n}\nconst ACTIVITY_ACTION = {\n    ACTIVITY_ACTION_ALL: \"walletActivity.allTransactions\",\n    ACTIVITY_ACTION_SEND: \"walletActivity.send\",\n    ACTIVITY_ACTION_RECEIVE: \"walletActivity.receive\",\n    ACTIVITY_ACTION_TOPUP: \"walletActivity.topup\"\n};\nconst ACCOUNT_CATEGORY = {\n    NORMAL: \"normal\",\n    THRESHOLD: \"threshold\",\n    IMPORTED: \"imported\"\n};\n/**\n * Preferences controller state\n */ // By default, poll every 3 minutes\nconst DEFAULT_INTERVAL = 180 * 1000;\nconst DEFAULT_PREFERENCES = {\n    selectedCurrency: \"USD\",\n    theme: \"dark\",\n    locale: \"en-US\",\n    accountType: ACCOUNT_CATEGORY.NORMAL,\n    contacts: [],\n    jwtToken: \"\",\n    fetchedPastTx: [],\n    pastTransactions: [],\n    paymentTx: [],\n    defaultPublicAddress: \"\",\n    customTokens: [],\n    customNfts: [],\n    crashReport: true,\n    userInfo: {\n        aggregateVerifier: \"\",\n        email: \"\",\n        name: \"\",\n        profileImage: \"\",\n        typeOfLogin: LOGIN_PROVIDER.GOOGLE,\n        verifier: \"\",\n        verifierId: \"\"\n    }\n};\n/**\n * Controller that stores shared settings and exposes convenience methods\n */ class BasePreferencesController extends BaseController {\n    /**\n   * Creates a PreferencesController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */ constructor(_ref){\n        let { config, state, defaultPreferences, signAuthMessage } = _ref;\n        super({\n            config,\n            state\n        });\n        /**\n     * Name of this controller used during composition\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"PreferencesController\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"iframeOrigin\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"signAuthMessage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultPreferences\", void 0);\n        if (!config.api) {\n            throw new Error(\"PreferencesController - no api specified in config.\");\n        }\n        this.defaultState = {\n            identities: {},\n            selectedAddress: \"\",\n            lastErrorMessage: \"\",\n            lastSuccessMessage: \"\"\n        };\n        this.defaultConfig = {\n            api: config.api,\n            pollInterval: DEFAULT_INTERVAL\n        };\n        this.initialize();\n        this.defaultPreferences = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, DEFAULT_PREFERENCES), defaultPreferences);\n        this.signAuthMessage = signAuthMessage;\n    }\n    setIframeOrigin(origin) {\n        this.iframeOrigin = origin;\n    }\n    getAddressState(address) {\n        const selectedAddress = address || this.state.selectedAddress;\n        return this.state.identities[selectedAddress];\n    }\n    /**\n   * Sets selected address\n   *\n   * @param selectedAddress - casper account hash\n   */ setSelectedAddress(selectedAddress) {\n        this.update({\n            selectedAddress\n        });\n    }\n    async getUser(address) {\n        const user = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/user?fetchTx=false`, this.headers(address), {\n            useAPIKey: true\n        });\n        return user.data;\n    }\n    async createUser(params) {\n        const { selectedCurrency, theme, verifier, verifierId, locale, address, idToken } = params;\n        const userPayload = {\n            default_currency: selectedCurrency,\n            theme,\n            verifier,\n            verifier_id: verifierId,\n            locale,\n            idToken\n        };\n        await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/user`, userPayload, this.headers(address), {\n            useAPIKey: true\n        });\n        this.updateState({\n            theme,\n            defaultPublicAddress: address,\n            selectedCurrency,\n            locale\n        }, address);\n    }\n    async storeUserLogin(params) {\n        const { verifierId, verifier, options, address, idToken } = params;\n        if (!options.rehydrate) {\n            const browser = bowser__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getParser(window.navigator.userAgent);\n            const specialBrowser = getCustomDeviceInfo();\n            const recordLoginPayload = {\n                os: browser.getOSName(),\n                os_version: browser.getOSVersion() || \"unidentified\",\n                browser: (specialBrowser === null || specialBrowser === void 0 ? void 0 : specialBrowser.browser) || browser.getBrowserName() || \"unidentified\",\n                browser_version: browser.getBrowserVersion() || \"unidentified\",\n                platform: browser.getPlatform().type || \"desktop\",\n                hostname: this.iframeOrigin,\n                verifier,\n                verifier_id: verifierId,\n                idToken\n            };\n            await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/user/recordLogin`, recordLoginPayload, this.headers(address), {\n                useAPIKey: true\n            });\n        }\n    }\n    async setCrashReport(isEnabled) {\n        var _this$getAddressState;\n        if (isEnabled === ((_this$getAddressState = this.getAddressState()) === null || _this$getAddressState === void 0 ? void 0 : _this$getAddressState.crashReport)) return true;\n        try {\n            await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n                enable_crash_reporter: isEnabled\n            }, this.headers(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                crashReport: isEnabled\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n            return false;\n        }\n    }\n    async setUserTheme(theme) {\n        var _this$getAddressState2;\n        if (theme === ((_this$getAddressState2 = this.getAddressState()) === null || _this$getAddressState2 === void 0 ? void 0 : _this$getAddressState2.theme)) return true;\n        try {\n            await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n                theme\n            }, this.headers(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                theme\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n            return false;\n        }\n    }\n    async setUserLocale(locale) {\n        var _this$getAddressState3;\n        if (locale === ((_this$getAddressState3 = this.getAddressState()) === null || _this$getAddressState3 === void 0 ? void 0 : _this$getAddressState3.locale)) return;\n        try {\n            await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n                locale\n            }, this.headers(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                locale\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to set locale\", error);\n            return false;\n        }\n    }\n    async setSelectedCurrency(payload) {\n        var _this$getAddressState4;\n        if (payload.selectedCurrency === ((_this$getAddressState4 = this.getAddressState()) === null || _this$getAddressState4 === void 0 ? void 0 : _this$getAddressState4.selectedCurrency)) return true;\n        try {\n            await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n                default_currency: payload.selectedCurrency\n            }, this.headers(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                selectedCurrency: payload.selectedCurrency\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n            return false;\n        }\n    }\n    async addContact(contact) {\n        try {\n            var _this$getAddressState5;\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/contact`, contact, this.headers(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                contacts: [\n                    ...((_this$getAddressState5 = this.getAddressState()) === null || _this$getAddressState5 === void 0 ? void 0 : _this$getAddressState5.contacts) || [],\n                    response.data\n                ]\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to add contact\", error);\n            return false;\n        }\n    }\n    async deleteContact(contactId) {\n        try {\n            var _this$getAddressState6;\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.remove)(`${this.config.api}/contact/${contactId}`, {}, this.headers(), {\n                useAPIKey: true\n            });\n            const finalContacts = (_this$getAddressState6 = this.getAddressState()) === null || _this$getAddressState6 === void 0 ? void 0 : _this$getAddressState6.contacts.filter((contact)=>contact.id !== response.data.id);\n            if (finalContacts) this.updateState({\n                contacts: [\n                    ...finalContacts\n                ]\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to delete contact\", error);\n            return false;\n        }\n    }\n    async revokeDiscord(idToken) {\n        try {\n            const resp = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/revoke/discord`, {\n                token: idToken\n            }, this.headers(), {\n                useAPIKey: true\n            });\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(resp);\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n        }\n    }\n    async patchPastTx(body, address) {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/transaction`, body, this.headers(address), {\n                useAPIKey: true\n            });\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"successfully patched\", response);\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to patch tx\", error);\n        }\n    }\n    async postPastTx(tx, address) {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/transaction`, tx, this.headers(address), {\n                useAPIKey: true\n            });\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"successfully posted tx\", response);\n            return response;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error, \"unable to insert transaction\");\n        }\n    }\n    async getWalletOrders(address) {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/transaction`, this.headers(address), {\n                useAPIKey: true\n            });\n            return response.success ? response.data ? response.data : [] : [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to get wallet orders tx\", error);\n            return [];\n        }\n    }\n    async getTopUpOrders(address) {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.commonApiHost}/transaction`, this.headers(address), {\n                useAPIKey: true\n            });\n            return response.data || [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to fetch past Top up orders\", error);\n        }\n    }\n    async getBillBoardData() {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/billboard`, this.headers(), {\n                useAPIKey: true\n            });\n            return response.success ? response.data : [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to get billboard data\", error);\n            return [];\n        }\n    }\n    async getMessageForSigning(publicAddress) {\n        const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/auth/message`, {\n            public_address: publicAddress\n        }, {}, {\n            useAPIKey: true\n        });\n        return response.message;\n    }\n    async getTwitterId(payload) {\n        const res = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/twitter?screen_name=${payload.nick}`, this.headers(), {\n            useAPIKey: true\n        });\n        return `${payload.typeOfLogin.toLowerCase()}|${res.data.toString()}`;\n    }\n    async sendEmail(payload) {\n        return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/transaction/sendemail`, payload.emailObject, this.headers(), {\n            useAPIKey: true\n        });\n    }\n    async refreshJwt() {\n        const address = this.state.selectedAddress;\n        const messageToSign = await this.getMessageForSigning(address);\n        if (!messageToSign.startsWith(this.config.signInPrefix)) throw new Error(\"Cannot sign on invalid message\");\n        const signedMessage = await this.signAuthMessage(address, messageToSign);\n        const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/auth/verify`, {\n            public_address: address,\n            signed_message: signedMessage\n        }, {}, {\n            useAPIKey: true\n        });\n        this.updateState({\n            jwtToken: response.token\n        }, address);\n    }\n    async getDappList() {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/dapps`, this.headers(), {\n                useAPIKey: true\n            });\n            return response.success ? response.data : [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to get billboard data\", error);\n            return [];\n        }\n    }\n    async init(address, userInfo, jwtToken) {\n        let metadata = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        let type = arguments.length > 4 ? arguments[4] : undefined;\n        let response = {\n            token: jwtToken\n        };\n        if (this.getAddressState(address)) return;\n        if (!jwtToken) {\n            const messageToSign = await this.getMessageForSigning(address);\n            if (!messageToSign.startsWith(this.config.signInPrefix)) throw new Error(\"Cannot sign on invalid message\");\n            const signedMessage = await this.signAuthMessage(address, messageToSign);\n            response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/auth/verify`, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                public_address: address,\n                signed_message: signedMessage,\n                verifier: userInfo.aggregateVerifier || userInfo.verifier,\n                verifier_id: userInfo.verifierId\n            }, metadata), {}, {\n                useAPIKey: true\n            });\n        }\n        this.updateState({\n            jwtToken: response.token,\n            userInfo,\n            accountType: type !== null && type !== void 0 ? type : this.defaultPreferences.accountType\n        }, address);\n    }\n    updateState(preferences, address) {\n        const selectedAddress = address || this.state.selectedAddress;\n        const currentState = this.getAddressState(selectedAddress) || lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9___default()(this.defaultPreferences);\n        const mergedState = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, currentState), preferences);\n        this.update({\n            identities: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.state.identities), {}, {\n                [selectedAddress]: mergedState\n            })\n        });\n        return mergedState;\n    }\n    headers(address) {\n        var _this$getAddressState7;\n        const selectedAddress = address || this.state.selectedAddress;\n        return getHeaders(((_this$getAddressState7 = this.getAddressState(selectedAddress)) === null || _this$getAddressState7 === void 0 ? void 0 : _this$getAddressState7.jwtToken) || \"\");\n    }\n}\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */ let TransactionStatus = /*#__PURE__*/ function(TransactionStatus) {\n    TransactionStatus[\"approved\"] = \"approved\";\n    TransactionStatus[\"cancelled\"] = \"cancelled\";\n    TransactionStatus[\"cancelling\"] = \"cancelling\";\n    TransactionStatus[\"confirmed\"] = \"confirmed\";\n    TransactionStatus[\"failed\"] = \"failed\";\n    TransactionStatus[\"finalized\"] = \"finalized\";\n    TransactionStatus[\"processed\"] = \"processed\";\n    TransactionStatus[\"rejected\"] = \"rejected\";\n    TransactionStatus[\"signed\"] = \"signed\";\n    TransactionStatus[\"submitted\"] = \"submitted\";\n    TransactionStatus[\"unapproved\"] = \"unapproved\";\n    TransactionStatus[\"dropped\"] = \"dropped\";\n    TransactionStatus[\"expired\"] = \"expired\";\n    TransactionStatus[\"pending\"] = \"pending\";\n    return TransactionStatus;\n}({});\nconst TRANSACTION_TYPES = {\n    CANCEL: \"cancel\",\n    RETRY: \"retry\",\n    CONTRACT_INTERACTION: \"contractInteraction\",\n    DEPLOY_CONTRACT: \"contractDeployment\",\n    WASM_BASED_DEPLOY: \"wasmBasedDeploy\",\n    STANDARD_TRANSACTION: \"transaction\",\n    STANDARD_PAYMENT_TRANSACTION: \"payment_transaction\",\n    // specific to chains like solana and casper\n    SENT_ETHER: \"sentEther\",\n    TOKEN_METHOD_TRANSFER: \"transfer\",\n    TOKEN_METHOD_TRANSFER_FROM: \"transferFrom\",\n    TOKEN_METHOD_APPROVE: \"approve\",\n    COLLECTIBLE_METHOD_SAFE_TRANSFER_FROM: \"safeTransferFrom\",\n    SET_APPROVAL_FOR_ALL: \"setApprovalForAll\"\n};\nconst TX_EVENTS = {\n    TX_WARNING: \"tx:warning\",\n    TX_ERROR: \"tx:error\",\n    TX_FAILED: \"tx:failed\",\n    TX_CONFIRMED: \"tx:confirmed\",\n    TX_DROPPED: \"tx:dropped\",\n    TX_EXPIRED: \"tx:expired\",\n    TX_STATUS_UPDATE: \"tx:status_update\",\n    TX_UNAPPROVED: \"tx:unapproved\",\n    TX_RETRY: \"tx:retry\",\n    TX_BLOCK_UPDATE: \"tx:block_update\"\n};\n/**\n * Transaction controller configuration\n */ /**\n * Transaction controller state\n */ /**\n * Result\n *\n * result - Promise resolving to a new transaction hash\n * transactionMeta - Meta information about this new transaction\n */ class BaseTransactionStateManager extends BaseController {\n    constructor(_ref){\n        let { config, state, getCurrentChainId } = _ref;\n        super({\n            config,\n            state\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"getCurrentChainId\", void 0);\n        this.defaultConfig = {\n            txHistoryLimit: 40\n        };\n        this.defaultState = {\n            transactions: {},\n            unapprovedTxs: {},\n            currentNetworkTxsList: []\n        };\n        this.initialize();\n        this.getCurrentChainId = getCurrentChainId;\n    }\n    getUnapprovedTxList() {\n        const chainId = this.getCurrentChainId();\n        return lodash_pickBy__WEBPACK_IMPORTED_MODULE_10___default()(this.state.transactions, (transaction)=>transaction.status === TransactionStatus.unapproved && transactionMatchesNetwork(transaction, chainId));\n    }\n    getTransaction(txId) {\n        const { transactions } = this.state;\n        return transactions[txId];\n    }\n    updateTransaction(txMeta) {\n        // commit txMeta to state\n        const txId = txMeta.id;\n        txMeta.updated_at = new Date().toISOString();\n        this.update({\n            transactions: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.state.transactions), {}, {\n                [txId]: txMeta\n            })\n        });\n    }\n    setTxStatusRejected(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.rejected);\n        this._deleteTransaction(txId);\n    }\n    /**\n   * The implementing controller can override this functionality and add custom logic + call super.()\n   */ setTxStatusUnapproved(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.unapproved);\n    }\n    setTxStatusApproved(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.approved);\n    }\n    setTxStatusSigned(txId, isFinalStep) {\n        this._setTransactionStatus(txId, TransactionStatus.signed, isFinalStep);\n    }\n    setTxStatusSubmitted(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.submitted);\n    }\n    setTxStatusDropped(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.dropped);\n    }\n    setTxStatusExpired(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.expired);\n    }\n    setTxStatusConfirmed(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.confirmed);\n    }\n    setTxStatusFailed(txId, error_) {\n        const error = !error_ ? new Error(\"Internal torus failure\") : error_;\n        const txMeta = this.getTransaction(txId);\n        txMeta.error = error;\n        this.updateTransaction(txMeta);\n        this._setTransactionStatus(txId, TransactionStatus.failed);\n    }\n    /**\n   * Method to determine if the transaction is in a final state\n   * @param status - Transaction status\n   * @returns boolean if the transaction is in a final state\n   */ isFinalState(status) {\n        return status === TransactionStatus.rejected || status === TransactionStatus.submitted || status === TransactionStatus.confirmed || status === TransactionStatus.failed || status === TransactionStatus.cancelled || status === TransactionStatus.expired;\n    }\n    /**\n   * Filters out the unapproved transactions from state\n   */ clearUnapprovedTxs() {\n        this.update({\n            transactions: lodash_omitBy__WEBPACK_IMPORTED_MODULE_11___default()(this.state.transactions, (transaction)=>transaction.status === TransactionStatus.unapproved)\n        });\n    }\n    /**\n   * will append new transactions to old txns.\n   */ _addTransactionsToState(transactions) {\n        this.update({\n            transactions: transactions.reduce((result, newTx)=>{\n                result[newTx.id] = newTx;\n                return result;\n            }, this.state.transactions)\n        });\n    }\n    /**\n   * will set new txns, override existing if any in state.\n   */ _setTransactionsToState(transactions) {\n        this.update({\n            transactions: transactions.reduce((result, newTx)=>{\n                result[newTx.id] = newTx;\n                return result;\n            }, {})\n        });\n    }\n    _deleteTransaction(targetTransactionId) {\n        const { transactions } = this.state;\n        delete transactions[targetTransactionId];\n        this.update({\n            transactions\n        });\n    }\n    _deleteTransactions(targetTransactionIds) {\n        const { transactions } = this.state;\n        targetTransactionIds.forEach((transactionId)=>{\n            delete transactions[transactionId];\n        });\n        this.update({\n            transactions\n        });\n    }\n    _setTransactionStatus(txId, status, isFinalStep) {\n        const txMeta = this.getTransaction(txId);\n        if (!txMeta) {\n            return;\n        }\n        txMeta.status = status;\n        // only updating status so no validation required on txn.\n        this.updateTransaction(txMeta);\n        this.emit(TX_EVENTS.TX_STATUS_UPDATE, {\n            txId,\n            status\n        });\n        if (this.isFinalState(status) || isFinalStep) {\n            this.emit(`${txMeta.id}:finished`, txMeta);\n        } else {\n            this.emit(`${txMeta.id}:${status}`, txId);\n        }\n    }\n}\n //# sourceMappingURL=baseControllers.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-session-manager/dist/baseSessionManager.esm.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-session-manager/dist/baseSessionManager.esm.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseSessionManager: () => (/* binding */ BaseSessionManager)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n\n\nclass BaseSessionManager {\n    constructor(){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionId\", void 0);\n    }\n    checkSessionParams() {\n        if (!this.sessionId) throw new Error(\"Session id is required\");\n        this.sessionId = this.sessionId.padStart(64, \"0\");\n    }\n    /**\n   * Common handler method for making an http request.\n   *\n   * Note: Embed all the query parameters in the path itself.\n   */ request(_ref) {\n        let { method = \"GET\", url, data = {}, headers = {} } = _ref;\n        const options = {\n            headers\n        };\n        switch(method){\n            case \"GET\":\n                return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.get)(url, options);\n            case \"POST\":\n                return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.post)(url, data, options);\n            case \"PUT\":\n                return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.put)(url, data, options);\n            case \"PATCH\":\n                return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.patch)(url, data, options);\n        }\n        throw new Error(\"Invalid method type\");\n    }\n}\n //# sourceMappingURL=baseSessionManager.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLXNlc3Npb24tbWFuYWdlci9kaXN0L2Jhc2VTZXNzaW9uTWFuYWdlci5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRTtBQUNKO0FBRWhFLE1BQU1LO0lBQ0pDLGFBQWM7UUFDWk4sNEVBQWVBLENBQUMsSUFBSSxFQUFFLGFBQWEsS0FBSztJQUMxQztJQUNBTyxxQkFBcUI7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQ0MsU0FBUyxFQUFFLE1BQU0sSUFBSUMsTUFBTTtRQUNyQyxJQUFJLENBQUNELFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQ0UsUUFBUSxDQUFDLElBQUk7SUFDL0M7SUFFQTs7OztHQUlDLEdBQ0RDLFFBQVFDLElBQUksRUFBRTtRQUNaLElBQUksRUFDRkMsU0FBUyxLQUFLLEVBQ2RDLEdBQUcsRUFDSEMsT0FBTyxDQUFDLENBQUMsRUFDVEMsVUFBVSxDQUFDLENBQUMsRUFDYixHQUFHSjtRQUNKLE1BQU1LLFVBQVU7WUFDZEQ7UUFDRjtRQUNBLE9BQVFIO1lBQ04sS0FBSztnQkFDSCxPQUFPVCw0REFBR0EsQ0FBQ1UsS0FBS0c7WUFDbEIsS0FBSztnQkFDSCxPQUFPZCw2REFBSUEsQ0FBQ1csS0FBS0MsTUFBTUU7WUFDekIsS0FBSztnQkFDSCxPQUFPZiw0REFBR0EsQ0FBQ1ksS0FBS0MsTUFBTUU7WUFDeEIsS0FBSztnQkFDSCxPQUFPaEIsOERBQUtBLENBQUNhLEtBQUtDLE1BQU1FO1FBQzVCO1FBQ0EsTUFBTSxJQUFJUixNQUFNO0lBQ2xCO0FBQ0Y7QUFFOEIsQ0FDOUIsa0RBQWtEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2Utc2Vzc2lvbi1tYW5hZ2VyL2Rpc3QvYmFzZVNlc3Npb25NYW5hZ2VyLmVzbS5qcz8yYmFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eSc7XG5pbXBvcnQgeyBwYXRjaCwgcHV0LCBwb3N0LCBnZXQgfSBmcm9tICdAdG9ydXNsYWJzL2h0dHAtaGVscGVycyc7XG5cbmNsYXNzIEJhc2VTZXNzaW9uTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNlc3Npb25JZFwiLCB2b2lkIDApO1xuICB9XG4gIGNoZWNrU2Vzc2lvblBhcmFtcygpIHtcbiAgICBpZiAoIXRoaXMuc2Vzc2lvbklkKSB0aHJvdyBuZXcgRXJyb3IoXCJTZXNzaW9uIGlkIGlzIHJlcXVpcmVkXCIpO1xuICAgIHRoaXMuc2Vzc2lvbklkID0gdGhpcy5zZXNzaW9uSWQucGFkU3RhcnQoNjQsIFwiMFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21tb24gaGFuZGxlciBtZXRob2QgZm9yIG1ha2luZyBhbiBodHRwIHJlcXVlc3QuXG4gICAqXG4gICAqIE5vdGU6IEVtYmVkIGFsbCB0aGUgcXVlcnkgcGFyYW1ldGVycyBpbiB0aGUgcGF0aCBpdHNlbGYuXG4gICAqL1xuICByZXF1ZXN0KF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgbWV0aG9kID0gXCJHRVRcIixcbiAgICAgIHVybCxcbiAgICAgIGRhdGEgPSB7fSxcbiAgICAgIGhlYWRlcnMgPSB7fVxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBoZWFkZXJzXG4gICAgfTtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSBcIkdFVFwiOlxuICAgICAgICByZXR1cm4gZ2V0KHVybCwgb3B0aW9ucyk7XG4gICAgICBjYXNlIFwiUE9TVFwiOlxuICAgICAgICByZXR1cm4gcG9zdCh1cmwsIGRhdGEsIG9wdGlvbnMpO1xuICAgICAgY2FzZSBcIlBVVFwiOlxuICAgICAgICByZXR1cm4gcHV0KHVybCwgZGF0YSwgb3B0aW9ucyk7XG4gICAgICBjYXNlIFwiUEFUQ0hcIjpcbiAgICAgICAgcmV0dXJuIHBhdGNoKHVybCwgZGF0YSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbWV0aG9kIHR5cGVcIik7XG4gIH1cbn1cblxuZXhwb3J0IHsgQmFzZVNlc3Npb25NYW5hZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlU2Vzc2lvbk1hbmFnZXIuZXNtLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9kZWZpbmVQcm9wZXJ0eSIsInBhdGNoIiwicHV0IiwicG9zdCIsImdldCIsIkJhc2VTZXNzaW9uTWFuYWdlciIsImNvbnN0cnVjdG9yIiwiY2hlY2tTZXNzaW9uUGFyYW1zIiwic2Vzc2lvbklkIiwiRXJyb3IiLCJwYWRTdGFydCIsInJlcXVlc3QiLCJfcmVmIiwibWV0aG9kIiwidXJsIiwiZGF0YSIsImhlYWRlcnMiLCJvcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-session-manager/dist/baseSessionManager.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BroadcastChannel: () => (/* binding */ BroadcastChannel),\n/* harmony export */   OPEN_BROADCAST_CHANNELS: () => (/* binding */ OPEN_BROADCAST_CHANNELS),\n/* harmony export */   enforceOptions: () => (/* binding */ enforceOptions)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/* harmony import */ var _method_chooser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./method-chooser.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js\");\n/* harmony import */ var _options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./options.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n\n\n\n/**\n * Contains all open channels,\n * used in tests to ensure everything is closed.\n */ var OPEN_BROADCAST_CHANNELS = new Set();\nvar lastId = 0;\nvar BroadcastChannel = function BroadcastChannel(name, options) {\n    // identifier of the channel to debug stuff\n    this.id = lastId++;\n    OPEN_BROADCAST_CHANNELS.add(this);\n    this.name = name;\n    if (ENFORCED_OPTIONS) {\n        options = ENFORCED_OPTIONS;\n    }\n    this.options = (0,_options_js__WEBPACK_IMPORTED_MODULE_0__.fillOptionsWithDefaults)(options);\n    this.method = (0,_method_chooser_js__WEBPACK_IMPORTED_MODULE_1__.chooseMethod)(this.options);\n    // isListening\n    this._iL = false;\n    /**\n   * _onMessageListener\n   * setting onmessage twice,\n   * will overwrite the first listener\n   */ this._onML = null;\n    /**\n   * _addEventListeners\n   */ this._addEL = {\n        message: [],\n        internal: []\n    };\n    /**\n   * Unsend message promises\n   * where the sending is still in progress\n   * @type {Set<Promise>}\n   */ this._uMP = new Set();\n    /**\n   * _beforeClose\n   * array of promises that will be awaited\n   * before the channel is closed\n   */ this._befC = [];\n    /**\n   * _preparePromise\n   */ this._prepP = null;\n    _prepareChannel(this);\n};\n// STATICS\n/**\n * used to identify if someone overwrites\n * window.BroadcastChannel with this\n * See methods/native.js\n */ BroadcastChannel._pubkey = true;\n/**\n * if set, this method is enforced,\n * no mather what the options are\n */ var ENFORCED_OPTIONS;\nfunction enforceOptions(options) {\n    ENFORCED_OPTIONS = options;\n}\n// PROTOTYPE\nBroadcastChannel.prototype = {\n    postMessage: function postMessage(msg) {\n        if (this.closed) {\n            throw new Error(\"BroadcastChannel.postMessage(): \" + \"Cannot post message after channel has closed \" + /**\n       * In the past when this error appeared, it was realy hard to debug.\n       * So now we log the msg together with the error so it at least\n       * gives some clue about where in your application this happens.\n       */ JSON.stringify(msg));\n        }\n        return _post(this, \"message\", msg);\n    },\n    postInternal: function postInternal(msg) {\n        return _post(this, \"internal\", msg);\n    },\n    set onmessage (fn){\n        var time = this.method.microSeconds();\n        var listenObj = {\n            time: time,\n            fn: fn\n        };\n        _removeListenerObject(this, \"message\", this._onML);\n        if (fn && typeof fn === \"function\") {\n            this._onML = listenObj;\n            _addListenerObject(this, \"message\", listenObj);\n        } else {\n            this._onML = null;\n        }\n    },\n    addEventListener: function addEventListener(type, fn1) {\n        var time = this.method.microSeconds();\n        var listenObj = {\n            time: time,\n            fn: fn1\n        };\n        _addListenerObject(this, type, listenObj);\n    },\n    removeEventListener: function removeEventListener(type, fn1) {\n        var obj = this._addEL[type].find(function(obj) {\n            return obj.fn === fn1;\n        });\n        _removeListenerObject(this, type, obj);\n    },\n    close: function close() {\n        var _this = this;\n        if (this.closed) {\n            return;\n        }\n        OPEN_BROADCAST_CHANNELS[\"delete\"](this);\n        this.closed = true;\n        var awaitPrepare = this._prepP ? this._prepP : _util_js__WEBPACK_IMPORTED_MODULE_2__.PROMISE_RESOLVED_VOID;\n        this._onML = null;\n        this._addEL.message = [];\n        return awaitPrepare// wait until all current sending are processed\n        .then(function() {\n            return Promise.all(Array.from(_this._uMP));\n        })// run before-close hooks\n        .then(function() {\n            return Promise.all(_this._befC.map(function(fn1) {\n                return fn1();\n            }));\n        })// close the channel\n        .then(function() {\n            return _this.method.close(_this._state);\n        });\n    },\n    get type () {\n        return this.method.type;\n    },\n    get isClosed () {\n        return this.closed;\n    }\n};\n/**\n * Post a message over the channel\n * @returns {Promise} that resolved when the message sending is done\n */ function _post(broadcastChannel, type, msg) {\n    var time = broadcastChannel.method.microSeconds();\n    var msgObj = {\n        time: time,\n        type: type,\n        data: msg\n    };\n    var awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : _util_js__WEBPACK_IMPORTED_MODULE_2__.PROMISE_RESOLVED_VOID;\n    return awaitPrepare.then(function() {\n        var sendPromise = broadcastChannel.method.postMessage(broadcastChannel._state, msgObj);\n        // add/remove to unsend messages list\n        broadcastChannel._uMP.add(sendPromise);\n        sendPromise[\"catch\"]().then(function() {\n            return broadcastChannel._uMP[\"delete\"](sendPromise);\n        });\n        return sendPromise;\n    });\n}\nfunction _prepareChannel(channel) {\n    var maybePromise = channel.method.create(channel.name, channel.options);\n    if ((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.isPromise)(maybePromise)) {\n        channel._prepP = maybePromise;\n        maybePromise.then(function(s) {\n            // used in tests to simulate slow runtime\n            /*if (channel.options.prepareDelay) {\n           await new Promise(res => setTimeout(res, this.options.prepareDelay));\n      }*/ channel._state = s;\n        });\n    } else {\n        channel._state = maybePromise;\n    }\n}\nfunction _hasMessageListeners(channel) {\n    if (channel._addEL.message.length > 0) return true;\n    if (channel._addEL.internal.length > 0) return true;\n    return false;\n}\nfunction _addListenerObject(channel, type, obj) {\n    channel._addEL[type].push(obj);\n    _startListening(channel);\n}\nfunction _removeListenerObject(channel, type, obj) {\n    channel._addEL[type] = channel._addEL[type].filter(function(o) {\n        return o !== obj;\n    });\n    _stopListening(channel);\n}\nfunction _startListening(channel) {\n    if (!channel._iL && _hasMessageListeners(channel)) {\n        // someone is listening, start subscribing\n        var listenerFn = function listenerFn(msgObj) {\n            channel._addEL[msgObj.type].forEach(function(listenerObject) {\n                /**\n         * Getting the current time in JavaScript has no good precision.\n         * So instead of only listening to events that happend 'after' the listener\n         * was added, we also listen to events that happended 100ms before it.\n         * This ensures that when another process, like a WebWorker, sends events\n         * we do not miss them out because their timestamp is a bit off compared to the main process.\n         * Not doing this would make messages missing when we send data directly after subscribing and awaiting a response.\n         * @link https://johnresig.com/blog/accuracy-of-javascript-time/\n         */ var hundredMsInMicro = 100 * 1000;\n                var minMessageTime = listenerObject.time - hundredMsInMicro;\n                if (msgObj.time >= minMessageTime) {\n                    listenerObject.fn(msgObj.data);\n                } else if (channel.method.type === \"server\") {\n                    // server msg might lag based on connection.\n                    listenerObject.fn(msgObj.data);\n                }\n            });\n        };\n        var time = channel.method.microSeconds();\n        if (channel._prepP) {\n            channel._prepP.then(function() {\n                channel._iL = true;\n                channel.method.onMessage(channel._state, listenerFn, time);\n            });\n        } else {\n            channel._iL = true;\n            channel.method.onMessage(channel._state, listenerFn, time);\n        }\n    }\n}\nfunction _stopListening(channel) {\n    if (channel._iL && !_hasMessageListeners(channel)) {\n        // noone is listening, stop subscribing\n        channel._iL = false;\n        var time = channel.method.microSeconds();\n        channel.method.onMessage(channel._state, null, time);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chooseMethod: () => (/* binding */ chooseMethod)\n/* harmony export */ });\n/* harmony import */ var _methods_native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./methods/native.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js\");\n/* harmony import */ var _methods_indexed_db_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./methods/indexed-db.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js\");\n/* harmony import */ var _methods_localstorage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./methods/localstorage.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js\");\n/* harmony import */ var _methods_server_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./methods/server.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js\");\n/* harmony import */ var _methods_simulate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./methods/simulate.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js\");\n\n\n\n\n\n// order is important\nvar METHODS = [\n    _methods_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    // fastest\n    _methods_indexed_db_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    _methods_localstorage_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    _methods_server_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n];\nfunction chooseMethod(options) {\n    var chooseMethods = [].concat(options.methods, METHODS).filter(Boolean);\n    // directly chosen\n    if (options.type) {\n        if (options.type === \"simulate\") {\n            // only use simulate-method if directly chosen\n            return _methods_simulate_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n        }\n        var ret = chooseMethods.find(function(m) {\n            return m.type === options.type;\n        });\n        if (!ret) throw new Error(\"method-type \" + options.type + \" not found\");\n        else return ret;\n    }\n    /**\n   * if no webworker support is needed,\n   * remove idb from the list so that localstorage is been chosen\n   */ if (!options.webWorkerSupport) {\n        chooseMethods = chooseMethods.filter(function(m) {\n            return m.type !== \"idb\";\n        });\n    }\n    var useMethod = chooseMethods.find(function(method) {\n        return method.canBeUsed(options);\n    });\n    if (!useMethod) throw new Error(\"No useable method found in \" + JSON.stringify(METHODS.map(function(m) {\n        return m.type;\n    })));\n    else return useMethod;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2QtY2hvb3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBK0M7QUFDTTtBQUNNO0FBQ1o7QUFDSTtBQUVuRCxxQkFBcUI7QUFDckIsSUFBSUssVUFBVTtJQUFDTCwwREFBWUE7SUFDM0IsVUFBVTtJQUNWQyw4REFBY0E7SUFBRUMsZ0VBQWtCQTtJQUFFQywwREFBWUE7Q0FBQztBQUMxQyxTQUFTRyxhQUFhQyxPQUFPO0lBQ2xDLElBQUlDLGdCQUFnQixFQUFFLENBQUNDLE1BQU0sQ0FBQ0YsUUFBUUcsT0FBTyxFQUFFTCxTQUFTTSxNQUFNLENBQUNDO0lBRS9ELGtCQUFrQjtJQUNsQixJQUFJTCxRQUFRTSxJQUFJLEVBQUU7UUFDaEIsSUFBSU4sUUFBUU0sSUFBSSxLQUFLLFlBQVk7WUFDL0IsOENBQThDO1lBQzlDLE9BQU9ULDREQUFjQTtRQUN2QjtRQUNBLElBQUlVLE1BQU1OLGNBQWNPLElBQUksQ0FBQyxTQUFVQyxDQUFDO1lBQ3RDLE9BQU9BLEVBQUVILElBQUksS0FBS04sUUFBUU0sSUFBSTtRQUNoQztRQUNBLElBQUksQ0FBQ0MsS0FBSyxNQUFNLElBQUlHLE1BQU0saUJBQWlCVixRQUFRTSxJQUFJLEdBQUc7YUFBbUIsT0FBT0M7SUFDdEY7SUFFQTs7O0dBR0MsR0FDRCxJQUFJLENBQUNQLFFBQVFXLGdCQUFnQixFQUFFO1FBQzdCVixnQkFBZ0JBLGNBQWNHLE1BQU0sQ0FBQyxTQUFVSyxDQUFDO1lBQzlDLE9BQU9BLEVBQUVILElBQUksS0FBSztRQUNwQjtJQUNGO0lBQ0EsSUFBSU0sWUFBWVgsY0FBY08sSUFBSSxDQUFDLFNBQVVLLE1BQU07UUFDakQsT0FBT0EsT0FBT0MsU0FBUyxDQUFDZDtJQUMxQjtJQUNBLElBQUksQ0FBQ1ksV0FBVyxNQUFNLElBQUlGLE1BQU0sZ0NBQWdDSyxLQUFLQyxTQUFTLENBQUNsQixRQUFRbUIsR0FBRyxDQUFDLFNBQVVSLENBQUM7UUFDcEcsT0FBT0EsRUFBRUgsSUFBSTtJQUNmO1NBQVUsT0FBT007QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYnJvYWRjYXN0LWNoYW5uZWwvZGlzdC9lc25vZGUvbWV0aG9kLWNob29zZXIuanM/MzY4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTmF0aXZlTWV0aG9kIGZyb20gJy4vbWV0aG9kcy9uYXRpdmUuanMnO1xuaW1wb3J0IEluZGV4ZURiTWV0aG9kIGZyb20gJy4vbWV0aG9kcy9pbmRleGVkLWRiLmpzJztcbmltcG9ydCBMb2NhbHN0b3JhZ2VNZXRob2QgZnJvbSAnLi9tZXRob2RzL2xvY2Fsc3RvcmFnZS5qcyc7XG5pbXBvcnQgU2VydmVyTWV0aG9kIGZyb20gJy4vbWV0aG9kcy9zZXJ2ZXIuanMnO1xuaW1wb3J0IFNpbXVsYXRlTWV0aG9kIGZyb20gJy4vbWV0aG9kcy9zaW11bGF0ZS5qcyc7XG5cbi8vIG9yZGVyIGlzIGltcG9ydGFudFxudmFyIE1FVEhPRFMgPSBbTmF0aXZlTWV0aG9kLFxuLy8gZmFzdGVzdFxuSW5kZXhlRGJNZXRob2QsIExvY2Fsc3RvcmFnZU1ldGhvZCwgU2VydmVyTWV0aG9kXTtcbmV4cG9ydCBmdW5jdGlvbiBjaG9vc2VNZXRob2Qob3B0aW9ucykge1xuICB2YXIgY2hvb3NlTWV0aG9kcyA9IFtdLmNvbmNhdChvcHRpb25zLm1ldGhvZHMsIE1FVEhPRFMpLmZpbHRlcihCb29sZWFuKTtcblxuICAvLyBkaXJlY3RseSBjaG9zZW5cbiAgaWYgKG9wdGlvbnMudHlwZSkge1xuICAgIGlmIChvcHRpb25zLnR5cGUgPT09ICdzaW11bGF0ZScpIHtcbiAgICAgIC8vIG9ubHkgdXNlIHNpbXVsYXRlLW1ldGhvZCBpZiBkaXJlY3RseSBjaG9zZW5cbiAgICAgIHJldHVybiBTaW11bGF0ZU1ldGhvZDtcbiAgICB9XG4gICAgdmFyIHJldCA9IGNob29zZU1ldGhvZHMuZmluZChmdW5jdGlvbiAobSkge1xuICAgICAgcmV0dXJuIG0udHlwZSA9PT0gb3B0aW9ucy50eXBlO1xuICAgIH0pO1xuICAgIGlmICghcmV0KSB0aHJvdyBuZXcgRXJyb3IoJ21ldGhvZC10eXBlICcgKyBvcHRpb25zLnR5cGUgKyAnIG5vdCBmb3VuZCcpO2Vsc2UgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBpZiBubyB3ZWJ3b3JrZXIgc3VwcG9ydCBpcyBuZWVkZWQsXG4gICAqIHJlbW92ZSBpZGIgZnJvbSB0aGUgbGlzdCBzbyB0aGF0IGxvY2Fsc3RvcmFnZSBpcyBiZWVuIGNob3NlblxuICAgKi9cbiAgaWYgKCFvcHRpb25zLndlYldvcmtlclN1cHBvcnQpIHtcbiAgICBjaG9vc2VNZXRob2RzID0gY2hvb3NlTWV0aG9kcy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgIHJldHVybiBtLnR5cGUgIT09ICdpZGInO1xuICAgIH0pO1xuICB9XG4gIHZhciB1c2VNZXRob2QgPSBjaG9vc2VNZXRob2RzLmZpbmQoZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgIHJldHVybiBtZXRob2QuY2FuQmVVc2VkKG9wdGlvbnMpO1xuICB9KTtcbiAgaWYgKCF1c2VNZXRob2QpIHRocm93IG5ldyBFcnJvcihcIk5vIHVzZWFibGUgbWV0aG9kIGZvdW5kIGluIFwiICsgSlNPTi5zdHJpbmdpZnkoTUVUSE9EUy5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gbS50eXBlO1xuICB9KSkpO2Vsc2UgcmV0dXJuIHVzZU1ldGhvZDtcbn0iXSwibmFtZXMiOlsiTmF0aXZlTWV0aG9kIiwiSW5kZXhlRGJNZXRob2QiLCJMb2NhbHN0b3JhZ2VNZXRob2QiLCJTZXJ2ZXJNZXRob2QiLCJTaW11bGF0ZU1ldGhvZCIsIk1FVEhPRFMiLCJjaG9vc2VNZXRob2QiLCJvcHRpb25zIiwiY2hvb3NlTWV0aG9kcyIsImNvbmNhdCIsIm1ldGhvZHMiLCJmaWx0ZXIiLCJCb29sZWFuIiwidHlwZSIsInJldCIsImZpbmQiLCJtIiwiRXJyb3IiLCJ3ZWJXb3JrZXJTdXBwb3J0IiwidXNlTWV0aG9kIiwibWV0aG9kIiwiY2FuQmVVc2VkIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRANSACTION_SETTINGS: () => (/* binding */ TRANSACTION_SETTINGS),\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   cleanOldMessages: () => (/* binding */ cleanOldMessages),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   commitIndexedDBTransaction: () => (/* binding */ commitIndexedDBTransaction),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   createDatabase: () => (/* binding */ createDatabase),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getAllMessages: () => (/* binding */ getAllMessages),\n/* harmony export */   getIdb: () => (/* binding */ getIdb),\n/* harmony export */   getMessagesHigherThan: () => (/* binding */ getMessagesHigherThan),\n/* harmony export */   getOldMessages: () => (/* binding */ getOldMessages),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   removeMessagesById: () => (/* binding */ removeMessagesById),\n/* harmony export */   type: () => (/* binding */ type),\n/* harmony export */   writeMessage: () => (/* binding */ writeMessage)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/* harmony import */ var oblivious_set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! oblivious-set */ \"(ssr)/./node_modules/oblivious-set/dist/es/index.js\");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../options */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n *\n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */ \nvar microSeconds = _util_js__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\n\n\nvar DB_PREFIX = \"pubkey.broadcast-channel-0-\";\nvar OBJECT_STORE_ID = \"messages\";\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */ var TRANSACTION_SETTINGS = {\n    durability: \"relaxed\"\n};\nvar type = \"idb\";\nfunction getIdb() {\n    if (typeof indexedDB !== \"undefined\") return indexedDB;\n    if (false) {}\n    return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */ function commitIndexedDBTransaction(tx) {\n    if (tx.commit) {\n        tx.commit();\n    }\n}\nfunction createDatabase(channelName) {\n    var IndexedDB = getIdb();\n    // create table\n    var dbName = DB_PREFIX + channelName;\n    /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */ var openRequest = IndexedDB.open(dbName);\n    openRequest.onupgradeneeded = function(ev) {\n        var db = ev.target.result;\n        db.createObjectStore(OBJECT_STORE_ID, {\n            keyPath: \"id\",\n            autoIncrement: true\n        });\n    };\n    var dbPromise = new Promise(function(res, rej) {\n        openRequest.onerror = function(ev) {\n            return rej(ev);\n        };\n        openRequest.onsuccess = function() {\n            res(openRequest.result);\n        };\n    });\n    return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */ function writeMessage(db, readerUuid, messageJson) {\n    var time = new Date().getTime();\n    var writeObject = {\n        uuid: readerUuid,\n        time: time,\n        data: messageJson\n    };\n    var tx = db.transaction([\n        OBJECT_STORE_ID\n    ], \"readwrite\", TRANSACTION_SETTINGS);\n    return new Promise(function(res, rej) {\n        tx.oncomplete = function() {\n            return res();\n        };\n        tx.onerror = function(ev) {\n            return rej(ev);\n        };\n        var objectStore = tx.objectStore(OBJECT_STORE_ID);\n        objectStore.add(writeObject);\n        commitIndexedDBTransaction(tx);\n    });\n}\nfunction getAllMessages(db) {\n    var tx = db.transaction(OBJECT_STORE_ID, \"readonly\", TRANSACTION_SETTINGS);\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    var ret = [];\n    return new Promise(function(res) {\n        objectStore.openCursor().onsuccess = function(ev) {\n            var cursor = ev.target.result;\n            if (cursor) {\n                ret.push(cursor.value);\n                //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n                cursor[\"continue\"]();\n            } else {\n                commitIndexedDBTransaction(tx);\n                res(ret);\n            }\n        };\n    });\n}\nfunction getMessagesHigherThan(db, lastCursorId) {\n    var tx = db.transaction(OBJECT_STORE_ID, \"readonly\", TRANSACTION_SETTINGS);\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    var ret = [];\n    var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n    /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */ if (objectStore.getAll) {\n        var getAllRequest = objectStore.getAll(keyRangeValue);\n        return new Promise(function(res, rej) {\n            getAllRequest.onerror = function(err) {\n                return rej(err);\n            };\n            getAllRequest.onsuccess = function(e) {\n                res(e.target.result);\n            };\n        });\n    }\n    function openCursor() {\n        // Occasionally Safari will fail on IDBKeyRange.bound, this\n        // catches that error, having it open the cursor to the first\n        // item. When it gets data it will advance to the desired key.\n        try {\n            keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n            return objectStore.openCursor(keyRangeValue);\n        } catch (e) {\n            return objectStore.openCursor();\n        }\n    }\n    return new Promise(function(res, rej) {\n        var openCursorRequest = openCursor();\n        openCursorRequest.onerror = function(err) {\n            return rej(err);\n        };\n        openCursorRequest.onsuccess = function(ev) {\n            var cursor = ev.target.result;\n            if (cursor) {\n                if (cursor.value.id < lastCursorId + 1) {\n                    cursor[\"continue\"](lastCursorId + 1);\n                } else {\n                    ret.push(cursor.value);\n                    cursor[\"continue\"]();\n                }\n            } else {\n                commitIndexedDBTransaction(tx);\n                res(ret);\n            }\n        };\n    });\n}\nfunction removeMessagesById(db, ids) {\n    var tx = db.transaction([\n        OBJECT_STORE_ID\n    ], \"readwrite\", TRANSACTION_SETTINGS);\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    return Promise.all(ids.map(function(id) {\n        var deleteRequest = objectStore[\"delete\"](id);\n        return new Promise(function(res) {\n            deleteRequest.onsuccess = function() {\n                return res();\n            };\n        });\n    }));\n}\nfunction getOldMessages(db, ttl) {\n    var olderThen = new Date().getTime() - ttl;\n    var tx = db.transaction(OBJECT_STORE_ID, \"readonly\", TRANSACTION_SETTINGS);\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    var ret = [];\n    return new Promise(function(res) {\n        objectStore.openCursor().onsuccess = function(ev) {\n            var cursor = ev.target.result;\n            if (cursor) {\n                var msgObk = cursor.value;\n                if (msgObk.time < olderThen) {\n                    ret.push(msgObk);\n                    //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n                    cursor[\"continue\"]();\n                } else {\n                    // no more old messages,\n                    commitIndexedDBTransaction(tx);\n                    res(ret);\n                    return;\n                }\n            } else {\n                res(ret);\n            }\n        };\n    });\n}\nfunction cleanOldMessages(db, ttl) {\n    return getOldMessages(db, ttl).then(function(tooOld) {\n        return removeMessagesById(db, tooOld.map(function(msg) {\n            return msg.id;\n        }));\n    });\n}\nfunction create(channelName, options) {\n    options = (0,_options__WEBPACK_IMPORTED_MODULE_1__.fillOptionsWithDefaults)(options);\n    return createDatabase(channelName).then(function(db) {\n        var state = {\n            closed: false,\n            lastCursorId: 0,\n            channelName: channelName,\n            options: options,\n            uuid: (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.randomToken)(),\n            /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */ eMIs: new oblivious_set__WEBPACK_IMPORTED_MODULE_2__.ObliviousSet(options.idb.ttl * 2),\n            // ensures we do not read messages in parrallel\n            writeBlockPromise: _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID,\n            messagesCallback: null,\n            readQueuePromises: [],\n            db: db\n        };\n        /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */ db.onclose = function() {\n            state.closed = true;\n            if (options.idb.onclose) options.idb.onclose();\n        };\n        /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */ _readLoop(state);\n        return state;\n    });\n}\nfunction _readLoop(state) {\n    if (state.closed) return;\n    readNewMessages(state).then(function() {\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.sleep)(state.options.idb.fallbackInterval);\n    }).then(function() {\n        return _readLoop(state);\n    });\n}\nfunction _filterMessage(msgObj, state) {\n    if (msgObj.uuid === state.uuid) return false; // send by own\n    if (state.eMIs.has(msgObj.id)) return false; // already emitted\n    if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n    return true;\n}\n/**\n * reads all new messages from the database and emits them\n */ function readNewMessages(state) {\n    // channel already closed\n    if (state.closed) return _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n    // if no one is listening, we do not need to scan for new messages\n    if (!state.messagesCallback) return _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n    return getMessagesHigherThan(state.db, state.lastCursorId).then(function(newerMessages) {\n        var useMessages = newerMessages/**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */ .filter(function(msgObj) {\n            return !!msgObj;\n        }).map(function(msgObj) {\n            if (msgObj.id > state.lastCursorId) {\n                state.lastCursorId = msgObj.id;\n            }\n            return msgObj;\n        }).filter(function(msgObj) {\n            return _filterMessage(msgObj, state);\n        }).sort(function(msgObjA, msgObjB) {\n            return msgObjA.time - msgObjB.time;\n        }); // sort by time\n        useMessages.forEach(function(msgObj) {\n            if (state.messagesCallback) {\n                state.eMIs.add(msgObj.id);\n                state.messagesCallback(msgObj.data);\n            }\n        });\n        return _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n    });\n}\nfunction close(channelState) {\n    channelState.closed = true;\n    channelState.db.close();\n}\nfunction postMessage(channelState, messageJson) {\n    channelState.writeBlockPromise = channelState.writeBlockPromise.then(function() {\n        return writeMessage(channelState.db, channelState.uuid, messageJson);\n    }).then(function() {\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_0__.randomInt)(0, 10) === 0) {\n            /* await (do not await) */ cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n        }\n    });\n    return channelState.writeBlockPromise;\n}\nfunction onMessage(channelState, fn, time) {\n    channelState.messagesCallbackTime = time;\n    channelState.messagesCallback = fn;\n    readNewMessages(channelState);\n}\nfunction canBeUsed(options) {\n    if (!options.support3PC) return false;\n    var idb = getIdb();\n    if (!idb) return false;\n    return true;\n}\nfunction averageResponseTime(options) {\n    return options.idb.fallbackInterval * 2;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    create: create,\n    close: close,\n    onMessage: onMessage,\n    postMessage: postMessage,\n    canBeUsed: canBeUsed,\n    type: type,\n    averageResponseTime: averageResponseTime,\n    microSeconds: microSeconds\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addStorageEventListener: () => (/* binding */ addStorageEventListener),\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getLocalStorage: () => (/* binding */ getLocalStorage),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   removeStorageEventListener: () => (/* binding */ removeStorageEventListener),\n/* harmony export */   storageKey: () => (/* binding */ storageKey),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var oblivious_set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! oblivious-set */ \"(ssr)/./node_modules/oblivious-set/dist/es/index.js\");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../options */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/**\n * A localStorage-only method which uses localstorage and its 'storage'-event\n * This does not work inside of webworkers because they have no access to locastorage\n * This is basically implemented to support IE9 or your grandmothers toaster.\n * @link https://caniuse.com/#feat=namevalue-storage\n * @link https://caniuse.com/#feat=indexeddb\n */ \n\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\nvar KEY_PREFIX = \"pubkey.broadcastChannel-\";\nvar type = \"localstorage\";\n/**\n * copied from crosstab\n * @link https://github.com/tejacques/crosstab/blob/master/src/crosstab.js#L32\n */ function getLocalStorage() {\n    var localStorage;\n    if (true) return null;\n    try {\n        localStorage = window.localStorage;\n        localStorage = window[\"ie8-eventlistener/storage\"] || window.localStorage;\n    } catch (e) {\n    // New versions of Firefox throw a Security exception\n    // if cookies are disabled. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1028153\n    }\n    return localStorage;\n}\nfunction storageKey(channelName) {\n    return KEY_PREFIX + channelName;\n}\n/**\n * writes the new message to the storage\n * and fires the storage-event so other readers can find it\n */ function postMessage(channelState, messageJson) {\n    return new Promise(function(res) {\n        (0,_util__WEBPACK_IMPORTED_MODULE_0__.sleep)().then(function() {\n            var key = storageKey(channelState.channelName);\n            var writeObj = {\n                token: (0,_util__WEBPACK_IMPORTED_MODULE_0__.randomToken)(),\n                time: new Date().getTime(),\n                data: messageJson,\n                uuid: channelState.uuid\n            };\n            var value = JSON.stringify(writeObj);\n            getLocalStorage().setItem(key, value);\n            /**\n       * StorageEvent does not fire the 'storage' event\n       * in the window that changes the state of the local storage.\n       * So we fire it manually\n       */ var ev = document.createEvent(\"Event\");\n            ev.initEvent(\"storage\", true, true);\n            ev.key = key;\n            ev.newValue = value;\n            window.dispatchEvent(ev);\n            res();\n        });\n    });\n}\nfunction addStorageEventListener(channelName, fn) {\n    var key = storageKey(channelName);\n    var listener = function listener(ev) {\n        if (ev.key === key) {\n            fn(JSON.parse(ev.newValue));\n        }\n    };\n    window.addEventListener(\"storage\", listener);\n    return listener;\n}\nfunction removeStorageEventListener(listener) {\n    window.removeEventListener(\"storage\", listener);\n}\nfunction create(channelName, options) {\n    options = (0,_options__WEBPACK_IMPORTED_MODULE_1__.fillOptionsWithDefaults)(options);\n    if (!canBeUsed(options)) {\n        throw new Error(\"BroadcastChannel: localstorage cannot be used\");\n    }\n    var uuid = (0,_util__WEBPACK_IMPORTED_MODULE_0__.randomToken)();\n    /**\n   * eMIs\n   * contains all messages that have been emitted before\n   * @type {ObliviousSet}\n   */ var eMIs = new oblivious_set__WEBPACK_IMPORTED_MODULE_2__.ObliviousSet(options.localstorage.removeTimeout);\n    var state = {\n        channelName: channelName,\n        uuid: uuid,\n        eMIs: eMIs // emittedMessagesIds\n    };\n    state.listener = addStorageEventListener(channelName, function(msgObj) {\n        if (!state.messagesCallback) return; // no listener\n        if (msgObj.uuid === uuid) return; // own message\n        if (!msgObj.token || eMIs.has(msgObj.token)) return; // already emitted\n        if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old\n        eMIs.add(msgObj.token);\n        state.messagesCallback(msgObj.data);\n    });\n    return state;\n}\nfunction close(channelState) {\n    removeStorageEventListener(channelState.listener);\n}\nfunction onMessage(channelState, fn, time) {\n    channelState.messagesCallbackTime = time;\n    channelState.messagesCallback = fn;\n}\nfunction canBeUsed(options) {\n    if (!options.support3PC) return false;\n    var ls = getLocalStorage();\n    if (!ls) return false;\n    try {\n        var key = \"__broadcastchannel_check\";\n        ls.setItem(key, \"works\");\n        ls.removeItem(key);\n    } catch (e) {\n        // Safari 10 in private mode will not allow write access to local\n        // storage and fail with a QuotaExceededError. See\n        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API#Private_Browsing_Incognito_modes\n        return false;\n    }\n    return true;\n}\nfunction averageResponseTime() {\n    var defaultTime = 120;\n    var userAgent = navigator.userAgent.toLowerCase();\n    if (userAgent.includes(\"safari\") && !userAgent.includes(\"chrome\")) {\n        // safari is much slower so this time is higher\n        return defaultTime * 2;\n    }\n    return defaultTime;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    create: create,\n    close: close,\n    onMessage: onMessage,\n    postMessage: postMessage,\n    canBeUsed: canBeUsed,\n    type: type,\n    averageResponseTime: averageResponseTime,\n    microSeconds: microSeconds\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\nvar type = \"native\";\nfunction create(channelName) {\n    var state = {\n        messagesCallback: null,\n        bc: new BroadcastChannel(channelName),\n        subFns: [] // subscriberFunctions\n    };\n    state.bc.onmessage = function(msg) {\n        if (state.messagesCallback) {\n            state.messagesCallback(msg.data);\n        }\n    };\n    return state;\n}\nfunction close(channelState) {\n    channelState.bc.close();\n    channelState.subFns = [];\n}\nfunction postMessage(channelState, messageJson) {\n    try {\n        channelState.bc.postMessage(messageJson, false);\n        return _util__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n    } catch (err) {\n        return Promise.reject(err);\n    }\n}\nfunction onMessage(channelState, fn) {\n    channelState.messagesCallback = fn;\n}\nfunction canBeUsed(options) {\n    /**\n   * in the electron-renderer, isNode will be true even if we are in browser-context\n   * so we also check if window is undefined\n   */ if (true) return false;\n    if (!options.support3PC) return false;\n    if (typeof BroadcastChannel === \"function\") {\n        if (BroadcastChannel._pubkey) {\n            throw new Error(\"BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill\");\n        }\n        return true;\n    } else return false;\n}\nfunction averageResponseTime() {\n    return 150;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    create: create,\n    close: close,\n    onMessage: onMessage,\n    postMessage: postMessage,\n    canBeUsed: canBeUsed,\n    type: type,\n    averageResponseTime: averageResponseTime,\n    microSeconds: microSeconds\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL25hdGl2ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXVFO0FBQ2hFLElBQUlBLGVBQWVDLCtDQUFLQSxDQUFDO0FBQ3pCLElBQUlFLE9BQU8sU0FBUztBQUNwQixTQUFTQyxPQUFPQyxXQUFXO0lBQ2hDLElBQUlDLFFBQVE7UUFDVkMsa0JBQWtCO1FBQ2xCQyxJQUFJLElBQUlDLGlCQUFpQko7UUFDekJLLFFBQVEsRUFBRSxDQUFDLHNCQUFzQjtJQUNuQztJQUVBSixNQUFNRSxFQUFFLENBQUNHLFNBQVMsR0FBRyxTQUFVQyxHQUFHO1FBQ2hDLElBQUlOLE1BQU1DLGdCQUFnQixFQUFFO1lBQzFCRCxNQUFNQyxnQkFBZ0IsQ0FBQ0ssSUFBSUMsSUFBSTtRQUNqQztJQUNGO0lBQ0EsT0FBT1A7QUFDVDtBQUNPLFNBQVNRLE1BQU1DLFlBQVk7SUFDaENBLGFBQWFQLEVBQUUsQ0FBQ00sS0FBSztJQUNyQkMsYUFBYUwsTUFBTSxHQUFHLEVBQUU7QUFDMUI7QUFDTyxTQUFTTSxZQUFZRCxZQUFZLEVBQUVFLFdBQVc7SUFDbkQsSUFBSTtRQUNGRixhQUFhUCxFQUFFLENBQUNRLFdBQVcsQ0FBQ0MsYUFBYTtRQUN6QyxPQUFPZix3REFBcUJBO0lBQzlCLEVBQUUsT0FBT2dCLEtBQUs7UUFDWixPQUFPQyxRQUFRQyxNQUFNLENBQUNGO0lBQ3hCO0FBQ0Y7QUFDTyxTQUFTRyxVQUFVTixZQUFZLEVBQUVPLEVBQUU7SUFDeENQLGFBQWFSLGdCQUFnQixHQUFHZTtBQUNsQztBQUNPLFNBQVNDLFVBQVVDLE9BQU87SUFDL0I7OztHQUdDLEdBQ0QsSUFBSSxJQUFrQixFQUFhLE9BQU87SUFDMUMsSUFBSSxDQUFDQSxRQUFRQyxVQUFVLEVBQUUsT0FBTztJQUNoQyxJQUFJLE9BQU9oQixxQkFBcUIsWUFBWTtRQUMxQyxJQUFJQSxpQkFBaUJpQixPQUFPLEVBQUU7WUFDNUIsTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO1FBQ0EsT0FBTztJQUNULE9BQU8sT0FBTztBQUNoQjtBQUNPLFNBQVNDO0lBQ2QsT0FBTztBQUNUO0FBQ0EsaUVBQWU7SUFDYnhCLFFBQVFBO0lBQ1JVLE9BQU9BO0lBQ1BPLFdBQVdBO0lBQ1hMLGFBQWFBO0lBQ2JPLFdBQVdBO0lBQ1hwQixNQUFNQTtJQUNOeUIscUJBQXFCQTtJQUNyQjVCLGNBQWNBO0FBQ2hCLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL25hdGl2ZS5qcz9hM2VmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1pY3JvU2Vjb25kcyBhcyBtaWNybywgUFJPTUlTRV9SRVNPTFZFRF9WT0lEIH0gZnJvbSAnLi4vdXRpbCc7XG5leHBvcnQgdmFyIG1pY3JvU2Vjb25kcyA9IG1pY3JvO1xuZXhwb3J0IHZhciB0eXBlID0gJ25hdGl2ZSc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKGNoYW5uZWxOYW1lKSB7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICBtZXNzYWdlc0NhbGxiYWNrOiBudWxsLFxuICAgIGJjOiBuZXcgQnJvYWRjYXN0Q2hhbm5lbChjaGFubmVsTmFtZSksXG4gICAgc3ViRm5zOiBbXSAvLyBzdWJzY3JpYmVyRnVuY3Rpb25zXG4gIH07XG5cbiAgc3RhdGUuYmMub25tZXNzYWdlID0gZnVuY3Rpb24gKG1zZykge1xuICAgIGlmIChzdGF0ZS5tZXNzYWdlc0NhbGxiYWNrKSB7XG4gICAgICBzdGF0ZS5tZXNzYWdlc0NhbGxiYWNrKG1zZy5kYXRhKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBzdGF0ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZShjaGFubmVsU3RhdGUpIHtcbiAgY2hhbm5lbFN0YXRlLmJjLmNsb3NlKCk7XG4gIGNoYW5uZWxTdGF0ZS5zdWJGbnMgPSBbXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3N0TWVzc2FnZShjaGFubmVsU3RhdGUsIG1lc3NhZ2VKc29uKSB7XG4gIHRyeSB7XG4gICAgY2hhbm5lbFN0YXRlLmJjLnBvc3RNZXNzYWdlKG1lc3NhZ2VKc29uLCBmYWxzZSk7XG4gICAgcmV0dXJuIFBST01JU0VfUkVTT0xWRURfVk9JRDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBvbk1lc3NhZ2UoY2hhbm5lbFN0YXRlLCBmbikge1xuICBjaGFubmVsU3RhdGUubWVzc2FnZXNDYWxsYmFjayA9IGZuO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbkJlVXNlZChvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBpbiB0aGUgZWxlY3Ryb24tcmVuZGVyZXIsIGlzTm9kZSB3aWxsIGJlIHRydWUgZXZlbiBpZiB3ZSBhcmUgaW4gYnJvd3Nlci1jb250ZXh0XG4gICAqIHNvIHdlIGFsc28gY2hlY2sgaWYgd2luZG93IGlzIHVuZGVmaW5lZFxuICAgKi9cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG4gIGlmICghb3B0aW9ucy5zdXBwb3J0M1BDKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgQnJvYWRjYXN0Q2hhbm5lbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChCcm9hZGNhc3RDaGFubmVsLl9wdWJrZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQnJvYWRjYXN0Q2hhbm5lbDogRG8gbm90IG92ZXJ3cml0ZSB3aW5kb3cuQnJvYWRjYXN0Q2hhbm5lbCB3aXRoIHRoaXMgbW9kdWxlLCB0aGlzIGlzIG5vdCBhIHBvbHlmaWxsJyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGF2ZXJhZ2VSZXNwb25zZVRpbWUoKSB7XG4gIHJldHVybiAxNTA7XG59XG5leHBvcnQgZGVmYXVsdCB7XG4gIGNyZWF0ZTogY3JlYXRlLFxuICBjbG9zZTogY2xvc2UsXG4gIG9uTWVzc2FnZTogb25NZXNzYWdlLFxuICBwb3N0TWVzc2FnZTogcG9zdE1lc3NhZ2UsXG4gIGNhbkJlVXNlZDogY2FuQmVVc2VkLFxuICB0eXBlOiB0eXBlLFxuICBhdmVyYWdlUmVzcG9uc2VUaW1lOiBhdmVyYWdlUmVzcG9uc2VUaW1lLFxuICBtaWNyb1NlY29uZHM6IG1pY3JvU2Vjb25kc1xufTsiXSwibmFtZXMiOlsibWljcm9TZWNvbmRzIiwibWljcm8iLCJQUk9NSVNFX1JFU09MVkVEX1ZPSUQiLCJ0eXBlIiwiY3JlYXRlIiwiY2hhbm5lbE5hbWUiLCJzdGF0ZSIsIm1lc3NhZ2VzQ2FsbGJhY2siLCJiYyIsIkJyb2FkY2FzdENoYW5uZWwiLCJzdWJGbnMiLCJvbm1lc3NhZ2UiLCJtc2ciLCJkYXRhIiwiY2xvc2UiLCJjaGFubmVsU3RhdGUiLCJwb3N0TWVzc2FnZSIsIm1lc3NhZ2VKc29uIiwiZXJyIiwiUHJvbWlzZSIsInJlamVjdCIsIm9uTWVzc2FnZSIsImZuIiwiY2FuQmVVc2VkIiwib3B0aW9ucyIsInN1cHBvcnQzUEMiLCJfcHVia2V5IiwiRXJyb3IiLCJhdmVyYWdlUmVzcG9uc2VUaW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getSocketInstance: () => (/* binding */ getSocketInstance),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   removeStorageEventListener: () => (/* binding */ removeStorageEventListener),\n/* harmony export */   setupSocketConnection: () => (/* binding */ setupSocketConnection),\n/* harmony export */   storageKey: () => (/* binding */ storageKey),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"(ssr)/./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var oblivious_set__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! oblivious-set */ \"(ssr)/./node_modules/oblivious-set/dist/es/index.js\");\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! socket.io-client */ \"(ssr)/./node_modules/socket.io-client/build/esm-debug/index.js\");\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\");\n/* harmony import */ var _toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @toruslabs/metadata-helpers */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../options */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n\n\n/**\n * A localStorage-only method which uses localstorage and its 'storage'-event\n * This does not work inside of webworkers because they have no access to locastorage\n * This is basically implemented to support IE9 or your grandmothers toaster.\n * @link https://caniuse.com/#feat=namevalue-storage\n * @link https://caniuse.com/#feat=indexeddb\n */ \n\n\n\n\n\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_5__.microSeconds;\nvar KEY_PREFIX = \"pubkey.broadcastChannel-\";\nvar type = \"server\";\nvar SOCKET_CONN_INSTANCE = null;\n// used to decide to reconnect socket e.g. when socket connection is disconnected unexpectedly\nvar runningChannels = new Set();\nfunction storageKey(channelName) {\n    return KEY_PREFIX + channelName;\n}\n/**\n * writes the new message to the storage\n * and fires the storage-event so other readers can find it\n */ function postMessage(channelState, messageJson) {\n    return new Promise(function(res, rej) {\n        (0,_util__WEBPACK_IMPORTED_MODULE_5__.sleep)().then(/*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee() {\n            var key, channelEncPrivKey, encData, body;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n                while(1)switch(_context.prev = _context.next){\n                    case 0:\n                        key = storageKey(channelState.channelName);\n                        channelEncPrivKey = (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.keccak256)(Buffer.from(key, \"utf8\"));\n                        _context.next = 4;\n                        return (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.encryptData)(channelEncPrivKey.toString(\"hex\"), {\n                            token: (0,_util__WEBPACK_IMPORTED_MODULE_5__.randomToken)(),\n                            time: new Date().getTime(),\n                            data: messageJson,\n                            uuid: channelState.uuid\n                        });\n                    case 4:\n                        encData = _context.sent;\n                        _context.t0 = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(channelEncPrivKey).toString(\"hex\");\n                        _context.t1 = encData;\n                        _context.next = 9;\n                        return (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.sign)(channelEncPrivKey, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.keccak256)(Buffer.from(encData, \"utf8\")));\n                    case 9:\n                        _context.t2 = _context.sent.toString(\"hex\");\n                        body = {\n                            sameOriginCheck: true,\n                            sameIpCheck: true,\n                            key: _context.t0,\n                            data: _context.t1,\n                            signature: _context.t2\n                        };\n                        if (channelState.timeout) body.timeout = channelState.timeout;\n                        return _context.abrupt(\"return\", fetch(channelState.serverUrl + \"/channel/set\", {\n                            method: \"POST\",\n                            body: JSON.stringify(body),\n                            headers: {\n                                \"Content-Type\": \"application/json; charset=utf-8\"\n                            }\n                        }).then(res)[\"catch\"](rej));\n                    case 13:\n                    case \"end\":\n                        return _context.stop();\n                }\n            }, _callee);\n        })));\n    });\n}\nfunction getSocketInstance(serverUrl) {\n    if (SOCKET_CONN_INSTANCE) {\n        return SOCKET_CONN_INSTANCE;\n    }\n    var SOCKET_CONN = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_2__.io)(serverUrl, {\n        transports: [\n            \"websocket\",\n            \"polling\"\n        ],\n        // use WebSocket first, if available\n        withCredentials: true,\n        reconnectionDelayMax: 10000,\n        reconnectionAttempts: 10\n    });\n    SOCKET_CONN.on(\"connect_error\", function(err) {\n        // revert to classic upgrade\n        SOCKET_CONN.io.opts.transports = [\n            \"polling\",\n            \"websocket\"\n        ];\n        _util__WEBPACK_IMPORTED_MODULE_5__.log.error(\"connect error\", err);\n    });\n    SOCKET_CONN.on(\"connect\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2() {\n        var engine;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n            while(1)switch(_context2.prev = _context2.next){\n                case 0:\n                    engine = SOCKET_CONN.io.engine;\n                    _util__WEBPACK_IMPORTED_MODULE_5__.log.debug(\"initially connected to\", engine.transport.name); // in most cases, prints \"polling\"\n                    engine.once(\"upgrade\", function() {\n                        // called when the transport is upgraded (i.e. from HTTP long-polling to WebSocket)\n                        _util__WEBPACK_IMPORTED_MODULE_5__.log.debug(\"upgraded\", engine.transport.name); // in most cases, prints \"websocket\"\n                    });\n                    engine.once(\"close\", function(reason) {\n                        // called when the underlying connection is closed\n                        _util__WEBPACK_IMPORTED_MODULE_5__.log.debug(\"connection closed\", reason);\n                    });\n                case 4:\n                case \"end\":\n                    return _context2.stop();\n            }\n        }, _callee2);\n    })));\n    SOCKET_CONN.on(\"error\", function(err) {\n        _util__WEBPACK_IMPORTED_MODULE_5__.log.error(\"socket errored\", err);\n        SOCKET_CONN.disconnect();\n    });\n    SOCKET_CONN_INSTANCE = SOCKET_CONN;\n    return SOCKET_CONN;\n}\nfunction setupSocketConnection(serverUrl, channelState, fn) {\n    var socketConn = getSocketInstance(serverUrl);\n    var key = storageKey(channelState.channelName);\n    var channelEncPrivKey = (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.keccak256)(Buffer.from(key, \"utf8\"));\n    var channelPubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(channelEncPrivKey).toString(\"hex\");\n    if (socketConn.connected) {\n        socketConn.emit(\"check_auth_status\", channelPubKey, {\n            sameOriginCheck: true,\n            sameIpCheck: true\n        });\n    } else {\n        socketConn.once(\"connect\", function() {\n            _util__WEBPACK_IMPORTED_MODULE_5__.log.debug(\"connected with socket\");\n            socketConn.emit(\"check_auth_status\", channelPubKey, {\n                sameOriginCheck: true,\n                sameIpCheck: true\n            });\n        });\n    }\n    var reconnect = function reconnect() {\n        socketConn.once(\"connect\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee3() {\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee3$(_context3) {\n                while(1)switch(_context3.prev = _context3.next){\n                    case 0:\n                        if (runningChannels.has(channelState.channelName)) {\n                            socketConn.emit(\"check_auth_status\", channelPubKey, {\n                                sameOriginCheck: true,\n                                sameIpCheck: true\n                            });\n                        }\n                    case 1:\n                    case \"end\":\n                        return _context3.stop();\n                }\n            }, _callee3);\n        })));\n    };\n    var visibilityListener = function visibilityListener() {\n        // if channel is closed, then remove the listener.\n        if (!socketConn || !runningChannels.has(channelState.channelName)) {\n            document.removeEventListener(\"visibilitychange\", visibilityListener);\n            return;\n        }\n        // if not connected, then wait for connection and ping server for latest msg.\n        if (!socketConn.connected && document.visibilityState === \"visible\") {\n            reconnect();\n        }\n    };\n    var listener = /*#__PURE__*/ function() {\n        var _ref4 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee4(ev) {\n            var decData;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee4$(_context4) {\n                while(1)switch(_context4.prev = _context4.next){\n                    case 0:\n                        _context4.prev = 0;\n                        _context4.next = 3;\n                        return (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.decryptData)(channelEncPrivKey.toString(\"hex\"), ev);\n                    case 3:\n                        decData = _context4.sent;\n                        _util__WEBPACK_IMPORTED_MODULE_5__.log.info(decData);\n                        fn(decData);\n                        _context4.next = 11;\n                        break;\n                    case 8:\n                        _context4.prev = 8;\n                        _context4.t0 = _context4[\"catch\"](0);\n                        _util__WEBPACK_IMPORTED_MODULE_5__.log.error(_context4.t0);\n                    case 11:\n                    case \"end\":\n                        return _context4.stop();\n                }\n            }, _callee4, null, [\n                [\n                    0,\n                    8\n                ]\n            ]);\n        }));\n        return function listener(_x) {\n            return _ref4.apply(this, arguments);\n        };\n    }();\n    socketConn.on(\"disconnect\", function() {\n        _util__WEBPACK_IMPORTED_MODULE_5__.log.debug(\"socket disconnected\");\n        if (runningChannels.has(channelState.channelName)) {\n            _util__WEBPACK_IMPORTED_MODULE_5__.log.error(\"socket disconnected unexpectedly, reconnecting socket\");\n            reconnect();\n        }\n    });\n    socketConn.on(channelPubKey + \"_success\", listener);\n    if (typeof document !== \"undefined\") document.addEventListener(\"visibilitychange\", visibilityListener);\n    return socketConn;\n}\nfunction removeStorageEventListener() {\n    if (SOCKET_CONN_INSTANCE) {\n        SOCKET_CONN_INSTANCE.disconnect();\n    }\n}\nfunction create(channelName, options) {\n    options = (0,_options__WEBPACK_IMPORTED_MODULE_6__.fillOptionsWithDefaults)(options);\n    if (!canBeUsed(options)) {\n        throw new Error(\"BroadcastChannel: server cannot be used\");\n    }\n    var uuid = (0,_util__WEBPACK_IMPORTED_MODULE_5__.randomToken)();\n    /**\n   * eMIs\n   * contains all messages that have been emitted before\n   * @type {ObliviousSet}\n   */ var eMIs = new oblivious_set__WEBPACK_IMPORTED_MODULE_7__.ObliviousSet(options.server.removeTimeout);\n    var state = {\n        channelName: channelName,\n        uuid: uuid,\n        eMIs: eMIs,\n        // emittedMessagesIds\n        serverUrl: options.server.url\n    };\n    if (options.server.timeout) state.timeout = options.server.timeout;\n    setupSocketConnection(options.server.url, state, function(msgObj) {\n        if (!state.messagesCallback) return; // no listener\n        if (msgObj.uuid === state.uuid) return; // own message\n        if (!msgObj.token || state.eMIs.has(msgObj.token)) return; // already emitted\n        // if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old\n        state.eMIs.add(msgObj.token);\n        state.messagesCallback(msgObj.data);\n    });\n    runningChannels.add(channelName);\n    return state;\n}\nfunction close(channelState) {\n    runningChannels[\"delete\"](channelState.channelName);\n// give 2 sec for all msgs which are in transit to be consumed\n// by receiver.\n// window.setTimeout(() => {\n//     removeStorageEventListener(channelState);\n//     SOCKET_CONN_INSTANCE = null;\n// }, 1000);\n}\nfunction onMessage(channelState, fn, time) {\n    channelState.messagesCallbackTime = time;\n    channelState.messagesCallback = fn;\n}\nfunction canBeUsed() {\n    return true;\n}\nfunction averageResponseTime() {\n    var defaultTime = 500;\n    // TODO: Maybe increase it based on operation\n    return defaultTime;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    create: create,\n    close: close,\n    onMessage: onMessage,\n    postMessage: postMessage,\n    canBeUsed: canBeUsed,\n    type: type,\n    averageResponseTime: averageResponseTime,\n    microSeconds: microSeconds\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\nvar type = \"simulate\";\nvar SIMULATE_CHANNELS = new Set();\nfunction create(channelName) {\n    var state = {\n        name: channelName,\n        messagesCallback: null\n    };\n    SIMULATE_CHANNELS.add(state);\n    return state;\n}\nfunction close(channelState) {\n    SIMULATE_CHANNELS[\"delete\"](channelState);\n}\nfunction postMessage(channelState, messageJson) {\n    return new Promise(function(res) {\n        return setTimeout(function() {\n            var channelArray = Array.from(SIMULATE_CHANNELS);\n            channelArray.filter(function(channel) {\n                return channel.name === channelState.name;\n            }).filter(function(channel) {\n                return channel !== channelState;\n            }).filter(function(channel) {\n                return !!channel.messagesCallback;\n            }).forEach(function(channel) {\n                return channel.messagesCallback(messageJson);\n            });\n            res();\n        }, 5);\n    });\n}\nfunction onMessage(channelState, fn) {\n    channelState.messagesCallback = fn;\n}\nfunction canBeUsed() {\n    return true;\n}\nfunction averageResponseTime() {\n    return 5;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    create: create,\n    close: close,\n    onMessage: onMessage,\n    postMessage: postMessage,\n    canBeUsed: canBeUsed,\n    type: type,\n    averageResponseTime: averageResponseTime,\n    microSeconds: microSeconds\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL3NpbXVsYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDekMsSUFBSUEsZUFBZUMsK0NBQUtBLENBQUM7QUFDekIsSUFBSUMsT0FBTyxXQUFXO0FBQzdCLElBQUlDLG9CQUFvQixJQUFJQztBQUNyQixTQUFTQyxPQUFPQyxXQUFXO0lBQ2hDLElBQUlDLFFBQVE7UUFDVkMsTUFBTUY7UUFDTkcsa0JBQWtCO0lBQ3BCO0lBQ0FOLGtCQUFrQk8sR0FBRyxDQUFDSDtJQUN0QixPQUFPQTtBQUNUO0FBQ08sU0FBU0ksTUFBTUMsWUFBWTtJQUNoQ1QsaUJBQWlCLENBQUMsU0FBUyxDQUFDUztBQUM5QjtBQUNPLFNBQVNDLFlBQVlELFlBQVksRUFBRUUsV0FBVztJQUNuRCxPQUFPLElBQUlDLFFBQVEsU0FBVUMsR0FBRztRQUM5QixPQUFPQyxXQUFXO1lBQ2hCLElBQUlDLGVBQWVDLE1BQU1DLElBQUksQ0FBQ2pCO1lBQzlCZSxhQUFhRyxNQUFNLENBQUMsU0FBVUMsT0FBTztnQkFDbkMsT0FBT0EsUUFBUWQsSUFBSSxLQUFLSSxhQUFhSixJQUFJO1lBQzNDLEdBQUdhLE1BQU0sQ0FBQyxTQUFVQyxPQUFPO2dCQUN6QixPQUFPQSxZQUFZVjtZQUNyQixHQUFHUyxNQUFNLENBQUMsU0FBVUMsT0FBTztnQkFDekIsT0FBTyxDQUFDLENBQUNBLFFBQVFiLGdCQUFnQjtZQUNuQyxHQUFHYyxPQUFPLENBQUMsU0FBVUQsT0FBTztnQkFDMUIsT0FBT0EsUUFBUWIsZ0JBQWdCLENBQUNLO1lBQ2xDO1lBQ0FFO1FBQ0YsR0FBRztJQUNMO0FBQ0Y7QUFDTyxTQUFTUSxVQUFVWixZQUFZLEVBQUVhLEVBQUU7SUFDeENiLGFBQWFILGdCQUFnQixHQUFHZ0I7QUFDbEM7QUFDTyxTQUFTQztJQUNkLE9BQU87QUFDVDtBQUNPLFNBQVNDO0lBQ2QsT0FBTztBQUNUO0FBQ0EsaUVBQWU7SUFDYnRCLFFBQVFBO0lBQ1JNLE9BQU9BO0lBQ1BhLFdBQVdBO0lBQ1hYLGFBQWFBO0lBQ2JhLFdBQVdBO0lBQ1h4QixNQUFNQTtJQUNOeUIscUJBQXFCQTtJQUNyQjNCLGNBQWNBO0FBQ2hCLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL3NpbXVsYXRlLmpzPzI5MDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWljcm9TZWNvbmRzIGFzIG1pY3JvIH0gZnJvbSAnLi4vdXRpbCc7XG5leHBvcnQgdmFyIG1pY3JvU2Vjb25kcyA9IG1pY3JvO1xuZXhwb3J0IHZhciB0eXBlID0gJ3NpbXVsYXRlJztcbnZhciBTSU1VTEFURV9DSEFOTkVMUyA9IG5ldyBTZXQoKTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoY2hhbm5lbE5hbWUpIHtcbiAgdmFyIHN0YXRlID0ge1xuICAgIG5hbWU6IGNoYW5uZWxOYW1lLFxuICAgIG1lc3NhZ2VzQ2FsbGJhY2s6IG51bGxcbiAgfTtcbiAgU0lNVUxBVEVfQ0hBTk5FTFMuYWRkKHN0YXRlKTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlKGNoYW5uZWxTdGF0ZSkge1xuICBTSU1VTEFURV9DSEFOTkVMU1tcImRlbGV0ZVwiXShjaGFubmVsU3RhdGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGNoYW5uZWxTdGF0ZSwgbWVzc2FnZUpzb24pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2hhbm5lbEFycmF5ID0gQXJyYXkuZnJvbShTSU1VTEFURV9DSEFOTkVMUyk7XG4gICAgICBjaGFubmVsQXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChjaGFubmVsKSB7XG4gICAgICAgIHJldHVybiBjaGFubmVsLm5hbWUgPT09IGNoYW5uZWxTdGF0ZS5uYW1lO1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChjaGFubmVsKSB7XG4gICAgICAgIHJldHVybiBjaGFubmVsICE9PSBjaGFubmVsU3RhdGU7XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGNoYW5uZWwpIHtcbiAgICAgICAgcmV0dXJuICEhY2hhbm5lbC5tZXNzYWdlc0NhbGxiYWNrO1xuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hhbm5lbCkge1xuICAgICAgICByZXR1cm4gY2hhbm5lbC5tZXNzYWdlc0NhbGxiYWNrKG1lc3NhZ2VKc29uKTtcbiAgICAgIH0pO1xuICAgICAgcmVzKCk7XG4gICAgfSwgNSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9uTWVzc2FnZShjaGFubmVsU3RhdGUsIGZuKSB7XG4gIGNoYW5uZWxTdGF0ZS5tZXNzYWdlc0NhbGxiYWNrID0gZm47XG59XG5leHBvcnQgZnVuY3Rpb24gY2FuQmVVc2VkKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhdmVyYWdlUmVzcG9uc2VUaW1lKCkge1xuICByZXR1cm4gNTtcbn1cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY3JlYXRlOiBjcmVhdGUsXG4gIGNsb3NlOiBjbG9zZSxcbiAgb25NZXNzYWdlOiBvbk1lc3NhZ2UsXG4gIHBvc3RNZXNzYWdlOiBwb3N0TWVzc2FnZSxcbiAgY2FuQmVVc2VkOiBjYW5CZVVzZWQsXG4gIHR5cGU6IHR5cGUsXG4gIGF2ZXJhZ2VSZXNwb25zZVRpbWU6IGF2ZXJhZ2VSZXNwb25zZVRpbWUsXG4gIG1pY3JvU2Vjb25kczogbWljcm9TZWNvbmRzXG59OyJdLCJuYW1lcyI6WyJtaWNyb1NlY29uZHMiLCJtaWNybyIsInR5cGUiLCJTSU1VTEFURV9DSEFOTkVMUyIsIlNldCIsImNyZWF0ZSIsImNoYW5uZWxOYW1lIiwic3RhdGUiLCJuYW1lIiwibWVzc2FnZXNDYWxsYmFjayIsImFkZCIsImNsb3NlIiwiY2hhbm5lbFN0YXRlIiwicG9zdE1lc3NhZ2UiLCJtZXNzYWdlSnNvbiIsIlByb21pc2UiLCJyZXMiLCJzZXRUaW1lb3V0IiwiY2hhbm5lbEFycmF5IiwiQXJyYXkiLCJmcm9tIiwiZmlsdGVyIiwiY2hhbm5lbCIsImZvckVhY2giLCJvbk1lc3NhZ2UiLCJmbiIsImNhbkJlVXNlZCIsImF2ZXJhZ2VSZXNwb25zZVRpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fillOptionsWithDefaults: () => (/* binding */ fillOptionsWithDefaults)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n\nfunction fillOptionsWithDefaults() {\n    var originalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var options = JSON.parse(JSON.stringify(originalOptions));\n    if (typeof options.support3PC === \"undefined\") options.support3PC = (0,_util__WEBPACK_IMPORTED_MODULE_0__.are3PCSupported)();\n    // main\n    if (typeof options.webWorkerSupport === \"undefined\") options.webWorkerSupport = true;\n    // indexed-db\n    if (!options.idb) options.idb = {};\n    //  after this time the messages get deleted\n    if (!options.idb.ttl) options.idb.ttl = 1000 * 45;\n    if (!options.idb.fallbackInterval) options.idb.fallbackInterval = 150;\n    //  handles abrupt db onclose events.\n    if (originalOptions.idb && typeof originalOptions.idb.onclose === \"function\") options.idb.onclose = originalOptions.idb.onclose;\n    // localstorage\n    if (!options.localstorage) options.localstorage = {};\n    if (!options.localstorage.removeTimeout) options.localstorage.removeTimeout = 1000 * 60;\n    // server\n    if (!options.server) options.server = {};\n    if (!options.server.url) options.server.url = \"https://broadcast-server.tor.us\";\n    if (!options.server.removeTimeout) options.server.removeTimeout = 1000 * 60 * 5; // 5 minutes\n    // custom methods\n    if (originalOptions.methods) options.methods = originalOptions.methods;\n    return options;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9vcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ2xDLFNBQVNDO0lBQ2QsSUFBSUMsa0JBQWtCQyxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS0UsWUFBWUYsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQzNGLElBQUlHLFVBQVVDLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsU0FBUyxDQUFDUDtJQUN4QyxJQUFJLE9BQU9JLFFBQVFJLFVBQVUsS0FBSyxhQUFhSixRQUFRSSxVQUFVLEdBQUdWLHNEQUFlQTtJQUVuRixPQUFPO0lBQ1AsSUFBSSxPQUFPTSxRQUFRSyxnQkFBZ0IsS0FBSyxhQUFhTCxRQUFRSyxnQkFBZ0IsR0FBRztJQUVoRixhQUFhO0lBQ2IsSUFBSSxDQUFDTCxRQUFRTSxHQUFHLEVBQUVOLFFBQVFNLEdBQUcsR0FBRyxDQUFDO0lBQ2pDLDRDQUE0QztJQUM1QyxJQUFJLENBQUNOLFFBQVFNLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFUCxRQUFRTSxHQUFHLENBQUNDLEdBQUcsR0FBRyxPQUFPO0lBQy9DLElBQUksQ0FBQ1AsUUFBUU0sR0FBRyxDQUFDRSxnQkFBZ0IsRUFBRVIsUUFBUU0sR0FBRyxDQUFDRSxnQkFBZ0IsR0FBRztJQUNsRSxxQ0FBcUM7SUFDckMsSUFBSVosZ0JBQWdCVSxHQUFHLElBQUksT0FBT1YsZ0JBQWdCVSxHQUFHLENBQUNHLE9BQU8sS0FBSyxZQUFZVCxRQUFRTSxHQUFHLENBQUNHLE9BQU8sR0FBR2IsZ0JBQWdCVSxHQUFHLENBQUNHLE9BQU87SUFFL0gsZUFBZTtJQUNmLElBQUksQ0FBQ1QsUUFBUVUsWUFBWSxFQUFFVixRQUFRVSxZQUFZLEdBQUcsQ0FBQztJQUNuRCxJQUFJLENBQUNWLFFBQVFVLFlBQVksQ0FBQ0MsYUFBYSxFQUFFWCxRQUFRVSxZQUFZLENBQUNDLGFBQWEsR0FBRyxPQUFPO0lBRXJGLFNBQVM7SUFDVCxJQUFJLENBQUNYLFFBQVFZLE1BQU0sRUFBRVosUUFBUVksTUFBTSxHQUFHLENBQUM7SUFDdkMsSUFBSSxDQUFDWixRQUFRWSxNQUFNLENBQUNDLEdBQUcsRUFBRWIsUUFBUVksTUFBTSxDQUFDQyxHQUFHLEdBQUc7SUFDOUMsSUFBSSxDQUFDYixRQUFRWSxNQUFNLENBQUNELGFBQWEsRUFBRVgsUUFBUVksTUFBTSxDQUFDRCxhQUFhLEdBQUcsT0FBTyxLQUFLLEdBQUcsWUFBWTtJQUU3RixpQkFBaUI7SUFDakIsSUFBSWYsZ0JBQWdCa0IsT0FBTyxFQUFFZCxRQUFRYyxPQUFPLEdBQUdsQixnQkFBZ0JrQixPQUFPO0lBQ3RFLE9BQU9kO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYnJvYWRjYXN0LWNoYW5uZWwvZGlzdC9lc25vZGUvb3B0aW9ucy5qcz8yZjk5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFyZTNQQ1N1cHBvcnRlZCB9IGZyb20gJy4vdXRpbCc7XG5leHBvcnQgZnVuY3Rpb24gZmlsbE9wdGlvbnNXaXRoRGVmYXVsdHMoKSB7XG4gIHZhciBvcmlnaW5hbE9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgb3B0aW9ucyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob3JpZ2luYWxPcHRpb25zKSk7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5zdXBwb3J0M1BDID09PSAndW5kZWZpbmVkJykgb3B0aW9ucy5zdXBwb3J0M1BDID0gYXJlM1BDU3VwcG9ydGVkKCk7XG5cbiAgLy8gbWFpblxuICBpZiAodHlwZW9mIG9wdGlvbnMud2ViV29ya2VyU3VwcG9ydCA9PT0gJ3VuZGVmaW5lZCcpIG9wdGlvbnMud2ViV29ya2VyU3VwcG9ydCA9IHRydWU7XG5cbiAgLy8gaW5kZXhlZC1kYlxuICBpZiAoIW9wdGlvbnMuaWRiKSBvcHRpb25zLmlkYiA9IHt9O1xuICAvLyAgYWZ0ZXIgdGhpcyB0aW1lIHRoZSBtZXNzYWdlcyBnZXQgZGVsZXRlZFxuICBpZiAoIW9wdGlvbnMuaWRiLnR0bCkgb3B0aW9ucy5pZGIudHRsID0gMTAwMCAqIDQ1O1xuICBpZiAoIW9wdGlvbnMuaWRiLmZhbGxiYWNrSW50ZXJ2YWwpIG9wdGlvbnMuaWRiLmZhbGxiYWNrSW50ZXJ2YWwgPSAxNTA7XG4gIC8vICBoYW5kbGVzIGFicnVwdCBkYiBvbmNsb3NlIGV2ZW50cy5cbiAgaWYgKG9yaWdpbmFsT3B0aW9ucy5pZGIgJiYgdHlwZW9mIG9yaWdpbmFsT3B0aW9ucy5pZGIub25jbG9zZSA9PT0gJ2Z1bmN0aW9uJykgb3B0aW9ucy5pZGIub25jbG9zZSA9IG9yaWdpbmFsT3B0aW9ucy5pZGIub25jbG9zZTtcblxuICAvLyBsb2NhbHN0b3JhZ2VcbiAgaWYgKCFvcHRpb25zLmxvY2Fsc3RvcmFnZSkgb3B0aW9ucy5sb2NhbHN0b3JhZ2UgPSB7fTtcbiAgaWYgKCFvcHRpb25zLmxvY2Fsc3RvcmFnZS5yZW1vdmVUaW1lb3V0KSBvcHRpb25zLmxvY2Fsc3RvcmFnZS5yZW1vdmVUaW1lb3V0ID0gMTAwMCAqIDYwO1xuXG4gIC8vIHNlcnZlclxuICBpZiAoIW9wdGlvbnMuc2VydmVyKSBvcHRpb25zLnNlcnZlciA9IHt9O1xuICBpZiAoIW9wdGlvbnMuc2VydmVyLnVybCkgb3B0aW9ucy5zZXJ2ZXIudXJsID0gJ2h0dHBzOi8vYnJvYWRjYXN0LXNlcnZlci50b3IudXMnO1xuICBpZiAoIW9wdGlvbnMuc2VydmVyLnJlbW92ZVRpbWVvdXQpIG9wdGlvbnMuc2VydmVyLnJlbW92ZVRpbWVvdXQgPSAxMDAwICogNjAgKiA1OyAvLyA1IG1pbnV0ZXNcblxuICAvLyBjdXN0b20gbWV0aG9kc1xuICBpZiAob3JpZ2luYWxPcHRpb25zLm1ldGhvZHMpIG9wdGlvbnMubWV0aG9kcyA9IG9yaWdpbmFsT3B0aW9ucy5tZXRob2RzO1xuICByZXR1cm4gb3B0aW9ucztcbn0iXSwibmFtZXMiOlsiYXJlM1BDU3VwcG9ydGVkIiwiZmlsbE9wdGlvbnNXaXRoRGVmYXVsdHMiLCJvcmlnaW5hbE9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJvcHRpb25zIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5Iiwic3VwcG9ydDNQQyIsIndlYldvcmtlclN1cHBvcnQiLCJpZGIiLCJ0dGwiLCJmYWxsYmFja0ludGVydmFsIiwib25jbG9zZSIsImxvY2Fsc3RvcmFnZSIsInJlbW92ZVRpbWVvdXQiLCJzZXJ2ZXIiLCJ1cmwiLCJtZXRob2RzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PROMISE_RESOLVED_FALSE: () => (/* binding */ PROMISE_RESOLVED_FALSE),\n/* harmony export */   PROMISE_RESOLVED_TRUE: () => (/* binding */ PROMISE_RESOLVED_TRUE),\n/* harmony export */   PROMISE_RESOLVED_VOID: () => (/* binding */ PROMISE_RESOLVED_VOID),\n/* harmony export */   are3PCSupported: () => (/* binding */ are3PCSupported),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   randomInt: () => (/* binding */ randomInt),\n/* harmony export */   randomToken: () => (/* binding */ randomToken),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/bowser/src/bowser.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/**\n * returns true if the given object is a promise\n */ function isPromise(obj) {\n    if (obj && typeof obj.then === \"function\") {\n        return true;\n    } else {\n        return false;\n    }\n}\nvar PROMISE_RESOLVED_FALSE = Promise.resolve(false);\nvar PROMISE_RESOLVED_TRUE = Promise.resolve(true);\nvar PROMISE_RESOLVED_VOID = Promise.resolve();\nfunction sleep(time, resolveWith) {\n    if (!time) time = 0;\n    return new Promise(function(res) {\n        return setTimeout(function() {\n            return res(resolveWith);\n        }, time);\n    });\n}\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n/**\n * https://stackoverflow.com/a/8084248\n */ function randomToken() {\n    return Math.random().toString(36).substring(2);\n}\nvar lastMs = 0;\nvar additional = 0;\n/**\n * returns the current time in micro-seconds,\n * WARNING: This is a pseudo-function\n * Performance.now is not reliable in webworkers, so we just make sure to never return the same time.\n * This is enough in browsers, and this function will not be used in nodejs.\n * The main reason for this hack is to ensure that BroadcastChannel behaves equal to production when it is used in fast-running unit tests.\n */ function microSeconds() {\n    var ms = new Date().getTime();\n    if (ms === lastMs) {\n        additional++;\n        return ms * 1000 + additional;\n    } else {\n        lastMs = ms;\n        additional = 0;\n        return ms * 1000;\n    }\n}\nfunction are3PCSupported() {\n    if (typeof navigator === \"undefined\") return false;\n    var browserInfo = bowser__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(navigator.userAgent);\n    log.info(JSON.stringify(browserInfo), \"current browser info\");\n    var thirdPartyCookieSupport = true;\n    // brave\n    if (navigator.brave) {\n        thirdPartyCookieSupport = false;\n    }\n    // All webkit & gecko engine instances use itp (intelligent tracking prevention -\n    // https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp)\n    if (browserInfo.engine.name === bowser__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ENGINE_MAP.WebKit || browserInfo.engine.name === bowser__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ENGINE_MAP.Gecko) {\n        thirdPartyCookieSupport = false;\n    }\n    return thirdPartyCookieSupport;\n}\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_1___default().getLogger(\"broadcast-channel\");\nlog.setLevel(\"error\");\nvar setLogLevel = function setLogLevel(level) {\n    log.setLevel(level);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS91dGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ0k7QUFFaEM7O0NBRUMsR0FDTSxTQUFTRSxVQUFVQyxHQUFHO0lBQzNCLElBQUlBLE9BQU8sT0FBT0EsSUFBSUMsSUFBSSxLQUFLLFlBQVk7UUFDekMsT0FBTztJQUNULE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUNPLElBQUlDLHlCQUF5QkMsUUFBUUMsT0FBTyxDQUFDLE9BQU87QUFDcEQsSUFBSUMsd0JBQXdCRixRQUFRQyxPQUFPLENBQUMsTUFBTTtBQUNsRCxJQUFJRSx3QkFBd0JILFFBQVFDLE9BQU8sR0FBRztBQUM5QyxTQUFTRyxNQUFNQyxJQUFJLEVBQUVDLFdBQVc7SUFDckMsSUFBSSxDQUFDRCxNQUFNQSxPQUFPO0lBQ2xCLE9BQU8sSUFBSUwsUUFBUSxTQUFVTyxHQUFHO1FBQzlCLE9BQU9DLFdBQVc7WUFDaEIsT0FBT0QsSUFBSUQ7UUFDYixHQUFHRDtJQUNMO0FBQ0Y7QUFDTyxTQUFTSSxVQUFVQyxHQUFHLEVBQUVDLEdBQUc7SUFDaEMsT0FBT0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxNQUFNLEtBQU1ILENBQUFBLE1BQU1ELE1BQU0sS0FBS0E7QUFDdEQ7QUFFQTs7Q0FFQyxHQUNNLFNBQVNLO0lBQ2QsT0FBT0gsS0FBS0UsTUFBTSxHQUFHRSxRQUFRLENBQUMsSUFBSUMsU0FBUyxDQUFDO0FBQzlDO0FBQ0EsSUFBSUMsU0FBUztBQUNiLElBQUlDLGFBQWE7QUFFakI7Ozs7OztDQU1DLEdBQ00sU0FBU0M7SUFDZCxJQUFJQyxLQUFLLElBQUlDLE9BQU9DLE9BQU87SUFDM0IsSUFBSUYsT0FBT0gsUUFBUTtRQUNqQkM7UUFDQSxPQUFPRSxLQUFLLE9BQU9GO0lBQ3JCLE9BQU87UUFDTEQsU0FBU0c7UUFDVEYsYUFBYTtRQUNiLE9BQU9FLEtBQUs7SUFDZDtBQUNGO0FBQ08sU0FBU0c7SUFDZCxJQUFJLE9BQU9DLGNBQWMsYUFBYSxPQUFPO0lBQzdDLElBQUlDLGNBQWNoQyw4Q0FBTUEsQ0FBQ2lDLEtBQUssQ0FBQ0YsVUFBVUcsU0FBUztJQUNsREMsSUFBSUMsSUFBSSxDQUFDQyxLQUFLQyxTQUFTLENBQUNOLGNBQWM7SUFDdEMsSUFBSU8sMEJBQTBCO0lBQzlCLFFBQVE7SUFDUixJQUFJUixVQUFVUyxLQUFLLEVBQUU7UUFDbkJELDBCQUEwQjtJQUM1QjtJQUNBLGlGQUFpRjtJQUNqRiwrRUFBK0U7SUFDL0UsSUFBSVAsWUFBWVMsTUFBTSxDQUFDQyxJQUFJLEtBQUsxQyw4Q0FBTUEsQ0FBQzJDLFVBQVUsQ0FBQ0MsTUFBTSxJQUFJWixZQUFZUyxNQUFNLENBQUNDLElBQUksS0FBSzFDLDhDQUFNQSxDQUFDMkMsVUFBVSxDQUFDRSxLQUFLLEVBQUU7UUFDL0dOLDBCQUEwQjtJQUM1QjtJQUNBLE9BQU9BO0FBQ1Q7QUFDTyxJQUFJSixNQUFNbEMseURBQWtCLENBQUMscUJBQXFCO0FBQ3pEa0MsSUFBSVksUUFBUSxDQUFDO0FBQ04sSUFBSUMsY0FBYyxTQUFTQSxZQUFZQyxLQUFLO0lBQ2pEZCxJQUFJWSxRQUFRLENBQUNFO0FBQ2YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS91dGlsLmpzPzlhMzEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJvd3NlciBmcm9tICdib3dzZXInO1xuaW1wb3J0IGxvZ2xldmVsIGZyb20gJ2xvZ2xldmVsJztcblxuLyoqXG4gKiByZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG9iamVjdCBpcyBhIHByb21pc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZShvYmopIHtcbiAgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmV4cG9ydCB2YXIgUFJPTUlTRV9SRVNPTFZFRF9GQUxTRSA9IFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG5leHBvcnQgdmFyIFBST01JU0VfUkVTT0xWRURfVFJVRSA9IFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbmV4cG9ydCB2YXIgUFJPTUlTRV9SRVNPTFZFRF9WT0lEID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5leHBvcnQgZnVuY3Rpb24gc2xlZXAodGltZSwgcmVzb2x2ZVdpdGgpIHtcbiAgaWYgKCF0aW1lKSB0aW1lID0gMDtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVzKHJlc29sdmVXaXRoKTtcbiAgICB9LCB0aW1lKTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tSW50KG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84MDg0MjQ4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21Ub2tlbigpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyKTtcbn1cbnZhciBsYXN0TXMgPSAwO1xudmFyIGFkZGl0aW9uYWwgPSAwO1xuXG4vKipcbiAqIHJldHVybnMgdGhlIGN1cnJlbnQgdGltZSBpbiBtaWNyby1zZWNvbmRzLFxuICogV0FSTklORzogVGhpcyBpcyBhIHBzZXVkby1mdW5jdGlvblxuICogUGVyZm9ybWFuY2Uubm93IGlzIG5vdCByZWxpYWJsZSBpbiB3ZWJ3b3JrZXJzLCBzbyB3ZSBqdXN0IG1ha2Ugc3VyZSB0byBuZXZlciByZXR1cm4gdGhlIHNhbWUgdGltZS5cbiAqIFRoaXMgaXMgZW5vdWdoIGluIGJyb3dzZXJzLCBhbmQgdGhpcyBmdW5jdGlvbiB3aWxsIG5vdCBiZSB1c2VkIGluIG5vZGVqcy5cbiAqIFRoZSBtYWluIHJlYXNvbiBmb3IgdGhpcyBoYWNrIGlzIHRvIGVuc3VyZSB0aGF0IEJyb2FkY2FzdENoYW5uZWwgYmVoYXZlcyBlcXVhbCB0byBwcm9kdWN0aW9uIHdoZW4gaXQgaXMgdXNlZCBpbiBmYXN0LXJ1bm5pbmcgdW5pdCB0ZXN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pY3JvU2Vjb25kcygpIHtcbiAgdmFyIG1zID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGlmIChtcyA9PT0gbGFzdE1zKSB7XG4gICAgYWRkaXRpb25hbCsrO1xuICAgIHJldHVybiBtcyAqIDEwMDAgKyBhZGRpdGlvbmFsO1xuICB9IGVsc2Uge1xuICAgIGxhc3RNcyA9IG1zO1xuICAgIGFkZGl0aW9uYWwgPSAwO1xuICAgIHJldHVybiBtcyAqIDEwMDA7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhcmUzUENTdXBwb3J0ZWQoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuICB2YXIgYnJvd3NlckluZm8gPSBCb3dzZXIucGFyc2UobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIGxvZy5pbmZvKEpTT04uc3RyaW5naWZ5KGJyb3dzZXJJbmZvKSwgJ2N1cnJlbnQgYnJvd3NlciBpbmZvJyk7XG4gIHZhciB0aGlyZFBhcnR5Q29va2llU3VwcG9ydCA9IHRydWU7XG4gIC8vIGJyYXZlXG4gIGlmIChuYXZpZ2F0b3IuYnJhdmUpIHtcbiAgICB0aGlyZFBhcnR5Q29va2llU3VwcG9ydCA9IGZhbHNlO1xuICB9XG4gIC8vIEFsbCB3ZWJraXQgJiBnZWNrbyBlbmdpbmUgaW5zdGFuY2VzIHVzZSBpdHAgKGludGVsbGlnZW50IHRyYWNraW5nIHByZXZlbnRpb24gLVxuICAvLyBodHRwczovL3dlYmtpdC5vcmcvdHJhY2tpbmctcHJldmVudGlvbi8jaW50ZWxsaWdlbnQtdHJhY2tpbmctcHJldmVudGlvbi1pdHApXG4gIGlmIChicm93c2VySW5mby5lbmdpbmUubmFtZSA9PT0gQm93c2VyLkVOR0lORV9NQVAuV2ViS2l0IHx8IGJyb3dzZXJJbmZvLmVuZ2luZS5uYW1lID09PSBCb3dzZXIuRU5HSU5FX01BUC5HZWNrbykge1xuICAgIHRoaXJkUGFydHlDb29raWVTdXBwb3J0ID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRoaXJkUGFydHlDb29raWVTdXBwb3J0O1xufVxuZXhwb3J0IHZhciBsb2cgPSBsb2dsZXZlbC5nZXRMb2dnZXIoJ2Jyb2FkY2FzdC1jaGFubmVsJyk7XG5sb2cuc2V0TGV2ZWwoJ2Vycm9yJyk7XG5leHBvcnQgdmFyIHNldExvZ0xldmVsID0gZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHtcbiAgbG9nLnNldExldmVsKGxldmVsKTtcbn07Il0sIm5hbWVzIjpbIkJvd3NlciIsImxvZ2xldmVsIiwiaXNQcm9taXNlIiwib2JqIiwidGhlbiIsIlBST01JU0VfUkVTT0xWRURfRkFMU0UiLCJQcm9taXNlIiwicmVzb2x2ZSIsIlBST01JU0VfUkVTT0xWRURfVFJVRSIsIlBST01JU0VfUkVTT0xWRURfVk9JRCIsInNsZWVwIiwidGltZSIsInJlc29sdmVXaXRoIiwicmVzIiwic2V0VGltZW91dCIsInJhbmRvbUludCIsIm1pbiIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJhbmRvbVRva2VuIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJsYXN0TXMiLCJhZGRpdGlvbmFsIiwibWljcm9TZWNvbmRzIiwibXMiLCJEYXRlIiwiZ2V0VGltZSIsImFyZTNQQ1N1cHBvcnRlZCIsIm5hdmlnYXRvciIsImJyb3dzZXJJbmZvIiwicGFyc2UiLCJ1c2VyQWdlbnQiLCJsb2ciLCJpbmZvIiwiSlNPTiIsInN0cmluZ2lmeSIsInRoaXJkUGFydHlDb29raWVTdXBwb3J0IiwiYnJhdmUiLCJlbmdpbmUiLCJuYW1lIiwiRU5HSU5FX01BUCIsIldlYktpdCIsIkdlY2tvIiwiZ2V0TG9nZ2VyIiwic2V0TGV2ZWwiLCJzZXRMb2dMZXZlbCIsImxldmVsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toruslabs/constants/dist/constants.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FND_SERVER: () => (/* binding */ FND_SERVER),\n/* harmony export */   LEGACY_NETWORKS_ROUTE_MAP: () => (/* binding */ LEGACY_NETWORKS_ROUTE_MAP),\n/* harmony export */   METADATA_MAP: () => (/* binding */ METADATA_MAP),\n/* harmony export */   MULTI_CLUSTER_NETWORKS: () => (/* binding */ MULTI_CLUSTER_NETWORKS),\n/* harmony export */   NETWORK_MAP: () => (/* binding */ NETWORK_MAP),\n/* harmony export */   PROXY_CONTRACT_ADDRESS: () => (/* binding */ PROXY_CONTRACT_ADDRESS),\n/* harmony export */   SESSION_SERVER: () => (/* binding */ SESSION_SERVER),\n/* harmony export */   SIGNER_MAP: () => (/* binding */ SIGNER_MAP),\n/* harmony export */   TORUS_LEGACY_NETWORK: () => (/* binding */ TORUS_LEGACY_NETWORK),\n/* harmony export */   TORUS_SAPPHIRE_NETWORK: () => (/* binding */ TORUS_SAPPHIRE_NETWORK),\n/* harmony export */   abi: () => (/* binding */ abi)\n/* harmony export */ });\nconst TORUS_LEGACY_NETWORK = {\n    MAINNET: \"mainnet\",\n    TESTNET: \"testnet\",\n    CYAN: \"cyan\",\n    AQUA: \"aqua\",\n    CELESTE: \"celeste\"\n};\nconst TORUS_SAPPHIRE_NETWORK = {\n    SAPPHIRE_DEVNET: \"sapphire_devnet\",\n    SAPPHIRE_MAINNET: \"sapphire_mainnet\"\n};\nconst PROXY_CONTRACT_ADDRESS = {\n    [TORUS_LEGACY_NETWORK.MAINNET]: \"0xf20336e16B5182637f09821c27BDe29b0AFcfe80\",\n    [TORUS_LEGACY_NETWORK.TESTNET]: \"0xd084604e5FA387FbC2Da8bAab07fDD6aDED4614A\",\n    [TORUS_LEGACY_NETWORK.CYAN]: \"0x9f072ba19b3370e512aa1b4bfcdaf97283168005\",\n    [TORUS_LEGACY_NETWORK.AQUA]: \"0x29Dea82a0509153b91040ee13cDBba0f03efb625\",\n    [TORUS_LEGACY_NETWORK.CELESTE]: \"0x6Bffb4e89453069E7487f0fa5c9f4a2D771cce6c\"\n};\nconst MULTI_CLUSTER_NETWORKS = [\n    // TORUS_LEGACY_NETWORK.AQUA,\n    TORUS_LEGACY_NETWORK.CELESTE\n];\nconst LEGACY_NETWORKS_ROUTE_MAP = {\n    [TORUS_LEGACY_NETWORK.AQUA]: {\n        migrationCompleted: true,\n        networkIdentifier: \"aqua\",\n        networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n    },\n    [TORUS_LEGACY_NETWORK.CELESTE]: {\n        migrationCompleted: false,\n        networkIdentifier: \"celeste\",\n        networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n    },\n    [TORUS_LEGACY_NETWORK.CYAN]: {\n        migrationCompleted: true,\n        networkIdentifier: \"cyan\",\n        networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n    },\n    [TORUS_LEGACY_NETWORK.MAINNET]: {\n        migrationCompleted: true,\n        networkIdentifier: \"mainnet\",\n        networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n    },\n    [TORUS_LEGACY_NETWORK.TESTNET]: {\n        migrationCompleted: true,\n        networkIdentifier: \"teal\",\n        networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET\n    }\n};\nconst NETWORK_MAP = {\n    [TORUS_LEGACY_NETWORK.MAINNET]: \"mainnet\",\n    [TORUS_LEGACY_NETWORK.TESTNET]: \"goerli\",\n    [TORUS_LEGACY_NETWORK.CYAN]: \"polygon-mainnet\",\n    [TORUS_LEGACY_NETWORK.AQUA]: \"polygon-mainnet\",\n    [TORUS_LEGACY_NETWORK.CELESTE]: \"polygon-mainnet\"\n};\nconst SIGNER_MAP = {\n    [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET]: \"https://signer.web3auth.io\",\n    [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET]: \"https://signer.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.MAINNET]: \"https://signer.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.TESTNET]: \"https://signer.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.CYAN]: \"https://signer-polygon.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.AQUA]: \"https://signer-polygon.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.CELESTE]: \"https://signer-polygon.web3auth.io\"\n};\nconst METADATA_MAP = {\n    [TORUS_LEGACY_NETWORK.MAINNET]: \"https://metadata.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.TESTNET]: \"https://metadata.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.CYAN]: \"https://metadata.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.AQUA]: \"https://metadata.web3auth.io\",\n    [TORUS_LEGACY_NETWORK.CELESTE]: \"https://metadata.web3auth.io\"\n};\nconst FND_SERVER = \"https://fnd.web3auth.io\";\nconst SESSION_SERVER = \"https://session.web3auth.io\";\nconst abi = [\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"_verifier\",\n                type: \"string\"\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"hashedVerifierId\",\n                type: \"bytes32\"\n            }\n        ],\n        name: \"getNodeSet\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"currentEpoch\",\n                type: \"uint256\"\n            },\n            {\n                internalType: \"string[]\",\n                name: \"torusNodeEndpoints\",\n                type: \"string[]\"\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"torusNodePubX\",\n                type: \"uint256[]\"\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"torusNodePubY\",\n                type: \"uint256[]\"\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"torusIndexes\",\n                type: \"uint256[]\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    }\n];\n //# sourceMappingURL=constants.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decrypt: () => (/* binding */ decrypt),\n/* harmony export */   derive: () => (/* binding */ derive),\n/* harmony export */   derivePadded: () => (/* binding */ derivePadded),\n/* harmony export */   deriveUnpadded: () => (/* binding */ deriveUnpadded),\n/* harmony export */   encrypt: () => (/* binding */ encrypt),\n/* harmony export */   generatePrivate: () => (/* binding */ generatePrivate),\n/* harmony export */   getPublic: () => (/* binding */ getPublic),\n/* harmony export */   getPublicCompressed: () => (/* binding */ getPublicCompressed),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst ec = new elliptic__WEBPACK_IMPORTED_MODULE_1__.ec(\"secp256k1\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst browserCrypto = global.crypto || global.msCrypto || {};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\nconst EC_GROUP_ORDER = Buffer.from(\"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\", \"hex\");\nconst ZERO32 = Buffer.alloc(32, 0);\nfunction assert(condition, message) {\n    if (!condition) {\n        throw new Error(message || \"Assertion failed\");\n    }\n}\nfunction isScalar(x) {\n    return Buffer.isBuffer(x) && x.length === 32;\n}\nfunction isValidPrivateKey(privateKey) {\n    if (!isScalar(privateKey)) {\n        return false;\n    }\n    return privateKey.compare(ZERO32) > 0 && // > 0\n    privateKey.compare(EC_GROUP_ORDER) < 0; // < G\n}\n// Compare two buffers in constant time to prevent timing attacks.\nfunction equalConstTime(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    let res = 0;\n    for(let i = 0; i < b1.length; i++){\n        res |= b1[i] ^ b2[i]; // jshint ignore:line\n    }\n    return res === 0;\n}\n/* This must check if we're in the browser or\nnot, since the functions are different and does\nnot convert using browserify */ function randomBytes(size) {\n    const arr = new Uint8Array(size);\n    if (typeof browserCrypto.getRandomValues === \"undefined\") {\n        return Buffer.from(crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(size));\n    }\n    browserCrypto.getRandomValues(arr);\n    return Buffer.from(arr);\n}\nasync function sha512(msg) {\n    if (subtle) {\n        const hash = await subtle.digest(\"SHA-512\", msg);\n        const result = new Uint8Array(hash);\n        return result;\n    }\n    const hash = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha512\");\n    const result = hash.update(msg).digest();\n    return new Uint8Array(result);\n}\nfunction getAes(op) {\n    return async function(iv, key, data) {\n        if (subtle) {\n            const importAlgorithm = {\n                name: \"AES-CBC\"\n            };\n            const cryptoKey = await subtle.importKey(\"raw\", key, importAlgorithm, false, [\n                op\n            ]);\n            const encAlgorithm = {\n                name: \"AES-CBC\",\n                iv\n            };\n            const result = await subtle[op](encAlgorithm, cryptoKey, data);\n            return Buffer.from(new Uint8Array(result));\n        } else if (op === \"encrypt\") {\n            const cipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createCipheriv(\"aes-256-cbc\", key, iv);\n            const firstChunk = cipher.update(data);\n            const secondChunk = cipher.final();\n            return Buffer.concat([\n                firstChunk,\n                secondChunk\n            ]);\n        } else if (op === \"decrypt\") {\n            const decipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createDecipheriv(\"aes-256-cbc\", key, iv);\n            const firstChunk = decipher.update(data);\n            const secondChunk = decipher.final();\n            return Buffer.concat([\n                firstChunk,\n                secondChunk\n            ]);\n        }\n        throw new Error(`Unsupported operation: ${op}`);\n    };\n}\nconst aesCbcEncrypt = getAes(\"encrypt\");\nconst aesCbcDecrypt = getAes(\"decrypt\");\nasync function hmacSha256Sign(key, msg) {\n    if (subtle) {\n        const importAlgorithm = {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        };\n        const cryptoKey = await subtle.importKey(\"raw\", new Uint8Array(key), importAlgorithm, false, [\n            \"sign\",\n            \"verify\"\n        ]);\n        const sig = await subtle.sign(\"HMAC\", cryptoKey, msg);\n        const result = Buffer.from(new Uint8Array(sig));\n        return result;\n    }\n    const hmac = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHmac(\"sha256\", Buffer.from(key));\n    hmac.update(msg);\n    const result = hmac.digest();\n    return result;\n}\nasync function hmacSha256Verify(key, msg, sig) {\n    const expectedSig = await hmacSha256Sign(key, msg);\n    return equalConstTime(expectedSig, sig);\n}\n/**\n * Generate a new valid private key. Will use the window.crypto or window.msCrypto as source\n * depending on your browser.\n */ const generatePrivate = function() {\n    let privateKey = randomBytes(32);\n    while(!isValidPrivateKey(privateKey)){\n        privateKey = randomBytes(32);\n    }\n    return privateKey;\n};\nconst getPublic = function(privateKey) {\n    // This function has sync API so we throw an error immediately.\n    assert(privateKey.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKey), \"Bad private key\");\n    // XXX(Kagami): `elliptic.utils.encode` returns array for every\n    // encoding except `hex`.\n    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(\"array\"));\n};\n/**\n * Get compressed version of public key.\n */ const getPublicCompressed = function(privateKey) {\n    // jshint ignore:line\n    assert(privateKey.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKey), \"Bad private key\");\n    // See https://github.com/wanderer/secp256k1-node/issues/46\n    const compressed = true;\n    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, \"array\"));\n};\n// NOTE(Kagami): We don't use promise shim in Browser implementation\n// because it's supported natively in new browsers (see\n// <http://caniuse.com/#feat=promises>) and we can use only new browsers\n// because of the WebCryptoAPI (see\n// <http://caniuse.com/#feat=cryptography>).\nconst sign = async function(privateKey, msg) {\n    assert(privateKey.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKey), \"Bad private key\");\n    assert(msg.length > 0, \"Message should not be empty\");\n    assert(msg.length <= 32, \"Message is too long\");\n    return Buffer.from(ec.sign(msg, privateKey, {\n        canonical: true\n    }).toDER());\n};\nconst verify = async function(publicKey, msg, sig) {\n    assert(publicKey.length === 65 || publicKey.length === 33, \"Bad public key\");\n    if (publicKey.length === 65) {\n        assert(publicKey[0] === 4, \"Bad public key\");\n    }\n    if (publicKey.length === 33) {\n        assert(publicKey[0] === 2 || publicKey[0] === 3, \"Bad public key\");\n    }\n    assert(msg.length > 0, \"Message should not be empty\");\n    assert(msg.length <= 32, \"Message is too long\");\n    if (ec.verify(msg, sig, publicKey)) {\n        return null;\n    }\n    throw new Error(\"Bad signature\");\n};\nconst derive = async function(privateKeyA, publicKeyB) {\n    assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n    assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n    assert(privateKeyA.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n    assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n    if (publicKeyB.length === 65) {\n        assert(publicKeyB[0] === 4, \"Bad public key\");\n    }\n    if (publicKeyB.length === 33) {\n        assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n    }\n    const keyA = ec.keyFromPrivate(privateKeyA);\n    const keyB = ec.keyFromPublic(publicKeyB);\n    const Px = keyA.derive(keyB.getPublic()); // BN instance\n    return Buffer.from(Px.toArray());\n};\nconst deriveUnpadded = derive;\nconst derivePadded = async function(privateKeyA, publicKeyB) {\n    assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n    assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n    assert(privateKeyA.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n    assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n    if (publicKeyB.length === 65) {\n        assert(publicKeyB[0] === 4, \"Bad public key\");\n    }\n    if (publicKeyB.length === 33) {\n        assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n    }\n    const keyA = ec.keyFromPrivate(privateKeyA);\n    const keyB = ec.keyFromPublic(publicKeyB);\n    const Px = keyA.derive(keyB.getPublic()); // BN instance\n    return Buffer.from(Px.toString(16, 64), \"hex\");\n};\nconst encrypt = async function(publicKeyTo, msg, opts) {\n    opts = opts || {};\n    let ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n    // There is a very unlikely possibility that it is not a valid key\n    while(!isValidPrivateKey(ephemPrivateKey)){\n        ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n    }\n    const ephemPublicKey = getPublic(ephemPrivateKey);\n    const Px = await deriveUnpadded(ephemPrivateKey, publicKeyTo);\n    const hash = await sha512(Px);\n    const iv = opts.iv || randomBytes(16);\n    const encryptionKey = hash.slice(0, 32);\n    const macKey = hash.slice(32);\n    const data = await aesCbcEncrypt(iv, Buffer.from(encryptionKey), msg);\n    const ciphertext = data;\n    const dataToMac = Buffer.concat([\n        iv,\n        ephemPublicKey,\n        ciphertext\n    ]);\n    const mac = await hmacSha256Sign(Buffer.from(macKey), dataToMac);\n    return {\n        iv,\n        ephemPublicKey,\n        ciphertext,\n        mac\n    };\n};\nconst decrypt = async function(privateKey, opts, _padding) {\n    const padding = _padding !== null && _padding !== void 0 ? _padding : false;\n    const deriveLocal = padding ? derivePadded : deriveUnpadded;\n    const Px = await deriveLocal(privateKey, opts.ephemPublicKey);\n    const hash = await sha512(Px);\n    const encryptionKey = hash.slice(0, 32);\n    const macKey = hash.slice(32);\n    const dataToMac = Buffer.concat([\n        opts.iv,\n        opts.ephemPublicKey,\n        opts.ciphertext\n    ]);\n    const macGood = await hmacSha256Verify(Buffer.from(macKey), dataToMac, opts.mac);\n    if (!macGood && padding === false) {\n        return decrypt(privateKey, opts, true);\n    } else if (!macGood && padding === true) {\n        throw new Error(\"bad MAC after trying padded\");\n    }\n    const msg = await aesCbcDecrypt(opts.iv, Buffer.from(encryptionKey), opts.ciphertext);\n    return Buffer.from(new Uint8Array(msg));\n};\n //# sourceMappingURL=eccrypto.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearAPIKey: () => (/* binding */ clearAPIKey),\n/* harmony export */   clearEmbedHost: () => (/* binding */ clearEmbedHost),\n/* harmony export */   enableSentryTracing: () => (/* binding */ enableSentryTracing),\n/* harmony export */   gatewayAuthHeader: () => (/* binding */ gatewayAuthHeader),\n/* harmony export */   gatewayEmbedHostHeader: () => (/* binding */ gatewayEmbedHostHeader),\n/* harmony export */   generateJsonRPCObject: () => (/* binding */ generateJsonRPCObject),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getAPIKey: () => (/* binding */ getAPIKey),\n/* harmony export */   getEmbedHost: () => (/* binding */ getEmbedHost),\n/* harmony export */   patch: () => (/* binding */ patch),\n/* harmony export */   post: () => (/* binding */ post),\n/* harmony export */   promiseRace: () => (/* binding */ promiseRace),\n/* harmony export */   promiseTimeout: () => (/* binding */ promiseTimeout),\n/* harmony export */   put: () => (/* binding */ put),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   setAPIKey: () => (/* binding */ setAPIKey),\n/* harmony export */   setEmbedHost: () => (/* binding */ setEmbedHost),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.merge */ \"(ssr)/./node_modules/lodash.merge/index.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst log = loglevel__WEBPACK_IMPORTED_MODULE_2___default().getLogger(\"http-helpers\");\nlog.setLevel(loglevel__WEBPACK_IMPORTED_MODULE_2__.levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n// #region API Keys\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n    sentry = _sentry;\n    tracingOrigins.push(..._tracingOrigins);\n    tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n    embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n    embedHost = \"\";\n}\nfunction getEmbedHost() {\n    return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n    apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n    apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n    return apiKey;\n}\n// #endregion\nfunction setLogLevel(level) {\n    log.setLevel(level);\n}\nasync function fetchAndTrace(url, init) {\n    let _url = null;\n    try {\n        _url = new URL(url);\n    } catch (error) {}\n    if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n        const transaction = sentry.startTransaction({\n            name: url\n        });\n        const span = transaction.startChild({\n            op: \"http\"\n        }); // This function returns a Span\n        const response = await fetch(url, init);\n        span.finish(); // Remember that only finished spans will be sent with the transaction\n        transaction.finish(); // Finishing the transaction will send it to Sentry\n        return response;\n    }\n    return fetch(url, init);\n}\nfunction getApiKeyHeaders() {\n    const headers = {};\n    if (apiKey) headers[gatewayAuthHeader] = apiKey;\n    if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n    return headers;\n}\nfunction debugLogResponse(response) {\n    log.info(`Response: ${response.status} ${response.statusText}`);\n    log.info(`Url: ${response.url}`);\n}\nfunction logTracingHeader(response) {\n    log.info(`Request tracing with traceID=${response.headers.get(\"x-web3-correlation-id\")}`);\n}\nconst promiseTimeout = (ms, promise)=>{\n    const timeout = new Promise((_resolve, reject)=>{\n        const id = setTimeout(()=>{\n            clearTimeout(id);\n            reject(new Error(`Timed out in ${ms}ms`));\n        }, ms);\n    });\n    return Promise.race([\n        promise,\n        timeout\n    ]);\n};\nconst get = async function(url) {\n    let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {}\n    };\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"GET\"\n    });\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        const responseContentType = response.headers.get(\"content-type\");\n        if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        return response.text();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst post = function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"POST\"\n    });\n    // deep merge changes the structure of form data and url encoded data ,\n    // so we should not deepmerge body data\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then((response)=>{\n        if (customOptions.logTracingHeader) {\n            logTracingHeader(response);\n        }\n        if (response.ok) {\n            const responseContentType = response.headers.get(\"content-type\");\n            if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n                return response.json();\n            }\n            return response.text();\n        }\n        debugLogResponse(response);\n        throw response;\n    }));\n};\nconst patch = async function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"PATCH\"\n    });\n    // deep merge changes the structure of form data and url encoded data ,\n    // so we should not deepmerge body data\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        const responseContentType = response.headers.get(\"content-type\");\n        if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        return response.text();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst put = async function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"PUT\"\n    });\n    // deep merge changes the structure of form data and url encoded data ,\n    // so we should not deepmerge body data\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        const responseContentType = response.headers.get(\"content-type\");\n        if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        return response.text();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst remove = async function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"DELETE\"\n    });\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        const responseContentType = response.headers.get(\"content-type\");\n        if (responseContentType !== null && responseContentType !== void 0 && responseContentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        return response.text();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst generateJsonRPCObject = (method, parameters)=>({\n        jsonrpc: \"2.0\",\n        method,\n        id: 10,\n        params: parameters\n    });\nconst promiseRace = function(url, options) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n    return Promise.race([\n        get(url, options),\n        new Promise((_resolve, reject)=>{\n            setTimeout(()=>{\n                reject(new Error(\"timed out\"));\n            }, timeout);\n        })\n    ]);\n};\n //# sourceMappingURL=httpHelpers.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptData: () => (/* binding */ decryptData),\n/* harmony export */   \"default\": () => (/* binding */ MetadataStorageLayer),\n/* harmony export */   ec: () => (/* binding */ ec),\n/* harmony export */   encParamsBufToHex: () => (/* binding */ encParamsBufToHex),\n/* harmony export */   encParamsHexToBuf: () => (/* binding */ encParamsHexToBuf),\n/* harmony export */   encryptAndSetData: () => (/* binding */ encryptAndSetData),\n/* harmony export */   encryptData: () => (/* binding */ encryptData),\n/* harmony export */   getAndDecryptData: () => (/* binding */ getAndDecryptData),\n/* harmony export */   getDeviceShare: () => (/* binding */ getDeviceShare),\n/* harmony export */   getTorusShare: () => (/* binding */ getTorusShare),\n/* harmony export */   keccak256: () => (/* binding */ keccak256),\n/* harmony export */   setDeviceShare: () => (/* binding */ setDeviceShare),\n/* harmony export */   setTorusShare: () => (/* binding */ setTorusShare)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! json-stable-stringify */ \"(ssr)/./node_modules/json-stable-stringify/index.js\");\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(json_stable_stringify__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var ethereum_cryptography_keccak__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethereum-cryptography/keccak */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\");\n\n\n\n\n\n\n\nfunction keccak256(a) {\n    return Buffer.from((0,ethereum_cryptography_keccak__WEBPACK_IMPORTED_MODULE_5__.keccak256)(a));\n}\nconst ec = new elliptic__WEBPACK_IMPORTED_MODULE_4__.ec(\"secp256k1\");\nclass MetadataStorageLayer {\n    // ms\n    constructor(){\n        let metadataHost = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"https://metadata.tor.us\";\n        let serverTimeOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"metadataHost\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"serverTimeOffset\", void 0);\n        this.metadataHost = metadataHost;\n        this.serverTimeOffset = serverTimeOffset;\n    }\n    static setAPIKey(apiKey) {\n        (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.setAPIKey)(apiKey);\n    }\n    static setEmbedHost(embedHost) {\n        (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.setEmbedHost)(embedHost);\n    }\n    generateMetadataParams(message, privateKeyHex) {\n        var _sig$recoveryParam$to, _sig$recoveryParam;\n        const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n        const setData = {\n            data: message,\n            timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16)\n        };\n        const sig = key.sign(keccak256(Buffer.from(json_stable_stringify__WEBPACK_IMPORTED_MODULE_3___default()(setData), \"utf8\")));\n        return {\n            pub_key_X: key.getPublic().getX().toString(16, 64),\n            pub_key_Y: key.getPublic().getY().toString(16, 64),\n            set_data: setData,\n            signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + ((_sig$recoveryParam$to = (_sig$recoveryParam = sig.recoveryParam) === null || _sig$recoveryParam === void 0 ? void 0 : _sig$recoveryParam.toString(16).padStart(2, \"0\").slice(-2)) !== null && _sig$recoveryParam$to !== void 0 ? _sig$recoveryParam$to : \"00\"), \"hex\").toString(\"base64\")\n        };\n    }\n    generatePubKeyParams(privateKeyHex) {\n        const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n        return {\n            pub_key_X: key.getPublic().getX().toString(16, 64),\n            pub_key_Y: key.getPublic().getY().toString(16, 64)\n        };\n    }\n    async setMetadata(data, namespace, options) {\n        const params = namespace !== null ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, data), {}, {\n            namespace\n        }) : data;\n        const metadataResponse = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.post)(`${this.metadataHost}/set`, params, options, {\n            useAPIKey: true\n        });\n        return metadataResponse.message;\n    }\n    async getMetadata(pubKey, namespace, options) {\n        const params = namespace !== null ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, pubKey), {}, {\n            namespace\n        }) : pubKey;\n        const metadataResponse = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.post)(`${this.metadataHost}/get`, params, options, {\n            useAPIKey: true\n        });\n        return metadataResponse.message;\n    }\n}\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\nfunction encParamsHexToBuf(encParamsHex) {\n    return {\n        iv: Buffer.from(encParamsHex.iv, \"hex\"),\n        ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n        ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n        mac: Buffer.from(encParamsHex.mac, \"hex\")\n    };\n}\nfunction encParamsBufToHex(encParams) {\n    return {\n        iv: Buffer.from(encParams.iv).toString(\"hex\"),\n        ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n        ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n        mac: Buffer.from(encParams.mac).toString(\"hex\")\n    };\n}\nasync function encryptData(privKeyHex, d) {\n    const serializedDec = JSON.stringify(d);\n    const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n    const encParams = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.encrypt)((0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.getPublic)(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n    const encParamsHex = encParamsBufToHex(encParams);\n    const sData = JSON.stringify(encParamsHex);\n    return sData;\n}\nasync function decryptData(privKeyHex, d) {\n    const encParamsHex = JSON.parse(d);\n    const encParams = encParamsHexToBuf(encParamsHex);\n    const keyPair = ec.keyFromPrivate(privKeyHex);\n    const serializedBuf = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.decrypt)(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n    const serializedDec = serializedBuf.toString(\"utf-8\");\n    const data = JSON.parse(serializedDec);\n    return data;\n}\nasync function getAndDecryptData(m, privKeyHex, namespace) {\n    const keyPair = ec.keyFromPrivate(privKeyHex);\n    const pubKey = keyPair.getPublic();\n    const serializedData = await m.getMetadata({\n        pub_key_X: pubKey.getX().toString(16),\n        pub_key_Y: pubKey.getY().toString(16)\n    }, namespace);\n    if (!serializedData) {\n        return null;\n    }\n    const data = await decryptData(privKeyHex, serializedData);\n    return data;\n}\nasync function encryptAndSetData(m, privKeyHex, d, namespace) {\n    const sData = await encryptData(privKeyHex, d);\n    const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n    await m.setMetadata(metadataParams, namespace);\n}\nasync function setTorusShare(m, webAuthnPubKey, webAuthnRefHex, subspace, subspaceData) {\n    const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n    const privKey = refKeyPair.getPrivate();\n    const pubKey = ec.keyFromPublic({\n        x: webAuthnPubKey.pub_key_X,\n        y: webAuthnPubKey.pub_key_Y\n    });\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n    let d = {};\n    if (data) d = data;\n    const serializedSubspaceData = JSON.stringify(subspaceData);\n    const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n    const encSubspaceData = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.encrypt)(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n    const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n    d[subspace] = encSubspaceDataHex;\n    await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\nasync function setDeviceShare(m, webAuthnRefHex, subspace, subspaceData) {\n    const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n    const privKey = keyPair.getPrivate();\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n    let d = {};\n    if (data) d = data;\n    d[subspace] = subspaceData;\n    await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\nasync function getTorusShare(m, webAuthnKeyHex, webAuthnRefHex, subspace) {\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n    if (!data) return null;\n    const encParamsHex = data[subspace];\n    if (!encParamsHex) return null;\n    const encParams = encParamsHexToBuf(encParamsHex);\n    const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n    const privKey = keyPair.getPrivate();\n    const serializedSubspaceDataBuf = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_6__.decrypt)(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n    const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n    const subspaceData = JSON.parse(serializedSubspaceData);\n    return subspaceData;\n}\nasync function getDeviceShare(m, webAuthnRefHex, subspace) {\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n    if (data) return data[subspace];\n    return null;\n}\n //# sourceMappingURL=metadataHelpers.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-ed25519/dist/openloginEd25519.esm.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-ed25519/dist/openloginEd25519.esm.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getED25519Key: () => (/* binding */ getED25519Key)\n/* harmony export */ });\n/* harmony import */ var _toruslabs_tweetnacl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @toruslabs/tweetnacl-js */ \"(ssr)/./node_modules/@toruslabs/tweetnacl-js/nacl-fast.js\");\n/* harmony import */ var _toruslabs_tweetnacl_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_toruslabs_tweetnacl_js__WEBPACK_IMPORTED_MODULE_0__);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst l = (_toruslabs_tweetnacl_js__WEBPACK_IMPORTED_MODULE_0___default().lowlevel);\nfunction getED25519Key(privateKey) {\n    let privKey;\n    if (typeof privateKey === \"string\") {\n        privKey = Buffer.from(privateKey, \"hex\");\n    } else {\n        privKey = privateKey;\n    }\n    // Implementation copied from tweetnacl\n    const d = new Uint8Array(64);\n    const p = [\n        l.gf(),\n        l.gf(),\n        l.gf(),\n        l.gf()\n    ];\n    const sk = new Uint8Array([\n        ...new Uint8Array(privKey),\n        ...new Uint8Array(32)\n    ]);\n    const pk = new Uint8Array(32);\n    l.crypto_hash(d, sk, 32);\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    l.scalarbase(p, d);\n    l.pack(pk, p);\n    for(let i = 0; i < 32; i += 1)sk[i + 32] = pk[i];\n    return {\n        sk: Buffer.from(sk),\n        pk: Buffer.from(pk)\n    };\n}\n //# sourceMappingURL=openloginEd25519.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9vcGVubG9naW4tZWQyNTUxOS9kaXN0L29wZW5sb2dpbkVkMjU1MTkuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQztBQUUzQyw4REFBOEQ7QUFDOUQsTUFBTUMsSUFBSUQseUVBQWE7QUFDdkIsU0FBU0csY0FBY0MsVUFBVTtJQUMvQixJQUFJQztJQUNKLElBQUksT0FBT0QsZUFBZSxVQUFVO1FBQ2xDQyxVQUFVQyxPQUFPQyxJQUFJLENBQUNILFlBQVk7SUFDcEMsT0FBTztRQUNMQyxVQUFVRDtJQUNaO0lBQ0EsdUNBQXVDO0lBRXZDLE1BQU1JLElBQUksSUFBSUMsV0FBVztJQUN6QixNQUFNQyxJQUFJO1FBQUNULEVBQUVVLEVBQUU7UUFBSVYsRUFBRVUsRUFBRTtRQUFJVixFQUFFVSxFQUFFO1FBQUlWLEVBQUVVLEVBQUU7S0FBRztJQUMxQyxNQUFNQyxLQUFLLElBQUlILFdBQVc7V0FBSSxJQUFJQSxXQUFXSjtXQUFhLElBQUlJLFdBQVc7S0FBSTtJQUM3RSxNQUFNSSxLQUFLLElBQUlKLFdBQVc7SUFDMUJSLEVBQUVhLFdBQVcsQ0FBQ04sR0FBR0ksSUFBSTtJQUNyQkosQ0FBQyxDQUFDLEVBQUUsSUFBSTtJQUNSQSxDQUFDLENBQUMsR0FBRyxJQUFJO0lBQ1RBLENBQUMsQ0FBQyxHQUFHLElBQUk7SUFDVFAsRUFBRWMsVUFBVSxDQUFDTCxHQUFHRjtJQUNoQlAsRUFBRWUsSUFBSSxDQUFDSCxJQUFJSDtJQUNYLElBQUssSUFBSU8sSUFBSSxHQUFHQSxJQUFJLElBQUlBLEtBQUssRUFBR0wsRUFBRSxDQUFDSyxJQUFJLEdBQUcsR0FBR0osRUFBRSxDQUFDSSxFQUFFO0lBQ2xELE9BQU87UUFDTEwsSUFBSU4sT0FBT0MsSUFBSSxDQUFDSztRQUNoQkMsSUFBSVAsT0FBT0MsSUFBSSxDQUFDTTtJQUNsQjtBQUNGO0FBRXlCLENBQ3pCLGdEQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9vcGVubG9naW4tZWQyNTUxOS9kaXN0L29wZW5sb2dpbkVkMjU1MTkuZXNtLmpzPzlmZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5hY2wgZnJvbSAnQHRvcnVzbGFicy90d2VldG5hY2wtanMnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY29uc3QgbCA9IG5hY2wubG93bGV2ZWw7XG5mdW5jdGlvbiBnZXRFRDI1NTE5S2V5KHByaXZhdGVLZXkpIHtcbiAgbGV0IHByaXZLZXk7XG4gIGlmICh0eXBlb2YgcHJpdmF0ZUtleSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHByaXZLZXkgPSBCdWZmZXIuZnJvbShwcml2YXRlS2V5LCBcImhleFwiKTtcbiAgfSBlbHNlIHtcbiAgICBwcml2S2V5ID0gcHJpdmF0ZUtleTtcbiAgfVxuICAvLyBJbXBsZW1lbnRhdGlvbiBjb3BpZWQgZnJvbSB0d2VldG5hY2xcblxuICBjb25zdCBkID0gbmV3IFVpbnQ4QXJyYXkoNjQpO1xuICBjb25zdCBwID0gW2wuZ2YoKSwgbC5nZigpLCBsLmdmKCksIGwuZ2YoKV07XG4gIGNvbnN0IHNrID0gbmV3IFVpbnQ4QXJyYXkoWy4uLm5ldyBVaW50OEFycmF5KHByaXZLZXkpLCAuLi5uZXcgVWludDhBcnJheSgzMildKTtcbiAgY29uc3QgcGsgPSBuZXcgVWludDhBcnJheSgzMik7XG4gIGwuY3J5cHRvX2hhc2goZCwgc2ssIDMyKTtcbiAgZFswXSAmPSAyNDg7XG4gIGRbMzFdICY9IDEyNztcbiAgZFszMV0gfD0gNjQ7XG4gIGwuc2NhbGFyYmFzZShwLCBkKTtcbiAgbC5wYWNrKHBrLCBwKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMjsgaSArPSAxKSBza1tpICsgMzJdID0gcGtbaV07XG4gIHJldHVybiB7XG4gICAgc2s6IEJ1ZmZlci5mcm9tKHNrKSxcbiAgICBwazogQnVmZmVyLmZyb20ocGspXG4gIH07XG59XG5cbmV4cG9ydCB7IGdldEVEMjU1MTlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5sb2dpbkVkMjU1MTkuZXNtLmpzLm1hcFxuIl0sIm5hbWVzIjpbIm5hY2wiLCJsIiwibG93bGV2ZWwiLCJnZXRFRDI1NTE5S2V5IiwicHJpdmF0ZUtleSIsInByaXZLZXkiLCJCdWZmZXIiLCJmcm9tIiwiZCIsIlVpbnQ4QXJyYXkiLCJwIiwiZ2YiLCJzayIsInBrIiwiY3J5cHRvX2hhc2giLCJzY2FsYXJiYXNlIiwicGFjayIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-ed25519/dist/openloginEd25519.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePostMessageStream: () => (/* binding */ BasePostMessageStream),\n/* harmony export */   IGNORE_SUBSTREAM: () => (/* binding */ IGNORE_SUBSTREAM),\n/* harmony export */   JRPCEngine: () => (/* binding */ JRPCEngine),\n/* harmony export */   ObjectMultiplex: () => (/* binding */ ObjectMultiplex),\n/* harmony export */   PostMessageStream: () => (/* binding */ PostMessageStream),\n/* harmony export */   SafeEventEmitter: () => (/* binding */ SafeEventEmitter),\n/* harmony export */   SerializableError: () => (/* binding */ SerializableError),\n/* harmony export */   Substream: () => (/* binding */ Substream),\n/* harmony export */   createAsyncMiddleware: () => (/* binding */ createAsyncMiddleware),\n/* harmony export */   createEngineStream: () => (/* binding */ createEngineStream),\n/* harmony export */   createErrorMiddleware: () => (/* binding */ createErrorMiddleware),\n/* harmony export */   createIdRemapMiddleware: () => (/* binding */ createIdRemapMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createScaffoldMiddleware: () => (/* binding */ createScaffoldMiddleware),\n/* harmony export */   createStreamMiddleware: () => (/* binding */ createStreamMiddleware),\n/* harmony export */   getRpcPromiseCallback: () => (/* binding */ getRpcPromiseCallback),\n/* harmony export */   mergeMiddleware: () => (/* binding */ mergeMiddleware),\n/* harmony export */   providerAsMiddleware: () => (/* binding */ providerAsMiddleware),\n/* harmony export */   providerFromEngine: () => (/* binding */ providerFromEngine),\n/* harmony export */   providerFromMiddleware: () => (/* binding */ providerFromMiddleware),\n/* harmony export */   setupMultiplex: () => (/* binding */ setupMultiplex)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/lib/ours/index.js\");\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(readable_stream__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-safe-stringify */ \"(ssr)/./node_modules/fast-safe-stringify/index.js\");\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @metamask/rpc-errors */ \"(ssr)/./node_modules/@metamask/rpc-errors/dist/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! end-of-stream */ \"(ssr)/./node_modules/end-of-stream/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(end_of_stream__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\");\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(once__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\nfunction noop() {\n    return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { name, target, targetWindow = window, targetOrigin = \"*\" } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_init\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_haveSyn\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_target\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetWindow\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetOrigin\", void 0);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_onMessage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_synIntervalId\", void 0);\n        if (!name || !target) {\n            throw new Error(\"Invalid input.\");\n        }\n        this._init = false;\n        this._haveSyn = false;\n        this._name = name;\n        this._target = target; // target origin\n        this._targetWindow = targetWindow;\n        this._targetOrigin = targetOrigin;\n        this._onMessage = this.onMessage.bind(this);\n        this._synIntervalId = null;\n        window.addEventListener(\"message\", this._onMessage, false);\n        this._handShake();\n    }\n    _break() {\n        this.cork();\n        this._write(BRK, null, noop);\n        this._haveSyn = false;\n        this._init = false;\n    }\n    _handShake() {\n        this._write(SYN, null, noop);\n        this.cork();\n    }\n    _onData(data) {\n        if (!this._init) {\n            // listen for handshake\n            if (data === SYN) {\n                this._haveSyn = true;\n                this._write(ACK, null, noop);\n            } else if (data === ACK) {\n                this._init = true;\n                if (!this._haveSyn) {\n                    this._write(ACK, null, noop);\n                }\n                this.uncork();\n            }\n        } else if (data === BRK) {\n            this._break();\n        } else {\n            // forward message\n            try {\n                this.push(data);\n            } catch (err) {\n                this.emit(\"error\", err);\n            }\n        }\n    }\n    _postMessage(data) {\n        const originConstraint = this._targetOrigin;\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n    onMessage(event) {\n        const message = event.data;\n        // validate message\n        if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n            return;\n        }\n        this._onData(message.data);\n    }\n    _read() {\n        return undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _write(data, _, cb) {\n        this._postMessage(data);\n        cb();\n    }\n    _destroy() {\n        window.removeEventListener(\"message\", this._onMessage, false);\n    }\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */ function safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    } catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(()=>{\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for(let i = 0; i < n; i += 1){\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {\n    emit(type) {\n        let doError = type === \"error\";\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        } else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === \"function\") {\n            safeApply(handler, this, args);\n        } else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for(let i = 0; i < len; i += 1){\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nclass SerializableError extends Error {\n    constructor(_ref){\n        let { code, message, data } = _ref;\n        if (!Number.isInteger(code)) {\n            throw new Error(\"code must be an integer\");\n        }\n        if (!message || typeof message !== \"string\") {\n            throw new Error(\"message must be string\");\n        }\n        super(message);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"code\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"data\", void 0);\n        this.code = code;\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n    toString() {\n        return fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3___default()({\n            code: this.code,\n            message: this.message,\n            data: this.data,\n            stack: this.stack\n        });\n    }\n}\nconst getRpcPromiseCallback = function(resolve, reject) {\n    let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return (error, response)=>{\n        if (error || response.error) {\n            reject(error || response.error);\n        } else if (!unwrapResult || Array.isArray(response)) {\n            resolve(response);\n        } else {\n            resolve(response.result);\n        }\n    };\n};\nfunction createErrorMiddleware(log) {\n    return (req, res, next, end)=>{\n        try {\n            // json-rpc-engine will terminate the request when it notices this error\n            if (typeof req.method !== \"string\" || !req.method) {\n                res.error = new SerializableError({\n                    code: -32603,\n                    message: \"invalid method\"\n                });\n                end();\n                return;\n            }\n            next((done)=>{\n                const { error } = res;\n                if (!error) {\n                    return done();\n                }\n                log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n                return done();\n            });\n        } catch (error) {\n            log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n            res.error = new SerializableError({\n                code: -32603,\n                message: error.message\n            });\n            end();\n        }\n    };\n}\nfunction createStreamMiddleware() {\n    const idMap = {};\n    function readNoop() {\n        return false;\n    }\n    const events = new SafeEventEmitter();\n    function processResponse(res) {\n        const context = idMap[res.id];\n        if (!context) {\n            throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n        }\n        delete idMap[res.id];\n        // copy whole res onto original res\n        Object.assign(context.res, res);\n        // run callback on empty stack,\n        // prevent internal stream-handler from catching errors\n        setTimeout(context.end);\n    }\n    function processNotification(res) {\n        events.emit(\"notification\", res);\n    }\n    function processMessage(res, _encoding, cb) {\n        let err;\n        try {\n            const isNotification = !res.id;\n            if (isNotification) {\n                processNotification(res);\n            } else {\n                processResponse(res);\n            }\n        } catch (_err) {\n            err = _err;\n        }\n        // continue processing stream\n        cb(err);\n    }\n    const stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read: readNoop,\n        write: processMessage\n    });\n    const middleware = (req, res, next, end)=>{\n        // write req to stream\n        stream.push(req);\n        // register request on id map\n        idMap[req.id] = {\n            req,\n            res,\n            next,\n            end\n        };\n    };\n    return {\n        events,\n        middleware,\n        stream\n    };\n}\nfunction createScaffoldMiddleware(handlers) {\n    return (req, res, next, end)=>{\n        const handler = handlers[req.method];\n        // if no handler, return\n        if (handler === undefined) {\n            return next();\n        }\n        // if handler is fn, call as middleware\n        if (typeof handler === \"function\") {\n            return handler(req, res, next, end);\n        }\n        // if handler is some other value, use as result\n        res.result = handler;\n        return end();\n    };\n}\nfunction createIdRemapMiddleware() {\n    return (req, res, next, _end)=>{\n        const originalId = req.id;\n        const newId = Math.random().toString(36).slice(2);\n        req.id = newId;\n        res.id = newId;\n        next((done)=>{\n            req.id = originalId;\n            res.id = originalId;\n            done();\n        });\n    };\n}\nfunction createLoggerMiddleware(logger) {\n    return (req, res, next, _)=>{\n        logger.debug(\"REQ\", req, \"RES\", res);\n        next();\n    };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n    return async (req, res, next, end)=>{\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve)=>{\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback = null;\n        let nextWasCalled = false;\n        // This will be called by the consumer's async middleware.\n        const asyncNext = async ()=>{\n            nextWasCalled = true;\n            // We pass a return handler to next(). When it is called by the engine,\n            // the consumer's async middleware will resume executing.\n            next((runReturnHandlersCallback)=>{\n                // This callback comes from JRPCEngine._runReturnHandlers\n                returnHandlerCallback = runReturnHandlersCallback;\n                resolveNextPromise();\n            });\n            await nextPromise;\n        };\n        try {\n            await asyncMiddleware(req, res, asyncNext);\n            if (nextWasCalled) {\n                await nextPromise; // we must wait until the return handler is called\n                returnHandlerCallback(null);\n            } else {\n                end(null);\n            }\n        } catch (err) {\n            const error = err;\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            } else {\n                end(error);\n            }\n        }\n    };\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */ class JRPCEngine extends SafeEventEmitter {\n    constructor(){\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_middleware\", void 0);\n        this._middleware = [];\n    }\n    /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */ static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack){\n            [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [\n            error,\n            isComplete,\n            returnHandlers.reverse()\n        ];\n    }\n    /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */ static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve)=>{\n            const end = (err)=>{\n                const error = err || res.error;\n                if (error) {\n                    res.error = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n                }\n                // True indicates that the request should end\n                resolve([\n                    error,\n                    true\n                ]);\n            };\n            const next = (returnHandler)=>{\n                if (res.error) {\n                    end(res.error);\n                } else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== \"function\") {\n                            end(new SerializableError({\n                                code: -32603,\n                                message: \"JRPCEngine: 'next' return handlers must be functions\"\n                            }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([\n                        null,\n                        false\n                    ]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            } catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */ static async _runReturnHandlers(handlers) {\n        for (const handler of handlers){\n            await new Promise((resolve, reject)=>{\n                handler((err)=>err ? reject(err) : resolve());\n            });\n        }\n    }\n    /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */ static _checkForCompletion(_req, res, isComplete) {\n        if (!(\"result\" in res) && !(\"error\" in res)) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Response has no error or result for request\"\n            });\n        }\n        if (!isComplete) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Nothing ended request\"\n            });\n        }\n    }\n    /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */ push(middleware) {\n        this._middleware.push(middleware);\n    }\n    /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */ /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */ /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */ /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    handle(req, cb) {\n        if (cb && typeof cb !== \"function\") {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */ asMiddleware() {\n        return async (req, res, next, end)=>{\n            try {\n                const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JRPCEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback)=>{\n                    try {\n                        await JRPCEngine._runReturnHandlers(returnHandlers);\n                    } catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            } catch (error) {\n                return end(error);\n            }\n        };\n    }\n    /**\n   * Like _handle, but for batch requests.\n   */ /**\n   * Like _handle, but for batch requests.\n   */ async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(// 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        } catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n   * A promise-wrapped _handle.\n   */ _promiseHandle(req) {\n        return new Promise((resolve)=>{\n            this._handle(req, (_err, res)=>{\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                resolve(res);\n            });\n        });\n    }\n    /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */ async _handle(callerReq, cb) {\n        if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"request must be plain object\"\n            });\n            return cb(error, {\n                id: undefined,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        if (typeof callerReq.method !== \"string\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"method must be string\"\n            });\n            return cb(error, {\n                id: callerReq.id,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        const req = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        } catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */ async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JRPCEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JRPCEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n}\nfunction mergeMiddleware(middlewareStack) {\n    const engine = new JRPCEngine();\n    middlewareStack.forEach((middleware)=>engine.push(middleware));\n    return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n    if (!opts || !opts.engine) {\n        throw new Error(\"Missing engine parameter!\");\n    }\n    const { engine } = opts;\n    // eslint-disable-next-line prefer-const\n    let stream;\n    function read() {\n        return undefined;\n    }\n    function write(req, _encoding, cb) {\n        engine.handle(req, (_err, res)=>{\n            stream.push(res);\n        });\n        cb();\n    }\n    stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read,\n        write\n    });\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            stream.push(message);\n        });\n    }\n    return stream;\n}\nfunction providerFromEngine(engine) {\n    const provider = new SafeEventEmitter();\n    // handle both rpc send methods\n    provider.sendAsync = async (req)=>{\n        const res = await engine.handle(req);\n        if (res.error) {\n            var _res$error, _res$error2;\n            const err = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(res.error, {\n                fallbackError: {\n                    message: ((_res$error = res.error) === null || _res$error === void 0 ? void 0 : _res$error.message) || res.error.toString(),\n                    code: ((_res$error2 = res.error) === null || _res$error2 === void 0 ? void 0 : _res$error2.code) || -32603\n                }\n            });\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal(err);\n        }\n        return res.result;\n    };\n    provider.send = (req, callback)=>{\n        if (typeof callback !== \"function\") {\n            throw new Error('Must provide callback to \"send\" method.');\n        }\n        engine.handle(req, callback);\n    };\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            provider.emit(\"data\", null, message);\n        });\n    }\n    provider.request = async (args)=>{\n        const req = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, args), {}, {\n            id: Math.random().toString(36).slice(2),\n            jsonrpc: \"2.0\"\n        });\n        const res = await provider.sendAsync(req);\n        return res;\n    };\n    return provider;\n}\nfunction providerFromMiddleware(middleware) {\n    const engine = new JRPCEngine();\n    engine.push(middleware);\n    const provider = providerFromEngine(engine);\n    return provider;\n}\nfunction providerAsMiddleware(provider) {\n    return async (req, res, _next, end)=>{\n        // send request to provider\n        try {\n            const providerRes = await provider.sendAsync(req);\n            res.result = providerRes;\n            return end();\n        } catch (error) {\n            return end(error);\n        }\n    };\n}\nclass Substream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { parent, name } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_parent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        this._parent = parent;\n        this._name = name;\n    }\n    /**\n   * Explicitly sets read operations to a no-op.\n   */ _read() {\n        return undefined;\n    }\n    /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */ _write(chunk, _encoding, callback) {\n        this._parent.push({\n            name: this._name,\n            data: chunk\n        });\n        callback();\n    }\n}\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(){\n        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, opts), {}, {\n            objectMode: true\n        }));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_substreams\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"getStream\", void 0);\n        this._substreams = {};\n    }\n    createStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // create substream\n        const substream = new Substream({\n            parent: this,\n            name\n        });\n        this._substreams[name] = substream;\n        // listen for parent stream to end\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        anyStreamEnd(this, (_error)=>substream.destroy(_error || undefined));\n        return substream;\n    }\n    // ignore streams (dont display orphaned data warning)\n    ignoreStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // set\n        this._substreams[name] = IGNORE_SUBSTREAM;\n    }\n    _read() {\n        return undefined;\n    }\n    _write(chunk, _encoding, callback) {\n        const { name, data } = chunk;\n        if (!name) {\n            window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n            return callback();\n        }\n        // get corresponding substream\n        const substream = this._substreams[name];\n        if (!substream) {\n            window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n            return callback();\n        }\n        // push data into substream\n        if (substream !== IGNORE_SUBSTREAM) {\n            substream.push(data);\n        }\n        return callback();\n    }\n}\n// util\nfunction anyStreamEnd(stream, _cb) {\n    const cb = once__WEBPACK_IMPORTED_MODULE_7___default()(_cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n        readable: false\n    }, cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n        writable: false\n    }, cb);\n}\nfunction setupMultiplex(stream) {\n    const mux = new ObjectMultiplex();\n    mux.getStream = function streamHelper(name) {\n        if (this._substreams[name]) {\n            return this._substreams[name];\n        }\n        return this.createStream(name);\n    };\n    pump__WEBPACK_IMPORTED_MODULE_8___default()(stream, mux, stream, (err)=>{\n        if (err) window.console.error(err);\n    });\n    return mux;\n}\nclass PostMessageStream extends BasePostMessageStream {\n    _postMessage(data) {\n        let originConstraint = this._targetOrigin;\n        if (typeof data === \"object\") {\n            const dataObj = data;\n            if (typeof dataObj.data === \"object\") {\n                const dataObjData = dataObj.data;\n                if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n                    const dataObjDataParam = dataObjData.params[0];\n                    if (dataObjDataParam._origin) {\n                        originConstraint = dataObjDataParam._origin;\n                    }\n                    // add a constraint for the response\n                    dataObjDataParam._origin = window.location.origin;\n                }\n            }\n        }\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n}\n //# sourceMappingURL=openloginJrpc.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-session-manager/dist/openloginSessionManager.esm.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-session-manager/dist/openloginSessionManager.esm.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenloginSessionManager: () => (/* binding */ OpenloginSessionManager)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _toruslabs_base_session_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/base-session-manager */ \"(ssr)/./node_modules/@toruslabs/base-session-manager/dist/baseSessionManager.esm.js\");\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\");\n/* harmony import */ var _toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/metadata-helpers */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\");\n\n\n\n\nconst DEFAULT_SESSION_TIMEOUT = 86400;\nclass OpenloginSessionManager extends _toruslabs_base_session_manager__WEBPACK_IMPORTED_MODULE_1__.BaseSessionManager {\n    constructor(){\n        let { sessionServerBaseUrl, sessionNamespace, sessionTime, sessionId } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionServerBaseUrl\", \"https://broadcast-server.tor.us\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionNamespace\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionTime\", DEFAULT_SESSION_TIMEOUT);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionId\", \"\");\n        if (sessionServerBaseUrl) {\n            this.sessionServerBaseUrl = sessionServerBaseUrl;\n        }\n        if (sessionNamespace) this.sessionNamespace = sessionNamespace;\n        if (sessionTime) this.sessionTime = sessionTime;\n        if (sessionId) this.sessionId = sessionId.padStart(64, \"0\");\n    }\n    static generateRandomSessionKey() {\n        return (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.generatePrivate)().toString(\"hex\").padStart(64, \"0\");\n    }\n    async createSession(data) {\n        super.checkSessionParams();\n        const privKey = Buffer.from(this.sessionId, \"hex\");\n        const pubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.getPublic)(privKey).toString(\"hex\");\n        const encData = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.encryptData)(this.sessionId, data);\n        const signature = (await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.sign)(privKey, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(encData, \"utf8\")))).toString(\"hex\");\n        const body = {\n            key: pubKey,\n            data: encData,\n            signature,\n            namespace: this.sessionNamespace,\n            timeout: this.sessionTime\n        };\n        await super.request({\n            method: \"POST\",\n            url: `${this.sessionServerBaseUrl}/store/set`,\n            data: body\n        });\n        return this.sessionId;\n    }\n    async authorizeSession() {\n        super.checkSessionParams();\n        const pubkey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.getPublic)(Buffer.from(this.sessionId, \"hex\")).toString(\"hex\");\n        const url = new URL(`${this.sessionServerBaseUrl}/store/get`);\n        url.searchParams.append(\"key\", pubkey);\n        if (this.sessionNamespace) url.searchParams.append(\"namespace\", this.sessionNamespace);\n        const result = await super.request({\n            url: url.toString()\n        });\n        if (!result.message) {\n            throw new Error(\"Session Expired or Invalid public key\");\n        }\n        const response = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.decryptData)(this.sessionId, result.message);\n        if (response.error) {\n            throw new Error(\"There was an error decrypting data.\");\n        }\n        return response;\n    }\n    async updateSession(data) {\n        super.checkSessionParams();\n        const privKey = Buffer.from(this.sessionId, \"hex\");\n        const pubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.getPublic)(privKey).toString(\"hex\");\n        const encData = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.encryptData)(this.sessionId, data);\n        const signature = (await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.sign)(privKey, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(encData, \"utf8\")))).toString(\"hex\");\n        const body = {\n            key: pubKey,\n            data: encData,\n            signature,\n            namespace: this.sessionNamespace\n        };\n        await super.request({\n            method: \"PUT\",\n            url: `${this.sessionServerBaseUrl}/store/update`,\n            data: body\n        });\n    }\n    async invalidateSession() {\n        super.checkSessionParams();\n        const privKey = Buffer.from(this.sessionId, \"hex\");\n        const pubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.getPublic)(privKey).toString(\"hex\");\n        const encData = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.encryptData)(this.sessionId, {});\n        const signature = (await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_2__.sign)(privKey, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(encData, \"utf8\")))).toString(\"hex\");\n        const data = {\n            key: pubKey,\n            data: encData,\n            signature,\n            namespace: this.sessionNamespace,\n            timeout: 1\n        };\n        await super.request({\n            method: \"POST\",\n            url: `${this.sessionServerBaseUrl}/store/set`,\n            data\n        });\n        this.sessionId = \"\";\n        return true;\n    }\n}\n //# sourceMappingURL=openloginSessionManager.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-session-manager/dist/openloginSessionManager.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUILD_ENV: () => (/* binding */ BUILD_ENV),\n/* harmony export */   BrowserStorage: () => (/* binding */ BrowserStorage),\n/* harmony export */   LANGUAGES: () => (/* binding */ LANGUAGES),\n/* harmony export */   LOGIN_PROVIDER: () => (/* binding */ LOGIN_PROVIDER),\n/* harmony export */   MFA_FACTOR: () => (/* binding */ MFA_FACTOR),\n/* harmony export */   MFA_LEVELS: () => (/* binding */ MFA_LEVELS),\n/* harmony export */   MemoryStore: () => (/* binding */ MemoryStore),\n/* harmony export */   OPENLOGIN_ACTIONS: () => (/* binding */ OPENLOGIN_ACTIONS),\n/* harmony export */   OPENLOGIN_NETWORK: () => (/* binding */ OPENLOGIN_NETWORK),\n/* harmony export */   SUPPORTED_KEY_CURVES: () => (/* binding */ SUPPORTED_KEY_CURVES),\n/* harmony export */   THEME_MODES: () => (/* binding */ THEME_MODES),\n/* harmony export */   TORUS_LEGACY_NETWORK: () => (/* reexport safe */ _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_LEGACY_NETWORK),\n/* harmony export */   TORUS_SAPPHIRE_NETWORK: () => (/* reexport safe */ _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_SAPPHIRE_NETWORK),\n/* harmony export */   UX_MODE: () => (/* binding */ UX_MODE),\n/* harmony export */   base64toJSON: () => (/* binding */ base64toJSON),\n/* harmony export */   base64url: () => (/* binding */ base64url),\n/* harmony export */   jsonToBase64: () => (/* binding */ jsonToBase64),\n/* harmony export */   safeatob: () => (/* binding */ safeatob),\n/* harmony export */   safebtoa: () => (/* binding */ safebtoa),\n/* harmony export */   storageAvailable: () => (/* binding */ storageAvailable),\n/* harmony export */   storeKey: () => (/* binding */ storeKey)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! base64url */ \"(ssr)/./node_modules/base64url/index.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(base64url__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/constants */ \"(ssr)/./node_modules/@toruslabs/constants/dist/constants.esm.js\");\n\n\n\n\n\nconst base64url = (base64url__WEBPACK_IMPORTED_MODULE_1___default());\nfunction safebtoa(str) {\n    return base64url.encode(str);\n}\nfunction safeatob(str) {\n    // Going backwards: from bytestream, to percent-encoding, to original string.\n    return base64url.decode(str);\n}\nfunction base64toJSON(b64str) {\n    return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n    return base64url.encode(JSON.stringify(json));\n}\nfunction storageAvailable(type) {\n    let storageExists = false;\n    let storageLength = 0;\n    let storage;\n    try {\n        storage = window[type];\n        storageExists = true;\n        storageLength = storage.length;\n        const x = \"__storage_test__\";\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    } catch (err) {\n        const error = err;\n        return error && // everything except Firefox\n        (error.code === 22 || // Firefox\n        error.code === 1014 || // test name field too, because code might not be present\n        // everything except Firefox\n        error.name === \"QuotaExceededError\" || // Firefox\n        error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n        storageExists && storageLength !== 0;\n    }\n}\nclass MemoryStore {\n    constructor(){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"store\", {});\n    }\n    getItem(key) {\n        return this.store[key] || null;\n    }\n    setItem(key, value) {\n        this.store[key] = value;\n    }\n}\nclass BrowserStorage {\n    constructor(storeKey, storage){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"storage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_storeKey\", void 0);\n        this.storage = storage;\n        this._storeKey = storeKey;\n        try {\n            if (!storage.getItem(storeKey)) {\n                this.resetStore();\n            }\n        } catch (error) {\n        // Storage is not available\n        }\n    }\n    static getInstance(key) {\n        let storageKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"local\";\n        if (!this.instance) {\n            let storage;\n            if (storageKey === \"local\" && storageAvailable(\"localStorage\")) {\n                storage = window.localStorage;\n            } else if (storageKey === \"session\" && storageAvailable(\"sessionStorage\")) {\n                storage = window.sessionStorage;\n            } else {\n                storage = new MemoryStore();\n            }\n            this.instance = new this(key, storage);\n        }\n        return this.instance;\n    }\n    toJSON() {\n        return this.storage.getItem(this._storeKey);\n    }\n    resetStore() {\n        const currStore = this.getStore();\n        this.storage.setItem(this._storeKey, JSON.stringify({}));\n        return currStore;\n    }\n    getStore() {\n        return JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    }\n    get(key) {\n        const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n        return store[key];\n    }\n    set(key, value) {\n        const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n        store[key] = value;\n        this.storage.setItem(this._storeKey, JSON.stringify(store));\n    }\n}\n// eslint-disable-next-line no-use-before-define\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(BrowserStorage, \"instance\", void 0);\nconst storeKey = \"openlogin_store\";\nconst UX_MODE = {\n    POPUP: \"popup\",\n    REDIRECT: \"redirect\"\n};\nconst OPENLOGIN_NETWORK = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_2___default()({}, _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_SAPPHIRE_NETWORK), _toruslabs_constants__WEBPACK_IMPORTED_MODULE_3__.TORUS_LEGACY_NETWORK);\nconst SUPPORTED_KEY_CURVES = {\n    SECP256K1: \"secp256k1\",\n    ED25519: \"ed25519\"\n};\nconst LOGIN_PROVIDER = {\n    GOOGLE: \"google\",\n    FACEBOOK: \"facebook\",\n    REDDIT: \"reddit\",\n    DISCORD: \"discord\",\n    TWITCH: \"twitch\",\n    APPLE: \"apple\",\n    LINE: \"line\",\n    GITHUB: \"github\",\n    KAKAO: \"kakao\",\n    LINKEDIN: \"linkedin\",\n    TWITTER: \"twitter\",\n    WEIBO: \"weibo\",\n    WECHAT: \"wechat\",\n    EMAIL_PASSWORDLESS: \"email_passwordless\",\n    SMS_PASSWORDLESS: \"sms_passwordless\",\n    WEBAUTHN: \"webauthn\",\n    JWT: \"jwt\"\n};\nconst MFA_LEVELS = {\n    DEFAULT: \"default\",\n    OPTIONAL: \"optional\",\n    MANDATORY: \"mandatory\",\n    NONE: \"none\"\n};\nconst OPENLOGIN_ACTIONS = {\n    LOGIN: \"login\",\n    ENABLE_MFA: \"enable_mfa\",\n    MODIFY_MFA: \"modify_mfa\"\n};\nconst BUILD_ENV = {\n    PRODUCTION: \"production\",\n    DEVELOPMENT: \"development\",\n    STAGING: \"staging\",\n    TESTING: \"testing\"\n};\n/**\n * {@label loginProviderType}\n */ // autocomplete workaround https://github.com/microsoft/TypeScript/issues/29729\nconst LANGUAGES = {\n    en: \"en\",\n    ja: \"ja\",\n    ko: \"ko\",\n    de: \"de\",\n    zh: \"zh\",\n    es: \"es\",\n    fr: \"fr\",\n    pt: \"pt\",\n    nl: \"nl\"\n};\nconst THEME_MODES = {\n    light: \"light\",\n    dark: \"dark\",\n    auto: \"auto\"\n};\nconst MFA_FACTOR = {\n    DEVICE: \"deviceShareFactor\",\n    BACKUP_SHARE: \"backUpShareFactor\",\n    SOCIAL_BACKUP: \"socialBackupFactor\",\n    PASSWORD: \"passwordFactor\"\n};\n //# sourceMappingURL=openloginUtils.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9vcGVubG9naW4tdXRpbHMvZGlzdC9vcGVubG9naW5VdGlscy5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFvRTtBQUMvQjtBQUM0QjtBQUNtQjtBQUNBO0FBRXBGLE1BQU1LLFlBQVlKLGtEQUFZQTtBQUM5QixTQUFTSyxTQUFTQyxHQUFHO0lBQ25CLE9BQU9GLFVBQVVHLE1BQU0sQ0FBQ0Q7QUFDMUI7QUFDQSxTQUFTRSxTQUFTRixHQUFHO0lBQ25CLDZFQUE2RTtJQUM3RSxPQUFPRixVQUFVSyxNQUFNLENBQUNIO0FBQzFCO0FBQ0EsU0FBU0ksYUFBYUMsTUFBTTtJQUMxQixPQUFPQyxLQUFLQyxLQUFLLENBQUNULFVBQVVLLE1BQU0sQ0FBQ0U7QUFDckM7QUFDQSxTQUFTRyxhQUFhQyxJQUFJO0lBQ3hCLE9BQU9YLFVBQVVHLE1BQU0sQ0FBQ0ssS0FBS0ksU0FBUyxDQUFDRDtBQUN6QztBQUNBLFNBQVNFLGlCQUFpQkMsSUFBSTtJQUM1QixJQUFJQyxnQkFBZ0I7SUFDcEIsSUFBSUMsZ0JBQWdCO0lBQ3BCLElBQUlDO0lBQ0osSUFBSTtRQUNGQSxVQUFVQyxNQUFNLENBQUNKLEtBQUs7UUFDdEJDLGdCQUFnQjtRQUNoQkMsZ0JBQWdCQyxRQUFRRSxNQUFNO1FBQzlCLE1BQU1DLElBQUk7UUFDVkgsUUFBUUksT0FBTyxDQUFDRCxHQUFHQTtRQUNuQkgsUUFBUUssVUFBVSxDQUFDRjtRQUNuQixPQUFPO0lBQ1QsRUFBRSxPQUFPRyxLQUFLO1FBQ1osTUFBTUMsUUFBUUQ7UUFDZCxPQUFPQyxTQUNQLDRCQUE0QjtRQUM1QkEsQ0FBQUEsTUFBTUMsSUFBSSxLQUFLLE1BQ2YsVUFBVTtRQUNWRCxNQUFNQyxJQUFJLEtBQUssUUFDZix5REFBeUQ7UUFDekQsNEJBQTRCO1FBQzVCRCxNQUFNRSxJQUFJLEtBQUssd0JBQ2YsVUFBVTtRQUNWRixNQUFNRSxJQUFJ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Z2luLXV0aWxzL2Rpc3Qvb3BlbmxvZ2luVXRpbHMuZXNtLmpzP2Y5M2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBiYXNlNjR1cmxMaWIgZnJvbSAnYmFzZTY0dXJsJztcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMic7XG5pbXBvcnQgeyBUT1JVU19TQVBQSElSRV9ORVRXT1JLLCBUT1JVU19MRUdBQ1lfTkVUV09SSyB9IGZyb20gJ0B0b3J1c2xhYnMvY29uc3RhbnRzJztcbmV4cG9ydCB7IFRPUlVTX0xFR0FDWV9ORVRXT1JLLCBUT1JVU19TQVBQSElSRV9ORVRXT1JLIH0gZnJvbSAnQHRvcnVzbGFicy9jb25zdGFudHMnO1xuXG5jb25zdCBiYXNlNjR1cmwgPSBiYXNlNjR1cmxMaWI7XG5mdW5jdGlvbiBzYWZlYnRvYShzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NHVybC5lbmNvZGUoc3RyKTtcbn1cbmZ1bmN0aW9uIHNhZmVhdG9iKHN0cikge1xuICAvLyBHb2luZyBiYWNrd2FyZHM6IGZyb20gYnl0ZXN0cmVhbSwgdG8gcGVyY2VudC1lbmNvZGluZywgdG8gb3JpZ2luYWwgc3RyaW5nLlxuICByZXR1cm4gYmFzZTY0dXJsLmRlY29kZShzdHIpO1xufVxuZnVuY3Rpb24gYmFzZTY0dG9KU09OKGI2NHN0cikge1xuICByZXR1cm4gSlNPTi5wYXJzZShiYXNlNjR1cmwuZGVjb2RlKGI2NHN0cikpO1xufVxuZnVuY3Rpb24ganNvblRvQmFzZTY0KGpzb24pIHtcbiAgcmV0dXJuIGJhc2U2NHVybC5lbmNvZGUoSlNPTi5zdHJpbmdpZnkoanNvbikpO1xufVxuZnVuY3Rpb24gc3RvcmFnZUF2YWlsYWJsZSh0eXBlKSB7XG4gIGxldCBzdG9yYWdlRXhpc3RzID0gZmFsc2U7XG4gIGxldCBzdG9yYWdlTGVuZ3RoID0gMDtcbiAgbGV0IHN0b3JhZ2U7XG4gIHRyeSB7XG4gICAgc3RvcmFnZSA9IHdpbmRvd1t0eXBlXTtcbiAgICBzdG9yYWdlRXhpc3RzID0gdHJ1ZTtcbiAgICBzdG9yYWdlTGVuZ3RoID0gc3RvcmFnZS5sZW5ndGg7XG4gICAgY29uc3QgeCA9IFwiX19zdG9yYWdlX3Rlc3RfX1wiO1xuICAgIHN0b3JhZ2Uuc2V0SXRlbSh4LCB4KTtcbiAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oeCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnN0IGVycm9yID0gZXJyO1xuICAgIHJldHVybiBlcnJvciAmJiAoXG4gICAgLy8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuICAgIGVycm9yLmNvZGUgPT09IDIyIHx8XG4gICAgLy8gRmlyZWZveFxuICAgIGVycm9yLmNvZGUgPT09IDEwMTQgfHxcbiAgICAvLyB0ZXN0IG5hbWUgZmllbGQgdG9vLCBiZWNhdXNlIGNvZGUgbWlnaHQgbm90IGJlIHByZXNlbnRcbiAgICAvLyBldmVyeXRoaW5nIGV4Y2VwdCBGaXJlZm94XG4gICAgZXJyb3IubmFtZSA9PT0gXCJRdW90YUV4Y2VlZGVkRXJyb3JcIiB8fFxuICAgIC8vIEZpcmVmb3hcbiAgICBlcnJvci5uYW1lID09PSBcIk5TX0VSUk9SX0RPTV9RVU9UQV9SRUFDSEVEXCIpICYmXG4gICAgLy8gYWNrbm93bGVkZ2UgUXVvdGFFeGNlZWRlZEVycm9yIG9ubHkgaWYgdGhlcmUncyBzb21ldGhpbmcgYWxyZWFkeSBzdG9yZWRcbiAgICBzdG9yYWdlRXhpc3RzICYmIHN0b3JhZ2VMZW5ndGggIT09IDA7XG4gIH1cbn1cblxuY2xhc3MgTWVtb3J5U3RvcmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdG9yZVwiLCB7fSk7XG4gIH1cbiAgZ2V0SXRlbShrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZVtrZXldIHx8IG51bGw7XG4gIH1cbiAgc2V0SXRlbShrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5zdG9yZVtrZXldID0gdmFsdWU7XG4gIH1cbn1cbmNsYXNzIEJyb3dzZXJTdG9yYWdlIHtcbiAgY29uc3RydWN0b3Ioc3RvcmVLZXksIHN0b3JhZ2UpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdG9yYWdlXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3N0b3JlS2V5XCIsIHZvaWQgMCk7XG4gICAgdGhpcy5zdG9yYWdlID0gc3RvcmFnZTtcbiAgICB0aGlzLl9zdG9yZUtleSA9IHN0b3JlS2V5O1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXN0b3JhZ2UuZ2V0SXRlbShzdG9yZUtleSkpIHtcbiAgICAgICAgdGhpcy5yZXNldFN0b3JlKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFN0b3JhZ2UgaXMgbm90IGF2YWlsYWJsZVxuICAgIH1cbiAgfVxuICBzdGF0aWMgZ2V0SW5zdGFuY2Uoa2V5KSB7XG4gICAgbGV0IHN0b3JhZ2VLZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFwibG9jYWxcIjtcbiAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIGxldCBzdG9yYWdlO1xuICAgICAgaWYgKHN0b3JhZ2VLZXkgPT09IFwibG9jYWxcIiAmJiBzdG9yYWdlQXZhaWxhYmxlKFwibG9jYWxTdG9yYWdlXCIpKSB7XG4gICAgICAgIHN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgICAgfSBlbHNlIGlmIChzdG9yYWdlS2V5ID09PSBcInNlc3Npb25cIiAmJiBzdG9yYWdlQXZhaWxhYmxlKFwic2Vzc2lvblN0b3JhZ2VcIikpIHtcbiAgICAgICAgc3RvcmFnZSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0b3JhZ2UgPSBuZXcgTWVtb3J5U3RvcmUoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgdGhpcyhrZXksIHN0b3JhZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXRJdGVtKHRoaXMuX3N0b3JlS2V5KTtcbiAgfVxuICByZXNldFN0b3JlKCkge1xuICAgIGNvbnN0IGN1cnJTdG9yZSA9IHRoaXMuZ2V0U3RvcmUoKTtcbiAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLl9zdG9yZUtleSwgSlNPTi5zdHJpbmdpZnkoe30pKTtcbiAgICByZXR1cm4gY3VyclN0b3JlO1xuICB9XG4gIGdldFN0b3JlKCkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuc3RvcmFnZS5nZXRJdGVtKHRoaXMuX3N0b3JlS2V5KSB8fCBcInt9XCIpO1xuICB9XG4gIGdldChrZXkpIHtcbiAgICBjb25zdCBzdG9yZSA9IEpTT04ucGFyc2UodGhpcy5zdG9yYWdlLmdldEl0ZW0odGhpcy5fc3RvcmVLZXkpIHx8IFwie31cIik7XG4gICAgcmV0dXJuIHN0b3JlW2tleV07XG4gIH1cbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCBzdG9yZSA9IEpTT04ucGFyc2UodGhpcy5zdG9yYWdlLmdldEl0ZW0odGhpcy5fc3RvcmVLZXkpIHx8IFwie31cIik7XG4gICAgc3RvcmVba2V5XSA9IHZhbHVlO1xuICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKHRoaXMuX3N0b3JlS2V5LCBKU09OLnN0cmluZ2lmeShzdG9yZSkpO1xuICB9XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbl9kZWZpbmVQcm9wZXJ0eShCcm93c2VyU3RvcmFnZSwgXCJpbnN0YW5jZVwiLCB2b2lkIDApO1xuXG5jb25zdCBzdG9yZUtleSA9IFwib3BlbmxvZ2luX3N0b3JlXCI7XG5jb25zdCBVWF9NT0RFID0ge1xuICBQT1BVUDogXCJwb3B1cFwiLFxuICBSRURJUkVDVDogXCJyZWRpcmVjdFwiXG59O1xuY29uc3QgT1BFTkxPR0lOX05FVFdPUksgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIFRPUlVTX1NBUFBISVJFX05FVFdPUkspLCBUT1JVU19MRUdBQ1lfTkVUV09SSyk7XG5jb25zdCBTVVBQT1JURURfS0VZX0NVUlZFUyA9IHtcbiAgU0VDUDI1NksxOiBcInNlY3AyNTZrMVwiLFxuICBFRDI1NTE5OiBcImVkMjU1MTlcIlxufTtcbmNvbnN0IExPR0lOX1BST1ZJREVSID0ge1xuICBHT09HTEU6IFwiZ29vZ2xlXCIsXG4gIEZBQ0VCT09LOiBcImZhY2Vib29rXCIsXG4gIFJFRERJVDogXCJyZWRkaXRcIixcbiAgRElTQ09SRDogXCJkaXNjb3JkXCIsXG4gIFRXSVRDSDogXCJ0d2l0Y2hcIixcbiAgQVBQTEU6IFwiYXBwbGVcIixcbiAgTElORTogXCJsaW5lXCIsXG4gIEdJVEhVQjogXCJnaXRodWJcIixcbiAgS0FLQU86IFwia2FrYW9cIixcbiAgTElOS0VESU46IFwibGlua2VkaW5cIixcbiAgVFdJVFRFUjogXCJ0d2l0dGVyXCIsXG4gIFdFSUJPOiBcIndlaWJvXCIsXG4gIFdFQ0hBVDogXCJ3ZWNoYXRcIixcbiAgRU1BSUxfUEFTU1dPUkRMRVNTOiBcImVtYWlsX3Bhc3N3b3JkbGVzc1wiLFxuICBTTVNfUEFTU1dPUkRMRVNTOiBcInNtc19wYXNzd29yZGxlc3NcIixcbiAgV0VCQVVUSE46IFwid2ViYXV0aG5cIixcbiAgSldUOiBcImp3dFwiXG59O1xuY29uc3QgTUZBX0xFVkVMUyA9IHtcbiAgREVGQVVMVDogXCJkZWZhdWx0XCIsXG4gIE9QVElPTkFMOiBcIm9wdGlvbmFsXCIsXG4gIE1BTkRBVE9SWTogXCJtYW5kYXRvcnlcIixcbiAgTk9ORTogXCJub25lXCJcbn07XG5jb25zdCBPUEVOTE9HSU5fQUNUSU9OUyA9IHtcbiAgTE9HSU46IFwibG9naW5cIixcbiAgRU5BQkxFX01GQTogXCJlbmFibGVfbWZhXCIsXG4gIE1PRElGWV9NRkE6IFwibW9kaWZ5X21mYVwiXG59O1xuY29uc3QgQlVJTERfRU5WID0ge1xuICBQUk9EVUNUSU9OOiBcInByb2R1Y3Rpb25cIixcbiAgREVWRUxPUE1FTlQ6IFwiZGV2ZWxvcG1lbnRcIixcbiAgU1RBR0lORzogXCJzdGFnaW5nXCIsXG4gIFRFU1RJTkc6IFwidGVzdGluZ1wiXG59O1xuXG4vKipcbiAqIHtAbGFiZWwgbG9naW5Qcm92aWRlclR5cGV9XG4gKi9cblxuLy8gYXV0b2NvbXBsZXRlIHdvcmthcm91bmQgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8yOTcyOVxuXG5jb25zdCBMQU5HVUFHRVMgPSB7XG4gIGVuOiBcImVuXCIsXG4gIGphOiBcImphXCIsXG4gIGtvOiBcImtvXCIsXG4gIGRlOiBcImRlXCIsXG4gIHpoOiBcInpoXCIsXG4gIGVzOiBcImVzXCIsXG4gIGZyOiBcImZyXCIsXG4gIHB0OiBcInB0XCIsXG4gIG5sOiBcIm5sXCJcbn07XG5jb25zdCBUSEVNRV9NT0RFUyA9IHtcbiAgbGlnaHQ6IFwibGlnaHRcIixcbiAgZGFyazogXCJkYXJrXCIsXG4gIGF1dG86IFwiYXV0b1wiXG59O1xuY29uc3QgTUZBX0ZBQ1RPUiA9IHtcbiAgREVWSUNFOiBcImRldmljZVNoYXJlRmFjdG9yXCIsXG4gIEJBQ0tVUF9TSEFSRTogXCJiYWNrVXBTaGFyZUZhY3RvclwiLFxuICBTT0NJQUxfQkFDS1VQOiBcInNvY2lhbEJhY2t1cEZhY3RvclwiLFxuICBQQVNTV09SRDogXCJwYXNzd29yZEZhY3RvclwiXG59O1xuXG5leHBvcnQgeyBCVUlMRF9FTlYsIEJyb3dzZXJTdG9yYWdlLCBMQU5HVUFHRVMsIExPR0lOX1BST1ZJREVSLCBNRkFfRkFDVE9SLCBNRkFfTEVWRUxTLCBNZW1vcnlTdG9yZSwgT1BFTkxPR0lOX0FDVElPTlMsIE9QRU5MT0dJTl9ORVRXT1JLLCBTVVBQT1JURURfS0VZX0NVUlZFUywgVEhFTUVfTU9ERVMsIFVYX01PREUsIGJhc2U2NHRvSlNPTiwgYmFzZTY0dXJsLCBqc29uVG9CYXNlNjQsIHNhZmVhdG9iLCBzYWZlYnRvYSwgc3RvcmFnZUF2YWlsYWJsZSwgc3RvcmVLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5sb2dpblV0aWxzLmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfZGVmaW5lUHJvcGVydHkiLCJiYXNlNjR1cmxMaWIiLCJfb2JqZWN0U3ByZWFkIiwiVE9SVVNfU0FQUEhJUkVfTkVUV09SSyIsIlRPUlVTX0xFR0FDWV9ORVRXT1JLIiwiYmFzZTY0dXJsIiwic2FmZWJ0b2EiLCJzdHIiLCJlbmNvZGUiLCJzYWZlYXRvYiIsImRlY29kZSIsImJhc2U2NHRvSlNPTiIsImI2NHN0ciIsIkpTT04iLCJwYXJzZSIsImpzb25Ub0Jhc2U2NCIsImpzb24iLCJzdHJpbmdpZnkiLCJzdG9yYWdlQXZhaWxhYmxlIiwidHlwZSIsInN0b3JhZ2VFeGlzdHMiLCJzdG9yYWdlTGVuZ3RoIiwic3RvcmFnZSIsIndpbmRvdyIsImxlbmd0aCIsIngiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImVyciIsImVycm9yIiwiY29kZSIsIm5hbWUiLCJNZW1vcnlTdG9yZSIsImNvbnN0cnVjdG9yIiwiZ2V0SXRlbSIsImtleSIsInN0b3JlIiwidmFsdWUiLCJCcm93c2VyU3RvcmFnZSIsInN0b3JlS2V5IiwiX3N0b3JlS2V5IiwicmVzZXRTdG9yZSIsImdldEluc3RhbmNlIiwic3RvcmFnZUtleSIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImluc3RhbmNlIiwibG9jYWxTdG9yYWdlIiwic2Vzc2lvblN0b3JhZ2UiLCJ0b0pTT04iLCJjdXJyU3RvcmUiLCJnZXRTdG9yZSIsImdldCIsInNldCIsIlVYX01PREUiLCJQT1BVUCIsIlJFRElSRUNUIiwiT1BFTkxPR0lOX05FVFdPUksiLCJTVVBQT1JURURfS0VZX0NVUlZFUyIsIlNFQ1AyNTZLMSIsIkVEMjU1MTkiLCJMT0dJTl9QUk9WSURFUiIsIkdPT0dMRSIsIkZBQ0VCT09LIiwiUkVERElUIiwiRElTQ09SRCIsIlRXSVRDSCIsIkFQUExFIiwiTElORSIsIkdJVEhVQiIsIktBS0FPIiwiTElOS0VESU4iLCJUV0lUVEVSIiwiV0VJQk8iLCJXRUNIQVQiLCJFTUFJTF9QQVNTV09SRExFU1MiLCJTTVNfUEFTU1dPUkRMRVNTIiwiV0VCQVVUSE4iLCJKV1QiLCJNRkFfTEVWRUxTIiwiREVGQVVMVCIsIk9QVElPTkFMIiwiTUFOREFUT1JZIiwiTk9ORSIsIk9QRU5MT0dJTl9BQ1RJT05TIiwiTE9HSU4iLCJFTkFCTEVfTUZBIiwiTU9ESUZZX01GQSIsIkJVSUxEX0VOViIsIlBST0RVQ1RJT04iLCJERVZFTE9QTUVOVCIsIlNUQUdJTkciLCJURVNUSU5HIiwiTEFOR1VBR0VTIiwiZW4iLCJqYSIsImtvIiwiZGUiLCJ6aCIsImVzIiwiZnIiLCJwdCIsIm5sIiwiVEhFTUVfTU9ERVMiLCJsaWdodCIsImRhcmsiLCJhdXRvIiwiTUZBX0ZBQ1RPUiIsIkRFVklDRSIsIkJBQ0tVUF9TSEFSRSIsIlNPQ0lBTF9CQUNLVVAiLCJQQVNTV09SRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin/dist/openlogin.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin/dist/openlogin.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InitializationError: () => (/* binding */ InitializationError),\n/* harmony export */   LoginError: () => (/* binding */ LoginError),\n/* harmony export */   OpenloginError: () => (/* binding */ OpenloginError),\n/* harmony export */   constructURL: () => (/* binding */ constructURL),\n/* harmony export */   \"default\": () => (/* binding */ OpenLogin),\n/* harmony export */   getHashQueryParams: () => (/* binding */ getHashQueryParams),\n/* harmony export */   getPopupFeatures: () => (/* binding */ getPopupFeatures),\n/* harmony export */   getTimeout: () => (/* binding */ getTimeout),\n/* harmony export */   isMobileOrTablet: () => (/* binding */ isMobileOrTablet),\n/* harmony export */   loglevel: () => (/* binding */ loglevel),\n/* harmony export */   version: () => (/* binding */ version),\n/* harmony export */   whitelistUrl: () => (/* binding */ whitelistUrl)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ts_custom_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ts-custom-error */ \"(ssr)/./node_modules/ts-custom-error/dist/custom-error.mjs\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _toruslabs_openlogin_session_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @toruslabs/openlogin-session-manager */ \"(ssr)/./node_modules/@toruslabs/openlogin-session-manager/dist/openloginSessionManager.esm.js\");\n/* harmony import */ var _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @toruslabs/openlogin-utils */ \"(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\");\n/* harmony import */ var _toruslabs_secure_pub_sub__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @toruslabs/secure-pub-sub */ \"(ssr)/./node_modules/@toruslabs/secure-pub-sub/dist/securePubSub.esm.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\");\n/* harmony import */ var _toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @toruslabs/metadata-helpers */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/bowser/src/bowser.js\");\n\n\n\n\n\n\n\n\n\n\n\nclass OpenloginError extends ts_custom_error__WEBPACK_IMPORTED_MODULE_1__.CustomError {\n    constructor(code, message){\n        // takes care of stack and proto\n        super(message);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"code\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"message\", void 0);\n        this.code = code;\n        this.message = message || \"\";\n        // Set name explicitly as minification can mangle class names\n        Object.defineProperty(this, \"name\", {\n            value: \"OpenloginError\"\n        });\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            code: this.code,\n            message: this.message\n        };\n    }\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n}\nclass InitializationError extends OpenloginError {\n    constructor(code, message){\n        // takes care of stack and proto\n        super(code, message);\n        // Set name explicitly as minification can mangle class names\n        Object.defineProperty(this, \"name\", {\n            value: \"InitializationError\"\n        });\n    }\n    static fromCode(code) {\n        let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n        return new InitializationError(code, `${InitializationError.messages[code]}, ${extraMessage}`);\n    }\n    static invalidParams() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return InitializationError.fromCode(5001, extraMessage);\n    }\n    static notInitialized() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return InitializationError.fromCode(5002, extraMessage);\n    }\n}\n/**\n * login errors\n */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(InitializationError, \"messages\", {\n    5000: \"Custom\",\n    5001: \"Invalid constructor params\",\n    5002: \"SDK not initialized. please call init first\"\n});\nclass LoginError extends OpenloginError {\n    constructor(code, message){\n        // takes care of stack and proto\n        super(code, message);\n        // Set name explicitly as minification can mangle class names\n        Object.defineProperty(this, \"name\", {\n            value: \"LoginError\"\n        });\n    }\n    static fromCode(code) {\n        let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n        return new LoginError(code, `${LoginError.messages[code]}, ${extraMessage}`);\n    }\n    static invalidLoginParams() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return LoginError.fromCode(5111, extraMessage);\n    }\n    static userNotLoggedIn() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return LoginError.fromCode(5112, extraMessage);\n    }\n    static popupClosed() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return LoginError.fromCode(5113, extraMessage);\n    }\n    static loginFailed() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return LoginError.fromCode(5114, extraMessage);\n    }\n    static popupBlocked() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return LoginError.fromCode(5115, extraMessage);\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(LoginError, \"messages\", {\n    5000: \"Custom\",\n    5111: \"Invalid login params\",\n    5112: \"User not logged in.\",\n    5113: \"login popup has been closed by the user\",\n    5114: \"Login failed\",\n    5115: \"Popup was blocked. Please call this function as soon as user clicks button or use redirect mode\"\n});\nconst loglevel = (0,loglevel__WEBPACK_IMPORTED_MODULE_2__.getLogger)(\"openlogin\");\nloglevel.setLevel(\"error\");\n// don't use destructuring for process.env cause it messes up webpack env plugin\nconst version = \"6.1.0\";\nasync function whitelistUrl(clientId, appKey, origin) {\n    const appKeyBuf = Buffer.from(appKey.padStart(64, \"0\"), \"hex\");\n    if (_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.base64url.encode((0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_8__.getPublic)(appKeyBuf)) !== clientId) throw new Error(\"appKey mismatch\");\n    const sig = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_8__.sign)(appKeyBuf, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_9__.keccak256)(Buffer.from(origin, \"utf8\")));\n    return _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.base64url.encode(sig);\n}\nfunction getHashQueryParams() {\n    let replaceUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const result = {};\n    const url = new URL(window.location.href);\n    url.searchParams.forEach((value, key)=>{\n        if (key !== \"result\") {\n            result[key] = value;\n        }\n    });\n    const queryResult = url.searchParams.get(\"result\");\n    if (queryResult) {\n        try {\n            const queryParams = JSON.parse((0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.safeatob)(queryResult));\n            Object.keys(queryParams).forEach((key)=>{\n                result[key] = queryParams[key];\n            });\n        } catch (error) {\n            loglevel.error(error);\n        }\n    }\n    const hash = url.hash.substring(1);\n    const hashUrl = new URL(`${window.location.origin}/?${hash}`);\n    hashUrl.searchParams.forEach((value, key)=>{\n        if (key !== \"result\") {\n            result[key] = value;\n        }\n    });\n    const hashResult = hashUrl.searchParams.get(\"result\");\n    if (hashResult) {\n        try {\n            const hashParams = JSON.parse((0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.safeatob)(hashResult));\n            Object.keys(hashParams).forEach((key)=>{\n                result[key] = hashParams[key];\n            });\n        } catch (error) {\n            loglevel.error(error);\n        }\n    }\n    if (replaceUrl) {\n        const cleanUrl = new URL(window.location.origin + window.location.pathname);\n        cleanUrl.search = window.location.search;\n        if (hashResult) {\n            const hashParams = JSON.parse((0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.safeatob)(hashResult));\n            delete hashParams.sessionId;\n            delete hashParams.sessionNamespace;\n            delete hashParams.error;\n            cleanUrl.hash = (0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.safebtoa)(JSON.stringify(hashParams));\n        }\n        window.history.replaceState(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()({}, window.history.state), {}, {\n            as: cleanUrl.href,\n            url: cleanUrl.href\n        }), \"\", cleanUrl.href);\n    }\n    return result;\n}\nfunction constructURL(params) {\n    const { baseURL, query, hash } = params;\n    const url = new URL(baseURL);\n    if (query) {\n        Object.keys(query).forEach((key)=>{\n            url.searchParams.append(key, query[key]);\n        });\n    }\n    if (hash) {\n        const h = new URL(constructURL({\n            baseURL,\n            query: hash\n        })).searchParams.toString();\n        url.hash = h;\n    }\n    return url.toString();\n}\nfunction getPopupFeatures() {\n    if (true) return \"\";\n    // Fixes dual-screen position                             Most browsers      Firefox\n    const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n    const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n    const w = 1200;\n    const h = 700;\n    const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n    const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n    const systemZoom = 1; // No reliable estimate\n    const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n    const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n    const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n    return features;\n}\nfunction isMobileOrTablet() {\n    if (true) return false;\n    const browser = bowser__WEBPACK_IMPORTED_MODULE_10__[\"default\"].getParser(window.navigator.userAgent);\n    const platform = browser.getPlatform();\n    return platform.type === bowser__WEBPACK_IMPORTED_MODULE_10__[\"default\"].PLATFORMS_MAP.tablet || platform.type === bowser__WEBPACK_IMPORTED_MODULE_10__[\"default\"].PLATFORMS_MAP.mobile;\n}\nfunction getTimeout(loginProvider) {\n    if ((loginProvider === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.LOGIN_PROVIDER.FACEBOOK || loginProvider === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.LOGIN_PROVIDER.LINE) && isMobileOrTablet()) {\n        return 1000 * 60 * 5; // 5 minutes to finish the login\n    }\n    return 1000 * 10; // 10 seconds\n}\nclass PopupHandler extends events__WEBPACK_IMPORTED_MODULE_7__.EventEmitter {\n    constructor(_ref){\n        let { url, target, features, timeout = 30000 } = _ref;\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"url\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"target\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"features\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"window\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"windowTimer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"iClosedWindow\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"timeout\", void 0);\n        this.url = url;\n        this.target = target || \"_blank\";\n        this.features = features || getPopupFeatures();\n        this.window = undefined;\n        this.windowTimer = undefined;\n        this.iClosedWindow = false;\n        this.timeout = timeout;\n        this._setupTimer();\n    }\n    _setupTimer() {\n        this.windowTimer = Number(setInterval(()=>{\n            if (this.window && this.window.closed) {\n                clearInterval(this.windowTimer);\n                setTimeout(()=>{\n                    if (!this.iClosedWindow) {\n                        this.emit(\"close\");\n                    }\n                    this.iClosedWindow = false;\n                    this.window = undefined;\n                }, this.timeout);\n            }\n            if (this.window === undefined) clearInterval(this.windowTimer);\n        }, 500));\n    }\n    open() {\n        var _this$window;\n        this.window = window.open(this.url, this.target, this.features);\n        if (!this.window) throw LoginError.popupBlocked();\n        if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    }\n    close() {\n        this.iClosedWindow = true;\n        if (this.window) this.window.close();\n    }\n    redirect(locationReplaceOnRedirect) {\n        if (locationReplaceOnRedirect) {\n            window.location.replace(this.url);\n        } else {\n            window.location.href = this.url;\n        }\n    }\n    async listenOnChannel(loginId) {\n        const securePubSub = new _toruslabs_secure_pub_sub__WEBPACK_IMPORTED_MODULE_6__.SecurePubSub();\n        const data = await securePubSub.subscribe(loginId);\n        this.close();\n        securePubSub.cleanup();\n        const parsedData = JSON.parse(data);\n        if (parsedData.error) {\n            return {\n                error: parsedData.error,\n                state: parsedData.state\n            };\n        }\n        return parsedData.data;\n    }\n}\nclass OpenLogin {\n    constructor(options){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"state\", {});\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"options\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionManager\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"currentStorage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_storageBaseKey\", \"openlogin_store\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"dappState\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"addVersionInUrls\", true);\n        if (!options.clientId) throw InitializationError.invalidParams(\"clientId is required\");\n        if (!options.network) options.network = _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.OPENLOGIN_NETWORK.SAPPHIRE_MAINNET;\n        if (!options.buildEnv) options.buildEnv = _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.BUILD_ENV.PRODUCTION;\n        if (options.buildEnv === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.BUILD_ENV.DEVELOPMENT || options.buildEnv === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.BUILD_ENV.TESTING || options.sdkUrl) this.addVersionInUrls = false;\n        if (!options.sdkUrl && !options.useMpc) {\n            if (options.buildEnv === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.BUILD_ENV.DEVELOPMENT) {\n                options.sdkUrl = \"http://localhost:3000\";\n            } else if (options.buildEnv === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.BUILD_ENV.STAGING) {\n                options.sdkUrl = \"https://staging-auth.web3auth.io\";\n            } else if (options.buildEnv === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.BUILD_ENV.TESTING) {\n                options.sdkUrl = \"https://develop-auth.web3auth.io\";\n            } else {\n                options.sdkUrl = \"https://auth.web3auth.io\";\n            }\n        }\n        if (options.useMpc && !options.sdkUrl) {\n            if (Object.values(_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.TORUS_LEGACY_NETWORK).includes(options.network)) throw new Error(\"MPC is not supported on legacy networks\");\n            if (options.buildEnv === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.BUILD_ENV.DEVELOPMENT) {\n                options.sdkUrl = \"http://localhost:3000\";\n            } else if (options.buildEnv === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.BUILD_ENV.STAGING) {\n                options.sdkUrl = \"https://staging-mpc-auth.web3auth.io\";\n            } else if (options.buildEnv === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.BUILD_ENV.TESTING) {\n                options.sdkUrl = \"https://develop-mpc-auth.web3auth.io\";\n            } else {\n                options.sdkUrl = \"https://mpc-auth.web3auth.io\";\n            }\n        }\n        if (!options.redirectUrl && \"undefined\" !== \"undefined\") {}\n        if (!options.uxMode) options.uxMode = _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.UX_MODE.REDIRECT;\n        if (typeof options.replaceUrlOnRedirect !== \"boolean\") options.replaceUrlOnRedirect = true;\n        if (!options.originData) options.originData = {};\n        if (!options.whiteLabel) options.whiteLabel = {};\n        if (!options.loginConfig) options.loginConfig = {};\n        if (!options.mfaSettings) options.mfaSettings = {};\n        if (!options.storageServerUrl) options.storageServerUrl = \"https://broadcast-server.tor.us\";\n        if (!options.storageKey) options.storageKey = \"local\";\n        if (!options.webauthnTransports) options.webauthnTransports = [\n            \"internal\"\n        ];\n        if (!options.sessionTime) options.sessionTime = 86400;\n        this.options = options;\n    }\n    get privKey() {\n        if (this.options.useMpc) return this.state.factorKey || \"\";\n        return this.state.privKey ? this.state.privKey.padStart(64, \"0\") : \"\";\n    }\n    get coreKitKey() {\n        return this.state.coreKitKey ? this.state.coreKitKey.padStart(64, \"0\") : \"\";\n    }\n    get ed25519PrivKey() {\n        return this.state.ed25519PrivKey ? this.state.ed25519PrivKey.padStart(128, \"0\") : \"\";\n    }\n    get coreKitEd25519Key() {\n        return this.state.coreKitEd25519PrivKey ? this.state.coreKitEd25519PrivKey.padStart(128, \"0\") : \"\";\n    }\n    get sessionId() {\n        return this.state.sessionId || \"\";\n    }\n    get sessionNamespace() {\n        return this.options.sessionNamespace || \"\";\n    }\n    get appState() {\n        return this.state.userInfo.appState || this.dappState || \"\";\n    }\n    get baseUrl() {\n        // testing and develop don't have versioning\n        if (!this.addVersionInUrls) return `${this.options.sdkUrl}`;\n        return `${this.options.sdkUrl}/v${version.split(\".\")[0]}`;\n    }\n    async init() {\n        // get sessionNamespace from the redirect result.\n        const params = getHashQueryParams(this.options.replaceUrlOnRedirect);\n        if (params.sessionNamespace) this.options.sessionNamespace = params.sessionNamespace;\n        const storageKey = this.options.sessionNamespace ? `${this._storageBaseKey}_${this.options.sessionNamespace}` : this._storageBaseKey;\n        this.currentStorage = _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.BrowserStorage.getInstance(storageKey, this.options.storageKey);\n        const sessionId = this.currentStorage.get(\"sessionId\");\n        this.sessionManager = new _toruslabs_openlogin_session_manager__WEBPACK_IMPORTED_MODULE_4__.OpenloginSessionManager({\n            sessionServerBaseUrl: this.options.storageServerUrl,\n            sessionNamespace: this.options.sessionNamespace,\n            sessionTime: this.options.sessionTime,\n            sessionId\n        });\n        if (this.options.network === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.OPENLOGIN_NETWORK.TESTNET || this.options.network === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.OPENLOGIN_NETWORK.SAPPHIRE_DEVNET) {\n            // using console log because it shouldn't be affected by loglevel config\n            // eslint-disable-next-line no-console\n            console.log(`%c WARNING! You are on ${this.options.network}. Please set network: 'mainnet' or 'sapphire_mainnet' in production`, \"color: #FF0000\");\n        }\n        if (this.options.buildEnv !== _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.BUILD_ENV.PRODUCTION) {\n            // using console log because it shouldn't be affected by loglevel config\n            // eslint-disable-next-line no-console\n            console.log(`%c WARNING! You are using build env ${this.options.buildEnv}. Please set buildEnv: 'production' in production`, \"color: #FF0000\");\n        }\n        if (params.error) {\n            this.dappState = params.state;\n            throw LoginError.loginFailed(params.error);\n        }\n        if (params.sessionId) {\n            this.currentStorage.set(\"sessionId\", params.sessionId);\n            this.sessionManager.sessionId = params.sessionId;\n        }\n        if (this.sessionManager.sessionId) {\n            const data = await this._authorizeSession();\n            // Fill state with correct info from session\n            // If session is invalid all the data is unset here.\n            this.updateState(data);\n            if (Object.keys(data).length === 0) {\n                // If session is invalid, unset the sessionId from localStorage.\n                this.currentStorage.set(\"sessionId\", \"\");\n            }\n        }\n    }\n    async login(params) {\n        if (!params.loginProvider) throw LoginError.invalidLoginParams(`loginProvider is required`);\n        // in case of redirect mode, redirect url will be dapp specified\n        // in case of popup mode, redirect url will be sdk specified\n        const defaultParams = {\n            redirectUrl: this.options.redirectUrl\n        };\n        const loginParams = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()({\n            loginProvider: params.loginProvider\n        }, defaultParams), params);\n        const dataObject = {\n            actionType: _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.OPENLOGIN_ACTIONS.LOGIN,\n            options: this.options,\n            params: loginParams\n        };\n        const result = await this.openloginHandler(`${this.baseUrl}/start`, dataObject, getTimeout(params.loginProvider));\n        if (this.options.uxMode === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.UX_MODE.REDIRECT) return null;\n        if (result.error) {\n            this.dappState = result.state;\n            throw LoginError.loginFailed(result.error);\n        }\n        this.sessionManager.sessionId = result.sessionId;\n        this.options.sessionNamespace = result.sessionNamespace;\n        this.currentStorage.set(\"sessionId\", result.sessionId);\n        await this.rehydrateSession();\n        return {\n            privKey: this.privKey\n        };\n    }\n    async logout() {\n        if (!this.sessionManager.sessionId) throw LoginError.userNotLoggedIn();\n        await this.sessionManager.invalidateSession();\n        this.updateState({\n            privKey: \"\",\n            coreKitKey: \"\",\n            coreKitEd25519PrivKey: \"\",\n            ed25519PrivKey: \"\",\n            walletKey: \"\",\n            oAuthPrivateKey: \"\",\n            tKey: \"\",\n            metadataNonce: \"\",\n            keyMode: undefined,\n            userInfo: {\n                name: \"\",\n                profileImage: \"\",\n                dappShare: \"\",\n                idToken: \"\",\n                oAuthIdToken: \"\",\n                oAuthAccessToken: \"\",\n                appState: \"\",\n                email: \"\",\n                verifier: \"\",\n                verifierId: \"\",\n                aggregateVerifier: \"\",\n                typeOfLogin: \"\",\n                isMfaEnabled: false\n            },\n            authToken: \"\",\n            sessionId: \"\",\n            factorKey: \"\",\n            signatures: [],\n            tssShareIndex: -1,\n            tssPubKey: \"\",\n            tssShare: \"\",\n            tssNonce: -1\n        });\n        this.currentStorage.set(\"sessionId\", \"\");\n    }\n    async setupMFA(params) {\n        if (!this.sessionId) throw LoginError.userNotLoggedIn();\n        // in case of redirect mode, redirect url will be dapp specified\n        // in case of popup mode, redirect url will be sdk specified\n        const defaultParams = {\n            redirectUrl: this.options.redirectUrl\n        };\n        const dataObject = {\n            actionType: _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.OPENLOGIN_ACTIONS.ENABLE_MFA,\n            options: this.options,\n            params: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()({}, defaultParams), params),\n            sessionId: this.sessionId\n        };\n        const result = await this.openloginHandler(`${this.baseUrl}/start`, dataObject);\n        if (this.options.uxMode === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.UX_MODE.REDIRECT) return undefined;\n        this.sessionManager.sessionId = result.sessionId;\n        this.options.sessionNamespace = result.sessionNamespace;\n        this.currentStorage.set(\"sessionId\", result.sessionId);\n        await this.rehydrateSession();\n        return true;\n    }\n    async changeSocialFactor(params) {\n        if (!this.sessionId) throw LoginError.userNotLoggedIn();\n        // in case of redirect mode, redirect url will be dapp specified\n        // in case of popup mode, redirect url will be sdk specified\n        const defaultParams = {\n            redirectUrl: this.options.redirectUrl\n        };\n        const dataObject = {\n            actionType: _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.OPENLOGIN_ACTIONS.MODIFY_MFA,\n            options: this.options,\n            params: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()({}, defaultParams), params),\n            sessionId: this.sessionId\n        };\n        const result = await this.openloginHandler(`${this.baseUrl}/start`, dataObject);\n        if (this.options.uxMode === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.UX_MODE.REDIRECT) return undefined;\n        this.sessionManager.sessionId = result.sessionId;\n        this.options.sessionNamespace = result.sessionNamespace;\n        this.currentStorage.set(\"sessionId\", result.sessionId);\n        await this.rehydrateSession();\n        return true;\n    }\n    getUserInfo() {\n        if (!this.sessionManager.sessionId) {\n            throw LoginError.userNotLoggedIn();\n        }\n        return this.state.userInfo;\n    }\n    async getLoginId(data) {\n        if (!this.sessionManager) throw InitializationError.notInitialized();\n        const loginId = _toruslabs_openlogin_session_manager__WEBPACK_IMPORTED_MODULE_4__.OpenloginSessionManager.generateRandomSessionKey();\n        const loginSessionMgr = new _toruslabs_openlogin_session_manager__WEBPACK_IMPORTED_MODULE_4__.OpenloginSessionManager({\n            sessionServerBaseUrl: this.options.storageServerUrl,\n            sessionNamespace: this.options.sessionNamespace,\n            sessionTime: 600,\n            // each login key must be used with 10 mins (might be used at the end of popup redirect)\n            sessionId: loginId\n        });\n        await loginSessionMgr.createSession(JSON.parse(JSON.stringify(data)));\n        return loginId;\n    }\n    async _authorizeSession() {\n        try {\n            if (!this.sessionManager.sessionId) return {};\n            const result = await this.sessionManager.authorizeSession();\n            return result;\n        } catch (err) {\n            loglevel.error(\"authorization failed\", err);\n            return {};\n        }\n    }\n    updateState(data) {\n        this.state = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_3___default()({}, this.state), data);\n    }\n    async rehydrateSession() {\n        const result = await this._authorizeSession();\n        this.updateState(result);\n    }\n    async openloginHandler(url, dataObject) {\n        let popupTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000 * 10;\n        const loginId = await this.getLoginId(dataObject);\n        const configParams = {\n            loginId,\n            sessionNamespace: this.options.sessionNamespace\n        };\n        if (this.options.uxMode === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.UX_MODE.REDIRECT) {\n            const loginUrl = constructURL({\n                baseURL: url,\n                hash: {\n                    b64Params: (0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.jsonToBase64)(configParams)\n                }\n            });\n            window.location.href = loginUrl;\n            return undefined;\n        }\n        return new Promise((resolve, reject)=>{\n            const loginUrl = constructURL({\n                baseURL: url,\n                hash: {\n                    b64Params: (0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_5__.jsonToBase64)(configParams)\n                }\n            });\n            const currentWindow = new PopupHandler({\n                url: loginUrl,\n                timeout: popupTimeout\n            });\n            currentWindow.on(\"close\", ()=>{\n                reject(LoginError.popupClosed());\n            });\n            currentWindow.listenOnChannel(loginId).then(resolve).catch(reject);\n            try {\n                currentWindow.open();\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n //# sourceMappingURL=openlogin.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin/dist/openlogin.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/secure-pub-sub/dist/securePubSub.esm.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@toruslabs/secure-pub-sub/dist/securePubSub.esm.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SecurePubSub: () => (/* binding */ SecurePubSub)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/eccrypto.esm.js\");\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var _toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/metadata-helpers */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\");\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! socket.io-client */ \"(ssr)/./node_modules/socket.io-client/build/esm-debug/index.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_5___default().getLogger(\"SecurePubSub\");\nclass SecurePubSub {\n    constructor(){\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"options\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"SOCKET_CONN\", null);\n        this.options = options;\n        this.options.timeout = options.timeout || 600; // 10 mins is default timeout\n        this.options.serverUrl = options.serverUrl || \"https://broadcast-server.tor.us\";\n        this.options.enableLogging = options.enableLogging || false;\n        this.options.namespace = options.namespace || \"\";\n        if (this.options.enableLogging) log.enableAll();\n        else log.disableAll();\n    }\n    static setLogLevel(level) {\n        log.setLevel(level);\n        (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.setLogLevel)(level);\n    }\n    async publish(topic, message) {\n        const topicPrivKey = (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(topic, \"utf8\"));\n        const encryptedData = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.encryptData)(topicPrivKey.toString(\"hex\"), message);\n        const signature = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_1__.sign)(topicPrivKey, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(encryptedData, \"utf8\")));\n        const fetchBody = {\n            key: (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_1__.getPublic)(topicPrivKey).toString(\"hex\"),\n            // already padded\n            data: encryptedData,\n            signature: signature.toString(\"hex\"),\n            timeout: this.options.timeout,\n            namespace: this.options.namespace\n        };\n        return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_2__.post)(`${this.options.serverUrl}/channel/set`, fetchBody);\n    }\n    async subscribe(topic) {\n        let isPromisePending = true;\n        const topicPrivKey = (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.keccak256)(Buffer.from(topic, \"utf8\"));\n        const topicPubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_1__.getPublic)(topicPrivKey).toString(\"hex\"); // already padded\n        const currentSocketConnection = this.getSocketConnection();\n        if (currentSocketConnection.connected) {\n            log.debug(\"already connected with socket\");\n            currentSocketConnection.emit(\"check_auth_status\", topicPubKey, {\n                namespace: this.options.namespace\n            });\n        } else {\n            currentSocketConnection.once(\"connect\", ()=>{\n                log.debug(\"connected with socket\");\n                currentSocketConnection.emit(\"check_auth_status\", topicPubKey, {\n                    namespace: this.options.namespace\n                });\n            });\n        }\n        const reconnect = ()=>{\n            currentSocketConnection.once(\"connect\", async ()=>{\n                log.debug(\"connected with socket using reconnect\");\n                if (isPromisePending) currentSocketConnection.emit(\"check_auth_status\", topicPubKey, {\n                    namespace: this.options.namespace\n                });\n            });\n        };\n        const visibilityListener = ()=>{\n            if (!isPromisePending) document.removeEventListener(\"visibilitychange\", visibilityListener);\n            // if not connected, then wait for connection and ping server for latest msg.\n            if (!currentSocketConnection.connected && document.visibilityState === \"visible\") {\n                reconnect();\n            }\n        };\n        const disconnectListener = ()=>{\n            log.debug(\"socket disconnected\", isPromisePending);\n            if (isPromisePending) {\n                log.error(\"socket disconnected unexpectedly, reconnecting socket\");\n                reconnect();\n            } else {\n                currentSocketConnection.removeListener(\"disconnect\", disconnectListener);\n            }\n        };\n        currentSocketConnection.on(\"disconnect\", disconnectListener);\n        const returnPromise = new Promise((resolve, reject)=>{\n            const listener = async (ev)=>{\n                try {\n                    const decData = await (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_3__.decryptData)(topicPrivKey.toString(\"hex\"), ev);\n                    log.info(\"got data\", decData);\n                    resolve(decData);\n                } catch (error) {\n                    log.error(error);\n                    reject(error);\n                } finally{\n                    isPromisePending = false;\n                    document.removeEventListener(\"visibilitychange\", visibilityListener);\n                }\n            };\n            log.info(\"listening to\", `${topicPubKey}_success`);\n            currentSocketConnection.once(`${topicPubKey}_success`, listener);\n        });\n        if (typeof document !== \"undefined\") document.addEventListener(\"visibilitychange\", visibilityListener);\n        return returnPromise;\n    }\n    cleanup() {\n        if (this.SOCKET_CONN) {\n            this.SOCKET_CONN.disconnect();\n            this.SOCKET_CONN = null;\n        }\n    }\n    getSocketConnection() {\n        if (this.SOCKET_CONN) return this.SOCKET_CONN;\n        const localSocketConnection = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_4__.io)(this.options.serverUrl, {\n            transports: [\n                \"websocket\",\n                \"polling\"\n            ],\n            // use WebSocket first, if available\n            withCredentials: true,\n            reconnectionDelayMax: 10000,\n            reconnectionAttempts: 10\n        });\n        localSocketConnection.on(\"connect_error\", (err)=>{\n            // revert to classic upgrade\n            localSocketConnection.io.opts.transports = [\n                \"polling\",\n                \"websocket\"\n            ];\n            log.error(\"connect error\", err);\n        });\n        localSocketConnection.on(\"connect\", async ()=>{\n            const { engine } = localSocketConnection.io;\n            log.debug(\"initially connected to\", engine.transport.name); // in most cases, prints \"polling\"\n            engine.once(\"upgrade\", ()=>{\n                // called when the transport is upgraded (i.e. from HTTP long-polling to WebSocket)\n                log.debug(\"upgraded\", engine.transport.name); // in most cases, prints \"websocket\"\n            });\n            engine.once(\"close\", (reason)=>{\n                // called when the underlying connection is closed\n                log.debug(\"connection closed\", reason);\n            });\n        });\n        localSocketConnection.on(\"error\", (err)=>{\n            log.error(\"socket errored\", err);\n            localSocketConnection.disconnect();\n        });\n        this.SOCKET_CONN = localSocketConnection;\n        return this.SOCKET_CONN;\n    }\n}\n //# sourceMappingURL=securePubSub.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/secure-pub-sub/dist/securePubSub.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/solana-embed/dist/solanaEmbed.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toruslabs/solana-embed/dist/solanaEmbed.esm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUTTON_POSITION: () => (/* binding */ BUTTON_POSITION),\n/* harmony export */   LOGIN_PROVIDER: () => (/* binding */ LOGIN_PROVIDER),\n/* harmony export */   PAYMENT_PROVIDER: () => (/* binding */ PAYMENT_PROVIDER),\n/* harmony export */   TORUS_BUILD_ENV: () => (/* binding */ TORUS_BUILD_ENV),\n/* harmony export */   TorusInPageProvider: () => (/* binding */ TorusInPageProvider),\n/* harmony export */   \"default\": () => (/* binding */ Torus)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/base-controllers */ \"(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\");\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! eth-rpc-errors */ \"(ssr)/./node_modules/eth-rpc-errors/dist/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! fast-deep-equal */ \"(ssr)/./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n\nvar version = \"2.0.0\";\n/* eslint-disable @typescript-eslint/no-explicit-any */ function isStream(stream) {\n    return stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\n}\nfunction isWritableStream(stream) {\n    return isStream(stream) && stream.writable !== false && typeof stream._write === \"function\" && typeof stream._writableState === \"object\";\n}\nfunction isReadableStream(stream) {\n    return isStream(stream) && stream.readable !== false && typeof stream._read === \"function\" && typeof stream._readableState === \"object\";\n}\nfunction isDuplexStream(stream) {\n    return isWritableStream(stream) && isReadableStream(stream);\n}\nvar messages = {\n    errors: {\n        disconnected: ()=>\"Torus: Lost connection to Torus.\",\n        permanentlyDisconnected: ()=>\"Torus: Disconnected from iframe. Page reload required.\",\n        unsupportedSync: (method)=>`Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n        invalidDuplexStream: ()=>\"Must provide a Node.js-style duplex stream.\",\n        invalidOptions: (maxEventListeners)=>`Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n        invalidRequestArgs: ()=>`Expected a single, non-array, object argument.`,\n        invalidRequestMethod: ()=>`'args.method' must be a non-empty string.`,\n        invalidRequestParams: ()=>`'args.params' must be an object or array if provided.`,\n        invalidLoggerObject: ()=>`'args.logger' must be an object if provided.`,\n        invalidLoggerMethod: (method)=>`'args.logger' must include required method '${method}'.`\n    },\n    info: {\n        connected: (chainId)=>`Torus: Connected to chain with ID \"${chainId}\".`\n    },\n    warnings: {}\n};\nconst PAYMENT_PROVIDER = {\n    MOONPAY: \"moonpay\",\n    WYRE: \"wyre\",\n    RAMPNETWORK: \"rampnetwork\",\n    XANPOOL: \"xanpool\",\n    MERCURYO: \"mercuryo\",\n    TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n    PRODUCTION: \"production\",\n    DEVELOPMENT: \"development\",\n    TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n    BOTTOM_LEFT: \"bottom-left\",\n    TOP_LEFT: \"top-left\",\n    BOTTOM_RIGHT: \"bottom-right\",\n    TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n    GOOGLE: \"google\",\n    FACEBOOK: \"facebook\",\n    REDDIT: \"reddit\",\n    DISCORD: \"discord\",\n    TWITCH: \"twitch\",\n    APPLE: \"apple\",\n    LINE: \"line\",\n    GITHUB: \"github\",\n    KAKAO: \"kakao\",\n    LINKEDIN: \"linkedin\",\n    TWITTER: \"twitter\",\n    WEIBO: \"weibo\",\n    WECHAT: \"wechat\",\n    EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst translations = {\n    en: {\n        embed: {\n            continue: \"Continue\",\n            actionRequired: \"Authorization required\",\n            pendingAction: \"Click continue to proceed with your request in a popup\",\n            cookiesRequired: \"Cookies Required\",\n            enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n            clickHere: \"More Info\"\n        }\n    },\n    de: {\n        embed: {\n            continue: \"Fortsetzen\",\n            actionRequired: \"Autorisierung erforderlich\",\n            pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n            cookiesRequired: \"Cookies ben\\xf6tigt\",\n            enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n            clickHere: \"Mehr Info\"\n        }\n    },\n    ja: {\n        embed: {\n            continue: \"継続する\",\n            actionRequired: \"認証が必要です\",\n            pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n            cookiesRequired: \"必要なクッキー\",\n            enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n            clickHere: \"詳しくは\"\n        }\n    },\n    ko: {\n        embed: {\n            continue: \"계속하다\",\n            actionRequired: \"승인 필요\",\n            pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n            cookiesRequired: \"쿠키 필요\",\n            enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n            clickHere: \"더 많은 정보\"\n        }\n    },\n    zh: {\n        embed: {\n            continue: \"继续\",\n            actionRequired: \"需要授权\",\n            pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n            cookiesRequired: \"必填Cookie\",\n            enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n            clickHere: \"更多信息\"\n        }\n    }\n};\nvar configuration = {\n    supportedVerifierList: [\n        LOGIN_PROVIDER.GOOGLE,\n        LOGIN_PROVIDER.REDDIT,\n        LOGIN_PROVIDER.DISCORD\n    ],\n    api: \"https://api.tor.us\",\n    translations,\n    prodTorusUrl: \"\",\n    localStorageKeyPrefix: `torus-`\n};\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_8___default().getLogger(\"solana-embed\");\n// utility functions\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */ function createErrorMiddleware() {\n    return (req, res, next)=>{\n        // json-rpc-engine will terminate the request when it notices this error\n        if (typeof req.method !== \"string\" || !req.method) {\n            res.error = eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.ethErrors.rpc.invalidRequest({\n                message: `The request 'method' must be a non-empty string.`,\n                data: req\n            });\n        }\n        next((done)=>{\n            const { error } = res;\n            if (!error) {\n                return done();\n            }\n            log.error(`Torus - RPC Error: ${error.message}`, error);\n            return done();\n        });\n    };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */ function logStreamDisconnectWarning(remoteLabel, error, emitter) {\n    let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n    if (error?.stack) {\n        warningMsg += `\\n${error.stack}`;\n    }\n    log.warn(warningMsg);\n    if (emitter && emitter.listenerCount(\"error\") > 0) {\n        emitter.emit(\"error\", warningMsg);\n    }\n}\nconst getWindowId = ()=>Math.random().toString(36).slice(2);\nconst getTorusUrl = async (buildEnv)=>{\n    let torusUrl;\n    let logLevel;\n    // const versionUsed = version;\n    // log.info(\"solana embed version used: \", versionUsed);\n    switch(buildEnv){\n        case \"testing\":\n            torusUrl = \"https://solana-testing.tor.us\";\n            logLevel = \"debug\";\n            break;\n        case \"development\":\n            torusUrl = \"http://localhost:8080\";\n            logLevel = \"debug\";\n            break;\n        default:\n            torusUrl = `https://solana.tor.us`;\n            logLevel = \"error\";\n            break;\n    }\n    return {\n        torusUrl,\n        logLevel\n    };\n};\nconst getUserLanguage = ()=>{\n    let userLanguage = window.navigator.language || \"en-US\";\n    const userLanguages = userLanguage.split(\"-\");\n    userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n    return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n    height: 660,\n    width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n    height: 740,\n    width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n    height: 700,\n    width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n    height: 600,\n    width: 400\n};\nfunction storageAvailable(type) {\n    let storage;\n    try {\n        storage = window[type];\n        const x = \"__storage_test__\";\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    } catch (error) {\n        const e = error;\n        return e && // everything except Firefox\n        (e.code === 22 || // Firefox\n        e.code === 1014 || // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" || // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n        storage && storage.length !== 0;\n    }\n}\n/**\n * popup handler utils\n */ function getPopupFeatures(_ref) {\n    let { width: w, height: h } = _ref;\n    // Fixes dual-screen position                             Most browsers      Firefox\n    const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n    const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n    const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n    const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n    const systemZoom = 1; // No reliable estimate\n    const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n    const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n    const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n    return features;\n}\nclass BaseProvider extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.SafeEventEmitter {\n    constructor(connectionStream, _ref){\n        let { maxEventListeners = 100, jsonRpcStreamName = \"provider\" } = _ref;\n        super();\n        /**\n     * Indicating that this provider is a Torus provider.\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"isTorus\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_rpcEngine\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"jsonRpcConnectionEvents\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_state\", void 0);\n        if (!isDuplexStream(connectionStream)) {\n            throw new Error(messages.errors.invalidDuplexStream());\n        }\n        this.isTorus = true;\n        this.setMaxListeners(maxEventListeners);\n        this._handleConnect = this._handleConnect.bind(this);\n        this._handleDisconnect = this._handleDisconnect.bind(this);\n        this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n        this._rpcRequest = this._rpcRequest.bind(this);\n        this._initializeState = this._initializeState.bind(this);\n        this.request = this.request.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        // this.enable = this.enable.bind(this);\n        // setup connectionStream multiplexing\n        const mux = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.ObjectMultiplex();\n        pump__WEBPACK_IMPORTED_MODULE_7___default()(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\"));\n        // ignore phishing warning message (handled elsewhere)\n        mux.ignoreStream(\"phishing\");\n        // setup own event listeners\n        // connect to async provider\n        const jsonRpcConnection = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.createStreamMiddleware)();\n        pump__WEBPACK_IMPORTED_MODULE_7___default()(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\"));\n        // handle RPC requests via dapp-side rpc engine\n        const rpcEngine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.JRPCEngine();\n        rpcEngine.push((0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.createIdRemapMiddleware)());\n        rpcEngine.push(createErrorMiddleware());\n        rpcEngine.push((0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.createLoggerMiddleware)({\n            origin: location.origin\n        }));\n        rpcEngine.push(jsonRpcConnection.middleware);\n        this._rpcEngine = rpcEngine;\n        this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n    }\n    /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */ async request(args) {\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.ethErrors.rpc.invalidRequest({\n                message: messages.errors.invalidRequestArgs(),\n                data: args\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.ethErrors.rpc.invalidRequest({\n                message: messages.errors.invalidRequestMethod(),\n                data: args\n            });\n        }\n        if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.ethErrors.rpc.invalidRequest({\n                message: messages.errors.invalidRequestParams(),\n                data: args\n            });\n        }\n        return new Promise((resolve, reject)=>{\n            this._rpcRequest({\n                method,\n                params\n            }, (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.getRpcPromiseCallback)(resolve, reject));\n        });\n    }\n    /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */ send(payload, callback) {\n        this._rpcRequest(payload, callback);\n    }\n    /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */ sendAsync(payload) {\n        return new Promise((resolve, reject)=>{\n            this._rpcRequest(payload, (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.getRpcPromiseCallback)(resolve, reject));\n        });\n    }\n    /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */ _handleStreamDisconnect(streamName, error) {\n        logStreamDisconnectWarning(streamName, error, this);\n        this._handleDisconnect(false, error ? error.message : undefined);\n    }\n}\nconst htmlToElement = (html)=>{\n    const template = window.document.createElement(\"template\");\n    const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n    template.innerHTML = trimmedHtml;\n    return template.content.firstChild;\n};\nfunction isLegacyTransactionInstance(transaction) {\n    return transaction.version === undefined;\n}\nclass PopupHandler extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.SafeEventEmitter {\n    constructor(_ref){\n        let { url, target, features, timeout = 30000 } = _ref;\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"url\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"target\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"features\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"window\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"windowTimer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"iClosedWindow\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"timeout\", void 0);\n        this.url = url;\n        this.target = target || \"_blank\";\n        this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n        this.window = undefined;\n        this.windowTimer = undefined;\n        this.iClosedWindow = false;\n        this.timeout = timeout;\n        this._setupTimer();\n    }\n    _setupTimer() {\n        this.windowTimer = Number(setInterval(()=>{\n            if (this.window && this.window.closed) {\n                clearInterval(this.windowTimer);\n                setTimeout(()=>{\n                    if (!this.iClosedWindow) {\n                        this.emit(\"close\");\n                    }\n                    this.iClosedWindow = false;\n                    this.window = undefined;\n                }, this.timeout);\n            }\n            if (this.window === undefined) clearInterval(this.windowTimer);\n        }, 500));\n    }\n    open() {\n        this.window = window.open(this.url.href, this.target, this.features);\n        if (this.window?.focus) this.window.focus();\n        return Promise.resolve();\n    }\n    close() {\n        this.iClosedWindow = true;\n        if (this.window) this.window.close();\n    }\n    redirect(locationReplaceOnRedirect) {\n        if (locationReplaceOnRedirect) {\n            window.location.replace(this.url.href);\n        } else {\n            window.location.href = this.url.href;\n        }\n    }\n}\nclass TorusCommunicationProvider extends BaseProvider {\n    constructor(connectionStream, _ref){\n        let { maxEventListeners = 100, jsonRpcStreamName = \"provider\" } = _ref;\n        super(connectionStream, {\n            maxEventListeners,\n            jsonRpcStreamName\n        });\n        // private state\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"embedTranslations\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusUrl\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"dappStorageKey\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"windowRefs\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"tryWindowHandle\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusAlertContainer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusIframe\", void 0);\n        this._state = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, TorusCommunicationProvider._defaultState);\n        // public state\n        this.torusUrl = \"\";\n        this.dappStorageKey = \"\";\n        const languageTranslations = configuration.translations[getUserLanguage()];\n        this.embedTranslations = languageTranslations.embed;\n        this.windowRefs = {};\n        // setup own event listeners\n        // EIP-1193 connect\n        this.on(\"connect\", ()=>{\n            this._state.isConnected = true;\n        });\n        const notificationHandler = (payload)=>{\n            const { method, params } = payload;\n            if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n                const { isFullScreen, rid } = params;\n                this._displayIframe({\n                    isFull: isFullScreen,\n                    rid: rid\n                });\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n                const { windowId, url } = params;\n                this._createPopupBlockAlert(windowId, url);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n                this._handleCloseWindow(params);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n                const { currentLoginProvider } = params;\n                this._state.isLoggedIn = true;\n                this._state.currentLoginProvider = currentLoginProvider;\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n                this._state.isLoggedIn = false;\n                this._state.currentLoginProvider = null;\n                this._displayIframe();\n            }\n        };\n        this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n    }\n    get isLoggedIn() {\n        return this._state.isLoggedIn;\n    }\n    get isIFrameFullScreen() {\n        return this._state.isIFrameFullScreen;\n    }\n    /**\n   * Returns whether the inPage provider is connected to Torus.\n   */ isConnected() {\n        return this._state.isConnected;\n    }\n    async _initializeState(params) {\n        try {\n            const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n            this.torusUrl = torusUrl;\n            this.dappStorageKey = dappStorageKey;\n            this.torusAlertContainer = torusAlertContainer;\n            this.torusIframe = torusIframe;\n            this.torusIframe.addEventListener(\"load\", ()=>{\n                // only do this if iframe is not full screen\n                if (!this._state.isIFrameFullScreen) this._displayIframe();\n            });\n            const { currentLoginProvider, isLoggedIn } = await this.request({\n                method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n                params: []\n            });\n            // indicate that we've connected, for EIP-1193 compliance\n            this._handleConnect(currentLoginProvider, isLoggedIn);\n        } catch (error) {\n            log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n        } finally{\n            log.info(\"initialized communication state\");\n            this._state.initialized = true;\n            this.emit(\"_initialized\");\n        }\n    }\n    _handleWindow(windowId) {\n        let { url, target, features } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n        if (this.dappStorageKey) {\n            // If multiple instances, it returns the first one\n            if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n            else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n        }\n        const handledWindow = new PopupHandler({\n            url: finalUrl,\n            target,\n            features\n        });\n        handledWindow.open();\n        if (!handledWindow.window) {\n            this._createPopupBlockAlert(windowId, finalUrl.href);\n            return;\n        }\n        // Add to collection only if window is opened\n        this.windowRefs[windowId] = handledWindow;\n        // We tell the iframe that the window has been successfully opened\n        this.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n            params: {\n                windowId\n            }\n        });\n        handledWindow.once(\"close\", ()=>{\n            // user closed the window\n            delete this.windowRefs[windowId];\n            this.request({\n                method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n                params: {\n                    windowId\n                }\n            });\n        });\n    }\n    _displayIframe() {\n        let { isFull = false, rid = \"\" } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const style = {};\n        // set phase\n        if (!isFull) {\n            style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n            style.height = \"70px\";\n            style.width = \"70px\";\n            switch(this._state.buttonPosition){\n                case BUTTON_POSITION.TOP_LEFT:\n                    style.top = \"0px\";\n                    style.left = \"0px\";\n                    style.right = \"auto\";\n                    style.bottom = \"auto\";\n                    break;\n                case BUTTON_POSITION.TOP_RIGHT:\n                    style.top = \"0px\";\n                    style.right = \"0px\";\n                    style.left = \"auto\";\n                    style.bottom = \"auto\";\n                    break;\n                case BUTTON_POSITION.BOTTOM_RIGHT:\n                    style.bottom = \"0px\";\n                    style.right = \"0px\";\n                    style.top = \"auto\";\n                    style.left = \"auto\";\n                    break;\n                case BUTTON_POSITION.BOTTOM_LEFT:\n                default:\n                    style.bottom = \"0px\";\n                    style.left = \"0px\";\n                    style.top = \"auto\";\n                    style.right = \"auto\";\n                    break;\n            }\n        } else {\n            style.display = \"block\";\n            style.width = \"100%\";\n            style.height = \"100%\";\n            style.top = \"0px\";\n            style.right = \"0px\";\n            style.left = \"0px\";\n            style.bottom = \"0px\";\n        }\n        Object.assign(this.torusIframe.style, style);\n        this._state.isIFrameFullScreen = isFull;\n        this.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n            params: {\n                isIFrameFullScreen: isFull,\n                rid\n            }\n        });\n    }\n    hideTorusButton() {\n        this._state.torusWidgetVisibility = false;\n        this._displayIframe();\n    }\n    showTorusButton() {\n        this._state.torusWidgetVisibility = true;\n        this._displayIframe();\n    }\n    /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */ _rpcRequest(payload, callback) {\n        const cb = callback;\n        const _payload = payload;\n        if (!Array.isArray(_payload)) {\n            if (!_payload.jsonrpc) {\n                _payload.jsonrpc = \"2.0\";\n            }\n        }\n        this.tryWindowHandle(_payload, cb);\n    }\n    /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */ _handleConnect(currentLoginProvider, isLoggedIn) {\n        if (!this._state.isConnected) {\n            this._state.isConnected = true;\n            this.emit(\"connect\", {\n                currentLoginProvider,\n                isLoggedIn\n            });\n            log.debug(messages.info.connected(currentLoginProvider));\n        }\n    }\n    /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */ _handleDisconnect(isRecoverable, errorMessage) {\n        if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n            this._state.isConnected = false;\n            let error;\n            if (isRecoverable) {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.EthereumRpcError(1013, // Try again later\n                errorMessage || messages.errors.disconnected());\n                log.debug(error);\n            } else {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.EthereumRpcError(1011, // Internal error\n                errorMessage || messages.errors.permanentlyDisconnected());\n                log.error(error);\n                this._state.currentLoginProvider = null;\n                this._state.isLoggedIn = false;\n                this._state.torusWidgetVisibility = false;\n                this._state.isIFrameFullScreen = false;\n                this._state.isPermanentlyDisconnected = true;\n            }\n            this.emit(\"disconnect\", error);\n        }\n    }\n    // Called if the iframe wants to close the window cause it is done processing the request\n    _handleCloseWindow(params) {\n        const { windowId } = params;\n        if (this.windowRefs[windowId]) {\n            this.windowRefs[windowId].close();\n            delete this.windowRefs[windowId];\n        }\n    }\n    async _createPopupBlockAlert(windowId, url) {\n        const logoUrl = this.getLogoUrl();\n        const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` + \"<div>\" + `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` + `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` + \"</div>\" + \"</div>\");\n        const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n        const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n        btnContainer.appendChild(successAlert);\n        torusAlert.appendChild(btnContainer);\n        const bindOnLoad = ()=>{\n            successAlert.addEventListener(\"click\", ()=>{\n                this._handleWindow(windowId, {\n                    url,\n                    target: \"_blank\",\n                    features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n                });\n                torusAlert.remove();\n                if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n            });\n        };\n        const attachOnLoad = ()=>{\n            this.torusAlertContainer.appendChild(torusAlert);\n        };\n        attachOnLoad();\n        bindOnLoad();\n        this.torusAlertContainer.style.display = \"block\";\n    }\n    getLogoUrl() {\n        const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n        return logoUrl;\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(TorusCommunicationProvider, \"_defaultState\", {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false\n});\nclass TorusInPageProvider extends BaseProvider {\n    constructor(connectionStream, _ref){\n        let { maxEventListeners = 100, jsonRpcStreamName = \"provider\" } = _ref;\n        super(connectionStream, {\n            maxEventListeners,\n            jsonRpcStreamName\n        });\n        // private state\n        /**\n     * The chain ID of the currently connected Solana chain.\n     * See [chainId.network]{@link https://chainid.network} for more information.\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"chainId\", void 0);\n        /**\n     * The user's currently selected Solana address.\n     * If null, Torus is either locked or the user has not permitted any\n     * addresses to be viewed.\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"selectedAddress\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"tryWindowHandle\", void 0);\n        this._state = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, TorusInPageProvider._defaultState);\n        // public state\n        this.selectedAddress = null;\n        this.chainId = null;\n        this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n        this._handleChainChanged = this._handleChainChanged.bind(this);\n        this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n        // setup own event listeners\n        // EIP-1193 connect\n        this.on(\"connect\", ()=>{\n            this._state.isConnected = true;\n        });\n        const jsonRpcNotificationHandler = (payload)=>{\n            const { method, params } = payload;\n            if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n                this._handleAccountsChanged(params);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n                this._handleUnlockStateChanged(params);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n                this._handleChainChanged(params);\n            }\n        };\n        // json rpc notification listener\n        this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n    }\n    /**\n   * Returns whether the inpage provider is connected to Torus.\n   */ isConnected() {\n        return this._state.isConnected;\n    }\n    // Private Methods\n    //= ===================\n    /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */ async _initializeState() {\n        try {\n            const { accounts, chainId, isUnlocked } = await this.request({\n                method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n                params: []\n            });\n            // indicate that we've connected, for EIP-1193 compliance\n            this.emit(\"connect\", {\n                chainId\n            });\n            this._handleChainChanged({\n                chainId\n            });\n            this._handleUnlockStateChanged({\n                accounts,\n                isUnlocked\n            });\n            this._handleAccountsChanged(accounts);\n        } catch (error) {\n            log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n        } finally{\n            log.info(\"initialized provider state\");\n            this._state.initialized = true;\n            this.emit(\"_initialized\");\n        }\n    }\n    /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */ _rpcRequest(payload, callback) {\n        let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        let cb = callback;\n        const _payload = payload;\n        if (!Array.isArray(_payload)) {\n            if (!_payload.jsonrpc) {\n                _payload.jsonrpc = \"2.0\";\n            }\n            if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n                // handle accounts changing\n                cb = (err, res)=>{\n                    this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n                    callback(err, res);\n                };\n            } else if (_payload.method === \"wallet_getProviderState\") {\n                this._rpcEngine.handle(payload, cb);\n                return;\n            }\n        }\n        this.tryWindowHandle(_payload, cb);\n    }\n    /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */ _handleConnect(chainId) {\n        if (!this._state.isConnected) {\n            this._state.isConnected = true;\n            this.emit(\"connect\", {\n                chainId\n            });\n            log.debug(messages.info.connected(chainId));\n        }\n    }\n    /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */ _handleDisconnect(isRecoverable, errorMessage) {\n        if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n            this._state.isConnected = false;\n            let error;\n            if (isRecoverable) {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.EthereumRpcError(1013, // Try again later\n                errorMessage || messages.errors.disconnected());\n                log.debug(error);\n            } else {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.EthereumRpcError(1011, // Internal error\n                errorMessage || messages.errors.permanentlyDisconnected());\n                log.error(error);\n                this.chainId = null;\n                this._state.accounts = null;\n                this.selectedAddress = null;\n                this._state.isUnlocked = false;\n                this._state.isPermanentlyDisconnected = true;\n            }\n            this.emit(\"disconnect\", error);\n        }\n    }\n    /**\n   * Called when accounts may have changed.\n   */ _handleAccountsChanged(accounts) {\n        let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        // defensive programming\n        let finalAccounts = accounts;\n        if (!Array.isArray(finalAccounts)) {\n            log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n            finalAccounts = [];\n        }\n        for (const account of accounts){\n            if (typeof account !== \"string\") {\n                log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n                finalAccounts = [];\n                break;\n            }\n        }\n        // emit accountsChanged if anything about the accounts array has changed\n        if (!fast_deep_equal__WEBPACK_IMPORTED_MODULE_9___default()(this._state.accounts, finalAccounts)) {\n            // we should always have the correct accounts even before solana_accounts\n            // returns, except in cases where isInternal is true\n            if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n                log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n            }\n            this._state.accounts = finalAccounts;\n            this.emit(\"accountsChanged\", finalAccounts);\n        }\n        // handle selectedAddress\n        if (this.selectedAddress !== finalAccounts[0]) {\n            this.selectedAddress = finalAccounts[0] || null;\n        }\n    }\n    /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */ _handleChainChanged() {\n        let { chainId } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!chainId) {\n            log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n                chainId\n            });\n            return;\n        }\n        if (chainId === \"loading\") {\n            this._handleDisconnect(true);\n        } else {\n            this._handleConnect(chainId);\n            if (chainId !== this.chainId) {\n                this.chainId = chainId;\n                if (this._state.initialized) {\n                    this.emit(\"chainChanged\", this.chainId);\n                }\n            }\n        }\n    }\n    /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */ _handleUnlockStateChanged() {\n        let { accounts, isUnlocked } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (typeof isUnlocked !== \"boolean\") {\n            log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n                isUnlocked\n            });\n            return;\n        }\n        if (isUnlocked !== this._state.isUnlocked) {\n            this._state.isUnlocked = isUnlocked;\n            this._handleAccountsChanged(accounts || []);\n        }\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(TorusInPageProvider, \"_defaultState\", {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false\n});\n/**\n * Returns whether the given image URL exists\n */ function imgExists(url) {\n    return new Promise((resolve, reject)=>{\n        try {\n            const img = document.createElement(\"img\");\n            img.onload = ()=>resolve(true);\n            img.onerror = ()=>resolve(false);\n            img.src = url;\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n/**\n * Extracts a name for the site from the DOM\n */ const getSiteName = (window1)=>{\n    const { document: document1 } = window1;\n    const siteName = document1.querySelector('head > meta[property=\"og:site_name\"]');\n    if (siteName) {\n        return siteName.content;\n    }\n    const metaTitle = document1.querySelector('head > meta[name=\"title\"]');\n    if (metaTitle) {\n        return metaTitle.content;\n    }\n    if (document1.title && document1.title.length > 0) {\n        return document1.title;\n    }\n    return window1.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */ async function getSiteIcon(window1) {\n    try {\n        const { document: document1 } = window1;\n        // Use the site's favicon if it exists\n        let icon = document1.querySelector('head > link[rel=\"shortcut icon\"]');\n        if (icon && await imgExists(icon.href)) {\n            return icon.href;\n        }\n        // Search through available icons in no particular order\n        icon = Array.from(document1.querySelectorAll('head > link[rel=\"icon\"]')).find((_icon)=>Boolean(_icon.href));\n        if (icon && await imgExists(icon.href)) {\n            return icon.href;\n        }\n        return \"\";\n    } catch (error) {\n        return \"\";\n    }\n}\n/**\n * Gets site metadata and returns it\n *\n */ const getSiteMetadata = async ()=>({\n        name: getSiteName(window),\n        icon: await getSiteIcon(window)\n    });\nconst PROVIDER_UNSAFE_METHODS = [\n    \"send_transaction\",\n    \"sign_transaction\",\n    \"sign_all_transactions\",\n    \"sign_message\",\n    \"connect\"\n];\nconst COMMUNICATION_UNSAFE_METHODS = [\n    _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.SET_PROVIDER\n];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n    try {\n        if (typeof document === \"undefined\") return;\n        const torusIframeHtml = document.createElement(\"link\");\n        const { torusUrl } = await getTorusUrl(\"production\");\n        torusIframeHtml.href = `${torusUrl}/frame`;\n        torusIframeHtml.crossOrigin = \"anonymous\";\n        torusIframeHtml.type = \"text/html\";\n        torusIframeHtml.rel = \"prefetch\";\n        if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n            if (torusIframeHtml.relList.supports(\"prefetch\")) {\n                document.head.appendChild(torusIframeHtml);\n            }\n        }\n    } catch (error) {\n        log.warn(error);\n    }\n})();\nclass Torus {\n    constructor(){\n        let { modalZIndex = 99999 } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"isInitialized\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusAlert\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"modalZIndex\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"alertZIndex\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"requestedLoginProvider\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"provider\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"communicationProvider\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"dappStorageKey\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"isTopupHidden\", false);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusAlertContainer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusUrl\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusIframe\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"styleLink\", void 0);\n        this.torusUrl = \"\";\n        this.isInitialized = false; // init done\n        this.requestedLoginProvider = null;\n        this.modalZIndex = modalZIndex;\n        this.alertZIndex = modalZIndex + 1000;\n        this.dappStorageKey = \"\";\n    }\n    get isLoggedIn() {\n        if (!this.communicationProvider) return false;\n        return this.communicationProvider.isLoggedIn;\n    }\n    async init() {\n        let { buildEnv = TORUS_BUILD_ENV.PRODUCTION, enableLogging = false, network, showTorusButton = false, useLocalStorage = false, buttonPosition = BUTTON_POSITION.BOTTOM_LEFT, apiKey = \"torus-default\", extraParams = {}, whiteLabel } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (this.isInitialized) throw new Error(\"Already initialized\");\n        (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_4__.setAPIKey)(apiKey);\n        const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n        log.enableAll();\n        log.info(torusUrl, \"url loaded\");\n        log.info(`Solana Embed Version :${version}`);\n        this.torusUrl = torusUrl;\n        log.setDefaultLevel(logLevel);\n        if (enableLogging) log.enableAll();\n        else log.disableAll();\n        const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n        const torusIframeUrl = new URL(torusUrl);\n        if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n        else torusIframeUrl.pathname += \"/frame\";\n        const hashParams = new URLSearchParams();\n        if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n        hashParams.append(\"origin\", window.location.origin);\n        torusIframeUrl.hash = hashParams.toString();\n        // Iframe code\n        this.torusIframe = htmlToElement(`<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`);\n        this.torusAlertContainer = htmlToElement(`<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`);\n        this.styleLink = htmlToElement(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n        return new Promise((resolve, reject)=>{\n            try {\n                this.torusIframe.addEventListener(\"load\", async ()=>{\n                    const dappMetadata = await getSiteMetadata();\n                    // send init params here\n                    this.torusIframe.contentWindow.postMessage({\n                        buttonPosition,\n                        apiKey,\n                        network,\n                        dappMetadata,\n                        extraParams,\n                        whiteLabel\n                    }, torusIframeUrl.origin);\n                    await this._setupWeb3({\n                        torusUrl\n                    });\n                    if (showTorusButton) this.showTorusButton();\n                    if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;\n                    else this.hideTorusButton();\n                    this.isInitialized = true;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    window.torus = this;\n                    resolve();\n                });\n                window.document.head.appendChild(this.styleLink);\n                window.document.body.appendChild(this.torusIframe);\n                window.document.body.appendChild(this.torusAlertContainer);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    async login() {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!this.isInitialized) throw new Error(\"Call init() first\");\n        try {\n            this.requestedLoginProvider = params.loginProvider || null;\n            if (!this.requestedLoginProvider) {\n                this.communicationProvider._displayIframe({\n                    isFull: true\n                });\n            }\n            // If user is already logged in, we assume they have given access to the website\n            const res = await new Promise((resolve, reject)=>{\n                // We use this method because we want to update inPage provider state with account info\n                this.provider._rpcRequest({\n                    method: \"solana_requestAccounts\",\n                    params: [\n                        this.requestedLoginProvider,\n                        params.login_hint\n                    ]\n                }, (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.getRpcPromiseCallback)(resolve, reject));\n            });\n            if (Array.isArray(res) && res.length > 0) {\n                return res;\n            }\n            // This would never happen, but just in case\n            throw new Error(\"Login failed\");\n        } catch (error) {\n            log.error(\"login failed\", error);\n            throw error;\n        } finally{\n            if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n        }\n    }\n    async loginWithPrivateKey(loginParams) {\n        if (!this.isInitialized) throw new Error(\"Call init() first\");\n        const { privateKey, userInfo } = loginParams;\n        const { success } = await this.communicationProvider.request({\n            method: \"login_with_private_key\",\n            params: {\n                privateKey,\n                userInfo\n            }\n        });\n        if (!success) throw new Error(\"Login Failed\");\n    }\n    async logout() {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n        await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.LOGOUT,\n            params: []\n        });\n        this.requestedLoginProvider = null;\n    }\n    async cleanUp() {\n        if (this.communicationProvider.isLoggedIn) {\n            await this.logout();\n        }\n        this.clearInit();\n    }\n    clearInit() {\n        function isElement(element) {\n            return element instanceof Element || element instanceof Document;\n        }\n        if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n            this.styleLink.remove();\n            this.styleLink = undefined;\n        }\n        if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n            this.torusIframe.remove();\n            this.torusIframe = undefined;\n        }\n        if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n            this.torusAlert = undefined;\n            this.torusAlertContainer.remove();\n            this.torusAlertContainer = undefined;\n        }\n        this.isInitialized = false;\n    }\n    hideTorusButton() {\n        this.communicationProvider.hideTorusButton();\n    }\n    showTorusButton() {\n        this.communicationProvider.showTorusButton();\n    }\n    async setProvider(params) {\n        await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n            params: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, params)\n        });\n    }\n    async showWallet(path) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const instanceId = await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n            params: []\n        });\n        const finalPath = path ? `/${path}` : \"\";\n        const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n        // Using URL constructor to prevent js injection and allow parameter validation.!\n        finalUrl.searchParams.append(\"instanceId\", instanceId);\n        Object.keys(params).forEach((x)=>{\n            finalUrl.searchParams.append(x, params[x]);\n        });\n        if (this.dappStorageKey) {\n            finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n        }\n        // No need to track this window state. Hence, no _handleWindow call.\n        const walletWindow = new PopupHandler({\n            url: finalUrl,\n            features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n        });\n        walletWindow.open();\n    }\n    async getUserInfo() {\n        const userInfoResponse = await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.USER_INFO,\n            params: []\n        });\n        return userInfoResponse;\n    }\n    async initiateTopup(provider, params) {\n        if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n        const windowId = getWindowId();\n        this.communicationProvider._handleWindow(windowId);\n        const topupResponse = await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.COMMUNICATION_JRPC_METHODS.TOPUP,\n            params: {\n                provider,\n                params,\n                windowId\n            }\n        });\n        return topupResponse;\n    }\n    // Solana specific API\n    async getAccounts() {\n        const response = await this.provider.request({\n            method: \"getAccounts\",\n            params: []\n        });\n        return response;\n    }\n    async sendTransaction(transaction) {\n        const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n        const message = isLegacyTransaction ? transaction.serialize({\n            requireAllSignatures: false\n        }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n        const response = await this.provider.request({\n            method: \"send_transaction\",\n            params: {\n                message,\n                isLegacyTransaction\n            }\n        });\n        return response;\n    }\n    // support sendOptions\n    async signAndSendTransaction(transaction, options) {\n        const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n        const message = isLegacyTransaction ? transaction.serialize({\n            requireAllSignatures: false\n        }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n        const response = await this.provider.request({\n            method: \"send_transaction\",\n            params: {\n                message,\n                options,\n                isLegacyTransaction\n            }\n        });\n        return {\n            signature: response\n        };\n    }\n    async signTransaction(transaction) {\n        const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n        const message = isLegacyTransaction ? transaction.serializeMessage().toString(\"hex\") : Buffer.from(transaction.message.serialize()).toString(\"hex\");\n        const response = await this.provider.request({\n            method: \"sign_transaction\",\n            params: {\n                message,\n                messageOnly: true,\n                isLegacyTransaction\n            }\n        });\n        // reconstruct signature pair\n        const parsed = JSON.parse(response);\n        const signature = {\n            publicKey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.PublicKey(parsed.publicKey),\n            signature: Buffer.from(parsed.signature, \"hex\")\n        };\n        transaction.addSignature(signature.publicKey, signature.signature);\n        return transaction;\n    }\n    async signAllTransactions(transactions) {\n        let isLegacyTransaction;\n        const encodedMessage = transactions.map((tx)=>{\n            isLegacyTransaction = isLegacyTransactionInstance(tx);\n            return isLegacyTransaction ? tx.serializeMessage().toString(\"hex\") : Buffer.from(tx.message.serialize()).toString(\"hex\");\n        });\n        const responses = await this.provider.request({\n            method: \"sign_all_transactions\",\n            params: {\n                message: encodedMessage,\n                messageOnly: true,\n                isLegacyTransaction\n            }\n        });\n        // reconstruct signature pairs\n        const signatures = responses.map((item)=>{\n            const parsed = JSON.parse(item);\n            return {\n                publicKey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.PublicKey(parsed.publicKey),\n                signature: Buffer.from(parsed.signature, \"hex\")\n            };\n        });\n        transactions.forEach((tx, idx)=>{\n            tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n            return tx;\n        });\n        return transactions;\n    }\n    async signMessage(data) {\n        const response = await this.provider.request({\n            method: \"sign_message\",\n            params: {\n                data\n            }\n        });\n        return response;\n    }\n    async getGaslessPublicKey() {\n        const response = await this.provider.request({\n            method: \"get_gasless_public_key\",\n            params: []\n        });\n        return response;\n    }\n    // async connect(): Promise<boolean> {\n    //   const response = (await this.provider.request({\n    //     method: \"connect\",\n    //     params: {},\n    //   })) as boolean;\n    //   return response;\n    // }\n    handleDappStorageKey(useLocalStorage) {\n        const localStorageKey = `${configuration.localStorageKeyPrefix}${window.location.hostname}`;\n        let dappStorageKey = \"\";\n        if (isLocalStorageAvailable && useLocalStorage) {\n            const storedKey = window.localStorage.getItem(localStorageKey);\n            if (storedKey) dappStorageKey = storedKey;\n            else {\n                const generatedKey = `torus-app-${getWindowId()}`;\n                window.localStorage.setItem(localStorageKey, generatedKey);\n                dappStorageKey = generatedKey;\n            }\n        }\n        this.dappStorageKey = dappStorageKey;\n        return dappStorageKey;\n    }\n    async _setupWeb3(providerParams) {\n        log.info(\"setupWeb3 running\");\n        // setup background connection\n        const providerStream = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.BasePostMessageStream({\n            name: \"embed_torus\",\n            target: \"iframe_torus\",\n            targetWindow: this.torusIframe.contentWindow\n        });\n        // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n        const communicationStream = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.BasePostMessageStream({\n            name: \"embed_communication\",\n            target: \"iframe_communication\",\n            targetWindow: this.torusIframe.contentWindow\n        });\n        // compose the inPage provider\n        const inPageProvider = new TorusInPageProvider(providerStream, {});\n        const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n        inPageProvider.tryWindowHandle = (payload, cb)=>{\n            const _payload = payload;\n            if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n                if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n                const windowId = getWindowId();\n                communicationProvider._handleWindow(windowId, {\n                    target: \"_blank\",\n                    features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n                });\n                // for inPageProvider methods sending windowId in request instead of params\n                // as params might be positional.\n                _payload.windowId = windowId;\n            }\n            inPageProvider._rpcEngine.handle(_payload, cb);\n        };\n        communicationProvider.tryWindowHandle = (payload, cb)=>{\n            const _payload = payload;\n            if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n                const windowId = getWindowId();\n                communicationProvider._handleWindow(windowId, {\n                    target: \"_blank\",\n                    features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n                });\n                // for communication methods sending window id in jrpc req params\n                _payload.params.windowId = windowId;\n            }\n            communicationProvider._rpcEngine.handle(_payload, cb);\n        };\n        // detect solana_requestAccounts and pipe to enable for now\n        const detectAccountRequestPrototypeModifier = (m)=>{\n            const originalMethod = inPageProvider[m];\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const self = this;\n            inPageProvider[m] = function providerFunc(request, cb) {\n                const { method, params = [] } = request;\n                if (method === \"solana_requestAccounts\") {\n                    if (!cb) return self.login({\n                        loginProvider: params[0]\n                    });\n                    self.login({\n                        loginProvider: params[0]\n                    })// eslint-disable-next-line promise/no-callback-in-promise\n                    .then((res)=>cb(null, res))// eslint-disable-next-line promise/no-callback-in-promise\n                    .catch((err)=>cb(err));\n                }\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                return originalMethod.apply(this, [\n                    request,\n                    cb\n                ]);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            };\n        };\n        // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n        detectAccountRequestPrototypeModifier(\"request\");\n        detectAccountRequestPrototypeModifier(\"sendAsync\");\n        detectAccountRequestPrototypeModifier(\"send\");\n        const proxiedInPageProvider = new Proxy(inPageProvider, {\n            // straight up lie that we deleted the property so that it doesn't\n            // throw an error in strict mode\n            deleteProperty: ()=>true\n        });\n        const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n            // straight up lie that we deleted the property so that it doesn't\n            // throw an error in strict mode\n            deleteProperty: ()=>true\n        });\n        this.provider = proxiedInPageProvider;\n        this.communicationProvider = proxiedCommunicationProvider;\n        await Promise.all([\n            inPageProvider._initializeState(),\n            communicationProvider._initializeState(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, providerParams), {}, {\n                dappStorageKey: this.dappStorageKey,\n                torusAlertContainer: this.torusAlertContainer,\n                torusIframe: this.torusIframe\n            }))\n        ]);\n        log.debug(\"Torus - injected provider\");\n    }\n}\n //# sourceMappingURL=solanaEmbed.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/solana-embed/dist/solanaEmbed.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePostMessageStream: () => (/* binding */ BasePostMessageStream),\n/* harmony export */   IGNORE_SUBSTREAM: () => (/* binding */ IGNORE_SUBSTREAM),\n/* harmony export */   JRPCEngine: () => (/* binding */ JRPCEngine),\n/* harmony export */   ObjectMultiplex: () => (/* binding */ ObjectMultiplex),\n/* harmony export */   PostMessageStream: () => (/* binding */ PostMessageStream),\n/* harmony export */   SafeEventEmitter: () => (/* binding */ SafeEventEmitter),\n/* harmony export */   SerializableError: () => (/* binding */ SerializableError),\n/* harmony export */   Substream: () => (/* binding */ Substream),\n/* harmony export */   createAsyncMiddleware: () => (/* binding */ createAsyncMiddleware),\n/* harmony export */   createEngineStream: () => (/* binding */ createEngineStream),\n/* harmony export */   createErrorMiddleware: () => (/* binding */ createErrorMiddleware),\n/* harmony export */   createIdRemapMiddleware: () => (/* binding */ createIdRemapMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createScaffoldMiddleware: () => (/* binding */ createScaffoldMiddleware),\n/* harmony export */   createStreamMiddleware: () => (/* binding */ createStreamMiddleware),\n/* harmony export */   getRpcPromiseCallback: () => (/* binding */ getRpcPromiseCallback),\n/* harmony export */   mergeMiddleware: () => (/* binding */ mergeMiddleware),\n/* harmony export */   providerAsMiddleware: () => (/* binding */ providerAsMiddleware),\n/* harmony export */   providerFromEngine: () => (/* binding */ providerFromEngine),\n/* harmony export */   providerFromMiddleware: () => (/* binding */ providerFromMiddleware),\n/* harmony export */   setupMultiplex: () => (/* binding */ setupMultiplex)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/lib/ours/index.js\");\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(readable_stream__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-safe-stringify */ \"(ssr)/./node_modules/fast-safe-stringify/index.js\");\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @metamask/rpc-errors */ \"(ssr)/./node_modules/@metamask/rpc-errors/dist/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! end-of-stream */ \"(ssr)/./node_modules/end-of-stream/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(end_of_stream__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\");\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(once__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\nfunction noop() {\n    return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { name, target, targetWindow = window, targetOrigin = \"*\" } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_init\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_haveSyn\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_target\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetWindow\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetOrigin\", void 0);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_onMessage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_synIntervalId\", void 0);\n        if (!name || !target) {\n            throw new Error(\"Invalid input.\");\n        }\n        this._init = false;\n        this._haveSyn = false;\n        this._name = name;\n        this._target = target; // target origin\n        this._targetWindow = targetWindow;\n        this._targetOrigin = targetOrigin;\n        this._onMessage = this.onMessage.bind(this);\n        this._synIntervalId = null;\n        window.addEventListener(\"message\", this._onMessage, false);\n        this._handShake();\n    }\n    _break() {\n        this.cork();\n        this._write(BRK, null, noop);\n        this._haveSyn = false;\n        this._init = false;\n    }\n    _handShake() {\n        this._write(SYN, null, noop);\n        this.cork();\n    }\n    _onData(data) {\n        if (!this._init) {\n            // listen for handshake\n            if (data === SYN) {\n                this._haveSyn = true;\n                this._write(ACK, null, noop);\n            } else if (data === ACK) {\n                this._init = true;\n                if (!this._haveSyn) {\n                    this._write(ACK, null, noop);\n                }\n                this.uncork();\n            }\n        } else if (data === BRK) {\n            this._break();\n        } else {\n            // forward message\n            try {\n                this.push(data);\n            } catch (err) {\n                this.emit(\"error\", err);\n            }\n        }\n    }\n    _postMessage(data) {\n        const originConstraint = this._targetOrigin;\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n    onMessage(event) {\n        const message = event.data;\n        // validate message\n        if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n            return;\n        }\n        this._onData(message.data);\n    }\n    _read() {\n        return undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _write(data, _, cb) {\n        this._postMessage(data);\n        cb();\n    }\n    _destroy() {\n        window.removeEventListener(\"message\", this._onMessage, false);\n    }\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */ function safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    } catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(()=>{\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for(let i = 0; i < n; i += 1){\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {\n    emit(type) {\n        let doError = type === \"error\";\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        } else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === \"function\") {\n            safeApply(handler, this, args);\n        } else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for(let i = 0; i < len; i += 1){\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nclass SerializableError extends Error {\n    constructor(_ref){\n        let { code, message, data } = _ref;\n        if (!Number.isInteger(code)) {\n            throw new Error(\"code must be an integer\");\n        }\n        if (!message || typeof message !== \"string\") {\n            throw new Error(\"message must be string\");\n        }\n        super(message);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"code\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"data\", void 0);\n        this.code = code;\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n    toString() {\n        return fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3___default()({\n            code: this.code,\n            message: this.message,\n            data: this.data,\n            stack: this.stack\n        });\n    }\n}\nconst getRpcPromiseCallback = function(resolve, reject) {\n    let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return (error, response)=>{\n        if (error || response.error) {\n            reject(error || response.error);\n        } else if (!unwrapResult || Array.isArray(response)) {\n            resolve(response);\n        } else {\n            resolve(response.result);\n        }\n    };\n};\nfunction createErrorMiddleware(log) {\n    return (req, res, next, end)=>{\n        try {\n            // json-rpc-engine will terminate the request when it notices this error\n            if (typeof req.method !== \"string\" || !req.method) {\n                res.error = new SerializableError({\n                    code: -32603,\n                    message: \"invalid method\"\n                });\n                end();\n                return;\n            }\n            next((done)=>{\n                const { error } = res;\n                if (!error) {\n                    return done();\n                }\n                log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n                return done();\n            });\n        } catch (error) {\n            log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n            res.error = new SerializableError({\n                code: -32603,\n                message: error.message\n            });\n            end();\n        }\n    };\n}\nfunction createStreamMiddleware() {\n    const idMap = {};\n    function readNoop() {\n        return false;\n    }\n    const events = new SafeEventEmitter();\n    function processResponse(res) {\n        const context = idMap[res.id];\n        if (!context) {\n            throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n        }\n        delete idMap[res.id];\n        // copy whole res onto original res\n        Object.assign(context.res, res);\n        // run callback on empty stack,\n        // prevent internal stream-handler from catching errors\n        setTimeout(context.end);\n    }\n    function processNotification(res) {\n        events.emit(\"notification\", res);\n    }\n    function processMessage(res, _encoding, cb) {\n        let err;\n        try {\n            const isNotification = !res.id;\n            if (isNotification) {\n                processNotification(res);\n            } else {\n                processResponse(res);\n            }\n        } catch (_err) {\n            err = _err;\n        }\n        // continue processing stream\n        cb(err);\n    }\n    const stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read: readNoop,\n        write: processMessage\n    });\n    const middleware = (req, res, next, end)=>{\n        // write req to stream\n        stream.push(req);\n        // register request on id map\n        idMap[req.id] = {\n            req,\n            res,\n            next,\n            end\n        };\n    };\n    return {\n        events,\n        middleware,\n        stream\n    };\n}\nfunction createScaffoldMiddleware(handlers) {\n    return (req, res, next, end)=>{\n        const handler = handlers[req.method];\n        // if no handler, return\n        if (handler === undefined) {\n            return next();\n        }\n        // if handler is fn, call as middleware\n        if (typeof handler === \"function\") {\n            return handler(req, res, next, end);\n        }\n        // if handler is some other value, use as result\n        res.result = handler;\n        return end();\n    };\n}\nfunction createIdRemapMiddleware() {\n    return (req, res, next, _end)=>{\n        const originalId = req.id;\n        const newId = Math.random().toString(36).slice(2);\n        req.id = newId;\n        res.id = newId;\n        next((done)=>{\n            req.id = originalId;\n            res.id = originalId;\n            done();\n        });\n    };\n}\nfunction createLoggerMiddleware(logger) {\n    return (req, res, next, _)=>{\n        logger.debug(\"REQ\", req, \"RES\", res);\n        next();\n    };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n    return async (req, res, next, end)=>{\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve)=>{\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback = null;\n        let nextWasCalled = false;\n        // This will be called by the consumer's async middleware.\n        const asyncNext = async ()=>{\n            nextWasCalled = true;\n            // We pass a return handler to next(). When it is called by the engine,\n            // the consumer's async middleware will resume executing.\n            next((runReturnHandlersCallback)=>{\n                // This callback comes from JRPCEngine._runReturnHandlers\n                returnHandlerCallback = runReturnHandlersCallback;\n                resolveNextPromise();\n            });\n            await nextPromise;\n        };\n        try {\n            await asyncMiddleware(req, res, asyncNext);\n            if (nextWasCalled) {\n                await nextPromise; // we must wait until the return handler is called\n                returnHandlerCallback(null);\n            } else {\n                end(null);\n            }\n        } catch (err) {\n            const error = err;\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            } else {\n                end(error);\n            }\n        }\n    };\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */ class JRPCEngine extends SafeEventEmitter {\n    constructor(){\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_middleware\", void 0);\n        this._middleware = [];\n    }\n    /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */ static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack){\n            [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [\n            error,\n            isComplete,\n            returnHandlers.reverse()\n        ];\n    }\n    /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */ static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve)=>{\n            const end = (err)=>{\n                const error = err || res.error;\n                if (error) {\n                    res.error = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n                }\n                // True indicates that the request should end\n                resolve([\n                    error,\n                    true\n                ]);\n            };\n            const next = (returnHandler)=>{\n                if (res.error) {\n                    end(res.error);\n                } else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== \"function\") {\n                            end(new SerializableError({\n                                code: -32603,\n                                message: \"JRPCEngine: 'next' return handlers must be functions\"\n                            }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([\n                        null,\n                        false\n                    ]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            } catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */ static async _runReturnHandlers(handlers) {\n        for (const handler of handlers){\n            await new Promise((resolve, reject)=>{\n                handler((err)=>err ? reject(err) : resolve());\n            });\n        }\n    }\n    /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */ static _checkForCompletion(_req, res, isComplete) {\n        if (!(\"result\" in res) && !(\"error\" in res)) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Response has no error or result for request\"\n            });\n        }\n        if (!isComplete) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Nothing ended request\"\n            });\n        }\n    }\n    /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */ push(middleware) {\n        this._middleware.push(middleware);\n    }\n    /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */ /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */ /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */ /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    handle(req, cb) {\n        if (cb && typeof cb !== \"function\") {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */ asMiddleware() {\n        return async (req, res, next, end)=>{\n            try {\n                const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JRPCEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback)=>{\n                    try {\n                        await JRPCEngine._runReturnHandlers(returnHandlers);\n                    } catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            } catch (error) {\n                return end(error);\n            }\n        };\n    }\n    /**\n   * Like _handle, but for batch requests.\n   */ /**\n   * Like _handle, but for batch requests.\n   */ async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(// 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        } catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n   * A promise-wrapped _handle.\n   */ _promiseHandle(req) {\n        return new Promise((resolve)=>{\n            this._handle(req, (_err, res)=>{\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                resolve(res);\n            });\n        });\n    }\n    /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */ async _handle(callerReq, cb) {\n        if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"request must be plain object\"\n            });\n            return cb(error, {\n                id: undefined,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        if (typeof callerReq.method !== \"string\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"method must be string\"\n            });\n            return cb(error, {\n                id: callerReq.id,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        const req = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        } catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */ async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JRPCEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JRPCEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n}\nfunction mergeMiddleware(middlewareStack) {\n    const engine = new JRPCEngine();\n    middlewareStack.forEach((middleware)=>engine.push(middleware));\n    return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n    if (!opts || !opts.engine) {\n        throw new Error(\"Missing engine parameter!\");\n    }\n    const { engine } = opts;\n    // eslint-disable-next-line prefer-const\n    let stream;\n    function read() {\n        return undefined;\n    }\n    function write(req, _encoding, cb) {\n        engine.handle(req, (_err, res)=>{\n            stream.push(res);\n        });\n        cb();\n    }\n    stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read,\n        write\n    });\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            stream.push(message);\n        });\n    }\n    return stream;\n}\nfunction providerFromEngine(engine) {\n    const provider = new SafeEventEmitter();\n    // handle both rpc send methods\n    provider.sendAsync = async (req)=>{\n        const res = await engine.handle(req);\n        if (res.error) {\n            var _res$error, _res$error2;\n            const err = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(res.error, {\n                fallbackError: {\n                    message: ((_res$error = res.error) === null || _res$error === void 0 ? void 0 : _res$error.message) || res.error.toString(),\n                    code: ((_res$error2 = res.error) === null || _res$error2 === void 0 ? void 0 : _res$error2.code) || -32603\n                }\n            });\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal(err);\n        }\n        return res.result;\n    };\n    provider.send = (req, callback)=>{\n        if (typeof callback !== \"function\") {\n            throw new Error('Must provide callback to \"send\" method.');\n        }\n        engine.handle(req, callback);\n    };\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            provider.emit(\"data\", null, message);\n        });\n    }\n    provider.request = async (args)=>{\n        const req = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, args), {}, {\n            id: Math.random().toString(36).slice(2),\n            jsonrpc: \"2.0\"\n        });\n        const res = await provider.sendAsync(req);\n        return res;\n    };\n    return provider;\n}\nfunction providerFromMiddleware(middleware) {\n    const engine = new JRPCEngine();\n    engine.push(middleware);\n    const provider = providerFromEngine(engine);\n    return provider;\n}\nfunction providerAsMiddleware(provider) {\n    return async (req, res, _next, end)=>{\n        // send request to provider\n        try {\n            const providerRes = await provider.sendAsync(req);\n            res.result = providerRes;\n            return end();\n        } catch (error) {\n            return end(error);\n        }\n    };\n}\nclass Substream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { parent, name } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_parent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        this._parent = parent;\n        this._name = name;\n    }\n    /**\n   * Explicitly sets read operations to a no-op.\n   */ _read() {\n        return undefined;\n    }\n    /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */ _write(chunk, _encoding, callback) {\n        this._parent.push({\n            name: this._name,\n            data: chunk\n        });\n        callback();\n    }\n}\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(){\n        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, opts), {}, {\n            objectMode: true\n        }));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_substreams\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"getStream\", void 0);\n        this._substreams = {};\n    }\n    createStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // create substream\n        const substream = new Substream({\n            parent: this,\n            name\n        });\n        this._substreams[name] = substream;\n        // listen for parent stream to end\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        anyStreamEnd(this, (_error)=>substream.destroy(_error || undefined));\n        return substream;\n    }\n    // ignore streams (dont display orphaned data warning)\n    ignoreStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // set\n        this._substreams[name] = IGNORE_SUBSTREAM;\n    }\n    _read() {\n        return undefined;\n    }\n    _write(chunk, _encoding, callback) {\n        const { name, data } = chunk;\n        if (!name) {\n            window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n            return callback();\n        }\n        // get corresponding substream\n        const substream = this._substreams[name];\n        if (!substream) {\n            window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n            return callback();\n        }\n        // push data into substream\n        if (substream !== IGNORE_SUBSTREAM) {\n            substream.push(data);\n        }\n        return callback();\n    }\n}\n// util\nfunction anyStreamEnd(stream, _cb) {\n    const cb = once__WEBPACK_IMPORTED_MODULE_7___default()(_cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n        readable: false\n    }, cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n        writable: false\n    }, cb);\n}\nfunction setupMultiplex(stream) {\n    const mux = new ObjectMultiplex();\n    mux.getStream = function streamHelper(name) {\n        if (this._substreams[name]) {\n            return this._substreams[name];\n        }\n        return this.createStream(name);\n    };\n    pump__WEBPACK_IMPORTED_MODULE_8___default()(stream, mux, stream, (err)=>{\n        if (err) window.console.error(err);\n    });\n    return mux;\n}\nclass PostMessageStream extends BasePostMessageStream {\n    _postMessage(data) {\n        let originConstraint = this._targetOrigin;\n        if (typeof data === \"object\") {\n            const dataObj = data;\n            if (typeof dataObj.data === \"object\") {\n                const dataObjData = dataObj.data;\n                if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n                    const dataObjDataParam = dataObjData.params[0];\n                    if (dataObjDataParam._origin) {\n                        originConstraint = dataObjDataParam._origin;\n                    }\n                    // add a constraint for the response\n                    dataObjDataParam._origin = window.location.origin;\n                }\n            }\n        }\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n}\n //# sourceMappingURL=openloginJrpc.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/torus-embed/dist/torus.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@toruslabs/torus-embed/dist/torus.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUTTON_POSITION: () => (/* binding */ BUTTON_POSITION),\n/* harmony export */   PAYMENT_PROVIDER: () => (/* binding */ PAYMENT_PROVIDER),\n/* harmony export */   SUPPORTED_PAYMENT_NETWORK: () => (/* binding */ SUPPORTED_PAYMENT_NETWORK),\n/* harmony export */   TORUS_BUILD_ENV: () => (/* binding */ TORUS_BUILD_ENV),\n/* harmony export */   TorusInpageProvider: () => (/* binding */ TorusInpageProvider),\n/* harmony export */   WALLET_OPENLOGIN_VERIFIER_MAP: () => (/* binding */ WALLET_OPENLOGIN_VERIFIER_MAP),\n/* harmony export */   WALLET_VERIFIERS: () => (/* binding */ WALLET_VERIFIERS),\n/* harmony export */   \"default\": () => (/* binding */ Torus)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/torus-embed/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash.merge */ \"(ssr)/./node_modules/lodash.merge/index.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @metamask/rpc-errors */ \"(ssr)/./node_modules/@metamask/rpc-errors/dist/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! fast-deep-equal */ \"(ssr)/./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n\nconst WALLET_VERIFIERS = {\n    GOOGLE: \"google\",\n    FACEBOOK: \"facebook\",\n    TWITCH: \"twitch\",\n    REDDIT: \"reddit\",\n    DISCORD: \"discord\",\n    EMAIL_PASSWORDLESS: \"torus-auth0-email-passwordless\"\n};\nconst WALLET_OPENLOGIN_VERIFIER_MAP = {\n    [WALLET_VERIFIERS.GOOGLE]: \"tkey-google\",\n    [WALLET_VERIFIERS.FACEBOOK]: \"tkey-facebook\",\n    [WALLET_VERIFIERS.TWITCH]: \"tkey-twitch\",\n    [WALLET_VERIFIERS.REDDIT]: \"tkey-reddit\",\n    [WALLET_VERIFIERS.DISCORD]: \"tkey-discord\",\n    [WALLET_VERIFIERS.EMAIL_PASSWORDLESS]: \"tkey-auth0-email-passwordless\"\n};\nconst PAYMENT_PROVIDER = {\n    MOONPAY: \"moonpay\",\n    WYRE: \"wyre\",\n    RAMPNETWORK: \"rampnetwork\",\n    XANPOOL: \"xanpool\",\n    MERCURYO: \"mercuryo\",\n    TRANSAK: \"transak\",\n    BANXA: \"banxa\"\n};\nconst SUPPORTED_PAYMENT_NETWORK = {\n    MAINNET: \"mainnet\",\n    MATIC: \"matic\",\n    BSC_MAINNET: \"bsc_mainnet\",\n    AVALANCHE_MAINNET: \"avalanche_mainnet\",\n    XDAI: \"xdai\",\n    ARBITRUM_MAINNET: \"arbitrum_mainnet\",\n    OPTIMISM_MAINNET: \"optimism_mainnet\"\n};\nconst TORUS_BUILD_ENV = {\n    PRODUCTION: \"production\",\n    DEVELOPMENT: \"development\",\n    BINANCE: \"binance\",\n    TESTING: \"testing\",\n    LRC: \"lrc\",\n    BETA: \"beta\",\n    BNB: \"bnb\",\n    POLYGON: \"polygon\",\n    ALPHA: \"alpha\"\n};\nconst BUTTON_POSITION = {\n    BOTTOM_LEFT: \"bottom-left\",\n    TOP_LEFT: \"top-left\",\n    BOTTOM_RIGHT: \"bottom-right\",\n    TOP_RIGHT: \"top-right\"\n};\n/**\n * From https://min-api.cryptocompare.com/data/v2/pair/mapping/fsym?fsym=BTC&extraParams=YourSite\n * GET https://min-api.cryptocompare.com/data/v2/pair/mapping/fsym?fsym=BTC\n * Then map over returned entries, picking tsym\n *\n * Last updated: Date of commit\n */ const CRYPTO_COMPARE_CURRENCIES = [\n    \"ETH\",\n    \"USDT\",\n    \"USDC\",\n    \"TUSD\",\n    \"EOSDT\",\n    \"USD\",\n    \"DAI\",\n    \"GUSD\",\n    \"DKKT\",\n    \"PAX\",\n    \"ILS\",\n    \"RUB\",\n    \"BYN\",\n    \"EUR\",\n    \"GBP\",\n    \"JPY\",\n    \"KRW\",\n    \"PLN\",\n    \"MXN\",\n    \"AUD\",\n    \"BRL\",\n    \"CAD\",\n    \"CHF\",\n    \"KPW\",\n    \"LAK\",\n    \"LBP\",\n    \"LKR\",\n    \"XOF\",\n    \"CNHT\",\n    \"DOGE\",\n    \"UAH\",\n    \"TRY\",\n    \"HKD\",\n    \"XJP\",\n    \"SGD\",\n    \"USC\",\n    \"NZD\",\n    \"NGN\",\n    \"RUR\",\n    \"COP\",\n    \"GHS\",\n    \"EGP\",\n    \"IDR\",\n    \"BHD\",\n    \"CRC\",\n    \"PEN\",\n    \"AED\",\n    \"DOP\",\n    \"PKR\",\n    \"HUF\",\n    \"VND\",\n    \"XAR\",\n    \"LTC\",\n    \"RON\",\n    \"OMR\",\n    \"MYR\",\n    \"DKK\",\n    \"UGX\",\n    \"ZMW\",\n    \"SAR\",\n    \"SEK\",\n    \"GEL\",\n    \"RWF\",\n    \"IRR\",\n    \"TZS\",\n    \"CNY\",\n    \"VEF\",\n    \"BDT\",\n    \"HRK\",\n    \"CLP\",\n    \"THB\",\n    \"XAF\",\n    \"ARS\",\n    \"UYU\",\n    \"SZL\",\n    \"KZT\",\n    \"NOK\",\n    \"KES\",\n    \"PAB\",\n    \"INR\",\n    \"CZK\",\n    \"MAD\",\n    \"TWD\",\n    \"PHP\",\n    \"ZAR\",\n    \"BOB\",\n    \"CDF\",\n    \"DASH\",\n    \"VES\",\n    \"ISK\",\n    \"MWK\",\n    \"BAM\",\n    \"TTD\",\n    \"XRP\",\n    \"JOD\",\n    \"RSD\",\n    \"HNL\",\n    \"BGN\",\n    \"GTQ\",\n    \"BWP\",\n    \"XMR\",\n    \"MMK\",\n    \"QAR\",\n    \"AOA\",\n    \"KWD\",\n    \"MUR\",\n    \"WUSD\",\n    \"WEUR\",\n    \"WAVES\",\n    \"WTRY\",\n    \"LRD\",\n    \"LSL\",\n    \"LYD\",\n    \"AWG\",\n    \"MDL\",\n    \"BTO\",\n    \"EURS\",\n    \"CHFT\",\n    \"MKD\",\n    \"MNT\",\n    \"MOP\",\n    \"MRO\",\n    \"MVR\",\n    \"VOLLAR\",\n    \"CKUSD\",\n    \"KHR\",\n    \"VUV\",\n    \"BITCNY\",\n    \"QC\",\n    \"BBD\",\n    \"NAD\",\n    \"NPR\",\n    \"PGK\",\n    \"PYG\",\n    \"BIF\",\n    \"BMD\",\n    \"BND\",\n    \"XLM\",\n    \"BNB\",\n    \"SCR\",\n    \"BAT\",\n    \"CRO\",\n    \"HT\",\n    \"KCS\",\n    \"LEO\",\n    \"LINK\",\n    \"MKR\",\n    \"NPXS\",\n    \"OMG\",\n    \"REP\",\n    \"ZB\",\n    \"ZIL\",\n    \"ZRX\",\n    \"BCH\",\n    \"BZD\",\n    \"CUP\",\n    \"CVE\",\n    \"DJF\",\n    \"DZD\",\n    \"ERN\",\n    \"ETB\",\n    \"FJD\",\n    \"FKP\",\n    \"BUSD\",\n    \"ANCT\",\n    \"ALL\",\n    \"AMD\",\n    \"ANG\",\n    \"CNYX\",\n    \"IQD\",\n    \"UZS\",\n    \"TND\",\n    \"GGP\",\n    \"XAU\",\n    \"KGS\",\n    \"GIP\",\n    \"JMD\",\n    \"ZEC\",\n    \"USDP\",\n    \"BSV\",\n    \"EMC2\",\n    \"SNT\",\n    \"GTO\",\n    \"POWR\",\n    \"EUSD\",\n    \"EURT\",\n    \"BCY\",\n    \"BTS\",\n    \"ATM\",\n    \"BLOCKPAY\",\n    \"ARDR\",\n    \"AMP\",\n    \"B2X\",\n    \"BITGOLD\",\n    \"BITEUR\",\n    \"ATB\",\n    \"BITUSD\",\n    \"AGRS\",\n    \"DFXT\",\n    \"HIKEN\",\n    \"BIX\",\n    \"KNC\",\n    \"EOS\",\n    \"COB\",\n    \"COSS\",\n    \"BMH\",\n    \"NANO\",\n    \"BDG\",\n    \"BNT\",\n    \"XVG\",\n    \"LKK1Y\",\n    \"LKK\",\n    \"USDK\",\n    \"EURN\",\n    \"NZDT\",\n    \"JSE\",\n    \"GMD\",\n    \"GNF\",\n    \"GYD\",\n    \"YER\",\n    \"XPF\",\n    \"HTG\",\n    \"SLL\",\n    \"SOS\",\n    \"WST\",\n    \"SVC\",\n    \"SYP\",\n    \"NEO\",\n    \"KMF\",\n    \"JUMP\",\n    \"AYA\",\n    \"BLAST\",\n    \"WGR\",\n    \"BCN\",\n    \"BTG\",\n    \"URALS\",\n    \"INN\",\n    \"USDQ\",\n    \"CNH\",\n    \"HUSD\",\n    \"BKRW\",\n    \"NZDX\",\n    \"EURX\",\n    \"CADX\",\n    \"USDEX\",\n    \"JPYX\",\n    \"AUDX\",\n    \"VNDC\",\n    \"EON\",\n    \"GBPX\",\n    \"CHFX\",\n    \"USDJ\",\n    \"IDRT\",\n    \"USDS\",\n    \"USDN\",\n    \"BIDR\",\n    \"IDK\",\n    \"BSD\",\n    \"BTN\",\n    \"KYD\",\n    \"NIO\",\n    \"SBD\",\n    \"SDG\",\n    \"SHP\",\n    \"TOP\",\n    \"XCD\",\n    \"XCHF\",\n    \"CNYT\",\n    \"GYEN\",\n    \"ZUSD\",\n    \"GOLD\",\n    \"TRX\",\n    \"TRYB\",\n    \"PLATC\",\n    \"STRAX\",\n    \"UST\",\n    \"GLM\",\n    \"VAI\",\n    \"BRZ\",\n    \"DDRST\",\n    \"XAUT\",\n    \"MIM\"\n];\n/**\n * currencies supported by the payment provider\n * Last updated: Date of commit\n */ const PROVIDER_SUPPORTED_FIAT_CURRENCIES = {\n    // https://integrations.simplex.com/supported_currencies\n    // https://support.moonpay.com/hc/en-gb/articles/360011931457-Which-fiat-currencies-are-supported-\n    [PAYMENT_PROVIDER.MOONPAY]: [\n        \"AUD\",\n        \"BGN\",\n        \"BRL\",\n        \"CAD\",\n        \"CHF\",\n        \"CNY\",\n        \"COP\",\n        \"CZK\",\n        \"DKK\",\n        \"DOP\",\n        \"EGP\",\n        \"EUR\",\n        \"GBP\",\n        \"HKD\",\n        \"HRK\",\n        \"IDR\",\n        \"ILS\",\n        \"JPY\",\n        \"JOD\",\n        \"KES\",\n        \"KRW\",\n        \"KWD\",\n        \"LKR\",\n        \"MAD\",\n        \"MXN\",\n        \"MYR\",\n        \"NGN\",\n        \"NOK\",\n        \"NZD\",\n        \"OMR\",\n        \"PEN\",\n        \"PKR\",\n        \"PLN\",\n        \"RON\",\n        \"RUB\",\n        \"SEK\",\n        \"SGD\",\n        \"THB\",\n        \"TRY\",\n        \"TWD\",\n        \"USD\",\n        \"VND\",\n        \"ZAR\"\n    ],\n    /**\n   * https://docs.sendwyre.com/docs/supported-currencies#fiat\n   * The ones where credit card is supported\n   */ [PAYMENT_PROVIDER.WYRE]: [\n        \"USD\",\n        \"EUR\",\n        \"GBP\",\n        \"AUD\",\n        \"CAD\",\n        \"NZD\",\n        \"CNY\",\n        \"ARS\",\n        \"BRL\",\n        \"CHF\",\n        \"CLP\",\n        \"COP\",\n        \"CZK\",\n        \"DKK\",\n        \"HKD\",\n        \"ILS\",\n        \"INR\",\n        \"ISK\",\n        \"JPY\",\n        \"KRW\",\n        \"MXN\",\n        \"MYR\",\n        \"NOK\",\n        \"PHP\",\n        \"PLN\",\n        \"SEK\",\n        \"SGD\",\n        \"THB\",\n        \"VND\",\n        \"ZAR\"\n    ],\n    // https://support.ramp.network/en/articles/471-supported-fiat-currencies\n    [PAYMENT_PROVIDER.RAMPNETWORK]: [\n        \"USD\",\n        \"EUR\",\n        \"GBP\",\n        \"BMD\",\n        \"BAM\",\n        \"BWP\",\n        \"BRL\",\n        \"BGN\",\n        \"COP\",\n        \"CRC\",\n        \"CZK\",\n        \"DKK\",\n        \"DOP\",\n        \"GEL\",\n        \"GTQ\",\n        \"HNL\",\n        \"HUF\",\n        \"ISK\",\n        \"INR\",\n        \"ILS\",\n        \"KZT\",\n        \"KES\",\n        \"KWD\",\n        \"LAK\",\n        \"MKD\",\n        \"MYR\",\n        \"MXN\",\n        \"MDL\",\n        \"MZN\",\n        \"NZD\",\n        \"NGN\",\n        \"PYG\",\n        \"PEN\",\n        \"PLN\",\n        \"RON\",\n        \"RSD\",\n        \"SGD\",\n        \"ZAR\",\n        \"LKR\",\n        \"SEK\",\n        \"CHF\",\n        \"TJS\",\n        \"THB\",\n        \"UYU\"\n    ],\n    // From https://xanpool.com/ fiat select dropdown\n    [PAYMENT_PROVIDER.XANPOOL]: [\n        \"SGD\",\n        \"HKD\",\n        \"THB\",\n        \"PHP\",\n        \"INR\",\n        \"IDR\",\n        \"MYR\",\n        \"AUD\",\n        \"NZD\",\n        \"KRW\"\n    ],\n    // https://help.mercuryo.io/en/articles/6121246-which-fiat-currencies-are-supported\n    // RUB / UAH currently not supported\n    [PAYMENT_PROVIDER.MERCURYO]: [\n        \"EUR\",\n        \"USD\",\n        \"GBP\",\n        \"TRY\",\n        \"JPY\",\n        \"BRL\",\n        \"NGN\",\n        \"VND\",\n        \"MXN\",\n        \"KRW\",\n        \"PLN\",\n        \"SEK\",\n        \"CHF\",\n        \"CAD\",\n        \"CZK\",\n        \"DKK\",\n        \"BGN\",\n        \"HKD\",\n        \"AUD\",\n        \"INR\"\n    ],\n    /**\n   * https://support.transak.com/hc/en-us/articles/360020615578-Credit-and-Debit-Card-Payments-through-Transak\n   * or\n   * https://transak.stoplight.io/docs/transak-docs/b3A6OTk1ODQ0-2-get-fiat-currencies\n   */ [PAYMENT_PROVIDER.TRANSAK]: [\n        \"ARS\",\n        \"AUD\",\n        \"BBD\",\n        \"BGN\",\n        \"BMD\",\n        \"BRL\",\n        \"CAD\",\n        \"CHF\",\n        \"CLP\",\n        \"CRC\",\n        \"CZK\",\n        \"DKK\",\n        \"DOP\",\n        \"EUR\",\n        \"FJD\",\n        \"FKP\",\n        \"GBP\",\n        \"GIP\",\n        \"HRK\",\n        \"HUF\",\n        \"IDR\",\n        \"ILS\",\n        \"ISK\",\n        \"JMD\",\n        \"JPY\",\n        \"KES\",\n        \"KRW\",\n        \"MDL\",\n        \"MXN\",\n        \"MYR\",\n        \"NOK\",\n        \"NZD\",\n        \"PEN\",\n        \"PHP\",\n        \"PLN\",\n        \"PYG\",\n        \"RON\",\n        \"SEK\",\n        \"SGD\",\n        \"THB\",\n        \"TRY\",\n        \"TZS\",\n        \"USD\",\n        \"ZAR\"\n    ],\n    [PAYMENT_PROVIDER.BANXA]: [\n        \"AUD\",\n        \"CAD\",\n        \"CZK\",\n        \"DKK\",\n        \"EUR\",\n        \"GBP\",\n        \"HKD\",\n        \"JPY\",\n        \"NOK\",\n        \"NZD\",\n        \"NZD\",\n        \"PLN\",\n        \"RUB\",\n        \"SEK\",\n        \"SGD\",\n        \"TRY\",\n        \"USD\"\n    ]\n};\nconst cryptoCompareCurrenciesSet = new Set(CRYPTO_COMPARE_CURRENCIES);\n/**\n * Fiat currencies that we support\n */ function supportedFiatCurrencies(provider) {\n    const providerSupportedFiatCurrencies = PROVIDER_SUPPORTED_FIAT_CURRENCIES[provider];\n    return providerSupportedFiatCurrencies.filter((currency)=>cryptoCompareCurrenciesSet.has(currency));\n}\nconst paymentProviders$1 = {\n    [PAYMENT_PROVIDER.MOONPAY]: {\n        line1: \"Credit/ Debit Card/ Apple Pay\",\n        line2: \"4.5% or 5 USD\",\n        line3: \"2,000€/day, 10,000€/mo\",\n        supportPage: \"https://help.moonpay.io/en/\",\n        minOrderValue: 24.99,\n        maxOrderValue: 50000,\n        validCurrencies: supportedFiatCurrencies(PAYMENT_PROVIDER.MOONPAY),\n        validCryptoCurrenciesByChain: {\n            [SUPPORTED_PAYMENT_NETWORK.MAINNET]: [\n                {\n                    value: \"aave\",\n                    display: \"AAVE\"\n                },\n                {\n                    value: \"bat\",\n                    display: \"BAT\"\n                },\n                {\n                    value: \"dai\",\n                    display: \"DAI\"\n                },\n                {\n                    value: \"eth\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"mkr\",\n                    display: \"MKR\"\n                },\n                {\n                    value: \"matic\",\n                    display: \"MATIC\"\n                },\n                {\n                    value: \"usdt\",\n                    display: \"USDT\"\n                },\n                {\n                    value: \"uni\",\n                    display: \"UNI\"\n                },\n                {\n                    value: \"usdc\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"weth\",\n                    display: \"WETH\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.MATIC]: [\n                {\n                    value: \"eth_polygon\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"matic_polygon\",\n                    display: \"MATIC\"\n                },\n                {\n                    value: \"usdc_polygon\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"usdt_polygon\",\n                    display: \"USDT\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.BSC_MAINNET]: [\n                {\n                    value: \"bnb_bsc\",\n                    display: \"BNB\"\n                },\n                {\n                    value: \"busd_bsc\",\n                    display: \"BUSD\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.AVALANCHE_MAINNET]: [\n                {\n                    value: \"avax_cchain\",\n                    display: \"AVAX\"\n                },\n                {\n                    value: \"usdc_cchain\",\n                    display: \"USDC\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.ARBITRUM_MAINNET]: [\n                {\n                    value: \"eth_arbitrum\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"usdc_arbitrum\",\n                    display: \"USDC\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.OPTIMISM_MAINNET]: [\n                {\n                    value: \"eth_optimism\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"usdc_optimism\",\n                    display: \"USDC\"\n                }\n            ]\n        },\n        includeFees: true,\n        api: true,\n        enforceMax: false\n    },\n    [PAYMENT_PROVIDER.WYRE]: {\n        line1: \"Apple Pay/ Debit/ Credit Card\",\n        line2: \"4.9% + 30\\xa2 or 5 USD\",\n        line3: \"$250/day\",\n        supportPage: \"https://support.sendwyre.com/en/\",\n        minOrderValue: 5,\n        maxOrderValue: 500,\n        validCurrencies: supportedFiatCurrencies(PAYMENT_PROVIDER.WYRE),\n        validCryptoCurrenciesByChain: {\n            [SUPPORTED_PAYMENT_NETWORK.MAINNET]: [\n                {\n                    value: \"AAVE\",\n                    display: \"AAVE\"\n                },\n                {\n                    value: \"COMP\",\n                    display: \"COMP\"\n                },\n                {\n                    value: \"BAT\",\n                    display: \"BAT\"\n                },\n                {\n                    value: \"BUSD\",\n                    display: \"BUSD\"\n                },\n                {\n                    value: \"DAI\",\n                    display: \"DAI\"\n                },\n                {\n                    value: \"ETH\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"WBTC\",\n                    display: \"WBTC\"\n                },\n                {\n                    value: \"MKR\",\n                    display: \"MKR\"\n                },\n                {\n                    value: \"UNI\",\n                    display: \"UNI\"\n                },\n                {\n                    value: \"WETH\",\n                    display: \"WETH\"\n                },\n                {\n                    value: \"USDC\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"USDT\",\n                    display: \"USDT\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.MATIC]: [\n                {\n                    value: \"mUSDC\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"MATIC\",\n                    display: \"MATIC\"\n                },\n                {\n                    value: \"MWETH\",\n                    display: \"WETH\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.AVALANCHE_MAINNET]: [\n                {\n                    value: \"AVAXC\",\n                    display: \"AVAX\"\n                },\n                {\n                    value: \"AVAXCUSDC\",\n                    display: \"USDC\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.BSC_MAINNET]: [\n                {\n                    value: \"BNB\",\n                    display: \"BNB\"\n                },\n                {\n                    value: \"BBUSD\",\n                    display: \"BUSD\"\n                }\n            ]\n        },\n        includeFees: false,\n        api: true,\n        enforceMax: false\n    },\n    [PAYMENT_PROVIDER.RAMPNETWORK]: {\n        line1: \"Debit Card/ <br>Apple Pay/ Bank transfer\",\n        line2: \"0.49% - 2.9%\",\n        line3: \"5,000€/purchase, 20,000€/mo\",\n        supportPage: \"https://instant.ramp.network/\",\n        minOrderValue: 50,\n        maxOrderValue: 20000,\n        validCurrencies: supportedFiatCurrencies(PAYMENT_PROVIDER.RAMPNETWORK),\n        validCryptoCurrenciesByChain: {\n            [SUPPORTED_PAYMENT_NETWORK.MAINNET]: [\n                {\n                    value: \"ETH\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"DAI\",\n                    display: \"DAI\"\n                },\n                {\n                    value: \"BAT\",\n                    display: \"BAT\"\n                },\n                {\n                    value: \"USDC\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"USDT\",\n                    display: \"USDT\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.MATIC]: [\n                {\n                    value: \"MATIC_BAT\",\n                    display: \"BAT\"\n                },\n                {\n                    value: \"MATIC_DAI\",\n                    display: \"DAI\"\n                },\n                {\n                    value: \"MATIC_MATIC\",\n                    display: \"MATIC\"\n                },\n                {\n                    value: \"MATIC_USDC\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"MATIC_USDT\",\n                    display: \"USDT\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.AVALANCHE_MAINNET]: [\n                {\n                    value: \"AVAX_AVAX\",\n                    display: \"AVAX\"\n                },\n                {\n                    value: \"AVAX_USDC\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"AVAX_USDT\",\n                    display: \"USDT\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.ARBITRUM_MAINNET]: [\n                {\n                    value: \"ARBITRUM_ETH\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"ARBITRUM_USDC.e\t\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"ARBITRUM_USDT\",\n                    display: \"USDT\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.OPTIMISM_MAINNET]: [\n                {\n                    value: \"OPTIMISM_DAI\",\n                    display: \"DAI\"\n                },\n                {\n                    value: \"OPTIMISM_OPTIMISM\",\n                    display: \"OPTIMISM\"\n                },\n                {\n                    value: \"OPTIMISM_USDC\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"OPTIMISM_USDT\",\n                    display: \"USDT\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.BSC_MAINNET]: [\n                {\n                    value: \"BSC_BNB\",\n                    display: \"BNB\"\n                },\n                {\n                    value: \"BSC_BUSD\",\n                    display: \"BUSD\"\n                }\n            ]\n        },\n        includeFees: true,\n        api: true,\n        receiveHint: \"walletTopUp.receiveHintRamp\",\n        enforceMax: false\n    },\n    [PAYMENT_PROVIDER.XANPOOL]: {\n        line1: \"PayNow/ InstaPay/ FPS/ GoJekPay/ UPI/ PromptPay/ <br>ViettelPay/ DuitNow\",\n        line2: \"2.5% buying, 3% selling\",\n        line3: \"$2,500 / day\",\n        supportPage: \"mailto:support@xanpool.com\",\n        minOrderValue: 100,\n        maxOrderValue: 2500,\n        validCurrencies: supportedFiatCurrencies(PAYMENT_PROVIDER.XANPOOL),\n        validCryptoCurrenciesByChain: {\n            [SUPPORTED_PAYMENT_NETWORK.MAINNET]: [\n                {\n                    value: \"ETH\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"USDT\",\n                    display: \"USDT\"\n                },\n                {\n                    value: \"USDC\",\n                    display: \"USDC\"\n                }\n            ]\n        },\n        includeFees: true,\n        api: true,\n        sell: true,\n        enforceMax: false\n    },\n    [PAYMENT_PROVIDER.MERCURYO]: {\n        line1: \"Credit/ Debit Card/ Apple Pay\",\n        line2: \"3.95% or 4 USD\",\n        line3: \"10,000€/day, 25,000€/mo\",\n        supportPage: \"mailto:support@mercuryo.io\",\n        minOrderValue: 30,\n        maxOrderValue: 5000,\n        validCurrencies: supportedFiatCurrencies(PAYMENT_PROVIDER.MERCURYO),\n        validCryptoCurrenciesByChain: {\n            [SUPPORTED_PAYMENT_NETWORK.MAINNET]: [\n                {\n                    value: \"ETH\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"BAT\",\n                    display: \"BAT\"\n                },\n                {\n                    value: \"USDT\",\n                    display: \"USDT\"\n                },\n                {\n                    value: \"DAI\",\n                    display: \"DAI\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.BSC_MAINNET]: [\n                {\n                    value: \"BNB\",\n                    display: \"BNB\"\n                },\n                {\n                    value: \"BUSD\",\n                    display: \"BUSD\"\n                },\n                {\n                    value: \"1INCH\",\n                    display: \"1INCH\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.AVALANCHE_MAINNET]: [\n                {\n                    value: \"AVAX\",\n                    display: \"AVAX\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.MATIC]: [\n                {\n                    value: \"MATIC\",\n                    display: \"MATIC\"\n                }\n            ]\n        },\n        includeFees: true,\n        api: true,\n        enforceMax: false\n    },\n    [PAYMENT_PROVIDER.TRANSAK]: {\n        line1: \"Apple & Google Pay / Credit/Debit Card<br/>Bangkok Bank Mobile & iPay<br/>Bank Transfer (sepa/gbp) / SCB Mobile & Easy\",\n        line2: \"0.99% - 5.5% or 5 USD\",\n        line3: \"$5,000/day, $28,000/mo\",\n        supportPage: \"https://support.transak.com/hc/en-US\",\n        minOrderValue: 30,\n        maxOrderValue: 500,\n        validCurrencies: supportedFiatCurrencies(PAYMENT_PROVIDER.TRANSAK),\n        validCryptoCurrenciesByChain: {\n            [SUPPORTED_PAYMENT_NETWORK.MAINNET]: [\n                {\n                    value: \"1INCH\",\n                    display: \"1INCH\"\n                },\n                {\n                    value: \"BAT\",\n                    display: \"BAT\"\n                },\n                {\n                    value: \"AAVE\",\n                    display: \"AAVE\"\n                },\n                {\n                    value: \"DAI\",\n                    display: \"DAI\"\n                },\n                {\n                    value: \"ETH\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"USDC\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"USDT\",\n                    display: \"USDT\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.MATIC]: [\n                {\n                    value: \"BAT\",\n                    display: \"BAT\"\n                },\n                {\n                    value: \"AAVE\",\n                    display: \"AAVE\"\n                },\n                {\n                    value: \"DAI\",\n                    display: \"DAI\"\n                },\n                {\n                    value: \"MATIC\",\n                    display: \"MATIC\"\n                },\n                {\n                    value: \"USDC\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"USDT\",\n                    display: \"USDT\"\n                },\n                {\n                    value: \"WETH\",\n                    display: \"WETH\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.BSC_MAINNET]: [\n                {\n                    value: \"BAT\",\n                    display: \"BAT\"\n                },\n                {\n                    value: \"BNB\",\n                    display: \"BNB\"\n                },\n                {\n                    value: \"BUSD\",\n                    display: \"BUSD\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.AVALANCHE_MAINNET]: [\n                {\n                    value: \"AVAX\",\n                    display: \"AVAX\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.OPTIMISM_MAINNET]: [\n                {\n                    value: \"ETH\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"USDC\",\n                    display: \"USDC\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.ARBITRUM_MAINNET]: [\n                {\n                    value: \"USDC\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"ETH\",\n                    display: \"ETH\"\n                }\n            ]\n        },\n        includeFees: true,\n        enforceMax: true\n    },\n    [PAYMENT_PROVIDER.BANXA]: {\n        line1: \"Debit Card/ <br>Apple Pay/ Bank transfer\",\n        line2: \"0.49% - 2.9%\",\n        line3: \"5,000€/purchase, 20,000€/mo\",\n        supportPage: \"https://support.banxa.com\",\n        minOrderValue: 20,\n        maxOrderValue: 15000,\n        validCurrencies: supportedFiatCurrencies(PAYMENT_PROVIDER.BANXA),\n        validCryptoCurrenciesByChain: {\n            [SUPPORTED_PAYMENT_NETWORK.MAINNET]: [\n                {\n                    value: \"ETH\",\n                    display: \"ETH\"\n                },\n                {\n                    value: \"DAI\",\n                    display: \"DAI\"\n                },\n                {\n                    value: \"MKR\",\n                    display: \"MKR\"\n                },\n                {\n                    value: \"USDT\",\n                    display: \"USDT\"\n                },\n                {\n                    value: \"BUSD\",\n                    display: \"BUSD\"\n                },\n                {\n                    value: \"USDC\",\n                    display: \"USDC\"\n                },\n                {\n                    value: \"BAT\",\n                    display: \"BAT\"\n                },\n                {\n                    value: \"AAVE\",\n                    display: \"AAVE\"\n                },\n                {\n                    value: \"COMP\",\n                    display: \"COMP\"\n                },\n                {\n                    value: \"UNI\",\n                    display: \"UNI\"\n                }\n            ],\n            [SUPPORTED_PAYMENT_NETWORK.MATIC]: [\n                {\n                    value: \"MATIC\",\n                    display: \"MATIC\"\n                }\n            ]\n        },\n        includeFees: true,\n        enforceMax: true\n    }\n};\nconst translations = {\n    en: {\n        embed: {\n            continue: \"Continue\",\n            actionRequired: \"Authorization required\",\n            pendingAction: \"Click continue to proceed with your request in a popup\",\n            cookiesRequired: \"Cookies Required\",\n            enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n            clickHere: \"More Info\"\n        }\n    },\n    de: {\n        embed: {\n            continue: \"Fortsetzen\",\n            actionRequired: \"Autorisierung erforderlich\",\n            pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n            cookiesRequired: \"Cookies ben\\xf6tigt\",\n            enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n            clickHere: \"Mehr Info\"\n        }\n    },\n    ja: {\n        embed: {\n            continue: \"継続する\",\n            actionRequired: \"認証が必要です\",\n            pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n            cookiesRequired: \"必要なクッキー\",\n            enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n            clickHere: \"詳しくは\"\n        }\n    },\n    ko: {\n        embed: {\n            continue: \"계속하다\",\n            actionRequired: \"승인 필요\",\n            pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n            cookiesRequired: \"쿠키 필요\",\n            enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n            clickHere: \"더 많은 정보\"\n        }\n    },\n    zh: {\n        embed: {\n            continue: \"继续\",\n            actionRequired: \"需要授权\",\n            pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n            cookiesRequired: \"必填Cookie\",\n            enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n            clickHere: \"更多信息\"\n        }\n    }\n};\nvar configuration = {\n    supportedVerifierList: Object.values(WALLET_VERIFIERS),\n    paymentProviders: paymentProviders$1,\n    api: \"https://api.tor.us\",\n    translations,\n    prodTorusUrl: \"\",\n    localStorageKeyPrefix: `torus-`\n};\nconst htmlToElement = (html)=>{\n    const template = window.document.createElement(\"template\");\n    const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n    template.innerHTML = trimmedHtml;\n    return template.content.firstChild;\n};\nconst handleStream = (handle, eventName, handler)=>{\n    const handlerWrapper = (chunk)=>{\n        handler(chunk);\n        handle.removeListener(eventName, handlerWrapper);\n    };\n    handle.on(eventName, handlerWrapper);\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */ function isStream(stream) {\n    return stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\n}\nfunction isWritableStream(stream) {\n    return isStream(stream) && stream.writable !== false && typeof stream._write === \"function\" && typeof stream._writableState === \"object\";\n}\nfunction isReadableStream(stream) {\n    return isStream(stream) && stream.readable !== false && typeof stream._read === \"function\" && typeof stream._readableState === \"object\";\n}\nfunction isDuplexStream(stream) {\n    return isWritableStream(stream) && isReadableStream(stream);\n}\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_9___default().getLogger(\"torus-embed\");\nvar messages = {\n    errors: {\n        disconnected: ()=>\"Torus: Lost connection to Torus.\",\n        permanentlyDisconnected: ()=>\"Torus: Disconnected from iframe. Page reload required.\",\n        sendSiteMetadata: ()=>\"Torus: Failed to send site metadata. This is an internal error, please report this bug.\",\n        unsupportedSync: (method)=>`Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n        invalidDuplexStream: ()=>\"Must provide a Node.js-style duplex stream.\",\n        invalidOptions: (maxEventListeners, shouldSendMetadata)=>`Invalid options. Received: { maxEventListeners: ${maxEventListeners}, shouldSendMetadata: ${shouldSendMetadata} }`,\n        invalidRequestArgs: ()=>`Expected a single, non-array, object argument.`,\n        invalidRequestMethod: ()=>`'args.method' must be a non-empty string.`,\n        invalidRequestParams: ()=>`'args.params' must be an object or array if provided.`,\n        invalidLoggerObject: ()=>`'args.logger' must be an object if provided.`,\n        invalidLoggerMethod: (method)=>`'args.logger' must include required method '${method}'.`\n    },\n    info: {\n        connected: (chainId)=>`Torus: Connected to chain with ID \"${chainId}\".`\n    },\n    warnings: {\n        // deprecated methods\n        enableDeprecation: 'Torus: \"\"ethereum.enable()\" is deprecated and may be removed in the future. ' + 'Please use \"ethereum.send(\"eth_requestAccounts\")\" instead. For more information, see: https://eips.ethereum.org/EIPS/eip-1102',\n        sendDeprecation: 'Torus: \"ethereum.send(...)\" is deprecated and may be removed in the future.' + ' Please use \"ethereum.sendAsync(...)\" or \"ethereum.request(...)\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193'\n    }\n};\nconst { paymentProviders } = configuration;\nconst validatePaymentProvider = (provider, params)=>{\n    const errors = {};\n    if (!provider) {\n        return {\n            errors,\n            isValid: true\n        };\n    }\n    if (provider && !paymentProviders[provider]) {\n        errors.provider = \"Invalid Provider\";\n        return {\n            errors,\n            isValid: Object.keys(errors).length === 0\n        };\n    }\n    const selectedProvider = paymentProviders[provider];\n    const selectedParams = params || {};\n    // set default values\n    // if (!selectedParams.selectedCurrency) [selectedParams.selectedCurrency] = selectedProvider.validCurrencies\n    // if (!selectedParams.fiatValue) selectedParams.fiatValue = selectedProvider.minOrderValue\n    // if (!selectedParams.selectedCryptoCurrency) [selectedParams.selectedCryptoCurrency] = selectedProvider.validCryptoCurrencies\n    // validations\n    if (selectedParams.fiatValue) {\n        const requestedOrderAmount = +parseFloat(selectedParams.fiatValue.toString()) || 0;\n        if (requestedOrderAmount < selectedProvider.minOrderValue) errors.fiatValue = \"Requested amount is lower than supported\";\n        if (requestedOrderAmount > selectedProvider.maxOrderValue && selectedProvider.enforceMax) errors.fiatValue = \"Requested amount is higher than supported\";\n    }\n    if (selectedParams.selectedCurrency && !selectedProvider.validCurrencies.includes(selectedParams.selectedCurrency)) {\n        errors.selectedCurrency = \"Unsupported currency\";\n    }\n    if (selectedParams.selectedCryptoCurrency) {\n        const validCryptoCurrenciesByChain = Object.values(selectedProvider.validCryptoCurrenciesByChain).flat().map((currency)=>currency.value);\n        const finalCryptoCurrency = provider === PAYMENT_PROVIDER.MOONPAY ? selectedParams.selectedCryptoCurrency.toLowerCase() : selectedParams.selectedCryptoCurrency;\n        if (validCryptoCurrenciesByChain && !validCryptoCurrenciesByChain.includes(finalCryptoCurrency)) errors.selectedCryptoCurrency = \"Unsupported cryptoCurrency\";\n    }\n    return {\n        errors,\n        isValid: Object.keys(errors).length === 0\n    };\n};\n// utility functions\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */ function createErrorMiddleware() {\n    return (req, res, next)=>{\n        // json-rpc-engine will terminate the request when it notices this error\n        if (typeof req.method !== \"string\" || !req.method) {\n            res.error = _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.rpcErrors.invalidRequest({\n                message: `The request 'method' must be a non-empty string.`,\n                data: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, req || {}), {}, {\n                    cause: \"The request 'method' must be a non-empty string.\"\n                })\n            });\n        }\n        next((done)=>{\n            const { error } = res;\n            if (!error) {\n                return done();\n            }\n            log.error(`MetaMask - RPC Error: ${error.message}`, error);\n            return done();\n        });\n    };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */ function logStreamDisconnectWarning(remoteLabel, error, emitter) {\n    let warningMsg = `MetaMask: Lost connection to \"${remoteLabel}\".`;\n    if (error !== null && error !== void 0 && error.stack) {\n        warningMsg += `\\n${error.stack}`;\n    }\n    log.warn(warningMsg);\n    if (emitter && emitter.listenerCount(\"error\") > 0) {\n        emitter.emit(\"error\", warningMsg);\n    }\n}\nconst getPreopenInstanceId = ()=>Math.random().toString(36).slice(2);\nconst getTorusUrl = async (buildEnv, integrity)=>{\n    let torusUrl;\n    let logLevel;\n    // Do not change this line\n    const version = \"4.0.8\";\n    let versionUsed = integrity.version || version;\n    try {\n        if ((buildEnv === \"binance\" || buildEnv === \"production\") && !integrity.version) {\n            let response;\n            if (!configuration.prodTorusUrl) response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.get)(`${configuration.api}/latestversion?name=@toruslabs/torus-embed&version=${version}`, {}, {\n                useAPIKey: true\n            });\n            else response = {\n                data: configuration.prodTorusUrl\n            };\n            versionUsed = response.data;\n            // eslint-disable-next-line require-atomic-updates\n            configuration.prodTorusUrl = response.data;\n        }\n    } catch (error) {\n        log.error(error, \"unable to fetch latest version\");\n    }\n    log.info(\"version used: \", versionUsed);\n    switch(buildEnv){\n        case \"binance\":\n            torusUrl = `https://binance.tor.us/v${versionUsed}`;\n            logLevel = \"info\";\n            break;\n        case \"testing\":\n            torusUrl = \"https://testing.tor.us\";\n            logLevel = \"debug\";\n            break;\n        case \"bnb\":\n            torusUrl = \"https://bnb.tor.us\";\n            logLevel = \"error\";\n            break;\n        case \"polygon\":\n            torusUrl = \"https://polygon.tor.us\";\n            logLevel = \"error\";\n            break;\n        case \"lrc\":\n            torusUrl = \"https://lrc.tor.us\";\n            logLevel = \"debug\";\n            break;\n        case \"beta\":\n            torusUrl = \"https://beta.tor.us\";\n            logLevel = \"debug\";\n            break;\n        case \"development\":\n            torusUrl = \"http://localhost:4050\";\n            logLevel = \"debug\";\n            break;\n        case \"alpha\":\n            torusUrl = \"https://alpha.tor.us\";\n            logLevel = \"debug\";\n            break;\n        default:\n            torusUrl = `https://app.tor.us/v${versionUsed}`;\n            logLevel = \"error\";\n            break;\n    }\n    return {\n        torusUrl,\n        logLevel\n    };\n};\nconst getUserLanguage = ()=>{\n    let userLanguage = window.navigator.language || \"en-US\";\n    const userLanguages = userLanguage.split(\"-\");\n    userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n    return userLanguage;\n};\nconst EMITTED_NOTIFICATIONS = [\n    \"eth_subscription\" // per eth-json-rpc-filters/subscriptionManager\n];\nconst NOOP = ()=>{\n// empty function\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=660,width=375\";\nconst FEATURES_DEFAULT_WALLET_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=740,width=1315\";\nconst FEATURES_CONFIRM_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=700,width=450\";\nfunction getPopupFeatures() {\n    // Fixes dual-screen position                             Most browsers      Firefox\n    const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n    const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n    const w = 1200;\n    const h = 700;\n    const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n    const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n    const systemZoom = 1; // No reliable estimate\n    const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n    const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n    const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n    return features;\n}\n_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.SafeEventEmitter.defaultMaxListeners = 100;\n// resolve response.result, reject errors\nconst getRpcPromiseCallback = function(resolve, reject) {\n    let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return (error, response)=>{\n        if (error || response.error) {\n            return reject(error || response.error);\n        }\n        return !unwrapResult || Array.isArray(response) ? resolve(response) : resolve(response.result);\n    };\n};\nclass TorusInpageProvider extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.SafeEventEmitter {\n    constructor(connectionStream){\n        let { maxEventListeners = 100, shouldSendMetadata = true, jsonRpcStreamName = \"provider\" } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        super();\n        /**\n     * The chain ID of the currently connected Ethereum chain.\n     * See [chainId.network]{@link https://chainid.network} for more information.\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"chainId\", void 0);\n        /**\n     * The user's currently selected Ethereum address.\n     * If null, MetaMask is either locked or the user has not permitted any\n     * addresses to be viewed.\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"selectedAddress\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"_rpcEngine\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"networkVersion\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"shouldSendMetadata\", void 0);\n        /**\n     * Indicating that this provider is a MetaMask provider.\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"isTorus\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"tryPreopenHandle\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"enable\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"_state\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"_jsonRpcConnection\", void 0);\n        if (!isDuplexStream(connectionStream)) {\n            throw new Error(messages.errors.invalidDuplexStream());\n        }\n        this.isTorus = true;\n        this.setMaxListeners(maxEventListeners);\n        // private state\n        this._state = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, TorusInpageProvider._defaultState);\n        // public state\n        this.selectedAddress = null;\n        this.networkVersion = null;\n        this.chainId = null;\n        this.shouldSendMetadata = shouldSendMetadata;\n        // bind functions (to prevent e.g. web3@1.x from making unbound calls)\n        this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n        this._handleChainChanged = this._handleChainChanged.bind(this);\n        this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n        this._handleConnect = this._handleConnect.bind(this);\n        this._handleDisconnect = this._handleDisconnect.bind(this);\n        this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n        this._sendSync = this._sendSync.bind(this);\n        this._rpcRequest = this._rpcRequest.bind(this);\n        this._initializeState = this._initializeState.bind(this);\n        this.request = this.request.bind(this);\n        this.send = this.send.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        // this.enable = this.enable.bind(this);\n        // setup connectionStream multiplexing\n        const mux = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.ObjectMultiplex();\n        pump__WEBPACK_IMPORTED_MODULE_8___default()(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"MetaMask\"));\n        // ignore phishing warning message (handled elsewhere)\n        mux.ignoreStream(\"phishing\");\n        // setup own event listeners\n        // EIP-1193 connect\n        this.on(\"connect\", ()=>{\n            this._state.isConnected = true;\n        });\n        // connect to async provider\n        const jsonRpcConnection = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.createStreamMiddleware)();\n        pump__WEBPACK_IMPORTED_MODULE_8___default()(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"MetaMask RpcProvider\"));\n        // handle RPC requests via dapp-side rpc engine\n        const rpcEngine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.JRPCEngine();\n        rpcEngine.push((0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.createIdRemapMiddleware)());\n        rpcEngine.push(createErrorMiddleware());\n        rpcEngine.push(jsonRpcConnection.middleware);\n        this._rpcEngine = rpcEngine;\n        // json rpc notification listener\n        jsonRpcConnection.events.on(\"notification\", (payload)=>{\n            const { method, params } = payload;\n            if (method === \"wallet_accountsChanged\") {\n                this._handleAccountsChanged(params);\n            } else if (method === \"wallet_unlockStateChanged\") {\n                this._handleUnlockStateChanged(params);\n            } else if (method === \"wallet_chainChanged\") {\n                this._handleChainChanged(params);\n            } else if (EMITTED_NOTIFICATIONS.includes(payload.method)) {\n                // EIP 1193 subscriptions, per eth-json-rpc-filters/subscriptionManager\n                this.emit(\"data\", payload); // deprecated\n                this.emit(\"notification\", params.result);\n                this.emit(\"message\", {\n                    type: method,\n                    data: params\n                });\n            }\n        // Backward compatibility for older non EIP 1193 subscriptions\n        // this.emit('data', null, payload)\n        });\n    }\n    /**\n   * Returns whether the inpage provider is connected to Torus.\n   */ isConnected() {\n        return this._state.isConnected;\n    }\n    /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   *\n   * @param args - The RPC request arguments.\n   * @returns A Promise that resolves with the result of the RPC method,\n   * or rejects if an error is encountered.\n   */ async request(args) {\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.rpcErrors.invalidRequest({\n                message: messages.errors.invalidRequestArgs(),\n                data: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, args || {}), {}, {\n                    cause: messages.errors.invalidRequestArgs()\n                })\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.rpcErrors.invalidRequest({\n                message: messages.errors.invalidRequestMethod(),\n                data: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, args || {}), {}, {\n                    cause: messages.errors.invalidRequestArgs()\n                })\n            });\n        }\n        if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.rpcErrors.invalidRequest({\n                message: messages.errors.invalidRequestParams(),\n                data: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, args || {}), {}, {\n                    cause: messages.errors.invalidRequestArgs()\n                })\n            });\n        }\n        return new Promise((resolve, reject)=>{\n            this._rpcRequest({\n                method,\n                params\n            }, getRpcPromiseCallback(resolve, reject));\n        });\n    }\n    /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   *\n   * @param payload - The RPC request object.\n   * @param cb - The callback function.\n   */ sendAsync(payload, callback) {\n        this._rpcRequest(payload, callback);\n    }\n    // Private Methods\n    //= ===================\n    /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */ async _initializeState() {\n        try {\n            const { accounts, chainId, isUnlocked, networkVersion } = await this.request({\n                method: \"wallet_getProviderState\"\n            });\n            // indicate that we've connected, for EIP-1193 compliance\n            this.emit(\"connect\", {\n                chainId\n            });\n            this._handleChainChanged({\n                chainId,\n                networkVersion\n            });\n            this._handleUnlockStateChanged({\n                accounts,\n                isUnlocked\n            });\n            this._handleAccountsChanged(accounts);\n        } catch (error) {\n            log.error(\"MetaMask: Failed to get initial state. Please report this bug.\", error);\n        } finally{\n            log.info(\"initialized state\");\n            this._state.initialized = true;\n            this.emit(\"_initialized\");\n        }\n    }\n    /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound.\n   *\n   * @param payload - The RPC request object.\n   * @param callback - The consumer's callback.\n   * @param isInternal - false - Whether the request is internal.\n   */ _rpcRequest(payload, callback) {\n        let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        let cb = callback;\n        const _payload = payload;\n        if (!Array.isArray(_payload)) {\n            if (!_payload.jsonrpc) {\n                _payload.jsonrpc = \"2.0\";\n            }\n            if (_payload.method === \"eth_accounts\" || _payload.method === \"eth_requestAccounts\") {\n                // handle accounts changing\n                cb = (err, res)=>{\n                    this._handleAccountsChanged(res.result || [], _payload.method === \"eth_accounts\", isInternal);\n                    callback(err, res);\n                };\n            } else if (_payload.method === \"wallet_getProviderState\") {\n                this._rpcEngine.handle(payload, cb);\n                return;\n            }\n        }\n        this.tryPreopenHandle(_payload, cb);\n    }\n    /**\n   * Submits an RPC request for the given method, with the given params.\n   *\n   * @deprecated Use \"request\" instead.\n   * @param method - The method to request.\n   * @param params - Any params for the method.\n   * @returns A Promise that resolves with the JSON-RPC response object for the\n   * request.\n   */ /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   *\n   * @deprecated Use \"request\" instead.\n   * @param payload - A JSON-RPC request object.\n   * @param callback - An error-first callback that will receive the JSON-RPC\n   * response object.\n   */ /**\n   * Accepts a JSON-RPC request object, and synchronously returns the cached result\n   * for the given method. Only supports 4 specific RPC methods.\n   *\n   * @deprecated Use \"request\" instead.\n   * @param payload - A JSON-RPC request object.\n   * @returns A JSON-RPC response object.\n   */ send(methodOrPayload, callbackOrArgs) {\n        if (typeof methodOrPayload === \"string\" && (!callbackOrArgs || Array.isArray(callbackOrArgs))) {\n            return new Promise((resolve, reject)=>{\n                try {\n                    this._rpcRequest({\n                        method: methodOrPayload,\n                        params: callbackOrArgs\n                    }, getRpcPromiseCallback(resolve, reject, false));\n                } catch (error) {\n                    reject(error);\n                }\n            });\n        }\n        if (methodOrPayload && typeof methodOrPayload === \"object\" && typeof callbackOrArgs === \"function\") {\n            return this._rpcRequest(methodOrPayload, callbackOrArgs);\n        }\n        return this._sendSync(methodOrPayload);\n    }\n    /**\n   * DEPRECATED.\n   * Internal backwards compatibility method, used in send.\n   */ _sendSync(payload) {\n        let result;\n        switch(payload.method){\n            case \"eth_accounts\":\n                result = this.selectedAddress ? [\n                    this.selectedAddress\n                ] : [];\n                break;\n            case \"eth_coinbase\":\n                result = this.selectedAddress || null;\n                break;\n            case \"eth_uninstallFilter\":\n                this._rpcRequest(payload, NOOP);\n                result = true;\n                break;\n            case \"net_version\":\n                result = this.networkVersion || null;\n                break;\n            default:\n                throw new Error(messages.errors.unsupportedSync(payload.method));\n        }\n        return {\n            id: payload.id,\n            jsonrpc: payload.jsonrpc,\n            result\n        };\n    }\n    /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits MetaMaskInpageProvider#connect\n   */ _handleConnect(chainId) {\n        if (!this._state.isConnected) {\n            this._state.isConnected = true;\n            this.emit(\"connect\", {\n                chainId\n            });\n            log.debug(messages.info.connected(chainId));\n        }\n    }\n    /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits MetaMaskInpageProvider#disconnect\n   */ _handleDisconnect(isRecoverable, errorMessage) {\n        if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n            this._state.isConnected = false;\n            let error;\n            if (isRecoverable) {\n                error = new _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.EthereumProviderError(1013, // Try again later\n                errorMessage || messages.errors.disconnected());\n                log.debug(error);\n            } else {\n                error = new _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_6__.EthereumProviderError(1011, // Internal error\n                errorMessage || messages.errors.permanentlyDisconnected());\n                log.error(error);\n                this.chainId = null;\n                this._state.accounts = null;\n                this.selectedAddress = null;\n                this._state.isUnlocked = false;\n                this._state.isPermanentlyDisconnected = true;\n            }\n            this.emit(\"disconnect\", error);\n        }\n    }\n    /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits MetamaskInpageProvider#disconnect\n   */ _handleStreamDisconnect(streamName, error) {\n        logStreamDisconnectWarning(streamName, error, this);\n        this._handleDisconnect(false, error ? error.message : undefined);\n    }\n    /**\n   * Called when accounts may have changed.\n   */ _handleAccountsChanged(accounts) {\n        let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        // defensive programming\n        let finalAccounts = accounts;\n        if (!Array.isArray(finalAccounts)) {\n            log.error(\"MetaMask: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n            finalAccounts = [];\n        }\n        for (const account of accounts){\n            if (typeof account !== \"string\") {\n                log.error(\"MetaMask: Received non-string account. Please report this bug.\", accounts);\n                finalAccounts = [];\n                break;\n            }\n        }\n        // emit accountsChanged if anything about the accounts array has changed\n        if (!fast_deep_equal__WEBPACK_IMPORTED_MODULE_7___default()(this._state.accounts, finalAccounts)) {\n            // we should always have the correct accounts even before eth_accounts\n            // returns, except in cases where isInternal is true\n            if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n                log.error('MetaMask: \"eth_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n            }\n            this._state.accounts = finalAccounts;\n            this.emit(\"accountsChanged\", finalAccounts);\n        }\n        // handle selectedAddress\n        if (this.selectedAddress !== finalAccounts[0]) {\n            this.selectedAddress = finalAccounts[0] || null;\n        }\n    }\n    /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits MetamaskInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */ _handleChainChanged() {\n        let { chainId, networkVersion } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!chainId || !networkVersion) {\n            log.error(\"MetaMask: Received invalid network parameters. Please report this bug.\", {\n                chainId,\n                networkVersion\n            });\n            return;\n        }\n        if (networkVersion === \"loading\") {\n            this._handleDisconnect(true);\n        } else {\n            this._handleConnect(chainId);\n            if (chainId !== this.chainId) {\n                this.chainId = chainId;\n                if (this._state.initialized) {\n                    this.emit(\"chainChanged\", this.chainId);\n                }\n            }\n        }\n    }\n    /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */ _handleUnlockStateChanged() {\n        let { accounts, isUnlocked } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (typeof isUnlocked !== \"boolean\") {\n            log.error(\"MetaMask: Received invalid isUnlocked parameter. Please report this bug.\", {\n                isUnlocked\n            });\n            return;\n        }\n        if (isUnlocked !== this._state.isUnlocked) {\n            this._state.isUnlocked = isUnlocked;\n            this._handleAccountsChanged(accounts || []);\n        }\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(TorusInpageProvider, \"_defaultState\", {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false\n});\nclass PopupHandler extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.SafeEventEmitter {\n    constructor(_ref){\n        let { url, target, features, timeout = 30000 } = _ref;\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"url\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"target\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"features\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"window\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"windowTimer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"iClosedWindow\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"timeout\", void 0);\n        this.url = url;\n        this.target = target || \"_blank\";\n        this.features = features || getPopupFeatures();\n        this.window = undefined;\n        this.windowTimer = undefined;\n        this.iClosedWindow = false;\n        this.timeout = timeout;\n        this._setupTimer();\n    }\n    _setupTimer() {\n        this.windowTimer = Number(setInterval(()=>{\n            if (this.window && this.window.closed) {\n                clearInterval(this.windowTimer);\n                setTimeout(()=>{\n                    if (!this.iClosedWindow) {\n                        this.emit(\"close\");\n                    }\n                    this.iClosedWindow = false;\n                    this.window = undefined;\n                }, this.timeout);\n            }\n            if (this.window === undefined) clearInterval(this.windowTimer);\n        }, 500));\n    }\n    open() {\n        var _this$window;\n        this.window = window.open(this.url.href, this.target, this.features);\n        if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    }\n    close() {\n        this.iClosedWindow = true;\n        if (this.window) this.window.close();\n    }\n    redirect(locationReplaceOnRedirect) {\n        if (locationReplaceOnRedirect) {\n            window.location.replace(this.url.href);\n        } else {\n            window.location.href = this.url.href;\n        }\n    }\n}\n/**\n * Returns whether the given image URL exists\n * @param url - the url of the image\n * @returns - whether the image exists\n */ function imgExists(url) {\n    return new Promise((resolve, reject)=>{\n        try {\n            const img = document.createElement(\"img\");\n            img.onload = ()=>resolve(true);\n            img.onerror = ()=>resolve(false);\n            img.src = url;\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n/**\n * Extracts a name for the site from the DOM\n */ const getSiteName = (window1)=>{\n    const { document: document1 } = window1;\n    const siteName = document1.querySelector('head > meta[property=\"og:site_name\"]');\n    if (siteName) {\n        return siteName.content;\n    }\n    const metaTitle = document1.querySelector('head > meta[name=\"title\"]');\n    if (metaTitle) {\n        return metaTitle.content;\n    }\n    if (document1.title && document1.title.length > 0) {\n        return document1.title;\n    }\n    return window1.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */ async function getSiteIcon(window1) {\n    const { document: document1 } = window1;\n    // Use the site's favicon if it exists\n    let icon = document1.querySelector('head > link[rel=\"shortcut icon\"]');\n    if (icon && await imgExists(icon.href)) {\n        return icon.href;\n    }\n    // Search through available icons in no particular order\n    icon = Array.from(document1.querySelectorAll('head > link[rel=\"icon\"]')).find((_icon)=>Boolean(_icon.href));\n    if (icon && await imgExists(icon.href)) {\n        return icon.href;\n    }\n    return null;\n}\n/**\n * Gets site metadata and returns it\n *\n */ const getSiteMetadata = async ()=>({\n        name: getSiteName(window),\n        icon: await getSiteIcon(window)\n    });\n/**\n * Sends site metadata over an RPC request.\n */ async function sendSiteMetadata(engine) {\n    try {\n        const domainMetadata = await getSiteMetadata();\n        // call engine.handle directly to avoid normal RPC request handling\n        engine.handle({\n            jsonrpc: \"2.0\",\n            id: getPreopenInstanceId(),\n            method: \"wallet_sendDomainMetadata\",\n            params: domainMetadata\n        }, NOOP);\n    } catch (error) {\n        log.error({\n            message: messages.errors.sendSiteMetadata(),\n            originalError: error\n        });\n    }\n}\nconst _excluded = [\n    \"host\",\n    \"chainId\",\n    \"networkName\"\n];\nconst UNSAFE_METHODS = [\n    \"eth_sendTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"personal_sign\",\n    \"eth_getEncryptionPublicKey\",\n    \"eth_decrypt\",\n    \"wallet_addEthereumChain\",\n    \"wallet_switchEthereumChain\"\n];\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n    try {\n        if (typeof document === \"undefined\") return;\n        const torusIframeHtml = document.createElement(\"link\");\n        const { torusUrl } = await getTorusUrl(\"production\", {\n            version: \"\"\n        });\n        torusIframeHtml.href = `${torusUrl}/popup`;\n        torusIframeHtml.crossOrigin = \"anonymous\";\n        torusIframeHtml.type = \"text/html\";\n        torusIframeHtml.rel = \"prefetch\";\n        if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n            if (torusIframeHtml.relList.supports(\"prefetch\")) {\n                document.head.appendChild(torusIframeHtml);\n            }\n        }\n    } catch (error) {\n        log.warn(error);\n    }\n})();\nclass Torus {\n    constructor(){\n        let { buttonPosition = BUTTON_POSITION.BOTTOM_LEFT, buttonSize = 56, modalZIndex = 99999, apiKey = \"torus-default\" } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"buttonPosition\", BUTTON_POSITION.BOTTOM_LEFT);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"buttonSize\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"torusUrl\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"torusIframe\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"styleLink\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"isLoggedIn\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"isInitialized\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"torusWidgetVisibility\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"torusAlert\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"apiKey\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"modalZIndex\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"alertZIndex\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"torusAlertContainer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"isIframeFullScreen\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"whiteLabel\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"requestedVerifier\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"currentVerifier\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"embedTranslations\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"ethereum\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"provider\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"communicationMux\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"isLoginCallback\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"paymentProviders\", configuration.paymentProviders);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"loginHint\", \"\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"useWalletConnect\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"isCustomLogin\", false);\n        this.buttonPosition = buttonPosition;\n        this.buttonSize = buttonSize;\n        this.torusUrl = \"\";\n        this.isLoggedIn = false; // ethereum.enable working\n        this.isInitialized = false; // init done\n        this.torusWidgetVisibility = true;\n        this.requestedVerifier = \"\";\n        this.currentVerifier = \"\";\n        this.apiKey = apiKey;\n        (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.setAPIKey)(apiKey);\n        this.modalZIndex = modalZIndex;\n        this.alertZIndex = modalZIndex + 1000;\n        this.isIframeFullScreen = false;\n    }\n    async init() {\n        let { buildEnv = TORUS_BUILD_ENV.PRODUCTION, enableLogging = false, network = {\n            host: \"mainnet\",\n            chainId: null,\n            networkName: \"\",\n            blockExplorer: \"\",\n            ticker: \"\",\n            tickerName: \"\"\n        }, loginConfig = {}, showTorusButton = true, integrity = {\n            version: \"\"\n        }, whiteLabel, useWalletConnect = false, mfaLevel = \"default\" } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (this.isInitialized) throw new Error(\"Already initialized\");\n        const { torusUrl, logLevel } = await getTorusUrl(buildEnv, integrity);\n        log.info(torusUrl, \"url loaded\");\n        this.torusUrl = torusUrl;\n        this.whiteLabel = whiteLabel;\n        this.useWalletConnect = useWalletConnect;\n        this.isCustomLogin = !!(loginConfig && Object.keys(loginConfig).length > 0) || !!(whiteLabel && Object.keys(whiteLabel).length > 0);\n        log.setDefaultLevel(logLevel);\n        if (enableLogging) log.enableAll();\n        else log.disableAll();\n        this.torusWidgetVisibility = showTorusButton;\n        const torusIframeUrl = new URL(torusUrl);\n        if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"popup\";\n        else torusIframeUrl.pathname += \"/popup\";\n        torusIframeUrl.hash = `#isCustomLogin=${this.isCustomLogin}`;\n        // Iframe code\n        this.torusIframe = htmlToElement(`<iframe\n        id=\"torusIframe\"\n        allow=${useWalletConnect ? \"camera\" : \"\"}\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%; color-scheme: none;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex}\"\n      ></iframe>`);\n        this.torusAlertContainer = htmlToElement('<div id=\"torusAlertContainer\"></div>');\n        this.torusAlertContainer.style.display = \"none\";\n        this.torusAlertContainer.style.setProperty(\"z-index\", this.alertZIndex.toString());\n        const link = window.document.createElement(\"link\");\n        link.setAttribute(\"rel\", \"stylesheet\");\n        link.setAttribute(\"type\", \"text/css\");\n        link.setAttribute(\"href\", `${torusUrl}/css/widget.css`);\n        this.styleLink = link;\n        const { defaultLanguage = getUserLanguage(), customTranslations = {} } = this.whiteLabel || {};\n        const mergedTranslations = lodash_merge__WEBPACK_IMPORTED_MODULE_5___default()(configuration.translations, customTranslations);\n        const languageTranslations = mergedTranslations[defaultLanguage] || configuration.translations[getUserLanguage()];\n        this.embedTranslations = languageTranslations.embed;\n        return new Promise((resolve, reject)=>{\n            this.torusIframe.onload = async ()=>{\n                // only do this if iframe is not full screen\n                this._setupWeb3();\n                const initStream = this.communicationMux.getStream(\"init_stream\");\n                initStream.on(\"data\", (chunk)=>{\n                    const { name, data, error } = chunk;\n                    if (name === \"init_complete\" && data.success) {\n                        // resolve promise\n                        this.isInitialized = true;\n                        this._displayIframe(this.isIframeFullScreen);\n                        resolve(undefined);\n                    } else if (error) {\n                        reject(new Error(error));\n                    }\n                });\n                initStream.write({\n                    name: \"init_stream\",\n                    data: {\n                        loginConfig,\n                        whiteLabel: this.whiteLabel,\n                        buttonPosition: this.buttonPosition,\n                        buttonSize: this.buttonSize,\n                        torusWidgetVisibility: this.torusWidgetVisibility,\n                        apiKey: this.apiKey,\n                        network,\n                        mfaLevel\n                    }\n                });\n            };\n            window.document.head.appendChild(this.styleLink);\n            window.document.body.appendChild(this.torusIframe);\n            window.document.body.appendChild(this.torusAlertContainer);\n        });\n    }\n    login() {\n        let { verifier = \"\", login_hint: loginHint = \"\" } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!this.isInitialized) throw new Error(\"Call init() first\");\n        this.requestedVerifier = verifier;\n        this.loginHint = loginHint;\n        return this.ethereum.enable();\n    }\n    logout() {\n        return new Promise((resolve, reject)=>{\n            if (!this.isLoggedIn) {\n                reject(new Error(\"User has not logged in yet\"));\n                return;\n            }\n            const logOutStream = this.communicationMux.getStream(\"logout\");\n            logOutStream.write({\n                name: \"logOut\"\n            });\n            const statusStream = this.communicationMux.getStream(\"status\");\n            const statusStreamHandler = (arg)=>{\n                const status = arg;\n                if (!status.loggedIn) {\n                    this.isLoggedIn = false;\n                    this.currentVerifier = \"\";\n                    this.requestedVerifier = \"\";\n                    resolve();\n                } else reject(new Error(\"Some Error Occured\"));\n            };\n            handleStream(statusStream, \"data\", statusStreamHandler);\n        });\n    }\n    async cleanUp() {\n        if (this.isLoggedIn) {\n            await this.logout();\n        }\n        this.clearInit();\n    }\n    clearInit() {\n        function isElement(element) {\n            return element instanceof Element || element instanceof HTMLDocument;\n        }\n        if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n            this.styleLink.remove();\n            this.styleLink = undefined;\n        }\n        if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n            this.torusIframe.remove();\n            this.torusIframe = undefined;\n        }\n        if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n            this.torusAlert = undefined;\n            this.torusAlertContainer.remove();\n            this.torusAlertContainer = undefined;\n        }\n        this.isInitialized = false;\n    }\n    hideTorusButton() {\n        this.torusWidgetVisibility = false;\n        this._sendWidgetVisibilityStatus(false);\n        this._displayIframe();\n    }\n    showTorusButton() {\n        this.torusWidgetVisibility = true;\n        this._sendWidgetVisibilityStatus(true);\n        this._displayIframe();\n    }\n    setProvider(_ref) {\n        let { host = \"mainnet\", chainId = null, networkName = \"\" } = _ref, rest = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1___default()(_ref, _excluded);\n        return new Promise((resolve, reject)=>{\n            const providerChangeStream = this.communicationMux.getStream(\"provider_change\");\n            const handler = (arg)=>{\n                const chunk = arg;\n                const { err, success } = chunk.data;\n                log.info(chunk);\n                if (err) {\n                    reject(err);\n                } else if (success) {\n                    resolve();\n                } else reject(new Error(\"some error occurred\"));\n            };\n            handleStream(providerChangeStream, \"data\", handler);\n            const preopenInstanceId = getPreopenInstanceId();\n            this._handleWindow(preopenInstanceId, {\n                target: \"_blank\",\n                features: FEATURES_PROVIDER_CHANGE_WINDOW\n            });\n            providerChangeStream.write({\n                name: \"show_provider_change\",\n                data: {\n                    network: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n                        host,\n                        chainId,\n                        networkName\n                    }, rest),\n                    preopenInstanceId,\n                    override: false\n                }\n            });\n        });\n    }\n    showWallet(path) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const showWalletStream = this.communicationMux.getStream(\"show_wallet\");\n        const finalPath = path ? `/${path}` : \"\";\n        showWalletStream.write({\n            name: \"show_wallet\",\n            data: {\n                path: finalPath\n            }\n        });\n        const showWalletHandler = (arg)=>{\n            const chunk = arg;\n            if (chunk.name === \"show_wallet_instance\") {\n                // Let the error propogate up (hence, no try catch)\n                const { instanceId } = chunk.data;\n                const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n                // Using URL constructor to prevent js injection and allow parameter validation.!\n                finalUrl.searchParams.append(\"integrity\", \"true\");\n                finalUrl.searchParams.append(\"instanceId\", instanceId);\n                Object.keys(params).forEach((x)=>{\n                    finalUrl.searchParams.append(x, params[x]);\n                });\n                finalUrl.hash = `#isCustomLogin=${this.isCustomLogin}`;\n                const walletWindow = new PopupHandler({\n                    url: finalUrl,\n                    features: FEATURES_DEFAULT_WALLET_WINDOW\n                });\n                walletWindow.open();\n            }\n        };\n        handleStream(showWalletStream, \"data\", showWalletHandler);\n    }\n    async getPublicAddress(_ref2) {\n        let { verifier, verifierId, isExtended = false } = _ref2;\n        if (!configuration.supportedVerifierList.includes(verifier) || !WALLET_OPENLOGIN_VERIFIER_MAP[verifier]) throw new Error(\"Unsupported verifier\");\n        const walletVerifier = verifier;\n        const openloginVerifier = WALLET_OPENLOGIN_VERIFIER_MAP[verifier];\n        const url = new URL(`https://api.tor.us/lookup/torus`);\n        url.searchParams.append(\"verifier\", openloginVerifier);\n        url.searchParams.append(\"verifierId\", verifierId);\n        url.searchParams.append(\"walletVerifier\", walletVerifier);\n        url.searchParams.append(\"network\", \"mainnet\");\n        url.searchParams.append(\"isExtended\", isExtended.toString());\n        return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.get)(url.href, {\n            headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n            }\n        }, {\n            useAPIKey: true\n        });\n    }\n    getUserInfo(message) {\n        return new Promise((resolve, reject)=>{\n            if (this.isLoggedIn) {\n                const userInfoAccessStream = this.communicationMux.getStream(\"user_info_access\");\n                userInfoAccessStream.write({\n                    name: \"user_info_access_request\"\n                });\n                const userInfoAccessHandler = (arg)=>{\n                    const chunk = arg;\n                    const { name, data: { approved, payload, rejected, newRequest } } = chunk;\n                    if (name === \"user_info_access_response\") {\n                        if (approved) {\n                            resolve(payload);\n                        } else if (rejected) {\n                            reject(new Error(\"User rejected the request\"));\n                        } else if (newRequest) {\n                            const userInfoStream = this.communicationMux.getStream(\"user_info\");\n                            const userInfoHandler = (arg2)=>{\n                                const handlerChunk = arg2;\n                                if (handlerChunk.name === \"user_info_response\") {\n                                    if (handlerChunk.data.approved) {\n                                        resolve(handlerChunk.data.payload);\n                                    } else {\n                                        reject(new Error(\"User rejected the request\"));\n                                    }\n                                }\n                            };\n                            handleStream(userInfoStream, \"data\", userInfoHandler);\n                            const preopenInstanceId = getPreopenInstanceId();\n                            this._handleWindow(preopenInstanceId, {\n                                target: \"_blank\",\n                                features: FEATURES_PROVIDER_CHANGE_WINDOW\n                            });\n                            userInfoStream.write({\n                                name: \"user_info_request\",\n                                data: {\n                                    message,\n                                    preopenInstanceId\n                                }\n                            });\n                        }\n                    }\n                };\n                handleStream(userInfoAccessStream, \"data\", userInfoAccessHandler);\n            } else reject(new Error(\"User has not logged in yet\"));\n        });\n    }\n    initiateTopup(provider, params) {\n        return new Promise((resolve, reject)=>{\n            if (this.isInitialized) {\n                const { errors, isValid } = validatePaymentProvider(provider, params);\n                if (!isValid) {\n                    reject(new Error(JSON.stringify(errors)));\n                    return;\n                }\n                const topupStream = this.communicationMux.getStream(\"topup\");\n                const topupHandler = (arg)=>{\n                    const chunk = arg;\n                    if (chunk.name === \"topup_response\") {\n                        if (chunk.data.success) {\n                            resolve(chunk.data.success);\n                        } else {\n                            reject(new Error(chunk.data.error));\n                        }\n                    }\n                };\n                handleStream(topupStream, \"data\", topupHandler);\n                const preopenInstanceId = getPreopenInstanceId();\n                this._handleWindow(preopenInstanceId);\n                topupStream.write({\n                    name: \"topup_request\",\n                    data: {\n                        provider,\n                        params,\n                        preopenInstanceId\n                    }\n                });\n            } else reject(new Error(\"Torus is not initialized yet\"));\n        });\n    }\n    async loginWithPrivateKey(loginParams) {\n        const { privateKey, userInfo } = loginParams;\n        return new Promise((resolve, reject)=>{\n            if (this.isInitialized) {\n                if (Buffer.from(privateKey, \"hex\").length !== 32) {\n                    reject(new Error(\"Invalid private key, Please provide a 32 byte valid secp25k1 private key\"));\n                    return;\n                }\n                const loginPrivKeyStream = this.communicationMux.getStream(\"login_with_private_key\");\n                const loginHandler = (arg)=>{\n                    const chunk = arg;\n                    if (chunk.name === \"login_with_private_key_response\") {\n                        if (chunk.data.success) {\n                            resolve(chunk.data.success);\n                        } else {\n                            reject(new Error(chunk.data.error));\n                        }\n                    }\n                };\n                handleStream(loginPrivKeyStream, \"data\", loginHandler);\n                loginPrivKeyStream.write({\n                    name: \"login_with_private_key_request\",\n                    data: {\n                        privateKey,\n                        userInfo\n                    }\n                });\n            } else reject(new Error(\"Torus is not initialized yet\"));\n        });\n    }\n    async showWalletConnectScanner() {\n        if (!this.useWalletConnect) throw new Error(\"Set `useWalletConnect` as true in init function options to use wallet connect scanner\");\n        return new Promise((resolve, reject)=>{\n            if (this.isLoggedIn) {\n                const walletConnectStream = this.communicationMux.getStream(\"wallet_connect_stream\");\n                const walletConnectHandler = (arg)=>{\n                    const chunk = arg;\n                    if (chunk.name === \"wallet_connect_stream_res\") {\n                        if (chunk.data.success) {\n                            resolve(chunk.data.success);\n                        } else {\n                            reject(new Error(chunk.data.error));\n                        }\n                        this._displayIframe();\n                    }\n                };\n                handleStream(walletConnectStream, \"data\", walletConnectHandler);\n                walletConnectStream.write({\n                    name: \"wallet_connect_stream_req\"\n                });\n                this._displayIframe(true);\n            } else reject(new Error(\"User has not logged in yet\"));\n        });\n    }\n    _handleWindow(preopenInstanceId) {\n        let { url, target, features } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (preopenInstanceId) {\n            const windowStream = this.communicationMux.getStream(\"window\");\n            const finalUrl = new URL(url || `${this.torusUrl}/redirect?preopenInstanceId=${preopenInstanceId}`);\n            if (finalUrl.hash) finalUrl.hash += `&isCustomLogin=${this.isCustomLogin}`;\n            else finalUrl.hash = `#isCustomLogin=${this.isCustomLogin}`;\n            const handledWindow = new PopupHandler({\n                url: finalUrl,\n                target,\n                features\n            });\n            handledWindow.open();\n            if (!handledWindow.window) {\n                this._createPopupBlockAlert(preopenInstanceId, finalUrl.href);\n                return;\n            }\n            windowStream.write({\n                name: \"opened_window\",\n                data: {\n                    preopenInstanceId\n                }\n            });\n            const closeHandler = (_ref3)=>{\n                let { preopenInstanceId: receivedId, close } = _ref3;\n                if (receivedId === preopenInstanceId && close) {\n                    handledWindow.close();\n                    windowStream.removeListener(\"data\", closeHandler);\n                }\n            };\n            windowStream.on(\"data\", closeHandler);\n            handledWindow.once(\"close\", ()=>{\n                windowStream.write({\n                    data: {\n                        preopenInstanceId,\n                        closed: true\n                    }\n                });\n                windowStream.removeListener(\"data\", closeHandler);\n            });\n        }\n    }\n    _setEmbedWhiteLabel(element) {\n        // Set whitelabel\n        const { theme } = this.whiteLabel || {};\n        if (theme) {\n            const { isDark = false, colors = {} } = theme;\n            if (isDark) element.classList.add(\"torus-dark\");\n            if (colors.torusBrand1) element.style.setProperty(\"--torus-brand-1\", colors.torusBrand1);\n            if (colors.torusGray2) element.style.setProperty(\"--torus-gray-2\", colors.torusGray2);\n        }\n    }\n    _getLogoUrl() {\n        var _this$whiteLabel;\n        let logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n        if ((_this$whiteLabel = this.whiteLabel) !== null && _this$whiteLabel !== void 0 && (_this$whiteLabel = _this$whiteLabel.theme) !== null && _this$whiteLabel !== void 0 && _this$whiteLabel.isDark) {\n            var _this$whiteLabel2;\n            logoUrl = ((_this$whiteLabel2 = this.whiteLabel) === null || _this$whiteLabel2 === void 0 ? void 0 : _this$whiteLabel2.logoLight) || logoUrl;\n        } else {\n            var _this$whiteLabel3;\n            logoUrl = ((_this$whiteLabel3 = this.whiteLabel) === null || _this$whiteLabel3 === void 0 ? void 0 : _this$whiteLabel3.logoDark) || logoUrl;\n        }\n        return logoUrl;\n    }\n    _sendWidgetVisibilityStatus(status) {\n        const torusWidgetVisibilityStream = this.communicationMux.getStream(\"torus-widget-visibility\");\n        torusWidgetVisibilityStream.write({\n            data: status\n        });\n    }\n    _displayIframe() {\n        let isFull = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        const style = {};\n        const size = this.buttonSize + 14; // 15px padding\n        // set phase\n        if (!isFull) {\n            style.display = this.torusWidgetVisibility ? \"block\" : \"none\";\n            style.height = `${size}px`;\n            style.width = `${size}px`;\n            switch(this.buttonPosition){\n                case BUTTON_POSITION.TOP_LEFT:\n                    style.top = \"0px\";\n                    style.left = \"0px\";\n                    style.right = \"auto\";\n                    style.bottom = \"auto\";\n                    break;\n                case BUTTON_POSITION.TOP_RIGHT:\n                    style.top = \"0px\";\n                    style.right = \"0px\";\n                    style.left = \"auto\";\n                    style.bottom = \"auto\";\n                    break;\n                case BUTTON_POSITION.BOTTOM_RIGHT:\n                    style.bottom = \"0px\";\n                    style.right = \"0px\";\n                    style.top = \"auto\";\n                    style.left = \"auto\";\n                    break;\n                case BUTTON_POSITION.BOTTOM_LEFT:\n                default:\n                    style.bottom = \"0px\";\n                    style.left = \"0px\";\n                    style.top = \"auto\";\n                    style.right = \"auto\";\n                    break;\n            }\n        } else {\n            style.display = \"block\";\n            style.width = \"100%\";\n            style.height = \"100%\";\n            style.top = \"0px\";\n            style.right = \"0px\";\n            style.left = \"0px\";\n            style.bottom = \"0px\";\n        }\n        Object.assign(this.torusIframe.style, style);\n        this.isIframeFullScreen = isFull;\n    }\n    _setupWeb3() {\n        log.info(\"setupWeb3 running\");\n        // setup background connection\n        const metamaskStream = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.BasePostMessageStream({\n            name: \"embed_metamask\",\n            target: \"iframe_metamask\",\n            targetWindow: this.torusIframe.contentWindow,\n            targetOrigin: new URL(this.torusUrl).origin\n        });\n        // Due to compatibility reasons, we should not set up multiplexing on window.metamaskstream\n        // because the MetamaskInpageProvider also attempts to do so.\n        // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n        const communicationStream = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.BasePostMessageStream({\n            name: \"embed_comm\",\n            target: \"iframe_comm\",\n            targetWindow: this.torusIframe.contentWindow,\n            targetOrigin: new URL(this.torusUrl).origin\n        });\n        // Backward compatibility with Gotchi :)\n        // window.metamaskStream = this.communicationStream\n        // compose the inpage provider\n        const inpageProvider = new TorusInpageProvider(metamaskStream);\n        // detect eth_requestAccounts and pipe to enable for now\n        const detectAccountRequestPrototypeModifier = (m)=>{\n            // @ts-ignore\n            const originalMethod = inpageProvider[m];\n            // @ts-ignore\n            inpageProvider[m] = function providerFunc(method) {\n                if (method && method === \"eth_requestAccounts\") {\n                    return inpageProvider.enable();\n                }\n                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    args[_key - 1] = arguments[_key];\n                }\n                return originalMethod.apply(this, [\n                    method,\n                    ...args\n                ]);\n            };\n        };\n        detectAccountRequestPrototypeModifier(\"send\");\n        detectAccountRequestPrototypeModifier(\"sendAsync\");\n        inpageProvider.enable = ()=>{\n            return new Promise((resolve, reject)=>{\n                // If user is already logged in, we assume they have given access to the website\n                inpageProvider.sendAsync({\n                    jsonrpc: \"2.0\",\n                    id: getPreopenInstanceId(),\n                    method: \"eth_requestAccounts\",\n                    params: []\n                }, (err, response)=>{\n                    const { result: res } = response || {};\n                    if (err) {\n                        setTimeout(()=>{\n                            reject(err);\n                        }, 50);\n                    } else if (Array.isArray(res) && res.length > 0) {\n                        // If user is already rehydrated, resolve this\n                        // else wait for something to be written to status stream\n                        const handleLoginCb = ()=>{\n                            if (this.requestedVerifier !== \"\" && this.currentVerifier !== this.requestedVerifier) {\n                                const { requestedVerifier } = this;\n                                // eslint-disable-next-line promise/no-promise-in-callback\n                                this.logout()// eslint-disable-next-line promise/always-return\n                                .then((_)=>{\n                                    this.requestedVerifier = requestedVerifier;\n                                    this._showLoginPopup(true, resolve, reject);\n                                }).catch((error)=>reject(error));\n                            } else {\n                                resolve(res);\n                            }\n                        };\n                        if (this.isLoggedIn) {\n                            handleLoginCb();\n                        } else {\n                            this.isLoginCallback = handleLoginCb;\n                        }\n                    } else {\n                        // set up listener for login\n                        this._showLoginPopup(true, resolve, reject);\n                    }\n                });\n            });\n        };\n        inpageProvider.tryPreopenHandle = (payload, cb)=>{\n            const _payload = payload;\n            if (!Array.isArray(_payload) && UNSAFE_METHODS.includes(_payload.method)) {\n                const preopenInstanceId = getPreopenInstanceId();\n                this._handleWindow(preopenInstanceId, {\n                    target: \"_blank\",\n                    features: FEATURES_CONFIRM_WINDOW\n                });\n                _payload.preopenInstanceId = preopenInstanceId;\n            }\n            inpageProvider._rpcEngine.handle(_payload, cb);\n        };\n        // Work around for web3@1.0 deleting the bound `sendAsync` but not the unbound\n        // `sendAsync` method on the prototype, causing `this` reference issues with drizzle\n        const proxiedInpageProvider = new Proxy(inpageProvider, {\n            // straight up lie that we deleted the property so that it doesnt\n            // throw an error in strict mode\n            deleteProperty: ()=>true\n        });\n        this.ethereum = proxiedInpageProvider;\n        const communicationMux = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.setupMultiplex)(communicationStream);\n        this.communicationMux = communicationMux;\n        const windowStream = communicationMux.getStream(\"window\");\n        windowStream.on(\"data\", (chunk)=>{\n            if (chunk.name === \"create_window\") {\n                // url is the url we need to open\n                // we can pass the final url upfront so that it removes the step of redirecting to /redirect and waiting for finalUrl\n                this._createPopupBlockAlert(chunk.data.preopenInstanceId, chunk.data.url);\n            }\n        });\n        // show torus widget if button clicked\n        const widgetStream = communicationMux.getStream(\"widget\");\n        widgetStream.on(\"data\", (chunk)=>{\n            const { data } = chunk;\n            this._displayIframe(data);\n        });\n        // Show torus button if wallet has been hydrated/detected\n        const statusStream = communicationMux.getStream(\"status\");\n        statusStream.on(\"data\", (status)=>{\n            // login\n            if (status.loggedIn) {\n                this.isLoggedIn = status.loggedIn;\n                this.currentVerifier = status.verifier;\n            } else this._displayIframe();\n            if (this.isLoginCallback) {\n                this.isLoginCallback();\n                delete this.isLoginCallback;\n            }\n        });\n        this.provider = proxiedInpageProvider;\n        if (this.provider.shouldSendMetadata) sendSiteMetadata(this.provider._rpcEngine);\n        inpageProvider._initializeState();\n        log.debug(\"Torus - injected provider\");\n    }\n    _showLoginPopup(calledFromEmbed, resolve, reject) {\n        const loginHandler = (arg)=>{\n            const data = arg;\n            const { err, selectedAddress } = data;\n            if (err) {\n                log.error(err);\n                if (reject) reject(err);\n            } else if (resolve) resolve([\n                selectedAddress\n            ]);\n            if (this.isIframeFullScreen) this._displayIframe();\n        };\n        const oauthStream = this.communicationMux.getStream(\"oauth\");\n        if (!this.requestedVerifier) {\n            this._displayIframe(true);\n            handleStream(oauthStream, \"data\", loginHandler);\n            oauthStream.write({\n                name: \"oauth_modal\",\n                data: {\n                    calledFromEmbed\n                }\n            });\n        } else {\n            handleStream(oauthStream, \"data\", loginHandler);\n            const preopenInstanceId = getPreopenInstanceId();\n            this._handleWindow(preopenInstanceId);\n            oauthStream.write({\n                name: \"oauth\",\n                data: {\n                    calledFromEmbed,\n                    verifier: this.requestedVerifier,\n                    preopenInstanceId,\n                    login_hint: this.loginHint\n                }\n            });\n        }\n    }\n    _createPopupBlockAlert(preopenInstanceId, url) {\n        const logoUrl = this._getLogoUrl();\n        const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` + \"<div>\" + `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` + `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` + \"</div>\" + \"</div>\");\n        const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n        const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n        btnContainer.appendChild(successAlert);\n        torusAlert.appendChild(btnContainer);\n        this._setEmbedWhiteLabel(torusAlert);\n        this.torusAlertContainer.style.display = \"block\";\n        this.torusAlertContainer.appendChild(torusAlert);\n        successAlert.addEventListener(\"click\", ()=>{\n            this._handleWindow(preopenInstanceId, {\n                url,\n                target: \"_blank\",\n                features: FEATURES_CONFIRM_WINDOW\n            });\n            torusAlert.remove();\n            if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n        });\n    }\n}\n //# sourceMappingURL=torus.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy90b3J1cy1lbWJlZC9kaXN0L3RvcnVzLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlFO0FBQ3FCO0FBQ2xCO0FBQ1g7QUFDeUg7QUFDN0k7QUFDbUM7QUFDbkM7QUFDYjtBQUNRO0FBRWhDLE1BQU1rQixtQkFBbUI7SUFDdkJDLFFBQVE7SUFDUkMsVUFBVTtJQUNWQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsU0FBUztJQUNUQyxvQkFBb0I7QUFDdEI7QUFDQSxNQUFNQyxnQ0FBZ0M7SUFDcEMsQ0FBQ1AsaUJBQWlCQyxNQUFNLENBQUMsRUFBRTtJQUMzQixDQUFDRCxpQkFBaUJFLFFBQVEsQ0FBQyxFQUFFO0lBQzdCLENBQUNGLGlCQUFpQkcsTUFBTSxDQUFDLEVBQUU7SUFDM0IsQ0FBQ0gsaUJBQWlCSSxNQUFNLENBQUMsRUFBRTtJQUMzQixDQUFDSixpQkFBaUJLLE9BQU8sQ0FBQyxFQUFFO0lBQzVCLENBQUNMLGlCQUFpQk0sa0JBQWtCLENBQUMsRUFBRTtBQUN6QztBQUNBLE1BQU1FLG1CQUFtQjtJQUN2QkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLGFBQWE7SUFDYkMsU0FBUztJQUNUQyxVQUFVO0lBQ1ZDLFNBQVM7SUFDVEMsT0FBTztBQUNUO0FBQ0EsTUFBTUMsNEJBQTRCO0lBQ2hDQyxTQUFTO0lBQ1RDLE9BQU87SUFDUEMsYUFBYTtJQUNiQyxtQkFBbUI7SUFDbkJDLE1BQU07SUFDTkMsa0JBQWtCO0lBQ2xCQyxrQkFBa0I7QUFDcEI7QUFDQSxNQUFNQyxrQkFBa0I7SUFDdEJDLFlBQVk7SUFDWkMsYUFBYTtJQUNiQyxTQUFTO0lBQ1RDLFNBQVM7SUFDVEMsS0FBSztJQUNMQyxNQUFNO0lBQ05DLEtBQUs7SUFDTEMsU0FBUztJQUNUQyxPQUFPO0FBQ1Q7QUFDQSxNQUFNQyxrQkFBa0I7SUFDdEJDLGFBQWE7SUFDYkMsVUFBVTtJQUNWQyxjQUFjO0lBQ2RDLFdBQVc7QUFDYjtBQUVBOzs7Ozs7Q0FNQyxHQUNELE1BQU1DLDRCQUE0QjtJQUFDO0lBQU87SUFBUTtJQUFRO0lBQVE7SUFBUztJQUFPO0lBQU87SUFBUTtJQUFRO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBUTtJQUFRO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQVE7SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBUTtJQUFRO0lBQVM7SUFBUTtJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFRO0lBQVE7SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQVU7SUFBUztJQUFPO0lBQU87SUFBVTtJQUFNO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTTtJQUFPO0lBQU87SUFBUTtJQUFPO0lBQVE7SUFBTztJQUFPO0lBQU07SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBUTtJQUFRO0lBQU87SUFBTztJQUFPO0lBQVE7SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBUTtJQUFPO0lBQVE7SUFBTztJQUFPO0lBQVE7SUFBUTtJQUFRO0lBQU87SUFBTztJQUFPO0lBQVk7SUFBUTtJQUFPO0lBQU87SUFBVztJQUFVO0lBQU87SUFBVTtJQUFRO0lBQVE7SUFBUztJQUFPO0lBQU87SUFBTztJQUFPO0lBQVE7SUFBTztJQUFRO0lBQU87SUFBTztJQUFPO0lBQVM7SUFBTztJQUFRO0lBQVE7SUFBUTtJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBUTtJQUFPO0lBQVM7SUFBTztJQUFPO0lBQU87SUFBUztJQUFPO0lBQVE7SUFBTztJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUztJQUFRO0lBQVE7SUFBUTtJQUFPO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBTztJQUFRO0lBQVM7SUFBUztJQUFPO0lBQU87SUFBTztJQUFPO0lBQVM7SUFBUTtDQUFNO0FBRXZqRTs7O0NBR0MsR0FDRCxNQUFNQyxxQ0FBcUM7SUFDekMsd0RBQXdEO0lBQ3hELGtHQUFrRztJQUNsRyxDQUFDaEMsaUJBQWlCQyxPQUFPLENBQUMsRUFBRTtRQUFDO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO0tBQU07SUFDelU7OztHQUdDLEdBQ0QsQ0FBQ0QsaUJBQWlCRSxJQUFJLENBQUMsRUFBRTtRQUFDO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztLQUFNO0lBQzNPLHlFQUF5RTtJQUN6RSxDQUFDRixpQkFBaUJHLFdBQVcsQ0FBQyxFQUFFO1FBQUM7UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztLQUFNO0lBQ3BWLGlEQUFpRDtJQUNqRCxDQUFDSCxpQkFBaUJJLE9BQU8sQ0FBQyxFQUFFO1FBQUM7UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87S0FBTTtJQUNsRyxtRkFBbUY7SUFDbkYsb0NBQW9DO0lBQ3BDLENBQUNKLGlCQUFpQkssUUFBUSxDQUFDLEVBQUU7UUFBQztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO0tBQU07SUFDeks7Ozs7R0FJQyxHQUNELENBQUNMLGlCQUFpQk0sT0FBTyxDQUFDLEVBQUU7UUFBQztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO0tBQU07SUFDaFYsQ0FBQ04saUJBQWlCTyxLQUFLLENBQUMsRUFBRTtRQUFDO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87S0FBTTtBQUNuSjtBQUNBLE1BQU0wQiw2QkFBNkIsSUFBSUMsSUFBSUg7QUFDM0M7O0NBRUMsR0FDRCxTQUFTSSx3QkFBd0JDLFFBQVE7SUFDdkMsTUFBTUMsa0NBQWtDTCxrQ0FBa0MsQ0FBQ0ksU0FBUztJQUNwRixPQUFPQyxnQ0FBZ0NDLE1BQU0sQ0FBQ0MsQ0FBQUEsV0FBWU4sMkJBQTJCTyxHQUFHLENBQUNEO0FBQzNGO0FBRUEsTUFBTUUscUJBQXFCO0lBQ3pCLENBQUN6QyxpQkFBaUJDLE9BQU8sQ0FBQyxFQUFFO1FBQzFCeUMsT0FBTztRQUNQQyxPQUFPO1FBQ1BDLE9BQU87UUFDUEMsYUFBYTtRQUNiQyxlQUFlO1FBQ2ZDLGVBQWU7UUFDZkMsaUJBQWlCYix3QkFBd0JuQyxpQkFBaUJDLE9BQU87UUFDakVnRCw4QkFBOEI7WUFDNUIsQ0FBQ3pDLDBCQUEwQkMsT0FBTyxDQUFDLEVBQUU7Z0JBQUM7b0JBQ3BDeUMsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1lBQ0YsQ0FBQzNDLDBCQUEwQkUsS0FBSyxDQUFDLEVBQUU7Z0JBQUM7b0JBQ2xDd0MsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1lBQ0YsQ0FBQzNDLDBCQUEwQkcsV0FBVyxDQUFDLEVBQUU7Z0JBQUM7b0JBQ3hDdUMsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1lBQ0YsQ0FBQzNDLDBCQUEwQkksaUJBQWlCLENBQUMsRUFBRTtnQkFBQztvQkFDOUNzQyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7WUFDRixDQUFDM0MsMEJBQTBCTSxnQkFBZ0IsQ0FBQyxFQUFFO2dCQUFDO29CQUM3Q29DLE9BQU87b0JBQ1BDLFNBQVM7Z0JBQ1g7Z0JBQUc7b0JBQ0RELE9BQU87b0JBQ1BDLFNBQVM7Z0JBQ1g7YUFBRTtZQUNGLENBQUMzQywwQkFBMEJPLGdCQUFnQixDQUFDLEVBQUU7Z0JBQUM7b0JBQzdDbUMsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1FBQ0o7UUFDQUMsYUFBYTtRQUNiQyxLQUFLO1FBQ0xDLFlBQVk7SUFDZDtJQUNBLENBQUN0RCxpQkFBaUJFLElBQUksQ0FBQyxFQUFFO1FBQ3ZCd0MsT0FBTztRQUNQQyxPQUFPO1FBQ1BDLE9BQU87UUFDUEMsYUFBYTtRQUNiQyxlQUFlO1FBQ2ZDLGVBQWU7UUFDZkMsaUJBQWlCYix3QkFBd0JuQyxpQkFBaUJFLElBQUk7UUFDOUQrQyw4QkFBOEI7WUFDNUIsQ0FBQ3pDLDBCQUEwQkMsT0FBTyxDQUFDLEVBQUU7Z0JBQUM7b0JBQ3BDeUMsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1lBQ0YsQ0FBQzNDLDBCQUEwQkUsS0FBSyxDQUFDLEVBQUU7Z0JBQUM7b0JBQ2xDd0MsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1lBQ0YsQ0FBQzNDLDBCQUEwQkksaUJBQWlCLENBQUMsRUFBRTtnQkFBQztvQkFDOUNzQyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7WUFDRixDQUFDM0MsMEJBQTBCRyxXQUFXLENBQUMsRUFBRTtnQkFBQztvQkFDeEN1QyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7UUFDSjtRQUNBQyxhQUFhO1FBQ2JDLEtBQUs7UUFDTEMsWUFBWTtJQUNkO0lBQ0EsQ0FBQ3RELGlCQUFpQkcsV0FBVyxDQUFDLEVBQUU7UUFDOUJ1QyxPQUFPO1FBQ1BDLE9BQU87UUFDUEMsT0FBTztRQUNQQyxhQUFhO1FBQ2JDLGVBQWU7UUFDZkMsZUFBZTtRQUNmQyxpQkFBaUJiLHdCQUF3Qm5DLGlCQUFpQkcsV0FBVztRQUNyRThDLDhCQUE4QjtZQUM1QixDQUFDekMsMEJBQTBCQyxPQUFPLENBQUMsRUFBRTtnQkFBQztvQkFDcEN5QyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7WUFDRixDQUFDM0MsMEJBQTBCRSxLQUFLLENBQUMsRUFBRTtnQkFBQztvQkFDbEN3QyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7WUFDRixDQUFDM0MsMEJBQTBCSSxpQkFBaUIsQ0FBQyxFQUFFO2dCQUFDO29CQUM5Q3NDLE9BQU87b0JBQ1BDLFNBQVM7Z0JBQ1g7Z0JBQUc7b0JBQ0RELE9BQU87b0JBQ1BDLFNBQVM7Z0JBQ1g7Z0JBQUc7b0JBQ0RELE9BQU87b0JBQ1BDLFNBQVM7Z0JBQ1g7YUFBRTtZQUNGLENBQUMzQywwQkFBMEJNLGdCQUFnQixDQUFDLEVBQUU7Z0JBQUM7b0JBQzdDb0MsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1lBQ0YsQ0FBQzNDLDBCQUEwQk8sZ0JBQWdCLENBQUMsRUFBRTtnQkFBQztvQkFDN0NtQyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7WUFDRixDQUFDM0MsMEJBQTBCRyxXQUFXLENBQUMsRUFBRTtnQkFBQztvQkFDeEN1QyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7UUFDSjtRQUNBQyxhQUFhO1FBQ2JDLEtBQUs7UUFDTEUsYUFBYTtRQUNiRCxZQUFZO0lBQ2Q7SUFDQSxDQUFDdEQsaUJBQWlCSSxPQUFPLENBQUMsRUFBRTtRQUMxQnNDLE9BQU87UUFDUEMsT0FBTztRQUNQQyxPQUFPO1FBQ1BDLGFBQWE7UUFDYkMsZUFBZTtRQUNmQyxlQUFlO1FBQ2ZDLGlCQUFpQmIsd0JBQXdCbkMsaUJBQWlCSSxPQUFPO1FBQ2pFNkMsOEJBQThCO1lBQzVCLENBQUN6QywwQkFBMEJDLE9BQU8sQ0FBQyxFQUFFO2dCQUFDO29CQUNwQ3lDLE9BQU87b0JBQ1BDLFNBQVM7Z0JBQ1g7Z0JBQUc7b0JBQ0RELE9BQU87b0JBQ1BDLFNBQVM7Z0JBQ1g7Z0JBQUc7b0JBQ0RELE9BQU87b0JBQ1BDLFNBQVM7Z0JBQ1g7YUFBRTtRQUNKO1FBQ0FDLGFBQWE7UUFDYkMsS0FBSztRQUNMRyxNQUFNO1FBQ05GLFlBQVk7SUFDZDtJQUNBLENBQUN0RCxpQkFBaUJLLFFBQVEsQ0FBQyxFQUFFO1FBQzNCcUMsT0FBTztRQUNQQyxPQUFPO1FBQ1BDLE9BQU87UUFDUEMsYUFBYTtRQUNiQyxlQUFlO1FBQ2ZDLGVBQWU7UUFDZkMsaUJBQWlCYix3QkFBd0JuQyxpQkFBaUJLLFFBQVE7UUFDbEU0Qyw4QkFBOEI7WUFDNUIsQ0FBQ3pDLDBCQUEwQkMsT0FBTyxDQUFDLEVBQUU7Z0JBQUM7b0JBQ3BDeUMsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1lBQ0YsQ0FBQzNDLDBCQUEwQkcsV0FBVyxDQUFDLEVBQUU7Z0JBQUM7b0JBQ3hDdUMsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1lBQ0YsQ0FBQzNDLDBCQUEwQkksaUJBQWlCLENBQUMsRUFBRTtnQkFBQztvQkFDOUNzQyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7WUFDRixDQUFDM0MsMEJBQTBCRSxLQUFLLENBQUMsRUFBRTtnQkFBQztvQkFDbEN3QyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7UUFDSjtRQUNBQyxhQUFhO1FBQ2JDLEtBQUs7UUFDTEMsWUFBWTtJQUNkO0lBQ0EsQ0FBQ3RELGlCQUFpQk0sT0FBTyxDQUFDLEVBQUU7UUFDMUJvQyxPQUFPO1FBQ1BDLE9BQU87UUFDUEMsT0FBTztRQUNQQyxhQUFhO1FBQ2JDLGVBQWU7UUFDZkMsZUFBZTtRQUNmQyxpQkFBaUJiLHdCQUF3Qm5DLGlCQUFpQk0sT0FBTztRQUNqRTJDLDhCQUE4QjtZQUM1QixDQUFDekMsMEJBQTBCQyxPQUFPLENBQUMsRUFBRTtnQkFBQztvQkFDcEN5QyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7WUFDRixDQUFDM0MsMEJBQTBCRSxLQUFLLENBQUMsRUFBRTtnQkFBQztvQkFDbEN3QyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7WUFDRixDQUFDM0MsMEJBQTBCRyxXQUFXLENBQUMsRUFBRTtnQkFBQztvQkFDeEN1QyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7WUFDRixDQUFDM0MsMEJBQTBCSSxpQkFBaUIsQ0FBQyxFQUFFO2dCQUFDO29CQUM5Q3NDLE9BQU87b0JBQ1BDLFNBQVM7Z0JBQ1g7YUFBRTtZQUNGLENBQUMzQywwQkFBMEJPLGdCQUFnQixDQUFDLEVBQUU7Z0JBQUM7b0JBQzdDbUMsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1lBQ0YsQ0FBQzNDLDBCQUEwQk0sZ0JBQWdCLENBQUMsRUFBRTtnQkFBQztvQkFDN0NvQyxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2dCQUFHO29CQUNERCxPQUFPO29CQUNQQyxTQUFTO2dCQUNYO2FBQUU7UUFDSjtRQUNBQyxhQUFhO1FBQ2JFLFlBQVk7SUFDZDtJQUNBLENBQUN0RCxpQkFBaUJPLEtBQUssQ0FBQyxFQUFFO1FBQ3hCbUMsT0FBTztRQUNQQyxPQUFPO1FBQ1BDLE9BQU87UUFDUEMsYUFBYTtRQUNiQyxlQUFlO1FBQ2ZDLGVBQWU7UUFDZkMsaUJBQWlCYix3QkFBd0JuQyxpQkFBaUJPLEtBQUs7UUFDL0QwQyw4QkFBOEI7WUFDNUIsQ0FBQ3pDLDBCQUEwQkMsT0FBTyxDQUFDLEVBQUU7Z0JBQUM7b0JBQ3BDeUMsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDtnQkFBRztvQkFDREQsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1lBQ0YsQ0FBQzNDLDBCQUEwQkUsS0FBSyxDQUFDLEVBQUU7Z0JBQUM7b0JBQ2xDd0MsT0FBTztvQkFDUEMsU0FBUztnQkFDWDthQUFFO1FBRUo7UUFFQUMsYUFBYTtRQUNiRSxZQUFZO0lBQ2Q7QUFDRjtBQUNBLE1BQU1HLGVBQWU7SUFDbkJDLElBQUk7UUFDRkMsT0FBTztZQUNMQyxVQUFVO1lBQ1ZDLGdCQUFnQjtZQUNoQkMsZUFBZTtZQUNmQyxpQkFBaUI7WUFDakJDLGVBQWU7WUFDZkMsV0FBVztRQUNiO0lBQ0Y7SUFDQUMsSUFBSTtRQUNGUCxPQUFPO1lBQ0xDLFVBQVU7WUFDVkMsZ0JBQWdCO1lBQ2hCQyxlQUFlO1lBQ2ZDLGlCQUFpQjtZQUNqQkMsZUFBZTtZQUNmQyxXQUFXO1FBQ2I7SUFDRjtJQUNBRSxJQUFJO1FBQ0ZSLE9BQU87WUFDTEMsVUFBVTtZQUNWQyxnQkFBZ0I7WUFDaEJDLGVBQWU7WUFDZkMsaUJBQWlCO1lBQ2pCQyxlQUFlO1lBQ2ZDLFdBQVc7UUFDYjtJQUNGO0lBQ0FHLElBQUk7UUFDRlQsT0FBTztZQUNMQyxVQUFVO1lBQ1ZDLGdCQUFnQjtZQUNoQkMsZUFBZTtZQUNmQyxpQkFBaUI7WUFDakJDLGVBQWU7WUFDZkMsV0FBVztRQUNiO0lBQ0Y7SUFDQUksSUFBSTtRQUNGVixPQUFPO1lBQ0xDLFVBQVU7WUFDVkMsZ0JBQWdCO1lBQ2hCQyxlQUFlO1lBQ2ZDLGlCQUFpQjtZQUNqQkMsZUFBZTtZQUNmQyxXQUFXO1FBQ2I7SUFDRjtBQUNGO0FBQ0EsSUFBSUssZ0JBQWdCO0lBQ2xCQyx1QkFBdUJDLE9BQU9DLE1BQU0sQ0FBQ2pGO0lBQ3JDa0Ysa0JBQWtCakM7SUFDbEJZLEtBQUs7SUFDTEk7SUFDQWtCLGNBQWM7SUFDZEMsdUJBQXVCLENBQUMsTUFBTSxDQUFDO0FBQ2pDO0FBRUEsTUFBTUMsZ0JBQWdCQyxDQUFBQTtJQUNwQixNQUFNQyxXQUFXQyxPQUFPQyxRQUFRLENBQUNDLGFBQWEsQ0FBQztJQUMvQyxNQUFNQyxjQUFjTCxLQUFLTSxJQUFJLElBQUksdURBQXVEO0lBQ3hGTCxTQUFTTSxTQUFTLEdBQUdGO0lBQ3JCLE9BQU9KLFNBQVNPLE9BQU8sQ0FBQ0MsVUFBVTtBQUNwQztBQUNBLE1BQU1DLGVBQWUsQ0FBQ0MsUUFBUUMsV0FBV0M7SUFDdkMsTUFBTUMsaUJBQWlCQyxDQUFBQTtRQUNyQkYsUUFBUUU7UUFDUkosT0FBT0ssY0FBYyxDQUFDSixXQUFXRTtJQUNuQztJQUNBSCxPQUFPTSxFQUFFLENBQUNMLFdBQVdFO0FBQ3ZCO0FBRUEscURBQXFELEdBQ3JELFNBQVNJLFNBQVNDLE1BQU07SUFDdEIsT0FBT0EsV0FBVyxRQUFRLE9BQU9BLFdBQVcsWUFBWSxPQUFPQSxPQUFPQyxJQUFJLEtBQUs7QUFDakY7QUFDQSxTQUFTQyxpQkFBaUJGLE1BQU07SUFDOUIsT0FBT0QsU0FBU0MsV0FBV0EsT0FBT0csUUFBUSxLQUFLLFNBQVMsT0FBT0gsT0FBT0ksTUFBTSxLQUFLLGNBQWMsT0FBT0osT0FBT0ssY0FBYyxLQUFLO0FBQ2xJO0FBQ0EsU0FBU0MsaUJBQWlCTixNQUFNO0lBQzlCLE9BQU9ELFNBQVNDLFdBQVdBLE9BQU9PLFFBQVEsS0FBSyxTQUFTLE9BQU9QLE9BQU9RLEtBQUssS0FBSyxjQUFjLE9BQU9SLE9BQU9TLGNBQWMsS0FBSztBQUNqSTtBQUNBLFNBQVNDLGVBQWVWLE1BQU07SUFDNUIsT0FBT0UsaUJBQWlCRixXQUFXTSxpQkFBaUJOO0FBQ3REO0FBRUEsSUFBSVcsTUFBTXJILHlEQUFrQixDQUFDO0FBRTdCLElBQUl1SCxXQUFXO0lBQ2JDLFFBQVE7UUFDTkMsY0FBYyxJQUFNO1FBQ3BCQyx5QkFBeUIsSUFBTTtRQUMvQkMsa0JBQWtCLElBQU07UUFDeEJDLGlCQUFpQkMsQ0FBQUEsU0FBVSxDQUFDLDZFQUE2RSxFQUFFQSxPQUFPLDhCQUE4QixDQUFDO1FBQ2pKQyxxQkFBcUIsSUFBTTtRQUMzQkMsZ0JBQWdCLENBQUNDLG1CQUFtQkMscUJBQXVCLENBQUMsZ0RBQWdELEVBQUVELGtCQUFrQixzQkFBc0IsRUFBRUMsbUJBQW1CLEVBQUUsQ0FBQztRQUM5S0Msb0JBQW9CLElBQU0sQ0FBQyw4Q0FBOEMsQ0FBQztRQUMxRUMsc0JBQXNCLElBQU0sQ0FBQyx5Q0FBeUMsQ0FBQztRQUN2RUMsc0JBQXNCLElBQU0sQ0FBQyxxREFBcUQsQ0FBQztRQUNuRkMscUJBQXFCLElBQU0sQ0FBQyw0Q0FBNEMsQ0FBQztRQUN6RUMscUJBQXFCVCxDQUFBQSxTQUFVLENBQUMsNENBQTRDLEVBQUVBLE9BQU8sRUFBRSxDQUFDO0lBQzFGO0lBQ0FVLE1BQU07UUFDSkMsV0FBV0MsQ0FBQUEsVUFBVyxDQUFDLG1DQUFtQyxFQUFFQSxRQUFRLEVBQUUsQ0FBQztJQUN6RTtJQUNBQyxVQUFVO1FBQ1IscUJBQXFCO1FBQ3JCQyxtQkFBbUIsaUZBQWlGO1FBQ3BHQyxpQkFBaUIsZ0ZBQWdGO0lBQ25HO0FBQ0Y7QUFFQSxNQUFNLEVBQ0p6RCxnQkFBZ0IsRUFDakIsR0FBR0o7QUFDSixNQUFNOEQsMEJBQTBCLENBQUNoRyxVQUFVaUc7SUFDekMsTUFBTXRCLFNBQVMsQ0FBQztJQUNoQixJQUFJLENBQUMzRSxVQUFVO1FBQ2IsT0FBTztZQUNMMkU7WUFDQXVCLFNBQVM7UUFDWDtJQUNGO0lBQ0EsSUFBSWxHLFlBQVksQ0FBQ3NDLGdCQUFnQixDQUFDdEMsU0FBUyxFQUFFO1FBQzNDMkUsT0FBTzNFLFFBQVEsR0FBRztRQUNsQixPQUFPO1lBQ0wyRTtZQUNBdUIsU0FBUzlELE9BQU8rRCxJQUFJLENBQUN4QixRQUFReUIsTUFBTSxLQUFLO1FBQzFDO0lBQ0Y7SUFDQSxNQUFNQyxtQkFBbUIvRCxnQkFBZ0IsQ0FBQ3RDLFNBQVM7SUFDbkQsTUFBTXNHLGlCQUFpQkwsVUFBVSxDQUFDO0lBRWxDLHFCQUFxQjtJQUNyQiw2R0FBNkc7SUFDN0csMkZBQTJGO0lBQzNGLCtIQUErSDtJQUUvSCxjQUFjO0lBQ2QsSUFBSUssZUFBZUMsU0FBUyxFQUFFO1FBQzVCLE1BQU1DLHVCQUF1QixDQUFDQyxXQUFXSCxlQUFlQyxTQUFTLENBQUNHLFFBQVEsT0FBTztRQUNqRixJQUFJRix1QkFBdUJILGlCQUFpQjNGLGFBQWEsRUFBRWlFLE9BQU80QixTQUFTLEdBQUc7UUFDOUUsSUFBSUMsdUJBQXVCSCxpQkFBaUIxRixhQUFhLElBQUkwRixpQkFBaUJuRixVQUFVLEVBQUV5RCxPQUFPNEIsU0FBUyxHQUFHO0lBQy9HO0lBQ0EsSUFBSUQsZUFBZUssZ0JBQWdCLElBQUksQ0FBQ04saUJBQWlCekYsZUFBZSxDQUFDZ0csUUFBUSxDQUFDTixlQUFlSyxnQkFBZ0IsR0FBRztRQUNsSGhDLE9BQU9nQyxnQkFBZ0IsR0FBRztJQUM1QjtJQUNBLElBQUlMLGVBQWVPLHNCQUFzQixFQUFFO1FBQ3pDLE1BQU1oRywrQkFBK0J1QixPQUFPQyxNQUFNLENBQUNnRSxpQkFBaUJ4Riw0QkFBNEIsRUFBRWlHLElBQUksR0FBR0MsR0FBRyxDQUFDNUcsQ0FBQUEsV0FBWUEsU0FBU1csS0FBSztRQUN2SSxNQUFNa0csc0JBQXNCaEgsYUFBYXBDLGlCQUFpQkMsT0FBTyxHQUFHeUksZUFBZU8sc0JBQXNCLENBQUNJLFdBQVcsS0FBS1gsZUFBZU8sc0JBQXNCO1FBQy9KLElBQUloRyxnQ0FBZ0MsQ0FBQ0EsNkJBQTZCK0YsUUFBUSxDQUFDSSxzQkFBc0JyQyxPQUFPa0Msc0JBQXNCLEdBQUc7SUFDbkk7SUFDQSxPQUFPO1FBQ0xsQztRQUNBdUIsU0FBUzlELE9BQU8rRCxJQUFJLENBQUN4QixRQUFReUIsTUFBTSxLQUFLO0lBQzFDO0FBQ0Y7QUFFQSxvQkFBb0I7QUFFcEI7Ozs7O0NBS0MsR0FDRCxTQUFTYztJQUNQLE9BQU8sQ0FBQ0MsS0FBS0MsS0FBS0M7UUFDaEIsd0VBQXdFO1FBQ3hFLElBQUksT0FBT0YsSUFBSW5DLE1BQU0sS0FBSyxZQUFZLENBQUNtQyxJQUFJbkMsTUFBTSxFQUFFO1lBQ2pEb0MsSUFBSUUsS0FBSyxHQUFHdkssMkRBQVNBLENBQUN3SyxjQUFjLENBQUM7Z0JBQ25DQyxTQUFTLENBQUMsZ0RBQWdELENBQUM7Z0JBQzNEQyxNQUFNdkwsMkVBQWFBLENBQUNBLDJFQUFhQSxDQUFDLENBQUMsR0FBR2lMLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRztvQkFDcERPLE9BQU87Z0JBQ1Q7WUFDRjtRQUNGO1FBQ0FMLEtBQUtNLENBQUFBO1lBQ0gsTUFBTSxFQUNKTCxLQUFLLEVBQ04sR0FBR0Y7WUFDSixJQUFJLENBQUNFLE9BQU87Z0JBQ1YsT0FBT0s7WUFDVDtZQUNBbkQsSUFBSThDLEtBQUssQ0FBQyxDQUFDLHNCQUFzQixFQUFFQSxNQUFNRSxPQUFPLENBQUMsQ0FBQyxFQUFFRjtZQUNwRCxPQUFPSztRQUNUO0lBQ0Y7QUFDRjtBQUVBOzs7Ozs7OztDQVFDLEdBQ0QsU0FBU0MsMkJBQTJCQyxXQUFXLEVBQUVQLEtBQUssRUFBRVEsT0FBTztJQUM3RCxJQUFJQyxhQUFhLENBQUMsOEJBQThCLEVBQUVGLFlBQVksRUFBRSxDQUFDO0lBQ2pFLElBQUlQLFVBQVUsUUFBUUEsVUFBVSxLQUFLLEtBQUtBLE1BQU1VLEtBQUssRUFBRTtRQUNyREQsY0FBYyxDQUFDLEVBQUUsRUFBRVQsTUFBTVUsS0FBSyxDQUFDLENBQUM7SUFDbEM7SUFDQXhELElBQUl5RCxJQUFJLENBQUNGO0lBQ1QsSUFBSUQsV0FBV0EsUUFBUUksYUFBYSxDQUFDLFdBQVcsR0FBRztRQUNqREosUUFBUUssSUFBSSxDQUFDLFNBQVNKO0lBQ3hCO0FBQ0Y7QUFDQSxNQUFNSyx1QkFBdUIsSUFBTUMsS0FBS0MsTUFBTSxHQUFHNUIsUUFBUSxDQUFDLElBQUk2QixLQUFLLENBQUM7QUFDcEUsTUFBTUMsY0FBYyxPQUFPQyxVQUFVQztJQUNuQyxJQUFJQztJQUNKLElBQUlDO0lBQ0osMEJBQTBCO0lBQzFCLE1BQU1DLFVBQVU7SUFDaEIsSUFBSUMsY0FBY0osVUFBVUcsT0FBTyxJQUFJQTtJQUN2QyxJQUFJO1FBQ0YsSUFBSSxDQUFDSixhQUFhLGFBQWFBLGFBQWEsWUFBVyxLQUFNLENBQUNDLFVBQVVHLE9BQU8sRUFBRTtZQUMvRSxJQUFJRTtZQUNKLElBQUksQ0FBQzdHLGNBQWNLLFlBQVksRUFBRXdHLFdBQVcsTUFBTTFNLDREQUFHQSxDQUFDLENBQUMsRUFBRTZGLGNBQWNqQixHQUFHLENBQUMsbURBQW1ELEVBQUU0SCxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUc7Z0JBQzdJRyxXQUFXO1lBQ2I7aUJBQVFELFdBQVc7Z0JBQ2pCdEIsTUFBTXZGLGNBQWNLLFlBQVk7WUFDbEM7WUFDQXVHLGNBQWNDLFNBQVN0QixJQUFJO1lBQzNCLGtEQUFrRDtZQUNsRHZGLGNBQWNLLFlBQVksR0FBR3dHLFNBQVN0QixJQUFJO1FBQzVDO0lBQ0YsRUFBRSxPQUFPSCxPQUFPO1FBQ2Q5QyxJQUFJOEMsS0FBSyxDQUFDQSxPQUFPO0lBQ25CO0lBQ0E5QyxJQUFJa0IsSUFBSSxDQUFDLGtCQUFrQm9EO0lBQzNCLE9BQVFMO1FBQ04sS0FBSztZQUNIRSxXQUFXLENBQUMsd0JBQXdCLEVBQUVHLFlBQVksQ0FBQztZQUNuREYsV0FBVztZQUNYO1FBQ0YsS0FBSztZQUNIRCxXQUFXO1lBQ1hDLFdBQVc7WUFDWDtRQUNGLEtBQUs7WUFDSEQsV0FBVztZQUNYQyxXQUFXO1lBQ1g7UUFDRixLQUFLO1lBQ0hELFdBQVc7WUFDWEMsV0FBVztZQUNYO1FBQ0YsS0FBSztZQUNIRCxXQUFXO1lBQ1hDLFdBQVc7WUFDWDtRQUNGLEtBQUs7WUFDSEQsV0FBVztZQUNYQyxXQUFXO1lBQ1g7UUFDRixLQUFLO1lBQ0hELFdBQVc7WUFDWEMsV0FBVztZQUNYO1FBQ0YsS0FBSztZQUNIRCxXQUFXO1lBQ1hDLFdBQVc7WUFDWDtRQUNGO1lBQ0VELFdBQVcsQ0FBQyxvQkFBb0IsRUFBRUcsWUFBWSxDQUFDO1lBQy9DRixXQUFXO1lBQ1g7SUFDSjtJQUNBLE9BQU87UUFDTEQ7UUFDQUM7SUFDRjtBQUNGO0FBQ0EsTUFBTUssa0JBQWtCO0lBQ3RCLElBQUlDLGVBQWV0RyxPQUFPdUcsU0FBUyxDQUFDQyxRQUFRLElBQUk7SUFDaEQsTUFBTUMsZ0JBQWdCSCxhQUFhSSxLQUFLLENBQUM7SUFDekNKLGVBQWU5RyxPQUFPbUgsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ3ZILGNBQWNiLFlBQVksRUFBRWdJLGFBQWEsQ0FBQyxFQUFFLElBQUlBLGFBQWEsQ0FBQyxFQUFFLEdBQUc7SUFDdkgsT0FBT0g7QUFDVDtBQUNBLE1BQU1RLHdCQUF3QjtJQUFDLG1CQUFtQiwrQ0FBK0M7Q0FDaEc7QUFFRCxNQUFNQyxPQUFPO0FBQ1gsaUJBQWlCO0FBQ25CO0FBQ0EsTUFBTUMsa0NBQWtDO0FBQ3hDLE1BQU1DLGlDQUFpQztBQUN2QyxNQUFNQywwQkFBMEI7QUFDaEMsU0FBU0M7SUFDUCxvRkFBb0Y7SUFDcEYsTUFBTUMsaUJBQWlCcEgsT0FBT3FILFVBQVUsS0FBS0MsWUFBWXRILE9BQU9xSCxVQUFVLEdBQUdySCxPQUFPdUgsT0FBTztJQUMzRixNQUFNQyxnQkFBZ0J4SCxPQUFPeUgsU0FBUyxLQUFLSCxZQUFZdEgsT0FBT3lILFNBQVMsR0FBR3pILE9BQU8wSCxPQUFPO0lBQ3hGLE1BQU1DLElBQUk7SUFDVixNQUFNQyxJQUFJO0lBQ1YsTUFBTUMsUUFBUTdILE9BQU84SCxVQUFVLEdBQUc5SCxPQUFPOEgsVUFBVSxHQUFHN0gsU0FBUzhILGVBQWUsQ0FBQ0MsV0FBVyxHQUFHL0gsU0FBUzhILGVBQWUsQ0FBQ0MsV0FBVyxHQUFHaEksT0FBT2lJLE1BQU0sQ0FBQ0osS0FBSztJQUN2SixNQUFNSyxTQUFTbEksT0FBT21JLFdBQVcsR0FBR25JLE9BQU9tSSxXQUFXLEdBQUdsSSxTQUFTOEgsZUFBZSxDQUFDSyxZQUFZLEdBQUduSSxTQUFTOEgsZUFBZSxDQUFDSyxZQUFZLEdBQUdwSSxPQUFPaUksTUFBTSxDQUFDQyxNQUFNO0lBQzdKLE1BQU1HLGFBQWEsR0FBRyx1QkFBdUI7SUFFN0MsTUFBTUMsT0FBTzdDLEtBQUs4QyxHQUFHLENBQUMsQ0FBQ1YsUUFBUUYsQ0FBQUEsSUFBSyxJQUFJVSxhQUFhakI7SUFDckQsTUFBTW9CLE1BQU0vQyxLQUFLOEMsR0FBRyxDQUFDLENBQUNMLFNBQVNOLENBQUFBLElBQUssSUFBSVMsYUFBYWI7SUFDckQsTUFBTWlCLFdBQVcsQ0FBQywwREFBMEQsRUFBRWIsSUFBSVMsV0FBVyxPQUFPLEVBQUVWLElBQUlVLFdBQVcsS0FBSyxFQUFFRyxJQUFJLE1BQU0sRUFBRUYsS0FBSyxDQUFDO0lBQzlJLE9BQU9HO0FBQ1Q7QUFFQTlPLHVFQUFnQkEsQ0FBQytPLG1CQUFtQixHQUFHO0FBRXZDLHlDQUF5QztBQUN6QyxNQUFNQyx3QkFBd0IsU0FBVUMsT0FBTyxFQUFFQyxNQUFNO0lBQ3JELElBQUlDLGVBQWVDLFVBQVV2RixNQUFNLEdBQUcsS0FBS3VGLFNBQVMsQ0FBQyxFQUFFLEtBQUt6QixZQUFZeUIsU0FBUyxDQUFDLEVBQUUsR0FBRztJQUN2RixPQUFPLENBQUNyRSxPQUFPeUI7UUFDYixJQUFJekIsU0FBU3lCLFNBQVN6QixLQUFLLEVBQUU7WUFDM0IsT0FBT21FLE9BQU9uRSxTQUFTeUIsU0FBU3pCLEtBQUs7UUFDdkM7UUFDQSxPQUFPLENBQUNvRSxnQkFBZ0JFLE1BQU1DLE9BQU8sQ0FBQzlDLFlBQVl5QyxRQUFRekMsWUFBWXlDLFFBQVF6QyxTQUFTK0MsTUFBTTtJQUMvRjtBQUNGO0FBQ0EsTUFBTUMsNEJBQTRCeFAsdUVBQWdCQTtJQUNoRHlQLFlBQVlDLGdCQUFnQixDQUFFO1FBQzVCLElBQUksRUFDRjlHLG9CQUFvQixHQUFHLEVBQ3ZCQyxxQkFBcUIsSUFBSSxFQUN6QjhHLG9CQUFvQixVQUFVLEVBQy9CLEdBQUdQLFVBQVV2RixNQUFNLEdBQUcsS0FBS3VGLFNBQVMsQ0FBQyxFQUFFLEtBQUt6QixZQUFZeUIsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBQ3pFLEtBQUs7UUFDTDs7O0tBR0MsR0FDRHZQLDRFQUFlQSxDQUFDLElBQUksRUFBRSxXQUFXLEtBQUs7UUFDdEM7Ozs7S0FJQyxHQUNEQSw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEtBQUs7UUFDOUNBLDRFQUFlQSxDQUFDLElBQUksRUFBRSxjQUFjLEtBQUs7UUFDekNBLDRFQUFlQSxDQUFDLElBQUksRUFBRSxrQkFBa0IsS0FBSztRQUM3Q0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLHNCQUFzQixLQUFLO1FBQ2pEOztLQUVDLEdBQ0RBLDRFQUFlQSxDQUFDLElBQUksRUFBRSxXQUFXLEtBQUs7UUFDdENBLDRFQUFlQSxDQUFDLElBQUksRUFBRSxvQkFBb0IsS0FBSztRQUMvQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLFVBQVUsS0FBSztRQUNyQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLFVBQVUsS0FBSztRQUNyQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLHNCQUFzQixLQUFLO1FBQ2pELElBQUksQ0FBQ21JLGVBQWUwSCxtQkFBbUI7WUFDckMsTUFBTSxJQUFJRSxNQUFNekgsU0FBU0MsTUFBTSxDQUFDTSxtQkFBbUI7UUFDckQ7UUFDQSxJQUFJLENBQUNtSCxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLGVBQWUsQ0FBQ2xIO1FBRXJCLGdCQUFnQjtRQUNoQixJQUFJLENBQUNtSCxNQUFNLEdBQUdwUSwyRUFBYUEsQ0FBQyxDQUFDLEdBQUc2UCxvQkFBb0JRLGFBQWE7UUFFakUsZUFBZTtRQUNmLElBQUksQ0FBQ0MsZUFBZSxHQUFHO1FBQ3ZCLElBQUksQ0FBQ0MsY0FBYyxHQUFHO1FBQ3RCLElBQUksQ0FBQzdHLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ1Isa0JBQWtCLEdBQUdBO1FBRTFCLHNFQUFzRTtRQUN0RSxJQUFJLENBQUNzSCxzQkFBc0IsR0FBRyxJQUFJLENBQUNBLHNCQUFzQixDQUFDQyxJQUFJLENBQUMsSUFBSTtRQUNuRSxJQUFJLENBQUNDLG1CQUFtQixHQUFHLElBQUksQ0FBQ0EsbUJBQW1CLENBQUNELElBQUksQ0FBQyxJQUFJO1FBQzdELElBQUksQ0FBQ0UseUJBQXlCLEdBQUcsSUFBSSxDQUFDQSx5QkFBeUIsQ0FBQ0YsSUFBSSxDQUFDLElBQUk7UUFDekUsSUFBSSxDQUFDRyxjQUFjLEdBQUcsSUFBSSxDQUFDQSxjQUFjLENBQUNILElBQUksQ0FBQyxJQUFJO1FBQ25ELElBQUksQ0FBQ0ksaUJBQWlCLEdBQUcsSUFBSSxDQUFDQSxpQkFBaUIsQ0FBQ0osSUFBSSxDQUFDLElBQUk7UUFDekQsSUFBSSxDQUFDSyx1QkFBdUIsR0FBRyxJQUFJLENBQUNBLHVCQUF1QixDQUFDTCxJQUFJLENBQUMsSUFBSTtRQUNyRSxJQUFJLENBQUNNLFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQ04sSUFBSSxDQUFDLElBQUk7UUFDekMsSUFBSSxDQUFDTyxXQUFXLEdBQUcsSUFBSSxDQUFDQSxXQUFXLENBQUNQLElBQUksQ0FBQyxJQUFJO1FBQzdDLElBQUksQ0FBQ1EsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDQSxnQkFBZ0IsQ0FBQ1IsSUFBSSxDQUFDLElBQUk7UUFDdkQsSUFBSSxDQUFDUyxPQUFPLEdBQUcsSUFBSSxDQUFDQSxPQUFPLENBQUNULElBQUksQ0FBQyxJQUFJO1FBQ3JDLElBQUksQ0FBQ1UsSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxDQUFDVixJQUFJLENBQUMsSUFBSTtRQUMvQixJQUFJLENBQUNXLFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQ1gsSUFBSSxDQUFDLElBQUk7UUFDekMsd0NBQXdDO1FBRXhDLHNDQUFzQztRQUN0QyxNQUFNWSxNQUFNLElBQUkvUSxzRUFBZUE7UUFDL0JVLDJDQUFJQSxDQUFDK08sa0JBQWtCc0IsS0FBS3RCLGtCQUFrQixJQUFJLENBQUNlLHVCQUF1QixDQUFDTCxJQUFJLENBQUMsSUFBSSxFQUFFO1FBRXRGLHNEQUFzRDtRQUN0RFksSUFBSUMsWUFBWSxDQUFDO1FBRWpCLDRCQUE0QjtRQUU1QixtQkFBbUI7UUFDbkIsSUFBSSxDQUFDN0osRUFBRSxDQUFDLFdBQVc7WUFDakIsSUFBSSxDQUFDMkksTUFBTSxDQUFDbUIsV0FBVyxHQUFHO1FBQzVCO1FBRUEsNEJBQTRCO1FBRTVCLE1BQU1DLG9CQUFvQmpSLGlGQUFzQkE7UUFDaERTLDJDQUFJQSxDQUFDd1Esa0JBQWtCN0osTUFBTSxFQUFFMEosSUFBSUksWUFBWSxDQUFDekIsb0JBQW9Cd0Isa0JBQWtCN0osTUFBTSxFQUFFLElBQUksQ0FBQ21KLHVCQUF1QixDQUFDTCxJQUFJLENBQUMsSUFBSSxFQUFFO1FBRXRJLCtDQUErQztRQUMvQyxNQUFNaUIsWUFBWSxJQUFJbFIsaUVBQVVBO1FBQ2hDa1IsVUFBVUMsSUFBSSxDQUFDbFIsa0ZBQXVCQTtRQUN0Q2lSLFVBQVVDLElBQUksQ0FBQzNHO1FBQ2YwRyxVQUFVQyxJQUFJLENBQUNILGtCQUFrQkksVUFBVTtRQUMzQyxJQUFJLENBQUNDLFVBQVUsR0FBR0g7UUFFbEIsaUNBQWlDO1FBQ2pDRixrQkFBa0JNLE1BQU0sQ0FBQ3JLLEVBQUUsQ0FBQyxnQkFBZ0JzSyxDQUFBQTtZQUMxQyxNQUFNLEVBQ0pqSixNQUFNLEVBQ05pQixNQUFNLEVBQ1AsR0FBR2dJO1lBQ0osSUFBSWpKLFdBQVcsMEJBQTBCO2dCQUN2QyxJQUFJLENBQUMwSCxzQkFBc0IsQ0FBQ3pHO1lBQzlCLE9BQU8sSUFBSWpCLFdBQVcsNkJBQTZCO2dCQUNqRCxJQUFJLENBQUM2SCx5QkFBeUIsQ0FBQzVHO1lBQ2pDLE9BQU8sSUFBSWpCLFdBQVcsdUJBQXVCO2dCQUMzQyxJQUFJLENBQUM0SCxtQkFBbUIsQ0FBQzNHO1lBQzNCLE9BQU8sSUFBSXlELHNCQUFzQjlDLFFBQVEsQ0FBQ3FILFFBQVFqSixNQUFNLEdBQUc7Z0JBQ3pELHVFQUF1RTtnQkFDdkUsSUFBSSxDQUFDbUQsSUFBSSxDQUFDLFFBQVE4RixVQUFVLGFBQWE7Z0JBQ3pDLElBQUksQ0FBQzlGLElBQUksQ0FBQyxnQkFBZ0JsQyxPQUFPNkYsTUFBTTtnQkFDdkMsSUFBSSxDQUFDM0QsSUFBSSxDQUFDLFdBQVc7b0JBQ25CK0YsTUFBTWxKO29CQUNOeUMsTUFBTXhCO2dCQUNSO1lBQ0Y7UUFFQSw4REFBOEQ7UUFDOUQsbUNBQW1DO1FBQ3JDO0lBQ0Y7SUFFQTs7R0FFQyxHQUNEd0gsY0FBYztRQUNaLE9BQU8sSUFBSSxDQUFDbkIsTUFBTSxDQUFDbUIsV0FBVztJQUNoQztJQUVBOzs7Ozs7O0dBT0MsR0FDRCxNQUFNTCxRQUFRZSxJQUFJLEVBQUU7UUFDbEIsSUFBSSxDQUFDQSxRQUFRLE9BQU9BLFNBQVMsWUFBWXZDLE1BQU1DLE9BQU8sQ0FBQ3NDLE9BQU87WUFDNUQsTUFBTXBSLDJEQUFTQSxDQUFDd0ssY0FBYyxDQUFDO2dCQUM3QkMsU0FBUzlDLFNBQVNDLE1BQU0sQ0FBQ1Usa0JBQWtCO2dCQUMzQ29DLE1BQU12TCwyRUFBYUEsQ0FBQ0EsMkVBQWFBLENBQUMsQ0FBQyxHQUFHaVMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHO29CQUNyRHpHLE9BQU9oRCxTQUFTQyxNQUFNLENBQUNVLGtCQUFrQjtnQkFDM0M7WUFDRjtRQUNGO1FBQ0EsTUFBTSxFQUNKTCxNQUFNLEVBQ05pQixNQUFNLEVBQ1AsR0FBR2tJO1FBQ0osSUFBSSxPQUFPbkosV0FBVyxZQUFZQSxPQUFPb0IsTUFBTSxLQUFLLEdBQUc7WUFDckQsTUFBTXJKLDJEQUFTQSxDQUFDd0ssY0FBYyxDQUFDO2dCQUM3QkMsU0FBUzlDLFNBQVNDLE1BQU0sQ0FBQ1csb0JBQW9CO2dCQUM3Q21DLE1BQU12TCwyRUFBYUEsQ0FBQ0EsMkVBQWFBLENBQUMsQ0FBQyxHQUFHaVMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHO29CQUNyRHpHLE9BQU9oRCxTQUFTQyxNQUFNLENBQUNVLGtCQUFrQjtnQkFDM0M7WUFDRjtRQUNGO1FBQ0EsSUFBSVksV0FBV2lFLGFBQWEsQ0FBQzBCLE1BQU1DLE9BQU8sQ0FBQzVGLFdBQVksUUFBT0EsV0FBVyxZQUFZQSxXQUFXLElBQUcsR0FBSTtZQUNyRyxNQUFNbEosMkRBQVNBLENBQUN3SyxjQUFjLENBQUM7Z0JBQzdCQyxTQUFTOUMsU0FBU0MsTUFBTSxDQUFDWSxvQkFBb0I7Z0JBQzdDa0MsTUFBTXZMLDJFQUFhQSxDQUFDQSwyRUFBYUEsQ0FBQyxDQUFDLEdBQUdpUyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUc7b0JBQ3JEekcsT0FBT2hELFNBQVNDLE1BQU0sQ0FBQ1Usa0JBQWtCO2dCQUMzQztZQUNGO1FBQ0Y7UUFDQSxPQUFPLElBQUkrSSxRQUFRLENBQUM1QyxTQUFTQztZQUMzQixJQUFJLENBQUN5QixXQUFXLENBQUM7Z0JBQ2ZsSTtnQkFDQWlCO1lBQ0YsR0FBR3NGLHNCQUFzQkMsU0FBU0M7UUFDcEM7SUFDRjtJQUVBOzs7OztHQUtDLEdBQ0Q2QixVQUFVVyxPQUFPLEVBQUVJLFFBQVEsRUFBRTtRQUMzQixJQUFJLENBQUNuQixXQUFXLENBQUNlLFNBQVNJO0lBQzVCO0lBRUEsa0JBQWtCO0lBQ2xCLHVCQUF1QjtJQUN2Qjs7OztHQUlDLEdBQ0QsTUFBTWxCLG1CQUFtQjtRQUN2QixJQUFJO1lBQ0YsTUFBTSxFQUNKbUIsUUFBUSxFQUNSMUksT0FBTyxFQUNQMkksVUFBVSxFQUNWOUIsY0FBYyxFQUNmLEdBQUcsTUFBTSxJQUFJLENBQUNXLE9BQU8sQ0FBQztnQkFDckJwSSxRQUFRO1lBQ1Y7WUFFQSx5REFBeUQ7WUFDekQsSUFBSSxDQUFDbUQsSUFBSSxDQUFDLFdBQVc7Z0JBQ25CdkM7WUFDRjtZQUNBLElBQUksQ0FBQ2dILG1CQUFtQixDQUFDO2dCQUN2QmhIO2dCQUNBNkc7WUFDRjtZQUNBLElBQUksQ0FBQ0kseUJBQXlCLENBQUM7Z0JBQzdCeUI7Z0JBQ0FDO1lBQ0Y7WUFDQSxJQUFJLENBQUM3QixzQkFBc0IsQ0FBQzRCO1FBQzlCLEVBQUUsT0FBT2hILE9BQU87WUFDZDlDLElBQUk4QyxLQUFLLENBQUMsa0VBQWtFQTtRQUM5RSxTQUFVO1lBQ1I5QyxJQUFJa0IsSUFBSSxDQUFDO1lBQ1QsSUFBSSxDQUFDNEcsTUFBTSxDQUFDa0MsV0FBVyxHQUFHO1lBQzFCLElBQUksQ0FBQ3JHLElBQUksQ0FBQztRQUNaO0lBQ0Y7SUFFQTs7Ozs7OztHQU9DLEdBQ0QrRSxZQUFZZSxPQUFPLEVBQUVJLFFBQVEsRUFBRTtRQUM3QixJQUFJSSxhQUFhOUMsVUFBVXZGLE1BQU0sR0FBRyxLQUFLdUYsU0FBUyxDQUFDLEVBQUUsS0FBS3pCLFlBQVl5QixTQUFTLENBQUMsRUFBRSxHQUFHO1FBQ3JGLElBQUkrQyxLQUFLTDtRQUNULE1BQU1NLFdBQVdWO1FBQ2pCLElBQUksQ0FBQ3JDLE1BQU1DLE9BQU8sQ0FBQzhDLFdBQVc7WUFDNUIsSUFBSSxDQUFDQSxTQUFTQyxPQUFPLEVBQUU7Z0JBQ3JCRCxTQUFTQyxPQUFPLEdBQUc7WUFDckI7WUFDQSxJQUFJRCxTQUFTM0osTUFBTSxLQUFLLGtCQUFrQjJKLFNBQVMzSixNQUFNLEtBQUssdUJBQXVCO2dCQUNuRiwyQkFBMkI7Z0JBQzNCMEosS0FBSyxDQUFDRyxLQUFLekg7b0JBQ1QsSUFBSSxDQUFDc0Ysc0JBQXNCLENBQUN0RixJQUFJMEUsTUFBTSxJQUFJLEVBQUUsRUFBRTZDLFNBQVMzSixNQUFNLEtBQUssZ0JBQWdCeUo7b0JBQ2xGSixTQUFTUSxLQUFLekg7Z0JBQ2hCO1lBQ0YsT0FBTyxJQUFJdUgsU0FBUzNKLE1BQU0sS0FBSywyQkFBMkI7Z0JBQ3hELElBQUksQ0FBQytJLFVBQVUsQ0FBQzFLLE1BQU0sQ0FBQzRLLFNBQVNTO2dCQUNoQztZQUNGO1FBQ0Y7UUFDQSxJQUFJLENBQUNJLGdCQUFnQixDQUFDSCxVQUFVRDtJQUNsQztJQUVBOzs7Ozs7OztHQVFDLEdBRUQ7Ozs7Ozs7R0FPQyxHQUVEOzs7Ozs7O0dBT0MsR0FFRHJCLEtBQUswQixlQUFlLEVBQUVDLGNBQWMsRUFBRTtRQUNwQyxJQUFJLE9BQU9ELG9CQUFvQixZQUFhLEVBQUNDLGtCQUFrQnBELE1BQU1DLE9BQU8sQ0FBQ21ELGVBQWMsR0FBSTtZQUM3RixPQUFPLElBQUlaLFFBQVEsQ0FBQzVDLFNBQVNDO2dCQUMzQixJQUFJO29CQUNGLElBQUksQ0FBQ3lCLFdBQVcsQ0FBQzt3QkFDZmxJLFFBQVErSjt3QkFDUjlJLFFBQVErSTtvQkFDVixHQUFHekQsc0JBQXNCQyxTQUFTQyxRQUFRO2dCQUM1QyxFQUFFLE9BQU9uRSxPQUFPO29CQUNkbUUsT0FBT25FO2dCQUNUO1lBQ0Y7UUFDRjtRQUNBLElBQUl5SCxtQkFBbUIsT0FBT0Esb0JBQW9CLFlBQVksT0FBT0MsbUJBQW1CLFlBQVk7WUFDbEcsT0FBTyxJQUFJLENBQUM5QixXQUFXLENBQUM2QixpQkFBaUJDO1FBQzNDO1FBQ0EsT0FBTyxJQUFJLENBQUMvQixTQUFTLENBQUM4QjtJQUN4QjtJQUVBOzs7R0FHQyxHQUNEOUIsVUFBVWdCLE9BQU8sRUFBRTtRQUNqQixJQUFJbkM7UUFDSixPQUFRbUMsUUFBUWpKLE1BQU07WUFDcEIsS0FBSztnQkFDSDhHLFNBQVMsSUFBSSxDQUFDVSxlQUFlLEdBQUc7b0JBQUMsSUFBSSxDQUFDQSxlQUFlO2lCQUFDLEdBQUcsRUFBRTtnQkFDM0Q7WUFDRixLQUFLO2dCQUNIVixTQUFTLElBQUksQ0FBQ1UsZUFBZSxJQUFJO2dCQUNqQztZQUNGLEtBQUs7Z0JBQ0gsSUFBSSxDQUFDVSxXQUFXLENBQUNlLFNBQVN0RTtnQkFDMUJtQyxTQUFTO2dCQUNUO1lBQ0YsS0FBSztnQkFDSEEsU0FBUyxJQUFJLENBQUNXLGNBQWMsSUFBSTtnQkFDaEM7WUFDRjtnQkFDRSxNQUFNLElBQUlOLE1BQU16SCxTQUFTQyxNQUFNLENBQUNJLGVBQWUsQ0FBQ2tKLFFBQVFqSixNQUFNO1FBQ2xFO1FBQ0EsT0FBTztZQUNMaUssSUFBSWhCLFFBQVFnQixFQUFFO1lBQ2RMLFNBQVNYLFFBQVFXLE9BQU87WUFDeEI5QztRQUNGO0lBQ0Y7SUFFQTs7Ozs7O0dBTUMsR0FDRGdCLGVBQWVsSCxPQUFPLEVBQUU7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQzBHLE1BQU0sQ0FBQ21CLFdBQVcsRUFBRTtZQUM1QixJQUFJLENBQUNuQixNQUFNLENBQUNtQixXQUFXLEdBQUc7WUFDMUIsSUFBSSxDQUFDdEYsSUFBSSxDQUFDLFdBQVc7Z0JBQ25CdkM7WUFDRjtZQUNBcEIsSUFBSTBLLEtBQUssQ0FBQ3hLLFNBQVNnQixJQUFJLENBQUNDLFNBQVMsQ0FBQ0M7UUFDcEM7SUFDRjtJQUVBOzs7Ozs7Ozs7O0dBVUMsR0FDRG1ILGtCQUFrQm9DLGFBQWEsRUFBRUMsWUFBWSxFQUFFO1FBQzdDLElBQUksSUFBSSxDQUFDOUMsTUFBTSxDQUFDbUIsV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDbkIsTUFBTSxDQUFDK0MseUJBQXlCLElBQUksQ0FBQ0YsZUFBZTtZQUN2RixJQUFJLENBQUM3QyxNQUFNLENBQUNtQixXQUFXLEdBQUc7WUFDMUIsSUFBSW5HO1lBQ0osSUFBSTZILGVBQWU7Z0JBQ2pCN0gsUUFBUSxJQUFJdEssdUVBQXFCQSxDQUFDLE1BQ2xDLGtCQUFrQjtnQkFDbEJvUyxnQkFBZ0IxSyxTQUFTQyxNQUFNLENBQUNDLFlBQVk7Z0JBQzVDSixJQUFJMEssS0FBSyxDQUFDNUg7WUFDWixPQUFPO2dCQUNMQSxRQUFRLElBQUl0Syx1RUFBcUJBLENBQUMsTUFDbEMsaUJBQWlCO2dCQUNqQm9TLGdCQUFnQjFLLFNBQVNDLE1BQU0sQ0FBQ0UsdUJBQXVCO2dCQUN2REwsSUFBSThDLEtBQUssQ0FBQ0E7Z0JBQ1YsSUFBSSxDQUFDMUIsT0FBTyxHQUFHO2dCQUNmLElBQUksQ0FBQzBHLE1BQU0sQ0FBQ2dDLFFBQVEsR0FBRztnQkFDdkIsSUFBSSxDQUFDOUIsZUFBZSxHQUFHO2dCQUN2QixJQUFJLENBQUNGLE1BQU0sQ0FBQ2lDLFVBQVUsR0FBRztnQkFDekIsSUFBSSxDQUFDakMsTUFBTSxDQUFDK0MseUJBQXlCLEdBQUc7WUFDMUM7WUFDQSxJQUFJLENBQUNsSCxJQUFJLENBQUMsY0FBY2I7UUFDMUI7SUFDRjtJQUVBOzs7O0dBSUMsR0FDRDBGLHdCQUF3QnNDLFVBQVUsRUFBRWhJLEtBQUssRUFBRTtRQUN6Q00sMkJBQTJCMEgsWUFBWWhJLE9BQU8sSUFBSTtRQUNsRCxJQUFJLENBQUN5RixpQkFBaUIsQ0FBQyxPQUFPekYsUUFBUUEsTUFBTUUsT0FBTyxHQUFHMEM7SUFDeEQ7SUFFQTs7R0FFQyxHQUNEd0MsdUJBQXVCNEIsUUFBUSxFQUFFO1FBQy9CLElBQUlpQixnQkFBZ0I1RCxVQUFVdkYsTUFBTSxHQUFHLEtBQUt1RixTQUFTLENBQUMsRUFBRSxLQUFLekIsWUFBWXlCLFNBQVMsQ0FBQyxFQUFFLEdBQUc7UUFDeEYsSUFBSThDLGFBQWE5QyxVQUFVdkYsTUFBTSxHQUFHLEtBQUt1RixTQUFTLENBQUMsRUFBRSxLQUFLekIsWUFBWXlCLFNBQVMsQ0FBQyxFQUFFLEdBQUc7UUFDckYsd0JBQXdCO1FBQ3hCLElBQUk2RCxnQkFBZ0JsQjtRQUNwQixJQUFJLENBQUMxQyxNQUFNQyxPQUFPLENBQUMyRCxnQkFBZ0I7WUFDakNoTCxJQUFJOEMsS0FBSyxDQUFDLDRFQUE0RWtJO1lBQ3RGQSxnQkFBZ0IsRUFBRTtRQUNwQjtRQUNBLEtBQUssTUFBTUMsV0FBV25CLFNBQVU7WUFDOUIsSUFBSSxPQUFPbUIsWUFBWSxVQUFVO2dCQUMvQmpMLElBQUk4QyxLQUFLLENBQUMsa0VBQWtFZ0g7Z0JBQzVFa0IsZ0JBQWdCLEVBQUU7Z0JBQ2xCO1lBQ0Y7UUFDRjtRQUVBLHdFQUF3RTtRQUN4RSxJQUFJLENBQUN2UyxzREFBTUEsQ0FBQyxJQUFJLENBQUNxUCxNQUFNLENBQUNnQyxRQUFRLEVBQUVrQixnQkFBZ0I7WUFDaEQsc0VBQXNFO1lBQ3RFLG9EQUFvRDtZQUNwRCxJQUFJRCxpQkFBaUIzRCxNQUFNQyxPQUFPLENBQUMsSUFBSSxDQUFDUyxNQUFNLENBQUNnQyxRQUFRLEtBQUssSUFBSSxDQUFDaEMsTUFBTSxDQUFDZ0MsUUFBUSxDQUFDbEksTUFBTSxHQUFHLEtBQUssQ0FBQ3FJLFlBQVk7Z0JBQzFHakssSUFBSThDLEtBQUssQ0FBQyxtRkFBbUZrSTtZQUMvRjtZQUNBLElBQUksQ0FBQ2xELE1BQU0sQ0FBQ2dDLFFBQVEsR0FBR2tCO1lBQ3ZCLElBQUksQ0FBQ3JILElBQUksQ0FBQyxtQkFBbUJxSDtRQUMvQjtRQUVBLHlCQUF5QjtRQUN6QixJQUFJLElBQUksQ0FBQ2hELGVBQWUsS0FBS2dELGFBQWEsQ0FBQyxFQUFFLEVBQUU7WUFDN0MsSUFBSSxDQUFDaEQsZUFBZSxHQUFHZ0QsYUFBYSxDQUFDLEVBQUUsSUFBSTtRQUM3QztJQUNGO0lBRUE7Ozs7Ozs7O0dBUUMsR0FDRDVDLHNCQUFzQjtRQUNwQixJQUFJLEVBQ0ZoSCxPQUFPLEVBQ1A2RyxjQUFjLEVBQ2YsR0FBR2QsVUFBVXZGLE1BQU0sR0FBRyxLQUFLdUYsU0FBUyxDQUFDLEVBQUUsS0FBS3pCLFlBQVl5QixTQUFTLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDekUsSUFBSSxDQUFDL0YsV0FBVyxDQUFDNkcsZ0JBQWdCO1lBQy9CakksSUFBSThDLEtBQUssQ0FBQywwRUFBMEU7Z0JBQ2xGMUI7Z0JBQ0E2RztZQUNGO1lBQ0E7UUFDRjtRQUNBLElBQUlBLG1CQUFtQixXQUFXO1lBQ2hDLElBQUksQ0FBQ00saUJBQWlCLENBQUM7UUFDekIsT0FBTztZQUNMLElBQUksQ0FBQ0QsY0FBYyxDQUFDbEg7WUFDcEIsSUFBSUEsWUFBWSxJQUFJLENBQUNBLE9BQU8sRUFBRTtnQkFDNUIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO2dCQUNmLElBQUksSUFBSSxDQUFDMEcsTUFBTSxDQUFDa0MsV0FBVyxFQUFFO29CQUMzQixJQUFJLENBQUNyRyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQ3ZDLE9BQU87Z0JBQ3hDO1lBQ0Y7UUFDRjtJQUNGO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0RpSCw0QkFBNEI7UUFDMUIsSUFBSSxFQUNGeUIsUUFBUSxFQUNSQyxVQUFVLEVBQ1gsR0FBRzVDLFVBQVV2RixNQUFNLEdBQUcsS0FBS3VGLFNBQVMsQ0FBQyxFQUFFLEtBQUt6QixZQUFZeUIsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBQ3pFLElBQUksT0FBTzRDLGVBQWUsV0FBVztZQUNuQy9KLElBQUk4QyxLQUFLLENBQUMsNEVBQTRFO2dCQUNwRmlIO1lBQ0Y7WUFDQTtRQUNGO1FBQ0EsSUFBSUEsZUFBZSxJQUFJLENBQUNqQyxNQUFNLENBQUNpQyxVQUFVLEVBQUU7WUFDekMsSUFBSSxDQUFDakMsTUFBTSxDQUFDaUMsVUFBVSxHQUFHQTtZQUN6QixJQUFJLENBQUM3QixzQkFBc0IsQ0FBQzRCLFlBQVksRUFBRTtRQUM1QztJQUNGO0FBQ0Y7QUFDQWxTLDRFQUFlQSxDQUFDMlAscUJBQXFCLGlCQUFpQjtJQUNwRHVDLFVBQVU7SUFDVmIsYUFBYTtJQUNiYyxZQUFZO0lBQ1pDLGFBQWE7SUFDYmEsMkJBQTJCO0lBQzNCSyxzQkFBc0I7QUFDeEI7QUFFQSxNQUFNQyxxQkFBcUJwVCx1RUFBZ0JBO0lBQ3pDeVAsWUFBWTRELElBQUksQ0FBRTtRQUNoQixJQUFJLEVBQ0ZDLEdBQUcsRUFDSEMsTUFBTSxFQUNOekUsUUFBUSxFQUNSMEUsVUFBVSxLQUFLLEVBQ2hCLEdBQUdIO1FBQ0osS0FBSztRQUNMeFQsNEVBQWVBLENBQUMsSUFBSSxFQUFFLE9BQU8sS0FBSztRQUNsQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLFVBQVUsS0FBSztRQUNyQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLFlBQVksS0FBSztRQUN2Q0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLFVBQVUsS0FBSztRQUNyQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLGVBQWUsS0FBSztRQUMxQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLGlCQUFpQixLQUFLO1FBQzVDQSw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUsV0FBVyxLQUFLO1FBQ3RDLElBQUksQ0FBQ3lULEdBQUcsR0FBR0E7UUFDWCxJQUFJLENBQUNDLE1BQU0sR0FBR0EsVUFBVTtRQUN4QixJQUFJLENBQUN6RSxRQUFRLEdBQUdBLFlBQVl0QjtRQUM1QixJQUFJLENBQUNuSCxNQUFNLEdBQUdzSDtRQUNkLElBQUksQ0FBQzhGLFdBQVcsR0FBRzlGO1FBQ25CLElBQUksQ0FBQytGLGFBQWEsR0FBRztRQUNyQixJQUFJLENBQUNGLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNHLFdBQVc7SUFDbEI7SUFDQUEsY0FBYztRQUNaLElBQUksQ0FBQ0YsV0FBVyxHQUFHRyxPQUFPQyxZQUFZO1lBQ3BDLElBQUksSUFBSSxDQUFDeE4sTUFBTSxJQUFJLElBQUksQ0FBQ0EsTUFBTSxDQUFDeU4sTUFBTSxFQUFFO2dCQUNyQ0MsY0FBYyxJQUFJLENBQUNOLFdBQVc7Z0JBQzlCTyxXQUFXO29CQUNULElBQUksQ0FBQyxJQUFJLENBQUNOLGFBQWEsRUFBRTt3QkFDdkIsSUFBSSxDQUFDOUgsSUFBSSxDQUFDO29CQUNaO29CQUNBLElBQUksQ0FBQzhILGFBQWEsR0FBRztvQkFDckIsSUFBSSxDQUFDck4sTUFBTSxHQUFHc0g7Z0JBQ2hCLEdBQUcsSUFBSSxDQUFDNkYsT0FBTztZQUNqQjtZQUNBLElBQUksSUFBSSxDQUFDbk4sTUFBTSxLQUFLc0gsV0FBV29HLGNBQWMsSUFBSSxDQUFDTixXQUFXO1FBQy9ELEdBQUc7SUFDTDtJQUNBUSxPQUFPO1FBQ0wsSUFBSUM7UUFDSixJQUFJLENBQUM3TixNQUFNLEdBQUdBLE9BQU80TixJQUFJLENBQUMsSUFBSSxDQUFDWCxHQUFHLENBQUNhLElBQUksRUFBRSxJQUFJLENBQUNaLE1BQU0sRUFBRSxJQUFJLENBQUN6RSxRQUFRO1FBQ25FLElBQUksQ0FBQ29GLGVBQWUsSUFBSSxDQUFDN04sTUFBTSxNQUFNLFFBQVE2TixpQkFBaUIsS0FBSyxLQUFLQSxhQUFhRSxLQUFLLEVBQUUsSUFBSSxDQUFDL04sTUFBTSxDQUFDK04sS0FBSztJQUMvRztJQUNBQyxRQUFRO1FBQ04sSUFBSSxDQUFDWCxhQUFhLEdBQUc7UUFDckIsSUFBSSxJQUFJLENBQUNyTixNQUFNLEVBQUUsSUFBSSxDQUFDQSxNQUFNLENBQUNnTyxLQUFLO0lBQ3BDO0lBQ0FDLFNBQVNDLHlCQUF5QixFQUFFO1FBQ2xDLElBQUlBLDJCQUEyQjtZQUM3QmxPLE9BQU9tTyxRQUFRLENBQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUNuQixHQUFHLENBQUNhLElBQUk7UUFDdkMsT0FBTztZQUNMOU4sT0FBT21PLFFBQVEsQ0FBQ0wsSUFBSSxHQUFHLElBQUksQ0FBQ2IsR0FBRyxDQUFDYSxJQUFJO1FBQ3RDO0lBQ0Y7QUFDRjtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTTyxVQUFVcEIsR0FBRztJQUNwQixPQUFPLElBQUl6QixRQUFRLENBQUM1QyxTQUFTQztRQUMzQixJQUFJO1lBQ0YsTUFBTXlGLE1BQU1yTyxTQUFTQyxhQUFhLENBQUM7WUFDbkNvTyxJQUFJQyxNQUFNLEdBQUcsSUFBTTNGLFFBQVE7WUFDM0IwRixJQUFJRSxPQUFPLEdBQUcsSUFBTTVGLFFBQVE7WUFDNUIwRixJQUFJRyxHQUFHLEdBQUd4QjtRQUNaLEVBQUUsT0FBT3lCLEdBQUc7WUFDVjdGLE9BQU82RjtRQUNUO0lBQ0Y7QUFDRjtBQUVBOztDQUVDLEdBQ0QsTUFBTUMsY0FBYzNPLENBQUFBO0lBQ2xCLE1BQU0sRUFDSkMsVUFBQUEsU0FBUSxFQUNULEdBQUdEO0lBQ0osTUFBTTRPLFdBQVczTyxVQUFTNE8sYUFBYSxDQUFDO0lBQ3hDLElBQUlELFVBQVU7UUFDWixPQUFPQSxTQUFTdE8sT0FBTztJQUN6QjtJQUNBLE1BQU13TyxZQUFZN08sVUFBUzRPLGFBQWEsQ0FBQztJQUN6QyxJQUFJQyxXQUFXO1FBQ2IsT0FBT0EsVUFBVXhPLE9BQU87SUFDMUI7SUFDQSxJQUFJTCxVQUFTOE8sS0FBSyxJQUFJOU8sVUFBUzhPLEtBQUssQ0FBQ3ZMLE1BQU0sR0FBRyxHQUFHO1FBQy9DLE9BQU92RCxVQUFTOE8sS0FBSztJQUN2QjtJQUNBLE9BQU8vTyxRQUFPbU8sUUFBUSxDQUFDYSxRQUFRO0FBQ2pDO0FBRUE7O0NBRUMsR0FDRCxlQUFlQyxZQUFZalAsT0FBTTtJQUMvQixNQUFNLEVBQ0pDLFVBQUFBLFNBQVEsRUFDVCxHQUFHRDtJQUVKLHNDQUFzQztJQUN0QyxJQUFJa1AsT0FBT2pQLFVBQVM0TyxhQUFhLENBQUM7SUFDbEMsSUFBSUssUUFBUyxNQUFNYixVQUFVYSxLQUFLcEIsSUFBSSxHQUFJO1FBQ3hDLE9BQU9vQixLQUFLcEIsSUFBSTtJQUNsQjtJQUVBLHdEQUF3RDtJQUN4RG9CLE9BQU9sRyxNQUFNbUcsSUFBSSxDQUFDbFAsVUFBU21QLGdCQUFnQixDQUFDLDRCQUE0QkMsSUFBSSxDQUFDQyxDQUFBQSxRQUFTQyxRQUFRRCxNQUFNeEIsSUFBSTtJQUN4RyxJQUFJb0IsUUFBUyxNQUFNYixVQUFVYSxLQUFLcEIsSUFBSSxHQUFJO1FBQ3hDLE9BQU9vQixLQUFLcEIsSUFBSTtJQUNsQjtJQUNBLE9BQU87QUFDVDtBQUVBOzs7Q0FHQyxHQUNELE1BQU0wQixrQkFBa0IsVUFBYTtRQUNuQ0MsTUFBTWQsWUFBWTNPO1FBQ2xCa1AsTUFBTSxNQUFNRCxZQUFZalA7SUFDMUI7QUFFQTs7Q0FFQyxHQUNELGVBQWVrQyxpQkFBaUJ3TixNQUFNO0lBQ3BDLElBQUk7UUFDRixNQUFNQyxpQkFBaUIsTUFBTUg7UUFDN0IsbUVBQW1FO1FBQ25FRSxPQUFPalAsTUFBTSxDQUFDO1lBQ1p1TCxTQUFTO1lBQ1RLLElBQUk3RztZQUNKcEQsUUFBUTtZQUNSaUIsUUFBUXNNO1FBQ1YsR0FBRzVJO0lBQ0wsRUFBRSxPQUFPckMsT0FBTztRQUNkOUMsSUFBSThDLEtBQUssQ0FBQztZQUNSRSxTQUFTOUMsU0FBU0MsTUFBTSxDQUFDRyxnQkFBZ0I7WUFDekMwTixlQUFlbEw7UUFDakI7SUFDRjtBQUNGO0FBRUEsTUFBTW1MLFlBQVk7SUFBQztJQUFRO0lBQVc7Q0FBYztBQUNwRCxNQUFNQyxpQkFBaUI7SUFBQztJQUF1QjtJQUFxQjtJQUF3QjtJQUF3QjtJQUFpQjtJQUE4QjtJQUFlO0lBQTJCO0NBQTZCO0FBRTFPLCtGQUErRjtBQUM5RixnQkFBZUM7SUFDZCxJQUFJO1FBQ0YsSUFBSSxPQUFPOVAsYUFBYSxhQUFhO1FBQ3JDLE1BQU0rUCxrQkFBa0IvUCxTQUFTQyxhQUFhLENBQUM7UUFDL0MsTUFBTSxFQUNKNkYsUUFBUSxFQUNULEdBQUcsTUFBTUgsWUFBWSxjQUFjO1lBQ2xDSyxTQUFTO1FBQ1g7UUFDQStKLGdCQUFnQmxDLElBQUksR0FBRyxDQUFDLEVBQUUvSCxTQUFTLE1BQU0sQ0FBQztRQUMxQ2lLLGdCQUFnQkMsV0FBVyxHQUFHO1FBQzlCRCxnQkFBZ0IxRSxJQUFJLEdBQUc7UUFDdkIwRSxnQkFBZ0JFLEdBQUcsR0FBRztRQUN0QixJQUFJRixnQkFBZ0JHLE9BQU8sSUFBSUgsZ0JBQWdCRyxPQUFPLENBQUNDLFFBQVEsRUFBRTtZQUMvRCxJQUFJSixnQkFBZ0JHLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLGFBQWE7Z0JBQ2hEblEsU0FBU29RLElBQUksQ0FBQ0MsV0FBVyxDQUFDTjtZQUM1QjtRQUNGO0lBQ0YsRUFBRSxPQUFPdEwsT0FBTztRQUNkOUMsSUFBSXlELElBQUksQ0FBQ1g7SUFDWDtBQUNGO0FBQ0EsTUFBTTZMO0lBQ0puSCxhQUFjO1FBQ1osSUFBSSxFQUNGb0gsaUJBQWlCOVQsZ0JBQWdCQyxXQUFXLEVBQzVDOFQsYUFBYSxFQUFFLEVBQ2ZDLGNBQWMsS0FBSyxFQUNuQkMsU0FBUyxlQUFlLEVBQ3pCLEdBQUc1SCxVQUFVdkYsTUFBTSxHQUFHLEtBQUt1RixTQUFTLENBQUMsRUFBRSxLQUFLekIsWUFBWXlCLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUN6RXZQLDRFQUFlQSxDQUFDLElBQUksRUFBRSxrQkFBa0JrRCxnQkFBZ0JDLFdBQVc7UUFDbkVuRCw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUsY0FBYyxLQUFLO1FBQ3pDQSw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxLQUFLO1FBQ3ZDQSw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUsZUFBZSxLQUFLO1FBQzFDQSw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUsYUFBYSxLQUFLO1FBQ3hDQSw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUsY0FBYyxLQUFLO1FBQ3pDQSw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEtBQUs7UUFDNUNBLDRFQUFlQSxDQUFDLElBQUksRUFBRSx5QkFBeUIsS0FBSztRQUNwREEsNEVBQWVBLENBQUMsSUFBSSxFQUFFLGNBQWMsS0FBSztRQUN6Q0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLFVBQVUsS0FBSztRQUNyQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLGVBQWUsS0FBSztRQUMxQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLGVBQWUsS0FBSztRQUMxQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLHVCQUF1QixLQUFLO1FBQ2xEQSw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLEtBQUs7UUFDakRBLDRFQUFlQSxDQUFDLElBQUksRUFBRSxjQUFjLEtBQUs7UUFDekNBLDRFQUFlQSxDQUFDLElBQUksRUFBRSxxQkFBcUIsS0FBSztRQUNoREEsNEVBQWVBLENBQUMsSUFBSSxFQUFFLG1CQUFtQixLQUFLO1FBQzlDQSw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLEtBQUs7UUFDaERBLDRFQUFlQSxDQUFDLElBQUksRUFBRSxZQUFZLEtBQUs7UUFDdkNBLDRFQUFlQSxDQUFDLElBQUksRUFBRSxZQUFZLEtBQUs7UUFDdkNBLDRFQUFlQSxDQUFDLElBQUksRUFBRSxvQkFBb0IsS0FBSztRQUMvQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLG1CQUFtQixLQUFLO1FBQzlDQSw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUsb0JBQW9COEYsY0FBY0ksZ0JBQWdCO1FBQ3hFbEcsNEVBQWVBLENBQUMsSUFBSSxFQUFFLGFBQWE7UUFDbkNBLDRFQUFlQSxDQUFDLElBQUksRUFBRSxvQkFBb0IsS0FBSztRQUMvQ0EsNEVBQWVBLENBQUMsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QyxJQUFJLENBQUNnWCxjQUFjLEdBQUdBO1FBQ3RCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUMxSyxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDNkssVUFBVSxHQUFHLE9BQU8sMEJBQTBCO1FBQ25ELElBQUksQ0FBQ0MsYUFBYSxHQUFHLE9BQU8sWUFBWTtRQUN4QyxJQUFJLENBQUNDLHFCQUFxQixHQUFHO1FBQzdCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUc7UUFDekIsSUFBSSxDQUFDQyxlQUFlLEdBQUc7UUFDdkIsSUFBSSxDQUFDTCxNQUFNLEdBQUdBO1FBQ2RqWCxrRUFBU0EsQ0FBQ2lYO1FBQ1YsSUFBSSxDQUFDRCxXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ08sV0FBVyxHQUFHUCxjQUFjO1FBQ2pDLElBQUksQ0FBQ1Esa0JBQWtCLEdBQUc7SUFDNUI7SUFDQSxNQUFNQyxPQUFPO1FBQ1gsSUFBSSxFQUNGdEwsV0FBVzdKLGdCQUFnQkMsVUFBVSxFQUNyQ21WLGdCQUFnQixLQUFLLEVBQ3JCQyxVQUFVO1lBQ1JDLE1BQU07WUFDTnRPLFNBQVM7WUFDVHVPLGFBQWE7WUFDYkMsZUFBZTtZQUNmQyxRQUFRO1lBQ1JDLFlBQVk7UUFDZCxDQUFDLEVBQ0RDLGNBQWMsQ0FBQyxDQUFDLEVBQ2hCQyxrQkFBa0IsSUFBSSxFQUN0QjlMLFlBQVk7WUFDVkcsU0FBUztRQUNYLENBQUMsRUFDRDRMLFVBQVUsRUFDVkMsbUJBQW1CLEtBQUssRUFDeEJDLFdBQVcsU0FBUyxFQUNyQixHQUFHaEosVUFBVXZGLE1BQU0sR0FBRyxLQUFLdUYsU0FBUyxDQUFDLEVBQUUsS0FBS3pCLFlBQVl5QixTQUFTLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDekUsSUFBSSxJQUFJLENBQUM4SCxhQUFhLEVBQUUsTUFBTSxJQUFJdEgsTUFBTTtRQUN4QyxNQUFNLEVBQ0p4RCxRQUFRLEVBQ1JDLFFBQVEsRUFDVCxHQUFHLE1BQU1KLFlBQVlDLFVBQVVDO1FBQ2hDbEUsSUFBSWtCLElBQUksQ0FBQ2lELFVBQVU7UUFDbkIsSUFBSSxDQUFDQSxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQzhMLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR0E7UUFDeEIsSUFBSSxDQUFDRSxhQUFhLEdBQUcsQ0FBQyxDQUFFTCxDQUFBQSxlQUFlblMsT0FBTytELElBQUksQ0FBQ29PLGFBQWFuTyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUVxTyxDQUFBQSxjQUFjclMsT0FBTytELElBQUksQ0FBQ3NPLFlBQVlyTyxNQUFNLEdBQUc7UUFDakk1QixJQUFJcVEsZUFBZSxDQUFDak07UUFDcEIsSUFBSW9MLGVBQWV4UCxJQUFJc1EsU0FBUzthQUFRdFEsSUFBSXVRLFVBQVU7UUFDdEQsSUFBSSxDQUFDckIscUJBQXFCLEdBQUdjO1FBQzdCLE1BQU1RLGlCQUFpQixJQUFJQyxJQUFJdE07UUFDL0IsSUFBSXFNLGVBQWVFLFFBQVEsQ0FBQ0MsUUFBUSxDQUFDLE1BQU1ILGVBQWVFLFFBQVEsSUFBSTthQUFhRixlQUFlRSxRQUFRLElBQUk7UUFDOUdGLGVBQWVJLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUNSLGFBQWEsQ0FBQyxDQUFDO1FBRTVELGNBQWM7UUFDZCxJQUFJLENBQUNTLFdBQVcsR0FBRzVTLGNBQWMsQ0FBQzs7Y0FFeEIsRUFBRWlTLG1CQUFtQixXQUFXLEdBQUc7O2FBRXBDLEVBQUVNLGVBQWV0RSxJQUFJLENBQUM7OytEQUU0QixFQUFFLElBQUksQ0FBQzRDLFdBQVcsQ0FBQztnQkFDbEUsQ0FBQztRQUNiLElBQUksQ0FBQ2dDLG1CQUFtQixHQUFHN1MsY0FBYztRQUN6QyxJQUFJLENBQUM2UyxtQkFBbUIsQ0FBQ0MsS0FBSyxDQUFDeFUsT0FBTyxHQUFHO1FBQ3pDLElBQUksQ0FBQ3VVLG1CQUFtQixDQUFDQyxLQUFLLENBQUNDLFdBQVcsQ0FBQyxXQUFXLElBQUksQ0FBQzNCLFdBQVcsQ0FBQ25OLFFBQVE7UUFDL0UsTUFBTStPLE9BQU83UyxPQUFPQyxRQUFRLENBQUNDLGFBQWEsQ0FBQztRQUMzQzJTLEtBQUtDLFlBQVksQ0FBQyxPQUFPO1FBQ3pCRCxLQUFLQyxZQUFZLENBQUMsUUFBUTtRQUMxQkQsS0FBS0MsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFL00sU0FBUyxlQUFlLENBQUM7UUFDdEQsSUFBSSxDQUFDZ04sU0FBUyxHQUFHRjtRQUNqQixNQUFNLEVBQ0pHLGtCQUFrQjNNLGlCQUFpQixFQUNuQzRNLHFCQUFxQixDQUFDLENBQUMsRUFDeEIsR0FBRyxJQUFJLENBQUNwQixVQUFVLElBQUksQ0FBQztRQUN4QixNQUFNcUIscUJBQXFCaFosbURBQVNBLENBQUNvRixjQUFjYixZQUFZLEVBQUV3VTtRQUNqRSxNQUFNRSx1QkFBdUJELGtCQUFrQixDQUFDRixnQkFBZ0IsSUFBSTFULGNBQWNiLFlBQVksQ0FBQzRILGtCQUFrQjtRQUNqSCxJQUFJLENBQUMrTSxpQkFBaUIsR0FBR0QscUJBQXFCeFUsS0FBSztRQUNuRCxPQUFPLElBQUk2TSxRQUFRLENBQUM1QyxTQUFTQztZQUMzQixJQUFJLENBQUM0SixXQUFXLENBQUNsRSxNQUFNLEdBQUc7Z0JBQ3hCLDRDQUE0QztnQkFDNUMsSUFBSSxDQUFDOEUsVUFBVTtnQkFDZixNQUFNQyxhQUFhLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNDLFNBQVMsQ0FBQztnQkFDbkRGLFdBQVd2UyxFQUFFLENBQUMsUUFBUUYsQ0FBQUE7b0JBQ3BCLE1BQU0sRUFDSjRPLElBQUksRUFDSjVLLElBQUksRUFDSkgsS0FBSyxFQUNOLEdBQUc3RDtvQkFDSixJQUFJNE8sU0FBUyxtQkFBbUI1SyxLQUFLNE8sT0FBTyxFQUFFO3dCQUM1QyxrQkFBa0I7d0JBQ2xCLElBQUksQ0FBQzVDLGFBQWEsR0FBRzt3QkFDckIsSUFBSSxDQUFDNkMsY0FBYyxDQUFDLElBQUksQ0FBQ3hDLGtCQUFrQjt3QkFDM0N0SSxRQUFRdEI7b0JBQ1YsT0FBTyxJQUFJNUMsT0FBTzt3QkFDaEJtRSxPQUFPLElBQUlVLE1BQU03RTtvQkFDbkI7Z0JBQ0Y7Z0JBQ0E0TyxXQUFXSyxLQUFLLENBQUM7b0JBQ2ZsRSxNQUFNO29CQUNONUssTUFBTTt3QkFDSjhNO3dCQUNBRSxZQUFZLElBQUksQ0FBQ0EsVUFBVTt3QkFDM0JyQixnQkFBZ0IsSUFBSSxDQUFDQSxjQUFjO3dCQUNuQ0MsWUFBWSxJQUFJLENBQUNBLFVBQVU7d0JBQzNCSyx1QkFBdUIsSUFBSSxDQUFDQSxxQkFBcUI7d0JBQ2pESCxRQUFRLElBQUksQ0FBQ0EsTUFBTTt3QkFDbkJVO3dCQUNBVTtvQkFDRjtnQkFDRjtZQUNGO1lBQ0EvUixPQUFPQyxRQUFRLENBQUNvUSxJQUFJLENBQUNDLFdBQVcsQ0FBQyxJQUFJLENBQUN5QyxTQUFTO1lBQy9DL1MsT0FBT0MsUUFBUSxDQUFDMlQsSUFBSSxDQUFDdEQsV0FBVyxDQUFDLElBQUksQ0FBQ21DLFdBQVc7WUFDakR6UyxPQUFPQyxRQUFRLENBQUMyVCxJQUFJLENBQUN0RCxXQUFXLENBQUMsSUFBSSxDQUFDb0MsbUJBQW1CO1FBQzNEO0lBQ0Y7SUFDQW1CLFFBQVE7UUFDTixJQUFJLEVBQ0ZDLFdBQVcsRUFBRSxFQUNiQyxZQUFZQyxZQUFZLEVBQUUsRUFDM0IsR0FBR2pMLFVBQVV2RixNQUFNLEdBQUcsS0FBS3VGLFNBQVMsQ0FBQyxFQUFFLEtBQUt6QixZQUFZeUIsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxJQUFJLENBQUM4SCxhQUFhLEVBQUUsTUFBTSxJQUFJdEgsTUFBTTtRQUN6QyxJQUFJLENBQUN3SCxpQkFBaUIsR0FBRytDO1FBQ3pCLElBQUksQ0FBQ0UsU0FBUyxHQUFHQTtRQUNqQixPQUFPLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxNQUFNO0lBQzdCO0lBQ0FDLFNBQVM7UUFDUCxPQUFPLElBQUkzSSxRQUFRLENBQUM1QyxTQUFTQztZQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDK0gsVUFBVSxFQUFFO2dCQUNwQi9ILE9BQU8sSUFBSVUsTUFBTTtnQkFDakI7WUFDRjtZQUNBLE1BQU02SyxlQUFlLElBQUksQ0FBQ2IsZ0JBQWdCLENBQUNDLFNBQVMsQ0FBQztZQUNyRFksYUFBYVQsS0FBSyxDQUFDO2dCQUNqQmxFLE1BQU07WUFDUjtZQUNBLE1BQU00RSxlQUFlLElBQUksQ0FBQ2QsZ0JBQWdCLENBQUNDLFNBQVMsQ0FBQztZQUNyRCxNQUFNYyxzQkFBc0JDLENBQUFBO2dCQUMxQixNQUFNQyxTQUFTRDtnQkFDZixJQUFJLENBQUNDLE9BQU9DLFFBQVEsRUFBRTtvQkFDcEIsSUFBSSxDQUFDN0QsVUFBVSxHQUFHO29CQUNsQixJQUFJLENBQUNJLGVBQWUsR0FBRztvQkFDdkIsSUFBSSxDQUFDRCxpQkFBaUIsR0FBRztvQkFDekJuSTtnQkFDRixPQUFPQyxPQUFPLElBQUlVLE1BQU07WUFDMUI7WUFDQS9JLGFBQWE2VCxjQUFjLFFBQVFDO1FBQ3JDO0lBQ0Y7SUFDQSxNQUFNSSxVQUFVO1FBQ2QsSUFBSSxJQUFJLENBQUM5RCxVQUFVLEVBQUU7WUFDbkIsTUFBTSxJQUFJLENBQUN1RCxNQUFNO1FBQ25CO1FBQ0EsSUFBSSxDQUFDUSxTQUFTO0lBQ2hCO0lBQ0FBLFlBQVk7UUFDVixTQUFTQyxVQUFVQyxPQUFPO1lBQ3hCLE9BQU9BLG1CQUFtQkMsV0FBV0QsbUJBQW1CRTtRQUMxRDtRQUNBLElBQUlILFVBQVUsSUFBSSxDQUFDN0IsU0FBUyxLQUFLL1MsT0FBT0MsUUFBUSxDQUFDMlQsSUFBSSxDQUFDb0IsUUFBUSxDQUFDLElBQUksQ0FBQ2pDLFNBQVMsR0FBRztZQUM5RSxJQUFJLENBQUNBLFNBQVMsQ0FBQ2tDLE1BQU07WUFDckIsSUFBSSxDQUFDbEMsU0FBUyxHQUFHekw7UUFDbkI7UUFDQSxJQUFJc04sVUFBVSxJQUFJLENBQUNuQyxXQUFXLEtBQUt6UyxPQUFPQyxRQUFRLENBQUMyVCxJQUFJLENBQUNvQixRQUFRLENBQUMsSUFBSSxDQUFDdkMsV0FBVyxHQUFHO1lBQ2xGLElBQUksQ0FBQ0EsV0FBVyxDQUFDd0MsTUFBTTtZQUN2QixJQUFJLENBQUN4QyxXQUFXLEdBQUduTDtRQUNyQjtRQUNBLElBQUlzTixVQUFVLElBQUksQ0FBQ2xDLG1CQUFtQixLQUFLMVMsT0FBT0MsUUFBUSxDQUFDMlQsSUFBSSxDQUFDb0IsUUFBUSxDQUFDLElBQUksQ0FBQ3RDLG1CQUFtQixHQUFHO1lBQ2xHLElBQUksQ0FBQ3dDLFVBQVUsR0FBRzVOO1lBQ2xCLElBQUksQ0FBQ29MLG1CQUFtQixDQUFDdUMsTUFBTTtZQUMvQixJQUFJLENBQUN2QyxtQkFBbUIsR0FBR3BMO1FBQzdCO1FBQ0EsSUFBSSxDQUFDdUosYUFBYSxHQUFHO0lBQ3ZCO0lBQ0FzRSxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDckUscUJBQXFCLEdBQUc7UUFDN0IsSUFBSSxDQUFDc0UsMkJBQTJCLENBQUM7UUFDakMsSUFBSSxDQUFDMUIsY0FBYztJQUNyQjtJQUNBOUIsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQ2QscUJBQXFCLEdBQUc7UUFDN0IsSUFBSSxDQUFDc0UsMkJBQTJCLENBQUM7UUFDakMsSUFBSSxDQUFDMUIsY0FBYztJQUNyQjtJQUNBMkIsWUFBWXJJLElBQUksRUFBRTtRQUNoQixJQUFJLEVBQ0FzRSxPQUFPLFNBQVMsRUFDaEJ0TyxVQUFVLElBQUksRUFDZHVPLGNBQWMsRUFBRSxFQUNqQixHQUFHdkUsTUFDSnNJLE9BQU8vYixxRkFBd0JBLENBQUN5VCxNQUFNNkM7UUFDeEMsT0FBTyxJQUFJckUsUUFBUSxDQUFDNUMsU0FBU0M7WUFDM0IsTUFBTTBNLHVCQUF1QixJQUFJLENBQUNoQyxnQkFBZ0IsQ0FBQ0MsU0FBUyxDQUFDO1lBQzdELE1BQU03UyxVQUFVNFQsQ0FBQUE7Z0JBQ2QsTUFBTTFULFFBQVEwVDtnQkFDZCxNQUFNLEVBQ0p0SSxHQUFHLEVBQ0h3SCxPQUFPLEVBQ1IsR0FBRzVTLE1BQU1nRSxJQUFJO2dCQUNkakQsSUFBSWtCLElBQUksQ0FBQ2pDO2dCQUNULElBQUlvTCxLQUFLO29CQUNQcEQsT0FBT29EO2dCQUNULE9BQU8sSUFBSXdILFNBQVM7b0JBQ2xCN0s7Z0JBQ0YsT0FBT0MsT0FBTyxJQUFJVSxNQUFNO1lBQzFCO1lBQ0EvSSxhQUFhK1Usc0JBQXNCLFFBQVE1VTtZQUMzQyxNQUFNNlUsb0JBQW9CaFE7WUFDMUIsSUFBSSxDQUFDaVEsYUFBYSxDQUFDRCxtQkFBbUI7Z0JBQ3BDdEksUUFBUTtnQkFDUnpFLFVBQVV6QjtZQUNaO1lBQ0F1TyxxQkFBcUI1QixLQUFLLENBQUM7Z0JBQ3pCbEUsTUFBTTtnQkFDTjVLLE1BQU07b0JBQ0p3TSxTQUFTL1gsMkVBQWFBLENBQUM7d0JBQ3JCZ1k7d0JBQ0F0Tzt3QkFDQXVPO29CQUNGLEdBQUcrRDtvQkFDSEU7b0JBQ0FFLFVBQVU7Z0JBQ1o7WUFDRjtRQUNGO0lBQ0Y7SUFDQUMsV0FBV0MsSUFBSSxFQUFFO1FBQ2YsSUFBSXZTLFNBQVMwRixVQUFVdkYsTUFBTSxHQUFHLEtBQUt1RixTQUFTLENBQUMsRUFBRSxLQUFLekIsWUFBWXlCLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNsRixNQUFNOE0sbUJBQW1CLElBQUksQ0FBQ3RDLGdCQUFnQixDQUFDQyxTQUFTLENBQUM7UUFDekQsTUFBTXNDLFlBQVlGLE9BQU8sQ0FBQyxDQUFDLEVBQUVBLEtBQUssQ0FBQyxHQUFHO1FBQ3RDQyxpQkFBaUJsQyxLQUFLLENBQUM7WUFDckJsRSxNQUFNO1lBQ041SyxNQUFNO2dCQUNKK1EsTUFBTUU7WUFDUjtRQUNGO1FBQ0EsTUFBTUMsb0JBQW9CeEIsQ0FBQUE7WUFDeEIsTUFBTTFULFFBQVEwVDtZQUNkLElBQUkxVCxNQUFNNE8sSUFBSSxLQUFLLHdCQUF3QjtnQkFDekMsbURBQW1EO2dCQUNuRCxNQUFNLEVBQ0p1RyxVQUFVLEVBQ1gsR0FBR25WLE1BQU1nRSxJQUFJO2dCQUNkLE1BQU1vUixXQUFXLElBQUk1RCxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUN0TSxRQUFRLENBQUMsT0FBTyxFQUFFK1AsVUFBVSxDQUFDO2dCQUM5RCxpRkFBaUY7Z0JBQ2pGRyxTQUFTQyxZQUFZLENBQUNDLE1BQU0sQ0FBQyxhQUFhO2dCQUMxQ0YsU0FBU0MsWUFBWSxDQUFDQyxNQUFNLENBQUMsY0FBY0g7Z0JBQzNDeFcsT0FBTytELElBQUksQ0FBQ0YsUUFBUStTLE9BQU8sQ0FBQ0MsQ0FBQUE7b0JBQzFCSixTQUFTQyxZQUFZLENBQUNDLE1BQU0sQ0FBQ0UsR0FBR2hULE1BQU0sQ0FBQ2dULEVBQUU7Z0JBQzNDO2dCQUNBSixTQUFTekQsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQ1IsYUFBYSxDQUFDLENBQUM7Z0JBQ3RELE1BQU1zRSxlQUFlLElBQUl2SixhQUFhO29CQUNwQ0UsS0FBS2dKO29CQUNMeE4sVUFBVXhCO2dCQUNaO2dCQUNBcVAsYUFBYTFJLElBQUk7WUFDbkI7UUFDRjtRQUNBcE4sYUFBYXFWLGtCQUFrQixRQUFRRTtJQUN6QztJQUNBLE1BQU1RLGlCQUFpQkMsS0FBSyxFQUFFO1FBQzVCLElBQUksRUFDRjFDLFFBQVEsRUFDUjJDLFVBQVUsRUFDVkMsYUFBYSxLQUFLLEVBQ25CLEdBQUdGO1FBQ0osSUFBSSxDQUFDbFgsY0FBY0MscUJBQXFCLENBQUN5RSxRQUFRLENBQUM4UCxhQUFhLENBQUMvWSw2QkFBNkIsQ0FBQytZLFNBQVMsRUFBRSxNQUFNLElBQUl2SyxNQUFNO1FBQ3pILE1BQU1vTixpQkFBaUI3QztRQUN2QixNQUFNOEMsb0JBQW9CN2IsNkJBQTZCLENBQUMrWSxTQUFTO1FBQ2pFLE1BQU03RyxNQUFNLElBQUlvRixJQUFJLENBQUMsK0JBQStCLENBQUM7UUFDckRwRixJQUFJaUosWUFBWSxDQUFDQyxNQUFNLENBQUMsWUFBWVM7UUFDcEMzSixJQUFJaUosWUFBWSxDQUFDQyxNQUFNLENBQUMsY0FBY007UUFDdEN4SixJQUFJaUosWUFBWSxDQUFDQyxNQUFNLENBQUMsa0JBQWtCUTtRQUMxQzFKLElBQUlpSixZQUFZLENBQUNDLE1BQU0sQ0FBQyxXQUFXO1FBQ25DbEosSUFBSWlKLFlBQVksQ0FBQ0MsTUFBTSxDQUFDLGNBQWNPLFdBQVc1UyxRQUFRO1FBQ3pELE9BQU9ySyw0REFBR0EsQ0FBQ3dULElBQUlhLElBQUksRUFBRTtZQUNuQitJLFNBQVM7Z0JBQ1AsZ0JBQWdCO1lBQ2xCO1FBQ0YsR0FBRztZQUNEelEsV0FBVztRQUNiO0lBQ0Y7SUFDQTBRLFlBQVlsUyxPQUFPLEVBQUU7UUFDbkIsT0FBTyxJQUFJNEcsUUFBUSxDQUFDNUMsU0FBU0M7WUFDM0IsSUFBSSxJQUFJLENBQUMrSCxVQUFVLEVBQUU7Z0JBQ25CLE1BQU1tRyx1QkFBdUIsSUFBSSxDQUFDeEQsZ0JBQWdCLENBQUNDLFNBQVMsQ0FBQztnQkFDN0R1RCxxQkFBcUJwRCxLQUFLLENBQUM7b0JBQ3pCbEUsTUFBTTtnQkFDUjtnQkFDQSxNQUFNdUgsd0JBQXdCekMsQ0FBQUE7b0JBQzVCLE1BQU0xVCxRQUFRMFQ7b0JBQ2QsTUFBTSxFQUNKOUUsSUFBSSxFQUNKNUssTUFBTSxFQUNKb1MsUUFBUSxFQUNSNUwsT0FBTyxFQUNQNkwsUUFBUSxFQUNSQyxVQUFVLEVBQ1gsRUFDRixHQUFHdFc7b0JBQ0osSUFBSTRPLFNBQVMsNkJBQTZCO3dCQUN4QyxJQUFJd0gsVUFBVTs0QkFDWnJPLFFBQVF5Qzt3QkFDVixPQUFPLElBQUk2TCxVQUFVOzRCQUNuQnJPLE9BQU8sSUFBSVUsTUFBTTt3QkFDbkIsT0FBTyxJQUFJNE4sWUFBWTs0QkFDckIsTUFBTUMsaUJBQWlCLElBQUksQ0FBQzdELGdCQUFnQixDQUFDQyxTQUFTLENBQUM7NEJBQ3ZELE1BQU02RCxrQkFBa0JDLENBQUFBO2dDQUN0QixNQUFNQyxlQUFlRDtnQ0FDckIsSUFBSUMsYUFBYTlILElBQUksS0FBSyxzQkFBc0I7b0NBQzlDLElBQUk4SCxhQUFhMVMsSUFBSSxDQUFDb1MsUUFBUSxFQUFFO3dDQUM5QnJPLFFBQVEyTyxhQUFhMVMsSUFBSSxDQUFDd0csT0FBTztvQ0FDbkMsT0FBTzt3Q0FDTHhDLE9BQU8sSUFBSVUsTUFBTTtvQ0FDbkI7Z0NBQ0Y7NEJBQ0Y7NEJBQ0EvSSxhQUFhNFcsZ0JBQWdCLFFBQVFDOzRCQUNyQyxNQUFNN0Isb0JBQW9CaFE7NEJBQzFCLElBQUksQ0FBQ2lRLGFBQWEsQ0FBQ0QsbUJBQW1CO2dDQUNwQ3RJLFFBQVE7Z0NBQ1J6RSxVQUFVekI7NEJBQ1o7NEJBQ0FvUSxlQUFlekQsS0FBSyxDQUFDO2dDQUNuQmxFLE1BQU07Z0NBQ041SyxNQUFNO29DQUNKRDtvQ0FDQTRRO2dDQUNGOzRCQUNGO3dCQUNGO29CQUNGO2dCQUNGO2dCQUNBaFYsYUFBYXVXLHNCQUFzQixRQUFRQztZQUM3QyxPQUFPbk8sT0FBTyxJQUFJVSxNQUFNO1FBQzFCO0lBQ0Y7SUFDQWlPLGNBQWNwYSxRQUFRLEVBQUVpRyxNQUFNLEVBQUU7UUFDOUIsT0FBTyxJQUFJbUksUUFBUSxDQUFDNUMsU0FBU0M7WUFDM0IsSUFBSSxJQUFJLENBQUNnSSxhQUFhLEVBQUU7Z0JBQ3RCLE1BQU0sRUFDSjlPLE1BQU0sRUFDTnVCLE9BQU8sRUFDUixHQUFHRix3QkFBd0JoRyxVQUFVaUc7Z0JBQ3RDLElBQUksQ0FBQ0MsU0FBUztvQkFDWnVGLE9BQU8sSUFBSVUsTUFBTWtPLEtBQUtDLFNBQVMsQ0FBQzNWO29CQUNoQztnQkFDRjtnQkFDQSxNQUFNNFYsY0FBYyxJQUFJLENBQUNwRSxnQkFBZ0IsQ0FBQ0MsU0FBUyxDQUFDO2dCQUNwRCxNQUFNb0UsZUFBZXJELENBQUFBO29CQUNuQixNQUFNMVQsUUFBUTBUO29CQUNkLElBQUkxVCxNQUFNNE8sSUFBSSxLQUFLLGtCQUFrQjt3QkFDbkMsSUFBSTVPLE1BQU1nRSxJQUFJLENBQUM0TyxPQUFPLEVBQUU7NEJBQ3RCN0ssUUFBUS9ILE1BQU1nRSxJQUFJLENBQUM0TyxPQUFPO3dCQUM1QixPQUFPOzRCQUNMNUssT0FBTyxJQUFJVSxNQUFNMUksTUFBTWdFLElBQUksQ0FBQ0gsS0FBSzt3QkFDbkM7b0JBQ0Y7Z0JBQ0Y7Z0JBQ0FsRSxhQUFhbVgsYUFBYSxRQUFRQztnQkFDbEMsTUFBTXBDLG9CQUFvQmhRO2dCQUMxQixJQUFJLENBQUNpUSxhQUFhLENBQUNEO2dCQUNuQm1DLFlBQVloRSxLQUFLLENBQUM7b0JBQ2hCbEUsTUFBTTtvQkFDTjVLLE1BQU07d0JBQ0p6SDt3QkFDQWlHO3dCQUNBbVM7b0JBQ0Y7Z0JBQ0Y7WUFDRixPQUFPM00sT0FBTyxJQUFJVSxNQUFNO1FBQzFCO0lBQ0Y7SUFDQSxNQUFNc08sb0JBQW9CQyxXQUFXLEVBQUU7UUFDckMsTUFBTSxFQUNKQyxVQUFVLEVBQ1ZDLFFBQVEsRUFDVCxHQUFHRjtRQUNKLE9BQU8sSUFBSXRNLFFBQVEsQ0FBQzVDLFNBQVNDO1lBQzNCLElBQUksSUFBSSxDQUFDZ0ksYUFBYSxFQUFFO2dCQUN0QixJQUFJb0gsT0FBTzlJLElBQUksQ0FBQzRJLFlBQVksT0FBT3ZVLE1BQU0sS0FBSyxJQUFJO29CQUNoRHFGLE9BQU8sSUFBSVUsTUFBTTtvQkFDakI7Z0JBQ0Y7Z0JBQ0EsTUFBTTJPLHFCQUFxQixJQUFJLENBQUMzRSxnQkFBZ0IsQ0FBQ0MsU0FBUyxDQUFDO2dCQUMzRCxNQUFNMkUsZUFBZTVELENBQUFBO29CQUNuQixNQUFNMVQsUUFBUTBUO29CQUNkLElBQUkxVCxNQUFNNE8sSUFBSSxLQUFLLG1DQUFtQzt3QkFDcEQsSUFBSTVPLE1BQU1nRSxJQUFJLENBQUM0TyxPQUFPLEVBQUU7NEJBQ3RCN0ssUUFBUS9ILE1BQU1nRSxJQUFJLENBQUM0TyxPQUFPO3dCQUM1QixPQUFPOzRCQUNMNUssT0FBTyxJQUFJVSxNQUFNMUksTUFBTWdFLElBQUksQ0FBQ0gsS0FBSzt3QkFDbkM7b0JBQ0Y7Z0JBQ0Y7Z0JBQ0FsRSxhQUFhMFgsb0JBQW9CLFFBQVFDO2dCQUN6Q0QsbUJBQW1CdkUsS0FBSyxDQUFDO29CQUN2QmxFLE1BQU07b0JBQ041SyxNQUFNO3dCQUNKa1Q7d0JBQ0FDO29CQUNGO2dCQUNGO1lBQ0YsT0FBT25QLE9BQU8sSUFBSVUsTUFBTTtRQUMxQjtJQUNGO0lBQ0EsTUFBTTZPLDJCQUEyQjtRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDdEcsZ0JBQWdCLEVBQUUsTUFBTSxJQUFJdkksTUFBTTtRQUM1QyxPQUFPLElBQUlpQyxRQUFRLENBQUM1QyxTQUFTQztZQUMzQixJQUFJLElBQUksQ0FBQytILFVBQVUsRUFBRTtnQkFDbkIsTUFBTXlILHNCQUFzQixJQUFJLENBQUM5RSxnQkFBZ0IsQ0FBQ0MsU0FBUyxDQUFDO2dCQUM1RCxNQUFNOEUsdUJBQXVCL0QsQ0FBQUE7b0JBQzNCLE1BQU0xVCxRQUFRMFQ7b0JBQ2QsSUFBSTFULE1BQU00TyxJQUFJLEtBQUssNkJBQTZCO3dCQUM5QyxJQUFJNU8sTUFBTWdFLElBQUksQ0FBQzRPLE9BQU8sRUFBRTs0QkFDdEI3SyxRQUFRL0gsTUFBTWdFLElBQUksQ0FBQzRPLE9BQU87d0JBQzVCLE9BQU87NEJBQ0w1SyxPQUFPLElBQUlVLE1BQU0xSSxNQUFNZ0UsSUFBSSxDQUFDSCxLQUFLO3dCQUNuQzt3QkFDQSxJQUFJLENBQUNnUCxjQUFjO29CQUNyQjtnQkFDRjtnQkFDQWxULGFBQWE2WCxxQkFBcUIsUUFBUUM7Z0JBQzFDRCxvQkFBb0IxRSxLQUFLLENBQUM7b0JBQ3hCbEUsTUFBTTtnQkFDUjtnQkFDQSxJQUFJLENBQUNpRSxjQUFjLENBQUM7WUFDdEIsT0FBTzdLLE9BQU8sSUFBSVUsTUFBTTtRQUMxQjtJQUNGO0lBQ0FrTSxjQUFjRCxpQkFBaUIsRUFBRTtRQUMvQixJQUFJLEVBQ0Z2SSxHQUFHLEVBQ0hDLE1BQU0sRUFDTnpFLFFBQVEsRUFDVCxHQUFHTSxVQUFVdkYsTUFBTSxHQUFHLEtBQUt1RixTQUFTLENBQUMsRUFBRSxLQUFLekIsWUFBWXlCLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUN6RSxJQUFJeU0sbUJBQW1CO1lBQ3JCLE1BQU0rQyxlQUFlLElBQUksQ0FBQ2hGLGdCQUFnQixDQUFDQyxTQUFTLENBQUM7WUFDckQsTUFBTXlDLFdBQVcsSUFBSTVELElBQUlwRixPQUFPLENBQUMsRUFBRSxJQUFJLENBQUNsSCxRQUFRLENBQUMsNEJBQTRCLEVBQUV5UCxrQkFBa0IsQ0FBQztZQUNsRyxJQUFJUyxTQUFTekQsSUFBSSxFQUFFeUQsU0FBU3pELElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUNSLGFBQWEsQ0FBQyxDQUFDO2lCQUFNaUUsU0FBU3pELElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUNSLGFBQWEsQ0FBQyxDQUFDO1lBQ3RJLE1BQU13RyxnQkFBZ0IsSUFBSXpMLGFBQWE7Z0JBQ3JDRSxLQUFLZ0o7Z0JBQ0wvSTtnQkFDQXpFO1lBQ0Y7WUFDQStQLGNBQWM1SyxJQUFJO1lBQ2xCLElBQUksQ0FBQzRLLGNBQWN4WSxNQUFNLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQ3lZLHNCQUFzQixDQUFDakQsbUJBQW1CUyxTQUFTbkksSUFBSTtnQkFDNUQ7WUFDRjtZQUNBeUssYUFBYTVFLEtBQUssQ0FBQztnQkFDakJsRSxNQUFNO2dCQUNONUssTUFBTTtvQkFDSjJRO2dCQUNGO1lBQ0Y7WUFDQSxNQUFNa0QsZUFBZUMsQ0FBQUE7Z0JBQ25CLElBQUksRUFDRm5ELG1CQUFtQm9ELFVBQVUsRUFDN0I1SyxLQUFLLEVBQ04sR0FBRzJLO2dCQUNKLElBQUlDLGVBQWVwRCxxQkFBcUJ4SCxPQUFPO29CQUM3Q3dLLGNBQWN4SyxLQUFLO29CQUNuQnVLLGFBQWF6WCxjQUFjLENBQUMsUUFBUTRYO2dCQUN0QztZQUNGO1lBQ0FILGFBQWF4WCxFQUFFLENBQUMsUUFBUTJYO1lBQ3hCRixjQUFjSyxJQUFJLENBQUMsU0FBUztnQkFDMUJOLGFBQWE1RSxLQUFLLENBQUM7b0JBQ2pCOU8sTUFBTTt3QkFDSjJRO3dCQUNBL0gsUUFBUTtvQkFDVjtnQkFDRjtnQkFDQThLLGFBQWF6WCxjQUFjLENBQUMsUUFBUTRYO1lBQ3RDO1FBQ0Y7SUFDRjtJQUNBSSxvQkFBb0JqRSxPQUFPLEVBQUU7UUFDM0IsaUJBQWlCO1FBQ2pCLE1BQU0sRUFDSmtFLEtBQUssRUFDTixHQUFHLElBQUksQ0FBQ2xILFVBQVUsSUFBSSxDQUFDO1FBQ3hCLElBQUlrSCxPQUFPO1lBQ1QsTUFBTSxFQUNKQyxTQUFTLEtBQUssRUFDZEMsU0FBUyxDQUFDLENBQUMsRUFDWixHQUFHRjtZQUNKLElBQUlDLFFBQVFuRSxRQUFRcUUsU0FBUyxDQUFDQyxHQUFHLENBQUM7WUFDbEMsSUFBSUYsT0FBT0csV0FBVyxFQUFFdkUsUUFBUWxDLEtBQUssQ0FBQ0MsV0FBVyxDQUFDLG1CQUFtQnFHLE9BQU9HLFdBQVc7WUFDdkYsSUFBSUgsT0FBT0ksVUFBVSxFQUFFeEUsUUFBUWxDLEtBQUssQ0FBQ0MsV0FBVyxDQUFDLGtCQUFrQnFHLE9BQU9JLFVBQVU7UUFDdEY7SUFDRjtJQUNBQyxjQUFjO1FBQ1osSUFBSUM7UUFDSixJQUFJQyxVQUFVLENBQUMsRUFBRSxJQUFJLENBQUN6VCxRQUFRLENBQUMsMkJBQTJCLENBQUM7UUFDM0QsSUFBSSxDQUFDd1QsbUJBQW1CLElBQUksQ0FBQzFILFVBQVUsTUFBTSxRQUFRMEgscUJBQXFCLEtBQUssS0FBSyxDQUFDQSxtQkFBbUJBLGlCQUFpQlIsS0FBSyxNQUFNLFFBQVFRLHFCQUFxQixLQUFLLEtBQUtBLGlCQUFpQlAsTUFBTSxFQUFFO1lBQ2xNLElBQUlTO1lBQ0pELFVBQVUsQ0FBQyxDQUFDQyxvQkFBb0IsSUFBSSxDQUFDNUgsVUFBVSxNQUFNLFFBQVE0SCxzQkFBc0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsa0JBQWtCQyxTQUFTLEtBQUtGO1FBQ3ZJLE9BQU87WUFDTCxJQUFJRztZQUNKSCxVQUFVLENBQUMsQ0FBQ0csb0JBQW9CLElBQUksQ0FBQzlILFVBQVUsTUFBTSxRQUFROEgsc0JBQXNCLEtBQUssSUFBSSxLQUFLLElBQUlBLGtCQUFrQkMsUUFBUSxLQUFLSjtRQUN0STtRQUNBLE9BQU9BO0lBQ1Q7SUFDQXBFLDRCQUE0QlosTUFBTSxFQUFFO1FBQ2xDLE1BQU1xRiw4QkFBOEIsSUFBSSxDQUFDdEcsZ0JBQWdCLENBQUNDLFNBQVMsQ0FBQztRQUNwRXFHLDRCQUE0QmxHLEtBQUssQ0FBQztZQUNoQzlPLE1BQU0yUDtRQUNSO0lBQ0Y7SUFDQWQsaUJBQWlCO1FBQ2YsSUFBSW9HLFNBQVMvUSxVQUFVdkYsTUFBTSxHQUFHLEtBQUt1RixTQUFTLENBQUMsRUFBRSxLQUFLekIsWUFBWXlCLFNBQVMsQ0FBQyxFQUFFLEdBQUc7UUFDakYsTUFBTTRKLFFBQVEsQ0FBQztRQUNmLE1BQU1vSCxPQUFPLElBQUksQ0FBQ3RKLFVBQVUsR0FBRyxJQUFJLGVBQWU7UUFDbEQsWUFBWTtRQUNaLElBQUksQ0FBQ3FKLFFBQVE7WUFDWG5ILE1BQU14VSxPQUFPLEdBQUcsSUFBSSxDQUFDMlMscUJBQXFCLEdBQUcsVUFBVTtZQUN2RDZCLE1BQU16SyxNQUFNLEdBQUcsQ0FBQyxFQUFFNlIsS0FBSyxFQUFFLENBQUM7WUFDMUJwSCxNQUFNOUssS0FBSyxHQUFHLENBQUMsRUFBRWtTLEtBQUssRUFBRSxDQUFDO1lBQ3pCLE9BQVEsSUFBSSxDQUFDdkosY0FBYztnQkFDekIsS0FBSzlULGdCQUFnQkUsUUFBUTtvQkFDM0IrVixNQUFNbkssR0FBRyxHQUFHO29CQUNabUssTUFBTXJLLElBQUksR0FBRztvQkFDYnFLLE1BQU1xSCxLQUFLLEdBQUc7b0JBQ2RySCxNQUFNc0gsTUFBTSxHQUFHO29CQUNmO2dCQUNGLEtBQUt2ZCxnQkFBZ0JJLFNBQVM7b0JBQzVCNlYsTUFBTW5LLEdBQUcsR0FBRztvQkFDWm1LLE1BQU1xSCxLQUFLLEdBQUc7b0JBQ2RySCxNQUFNckssSUFBSSxHQUFHO29CQUNicUssTUFBTXNILE1BQU0sR0FBRztvQkFDZjtnQkFDRixLQUFLdmQsZ0JBQWdCRyxZQUFZO29CQUMvQjhWLE1BQU1zSCxNQUFNLEdBQUc7b0JBQ2Z0SCxNQUFNcUgsS0FBSyxHQUFHO29CQUNkckgsTUFBTW5LLEdBQUcsR0FBRztvQkFDWm1LLE1BQU1ySyxJQUFJLEdBQUc7b0JBQ2I7Z0JBQ0YsS0FBSzVMLGdCQUFnQkMsV0FBVztnQkFDaEM7b0JBQ0VnVyxNQUFNc0gsTUFBTSxHQUFHO29CQUNmdEgsTUFBTXJLLElBQUksR0FBRztvQkFDYnFLLE1BQU1uSyxHQUFHLEdBQUc7b0JBQ1ptSyxNQUFNcUgsS0FBSyxHQUFHO29CQUNkO1lBQ0o7UUFDRixPQUFPO1lBQ0xySCxNQUFNeFUsT0FBTyxHQUFHO1lBQ2hCd1UsTUFBTTlLLEtBQUssR0FBRztZQUNkOEssTUFBTXpLLE1BQU0sR0FBRztZQUNmeUssTUFBTW5LLEdBQUcsR0FBRztZQUNabUssTUFBTXFILEtBQUssR0FBRztZQUNkckgsTUFBTXJLLElBQUksR0FBRztZQUNicUssTUFBTXNILE1BQU0sR0FBRztRQUNqQjtRQUNBemEsT0FBTzBhLE1BQU0sQ0FBQyxJQUFJLENBQUN6SCxXQUFXLENBQUNFLEtBQUssRUFBRUE7UUFDdEMsSUFBSSxDQUFDekIsa0JBQWtCLEdBQUc0STtJQUM1QjtJQUNBekcsYUFBYTtRQUNYelIsSUFBSWtCLElBQUksQ0FBQztRQUNULDhCQUE4QjtRQUM5QixNQUFNcVgsaUJBQWlCLElBQUluZ0IsNEVBQXFCQSxDQUFDO1lBQy9DeVYsTUFBTTtZQUNOdkMsUUFBUTtZQUNSa04sY0FBYyxJQUFJLENBQUMzSCxXQUFXLENBQUM0SCxhQUFhO1lBQzVDQyxjQUFjLElBQUlqSSxJQUFJLElBQUksQ0FBQ3RNLFFBQVEsRUFBRXdVLE1BQU07UUFDN0M7UUFFQSwyRkFBMkY7UUFDM0YsNkRBQTZEO1FBQzdELHNGQUFzRjtRQUN0RixNQUFNQyxzQkFBc0IsSUFBSXhnQiw0RUFBcUJBLENBQUM7WUFDcER5VixNQUFNO1lBQ052QyxRQUFRO1lBQ1JrTixjQUFjLElBQUksQ0FBQzNILFdBQVcsQ0FBQzRILGFBQWE7WUFDNUNDLGNBQWMsSUFBSWpJLElBQUksSUFBSSxDQUFDdE0sUUFBUSxFQUFFd1UsTUFBTTtRQUM3QztRQUVBLHdDQUF3QztRQUN4QyxtREFBbUQ7UUFFbkQsOEJBQThCO1FBQzlCLE1BQU1FLGlCQUFpQixJQUFJdFIsb0JBQW9CZ1I7UUFFL0Msd0RBQXdEO1FBQ3hELE1BQU1PLHdDQUF3Q0MsQ0FBQUE7WUFDNUMsYUFBYTtZQUNiLE1BQU1DLGlCQUFpQkgsY0FBYyxDQUFDRSxFQUFFO1lBQ3hDLGFBQWE7WUFDYkYsY0FBYyxDQUFDRSxFQUFFLEdBQUcsU0FBU0UsYUFBYXpZLE1BQU07Z0JBQzlDLElBQUlBLFVBQVVBLFdBQVcsdUJBQXVCO29CQUM5QyxPQUFPcVksZUFBZXZHLE1BQU07Z0JBQzlCO2dCQUNBLElBQUssSUFBSTRHLE9BQU8vUixVQUFVdkYsTUFBTSxFQUFFK0gsT0FBTyxJQUFJdkMsTUFBTThSLE9BQU8sSUFBSUEsT0FBTyxJQUFJLElBQUlDLE9BQU8sR0FBR0EsT0FBT0QsTUFBTUMsT0FBUTtvQkFDMUd4UCxJQUFJLENBQUN3UCxPQUFPLEVBQUUsR0FBR2hTLFNBQVMsQ0FBQ2dTLEtBQUs7Z0JBQ2xDO2dCQUNBLE9BQU9ILGVBQWVJLEtBQUssQ0FBQyxJQUFJLEVBQUU7b0JBQUM1WTt1QkFBV21KO2lCQUFLO1lBQ3JEO1FBQ0Y7UUFDQW1QLHNDQUFzQztRQUN0Q0Esc0NBQXNDO1FBQ3RDRCxlQUFldkcsTUFBTSxHQUFHO1lBQ3RCLE9BQU8sSUFBSTFJLFFBQVEsQ0FBQzVDLFNBQVNDO2dCQUMzQixnRkFBZ0Y7Z0JBQ2hGNFIsZUFBZS9QLFNBQVMsQ0FBQztvQkFDdkJzQixTQUFTO29CQUNUSyxJQUFJN0c7b0JBQ0pwRCxRQUFRO29CQUNSaUIsUUFBUSxFQUFFO2dCQUNaLEdBQUcsQ0FBQzRJLEtBQUs5RjtvQkFDUCxNQUFNLEVBQ0orQyxRQUFRMUUsR0FBRyxFQUNaLEdBQUcyQixZQUFZLENBQUM7b0JBQ2pCLElBQUk4RixLQUFLO3dCQUNQMEIsV0FBVzs0QkFDVDlFLE9BQU9vRDt3QkFDVCxHQUFHO29CQUNMLE9BQU8sSUFBSWpELE1BQU1DLE9BQU8sQ0FBQ3pFLFFBQVFBLElBQUloQixNQUFNLEdBQUcsR0FBRzt3QkFDL0MsOENBQThDO3dCQUM5Qyx5REFBeUQ7d0JBQ3pELE1BQU15WCxnQkFBZ0I7NEJBQ3BCLElBQUksSUFBSSxDQUFDbEssaUJBQWlCLEtBQUssTUFBTSxJQUFJLENBQUNDLGVBQWUsS0FBSyxJQUFJLENBQUNELGlCQUFpQixFQUFFO2dDQUNwRixNQUFNLEVBQ0pBLGlCQUFpQixFQUNsQixHQUFHLElBQUk7Z0NBQ1IsMERBQTBEO2dDQUMxRCxJQUFJLENBQUNvRCxNQUFNLEVBQ1gsaURBQWlEO2lDQUNoRCtHLElBQUksQ0FBQ0MsQ0FBQUE7b0NBQ0osSUFBSSxDQUFDcEssaUJBQWlCLEdBQUdBO29DQUN6QixJQUFJLENBQUNxSyxlQUFlLENBQUMsTUFBTXhTLFNBQVNDO2dDQUN0QyxHQUFHd1MsS0FBSyxDQUFDM1csQ0FBQUEsUUFBU21FLE9BQU9uRTs0QkFDM0IsT0FBTztnQ0FDTGtFLFFBQVFwRTs0QkFDVjt3QkFDRjt3QkFDQSxJQUFJLElBQUksQ0FBQ29NLFVBQVUsRUFBRTs0QkFDbkJxSzt3QkFDRixPQUFPOzRCQUNMLElBQUksQ0FBQ0ssZUFBZSxHQUFHTDt3QkFDekI7b0JBQ0YsT0FBTzt3QkFDTCw0QkFBNEI7d0JBQzVCLElBQUksQ0FBQ0csZUFBZSxDQUFDLE1BQU14UyxTQUFTQztvQkFDdEM7Z0JBQ0Y7WUFDRjtRQUNGO1FBQ0E0UixlQUFldk8sZ0JBQWdCLEdBQUcsQ0FBQ2IsU0FBU1M7WUFDMUMsTUFBTUMsV0FBV1Y7WUFDakIsSUFBSSxDQUFDckMsTUFBTUMsT0FBTyxDQUFDOEMsYUFBYStELGVBQWU5TCxRQUFRLENBQUMrSCxTQUFTM0osTUFBTSxHQUFHO2dCQUN4RSxNQUFNb1Qsb0JBQW9CaFE7Z0JBQzFCLElBQUksQ0FBQ2lRLGFBQWEsQ0FBQ0QsbUJBQW1CO29CQUNwQ3RJLFFBQVE7b0JBQ1J6RSxVQUFVdkI7Z0JBQ1o7Z0JBQ0E2RSxTQUFTeUosaUJBQWlCLEdBQUdBO1lBQy9CO1lBQ0FpRixlQUFldFAsVUFBVSxDQUFDMUssTUFBTSxDQUFDc0wsVUFBVUQ7UUFDN0M7UUFFQSw4RUFBOEU7UUFDOUUsb0ZBQW9GO1FBQ3BGLE1BQU15UCx3QkFBd0IsSUFBSUMsTUFBTWYsZ0JBQWdCO1lBQ3RELGlFQUFpRTtZQUNqRSxnQ0FBZ0M7WUFDaENnQixnQkFBZ0IsSUFBTTtRQUN4QjtRQUNBLElBQUksQ0FBQ3hILFFBQVEsR0FBR3NIO1FBQ2hCLE1BQU1oSSxtQkFBbUJ0Wix5RUFBY0EsQ0FBQ3VnQjtRQUN4QyxJQUFJLENBQUNqSCxnQkFBZ0IsR0FBR0E7UUFDeEIsTUFBTWdGLGVBQWVoRixpQkFBaUJDLFNBQVMsQ0FBQztRQUNoRCtFLGFBQWF4WCxFQUFFLENBQUMsUUFBUUYsQ0FBQUE7WUFDdEIsSUFBSUEsTUFBTTRPLElBQUksS0FBSyxpQkFBaUI7Z0JBQ2xDLGlDQUFpQztnQkFDakMscUhBQXFIO2dCQUNySCxJQUFJLENBQUNnSixzQkFBc0IsQ0FBQzVYLE1BQU1nRSxJQUFJLENBQUMyUSxpQkFBaUIsRUFBRTNVLE1BQU1nRSxJQUFJLENBQUNvSSxHQUFHO1lBQzFFO1FBQ0Y7UUFFQSxzQ0FBc0M7UUFDdEMsTUFBTXlPLGVBQWVuSSxpQkFBaUJDLFNBQVMsQ0FBQztRQUNoRGtJLGFBQWEzYSxFQUFFLENBQUMsUUFBUUYsQ0FBQUE7WUFDdEIsTUFBTSxFQUNKZ0UsSUFBSSxFQUNMLEdBQUdoRTtZQUNKLElBQUksQ0FBQzZTLGNBQWMsQ0FBQzdPO1FBQ3RCO1FBRUEseURBQXlEO1FBQ3pELE1BQU13UCxlQUFlZCxpQkFBaUJDLFNBQVMsQ0FBQztRQUNoRGEsYUFBYXRULEVBQUUsQ0FBQyxRQUFReVQsQ0FBQUE7WUFDdEIsUUFBUTtZQUNSLElBQUlBLE9BQU9DLFFBQVEsRUFBRTtnQkFDbkIsSUFBSSxDQUFDN0QsVUFBVSxHQUFHNEQsT0FBT0MsUUFBUTtnQkFDakMsSUFBSSxDQUFDekQsZUFBZSxHQUFHd0QsT0FBT1YsUUFBUTtZQUN4QyxPQUNLLElBQUksQ0FBQ0osY0FBYztZQUN4QixJQUFJLElBQUksQ0FBQzRILGVBQWUsRUFBRTtnQkFDeEIsSUFBSSxDQUFDQSxlQUFlO2dCQUNwQixPQUFPLElBQUksQ0FBQ0EsZUFBZTtZQUM3QjtRQUNGO1FBQ0EsSUFBSSxDQUFDbGUsUUFBUSxHQUFHbWU7UUFDaEIsSUFBSSxJQUFJLENBQUNuZSxRQUFRLENBQUNvRixrQkFBa0IsRUFBRU4saUJBQWlCLElBQUksQ0FBQzlFLFFBQVEsQ0FBQytOLFVBQVU7UUFDL0VzUCxlQUFlbFEsZ0JBQWdCO1FBQy9CM0ksSUFBSTBLLEtBQUssQ0FBQztJQUNaO0lBQ0E4TyxnQkFBZ0JPLGVBQWUsRUFBRS9TLE9BQU8sRUFBRUMsTUFBTSxFQUFFO1FBQ2hELE1BQU1zUCxlQUFlNUQsQ0FBQUE7WUFDbkIsTUFBTTFQLE9BQU8wUDtZQUNiLE1BQU0sRUFDSnRJLEdBQUcsRUFDSHJDLGVBQWUsRUFDaEIsR0FBRy9FO1lBQ0osSUFBSW9ILEtBQUs7Z0JBQ1BySyxJQUFJOEMsS0FBSyxDQUFDdUg7Z0JBQ1YsSUFBSXBELFFBQVFBLE9BQU9vRDtZQUNyQixPQUVLLElBQUlyRCxTQUFTQSxRQUFRO2dCQUFDZ0I7YUFBZ0I7WUFDM0MsSUFBSSxJQUFJLENBQUNzSCxrQkFBa0IsRUFBRSxJQUFJLENBQUN3QyxjQUFjO1FBQ2xEO1FBQ0EsTUFBTWtJLGNBQWMsSUFBSSxDQUFDckksZ0JBQWdCLENBQUNDLFNBQVMsQ0FBQztRQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFDekMsaUJBQWlCLEVBQUU7WUFDM0IsSUFBSSxDQUFDMkMsY0FBYyxDQUFDO1lBQ3BCbFQsYUFBYW9iLGFBQWEsUUFBUXpEO1lBQ2xDeUQsWUFBWWpJLEtBQUssQ0FBQztnQkFDaEJsRSxNQUFNO2dCQUNONUssTUFBTTtvQkFDSjhXO2dCQUNGO1lBQ0Y7UUFDRixPQUFPO1lBQ0xuYixhQUFhb2IsYUFBYSxRQUFRekQ7WUFDbEMsTUFBTTNDLG9CQUFvQmhRO1lBQzFCLElBQUksQ0FBQ2lRLGFBQWEsQ0FBQ0Q7WUFDbkJvRyxZQUFZakksS0FBSyxDQUFDO2dCQUNoQmxFLE1BQU07Z0JBQ041SyxNQUFNO29CQUNKOFc7b0JBQ0E3SCxVQUFVLElBQUksQ0FBQy9DLGlCQUFpQjtvQkFDaEN5RTtvQkFDQXpCLFlBQVksSUFBSSxDQUFDQyxTQUFTO2dCQUM1QjtZQUNGO1FBQ0Y7SUFDRjtJQUNBeUUsdUJBQXVCakQsaUJBQWlCLEVBQUV2SSxHQUFHLEVBQUU7UUFDN0MsTUFBTXVNLFVBQVUsSUFBSSxDQUFDRixXQUFXO1FBQ2hDLE1BQU1wRSxhQUFhclYsY0FBYyxrREFBa0QsQ0FBQyxxQ0FBcUMsRUFBRTJaLFFBQVEsVUFBVSxDQUFDLEdBQUcsVUFBVSxDQUFDLDJCQUEyQixFQUFFLElBQUksQ0FBQ3BHLGlCQUFpQixDQUFDdlUsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUsSUFBSSxDQUFDdVUsaUJBQWlCLENBQUN0VSxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsV0FBVztRQUM1VCxNQUFNK2MsZUFBZWhjLGNBQWMsQ0FBQyw2QkFBNkIsRUFBRSxJQUFJLENBQUN1VCxpQkFBaUIsQ0FBQ3hVLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDOUcsTUFBTWtkLGVBQWVqYyxjQUFjO1FBQ25DaWMsYUFBYXhMLFdBQVcsQ0FBQ3VMO1FBQ3pCM0csV0FBVzVFLFdBQVcsQ0FBQ3dMO1FBQ3ZCLElBQUksQ0FBQ2hELG1CQUFtQixDQUFDNUQ7UUFDekIsSUFBSSxDQUFDeEMsbUJBQW1CLENBQUNDLEtBQUssQ0FBQ3hVLE9BQU8sR0FBRztRQUN6QyxJQUFJLENBQUN1VSxtQkFBbUIsQ0FBQ3BDLFdBQVcsQ0FBQzRFO1FBQ3JDMkcsYUFBYUUsZ0JBQWdCLENBQUMsU0FBUztZQUNyQyxJQUFJLENBQUN0RyxhQUFhLENBQUNELG1CQUFtQjtnQkFDcEN2STtnQkFDQUMsUUFBUTtnQkFDUnpFLFVBQVV2QjtZQUNaO1lBQ0FnTyxXQUFXRCxNQUFNO1lBQ2pCLElBQUksSUFBSSxDQUFDdkMsbUJBQW1CLENBQUNzSixRQUFRLENBQUN4WSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUNrUCxtQkFBbUIsQ0FBQ0MsS0FBSyxDQUFDeFUsT0FBTyxHQUFHO1FBQy9GO0lBQ0Y7QUFDRjtBQUVpTCxDQUNqTCxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvdG9ydXMtZW1iZWQvZGlzdC90b3J1cy5lc20uanM/MWIyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDInO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eSc7XG5pbXBvcnQgeyBnZXQsIHNldEFQSUtleSB9IGZyb20gJ0B0b3J1c2xhYnMvaHR0cC1oZWxwZXJzJztcbmltcG9ydCB7IFNhZmVFdmVudEVtaXR0ZXIsIE9iamVjdE11bHRpcGxleCwgY3JlYXRlU3RyZWFtTWlkZGxld2FyZSwgSlJQQ0VuZ2luZSwgY3JlYXRlSWRSZW1hcE1pZGRsZXdhcmUsIEJhc2VQb3N0TWVzc2FnZVN0cmVhbSwgc2V0dXBNdWx0aXBsZXggfSBmcm9tICdAdG9ydXNsYWJzL29wZW5sb2dpbi1qcnBjJztcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnbG9kYXNoLm1lcmdlJztcbmltcG9ydCB7IHJwY0Vycm9ycywgRXRoZXJldW1Qcm92aWRlckVycm9yIH0gZnJvbSAnQG1ldGFtYXNrL3JwYy1lcnJvcnMnO1xuaW1wb3J0IGRlcXVhbCBmcm9tICdmYXN0LWRlZXAtZXF1YWwnO1xuaW1wb3J0IHB1bXAgZnJvbSAncHVtcCc7XG5pbXBvcnQgbG9nbGV2ZWwgZnJvbSAnbG9nbGV2ZWwnO1xuXG5jb25zdCBXQUxMRVRfVkVSSUZJRVJTID0ge1xuICBHT09HTEU6IFwiZ29vZ2xlXCIsXG4gIEZBQ0VCT09LOiBcImZhY2Vib29rXCIsXG4gIFRXSVRDSDogXCJ0d2l0Y2hcIixcbiAgUkVERElUOiBcInJlZGRpdFwiLFxuICBESVNDT1JEOiBcImRpc2NvcmRcIixcbiAgRU1BSUxfUEFTU1dPUkRMRVNTOiBcInRvcnVzLWF1dGgwLWVtYWlsLXBhc3N3b3JkbGVzc1wiXG59O1xuY29uc3QgV0FMTEVUX09QRU5MT0dJTl9WRVJJRklFUl9NQVAgPSB7XG4gIFtXQUxMRVRfVkVSSUZJRVJTLkdPT0dMRV06IFwidGtleS1nb29nbGVcIixcbiAgW1dBTExFVF9WRVJJRklFUlMuRkFDRUJPT0tdOiBcInRrZXktZmFjZWJvb2tcIixcbiAgW1dBTExFVF9WRVJJRklFUlMuVFdJVENIXTogXCJ0a2V5LXR3aXRjaFwiLFxuICBbV0FMTEVUX1ZFUklGSUVSUy5SRURESVRdOiBcInRrZXktcmVkZGl0XCIsXG4gIFtXQUxMRVRfVkVSSUZJRVJTLkRJU0NPUkRdOiBcInRrZXktZGlzY29yZFwiLFxuICBbV0FMTEVUX1ZFUklGSUVSUy5FTUFJTF9QQVNTV09SRExFU1NdOiBcInRrZXktYXV0aDAtZW1haWwtcGFzc3dvcmRsZXNzXCJcbn07XG5jb25zdCBQQVlNRU5UX1BST1ZJREVSID0ge1xuICBNT09OUEFZOiBcIm1vb25wYXlcIixcbiAgV1lSRTogXCJ3eXJlXCIsXG4gIFJBTVBORVRXT1JLOiBcInJhbXBuZXR3b3JrXCIsXG4gIFhBTlBPT0w6IFwieGFucG9vbFwiLFxuICBNRVJDVVJZTzogXCJtZXJjdXJ5b1wiLFxuICBUUkFOU0FLOiBcInRyYW5zYWtcIixcbiAgQkFOWEE6IFwiYmFueGFcIlxufTtcbmNvbnN0IFNVUFBPUlRFRF9QQVlNRU5UX05FVFdPUksgPSB7XG4gIE1BSU5ORVQ6IFwibWFpbm5ldFwiLFxuICBNQVRJQzogXCJtYXRpY1wiLFxuICBCU0NfTUFJTk5FVDogXCJic2NfbWFpbm5ldFwiLFxuICBBVkFMQU5DSEVfTUFJTk5FVDogXCJhdmFsYW5jaGVfbWFpbm5ldFwiLFxuICBYREFJOiBcInhkYWlcIixcbiAgQVJCSVRSVU1fTUFJTk5FVDogXCJhcmJpdHJ1bV9tYWlubmV0XCIsXG4gIE9QVElNSVNNX01BSU5ORVQ6IFwib3B0aW1pc21fbWFpbm5ldFwiXG59O1xuY29uc3QgVE9SVVNfQlVJTERfRU5WID0ge1xuICBQUk9EVUNUSU9OOiBcInByb2R1Y3Rpb25cIixcbiAgREVWRUxPUE1FTlQ6IFwiZGV2ZWxvcG1lbnRcIixcbiAgQklOQU5DRTogXCJiaW5hbmNlXCIsXG4gIFRFU1RJTkc6IFwidGVzdGluZ1wiLFxuICBMUkM6IFwibHJjXCIsXG4gIEJFVEE6IFwiYmV0YVwiLFxuICBCTkI6IFwiYm5iXCIsXG4gIFBPTFlHT046IFwicG9seWdvblwiLFxuICBBTFBIQTogXCJhbHBoYVwiXG59O1xuY29uc3QgQlVUVE9OX1BPU0lUSU9OID0ge1xuICBCT1RUT01fTEVGVDogXCJib3R0b20tbGVmdFwiLFxuICBUT1BfTEVGVDogXCJ0b3AtbGVmdFwiLFxuICBCT1RUT01fUklHSFQ6IFwiYm90dG9tLXJpZ2h0XCIsXG4gIFRPUF9SSUdIVDogXCJ0b3AtcmlnaHRcIlxufTtcblxuLyoqXG4gKiBGcm9tIGh0dHBzOi8vbWluLWFwaS5jcnlwdG9jb21wYXJlLmNvbS9kYXRhL3YyL3BhaXIvbWFwcGluZy9mc3ltP2ZzeW09QlRDJmV4dHJhUGFyYW1zPVlvdXJTaXRlXG4gKiBHRVQgaHR0cHM6Ly9taW4tYXBpLmNyeXB0b2NvbXBhcmUuY29tL2RhdGEvdjIvcGFpci9tYXBwaW5nL2ZzeW0/ZnN5bT1CVENcbiAqIFRoZW4gbWFwIG92ZXIgcmV0dXJuZWQgZW50cmllcywgcGlja2luZyB0c3ltXG4gKlxuICogTGFzdCB1cGRhdGVkOiBEYXRlIG9mIGNvbW1pdFxuICovXG5jb25zdCBDUllQVE9fQ09NUEFSRV9DVVJSRU5DSUVTID0gW1wiRVRIXCIsIFwiVVNEVFwiLCBcIlVTRENcIiwgXCJUVVNEXCIsIFwiRU9TRFRcIiwgXCJVU0RcIiwgXCJEQUlcIiwgXCJHVVNEXCIsIFwiREtLVFwiLCBcIlBBWFwiLCBcIklMU1wiLCBcIlJVQlwiLCBcIkJZTlwiLCBcIkVVUlwiLCBcIkdCUFwiLCBcIkpQWVwiLCBcIktSV1wiLCBcIlBMTlwiLCBcIk1YTlwiLCBcIkFVRFwiLCBcIkJSTFwiLCBcIkNBRFwiLCBcIkNIRlwiLCBcIktQV1wiLCBcIkxBS1wiLCBcIkxCUFwiLCBcIkxLUlwiLCBcIlhPRlwiLCBcIkNOSFRcIiwgXCJET0dFXCIsIFwiVUFIXCIsIFwiVFJZXCIsIFwiSEtEXCIsIFwiWEpQXCIsIFwiU0dEXCIsIFwiVVNDXCIsIFwiTlpEXCIsIFwiTkdOXCIsIFwiUlVSXCIsIFwiQ09QXCIsIFwiR0hTXCIsIFwiRUdQXCIsIFwiSURSXCIsIFwiQkhEXCIsIFwiQ1JDXCIsIFwiUEVOXCIsIFwiQUVEXCIsIFwiRE9QXCIsIFwiUEtSXCIsIFwiSFVGXCIsIFwiVk5EXCIsIFwiWEFSXCIsIFwiTFRDXCIsIFwiUk9OXCIsIFwiT01SXCIsIFwiTVlSXCIsIFwiREtLXCIsIFwiVUdYXCIsIFwiWk1XXCIsIFwiU0FSXCIsIFwiU0VLXCIsIFwiR0VMXCIsIFwiUldGXCIsIFwiSVJSXCIsIFwiVFpTXCIsIFwiQ05ZXCIsIFwiVkVGXCIsIFwiQkRUXCIsIFwiSFJLXCIsIFwiQ0xQXCIsIFwiVEhCXCIsIFwiWEFGXCIsIFwiQVJTXCIsIFwiVVlVXCIsIFwiU1pMXCIsIFwiS1pUXCIsIFwiTk9LXCIsIFwiS0VTXCIsIFwiUEFCXCIsIFwiSU5SXCIsIFwiQ1pLXCIsIFwiTUFEXCIsIFwiVFdEXCIsIFwiUEhQXCIsIFwiWkFSXCIsIFwiQk9CXCIsIFwiQ0RGXCIsIFwiREFTSFwiLCBcIlZFU1wiLCBcIklTS1wiLCBcIk1XS1wiLCBcIkJBTVwiLCBcIlRURFwiLCBcIlhSUFwiLCBcIkpPRFwiLCBcIlJTRFwiLCBcIkhOTFwiLCBcIkJHTlwiLCBcIkdUUVwiLCBcIkJXUFwiLCBcIlhNUlwiLCBcIk1NS1wiLCBcIlFBUlwiLCBcIkFPQVwiLCBcIktXRFwiLCBcIk1VUlwiLCBcIldVU0RcIiwgXCJXRVVSXCIsIFwiV0FWRVNcIiwgXCJXVFJZXCIsIFwiTFJEXCIsIFwiTFNMXCIsIFwiTFlEXCIsIFwiQVdHXCIsIFwiTURMXCIsIFwiQlRPXCIsIFwiRVVSU1wiLCBcIkNIRlRcIiwgXCJNS0RcIiwgXCJNTlRcIiwgXCJNT1BcIiwgXCJNUk9cIiwgXCJNVlJcIiwgXCJWT0xMQVJcIiwgXCJDS1VTRFwiLCBcIktIUlwiLCBcIlZVVlwiLCBcIkJJVENOWVwiLCBcIlFDXCIsIFwiQkJEXCIsIFwiTkFEXCIsIFwiTlBSXCIsIFwiUEdLXCIsIFwiUFlHXCIsIFwiQklGXCIsIFwiQk1EXCIsIFwiQk5EXCIsIFwiWExNXCIsIFwiQk5CXCIsIFwiU0NSXCIsIFwiQkFUXCIsIFwiQ1JPXCIsIFwiSFRcIiwgXCJLQ1NcIiwgXCJMRU9cIiwgXCJMSU5LXCIsIFwiTUtSXCIsIFwiTlBYU1wiLCBcIk9NR1wiLCBcIlJFUFwiLCBcIlpCXCIsIFwiWklMXCIsIFwiWlJYXCIsIFwiQkNIXCIsIFwiQlpEXCIsIFwiQ1VQXCIsIFwiQ1ZFXCIsIFwiREpGXCIsIFwiRFpEXCIsIFwiRVJOXCIsIFwiRVRCXCIsIFwiRkpEXCIsIFwiRktQXCIsIFwiQlVTRFwiLCBcIkFOQ1RcIiwgXCJBTExcIiwgXCJBTURcIiwgXCJBTkdcIiwgXCJDTllYXCIsIFwiSVFEXCIsIFwiVVpTXCIsIFwiVE5EXCIsIFwiR0dQXCIsIFwiWEFVXCIsIFwiS0dTXCIsIFwiR0lQXCIsIFwiSk1EXCIsIFwiWkVDXCIsIFwiVVNEUFwiLCBcIkJTVlwiLCBcIkVNQzJcIiwgXCJTTlRcIiwgXCJHVE9cIiwgXCJQT1dSXCIsIFwiRVVTRFwiLCBcIkVVUlRcIiwgXCJCQ1lcIiwgXCJCVFNcIiwgXCJBVE1cIiwgXCJCTE9DS1BBWVwiLCBcIkFSRFJcIiwgXCJBTVBcIiwgXCJCMlhcIiwgXCJCSVRHT0xEXCIsIFwiQklURVVSXCIsIFwiQVRCXCIsIFwiQklUVVNEXCIsIFwiQUdSU1wiLCBcIkRGWFRcIiwgXCJISUtFTlwiLCBcIkJJWFwiLCBcIktOQ1wiLCBcIkVPU1wiLCBcIkNPQlwiLCBcIkNPU1NcIiwgXCJCTUhcIiwgXCJOQU5PXCIsIFwiQkRHXCIsIFwiQk5UXCIsIFwiWFZHXCIsIFwiTEtLMVlcIiwgXCJMS0tcIiwgXCJVU0RLXCIsIFwiRVVSTlwiLCBcIk5aRFRcIiwgXCJKU0VcIiwgXCJHTURcIiwgXCJHTkZcIiwgXCJHWURcIiwgXCJZRVJcIiwgXCJYUEZcIiwgXCJIVEdcIiwgXCJTTExcIiwgXCJTT1NcIiwgXCJXU1RcIiwgXCJTVkNcIiwgXCJTWVBcIiwgXCJORU9cIiwgXCJLTUZcIiwgXCJKVU1QXCIsIFwiQVlBXCIsIFwiQkxBU1RcIiwgXCJXR1JcIiwgXCJCQ05cIiwgXCJCVEdcIiwgXCJVUkFMU1wiLCBcIklOTlwiLCBcIlVTRFFcIiwgXCJDTkhcIiwgXCJIVVNEXCIsIFwiQktSV1wiLCBcIk5aRFhcIiwgXCJFVVJYXCIsIFwiQ0FEWFwiLCBcIlVTREVYXCIsIFwiSlBZWFwiLCBcIkFVRFhcIiwgXCJWTkRDXCIsIFwiRU9OXCIsIFwiR0JQWFwiLCBcIkNIRlhcIiwgXCJVU0RKXCIsIFwiSURSVFwiLCBcIlVTRFNcIiwgXCJVU0ROXCIsIFwiQklEUlwiLCBcIklES1wiLCBcIkJTRFwiLCBcIkJUTlwiLCBcIktZRFwiLCBcIk5JT1wiLCBcIlNCRFwiLCBcIlNER1wiLCBcIlNIUFwiLCBcIlRPUFwiLCBcIlhDRFwiLCBcIlhDSEZcIiwgXCJDTllUXCIsIFwiR1lFTlwiLCBcIlpVU0RcIiwgXCJHT0xEXCIsIFwiVFJYXCIsIFwiVFJZQlwiLCBcIlBMQVRDXCIsIFwiU1RSQVhcIiwgXCJVU1RcIiwgXCJHTE1cIiwgXCJWQUlcIiwgXCJCUlpcIiwgXCJERFJTVFwiLCBcIlhBVVRcIiwgXCJNSU1cIl07XG5cbi8qKlxuICogY3VycmVuY2llcyBzdXBwb3J0ZWQgYnkgdGhlIHBheW1lbnQgcHJvdmlkZXJcbiAqIExhc3QgdXBkYXRlZDogRGF0ZSBvZiBjb21taXRcbiAqL1xuY29uc3QgUFJPVklERVJfU1VQUE9SVEVEX0ZJQVRfQ1VSUkVOQ0lFUyA9IHtcbiAgLy8gaHR0cHM6Ly9pbnRlZ3JhdGlvbnMuc2ltcGxleC5jb20vc3VwcG9ydGVkX2N1cnJlbmNpZXNcbiAgLy8gaHR0cHM6Ly9zdXBwb3J0Lm1vb25wYXkuY29tL2hjL2VuLWdiL2FydGljbGVzLzM2MDAxMTkzMTQ1Ny1XaGljaC1maWF0LWN1cnJlbmNpZXMtYXJlLXN1cHBvcnRlZC1cbiAgW1BBWU1FTlRfUFJPVklERVIuTU9PTlBBWV06IFtcIkFVRFwiLCBcIkJHTlwiLCBcIkJSTFwiLCBcIkNBRFwiLCBcIkNIRlwiLCBcIkNOWVwiLCBcIkNPUFwiLCBcIkNaS1wiLCBcIkRLS1wiLCBcIkRPUFwiLCBcIkVHUFwiLCBcIkVVUlwiLCBcIkdCUFwiLCBcIkhLRFwiLCBcIkhSS1wiLCBcIklEUlwiLCBcIklMU1wiLCBcIkpQWVwiLCBcIkpPRFwiLCBcIktFU1wiLCBcIktSV1wiLCBcIktXRFwiLCBcIkxLUlwiLCBcIk1BRFwiLCBcIk1YTlwiLCBcIk1ZUlwiLCBcIk5HTlwiLCBcIk5PS1wiLCBcIk5aRFwiLCBcIk9NUlwiLCBcIlBFTlwiLCBcIlBLUlwiLCBcIlBMTlwiLCBcIlJPTlwiLCBcIlJVQlwiLCBcIlNFS1wiLCBcIlNHRFwiLCBcIlRIQlwiLCBcIlRSWVwiLCBcIlRXRFwiLCBcIlVTRFwiLCBcIlZORFwiLCBcIlpBUlwiXSxcbiAgLyoqXG4gICAqIGh0dHBzOi8vZG9jcy5zZW5kd3lyZS5jb20vZG9jcy9zdXBwb3J0ZWQtY3VycmVuY2llcyNmaWF0XG4gICAqIFRoZSBvbmVzIHdoZXJlIGNyZWRpdCBjYXJkIGlzIHN1cHBvcnRlZFxuICAgKi9cbiAgW1BBWU1FTlRfUFJPVklERVIuV1lSRV06IFtcIlVTRFwiLCBcIkVVUlwiLCBcIkdCUFwiLCBcIkFVRFwiLCBcIkNBRFwiLCBcIk5aRFwiLCBcIkNOWVwiLCBcIkFSU1wiLCBcIkJSTFwiLCBcIkNIRlwiLCBcIkNMUFwiLCBcIkNPUFwiLCBcIkNaS1wiLCBcIkRLS1wiLCBcIkhLRFwiLCBcIklMU1wiLCBcIklOUlwiLCBcIklTS1wiLCBcIkpQWVwiLCBcIktSV1wiLCBcIk1YTlwiLCBcIk1ZUlwiLCBcIk5PS1wiLCBcIlBIUFwiLCBcIlBMTlwiLCBcIlNFS1wiLCBcIlNHRFwiLCBcIlRIQlwiLCBcIlZORFwiLCBcIlpBUlwiXSxcbiAgLy8gaHR0cHM6Ly9zdXBwb3J0LnJhbXAubmV0d29yay9lbi9hcnRpY2xlcy80NzEtc3VwcG9ydGVkLWZpYXQtY3VycmVuY2llc1xuICBbUEFZTUVOVF9QUk9WSURFUi5SQU1QTkVUV09SS106IFtcIlVTRFwiLCBcIkVVUlwiLCBcIkdCUFwiLCBcIkJNRFwiLCBcIkJBTVwiLCBcIkJXUFwiLCBcIkJSTFwiLCBcIkJHTlwiLCBcIkNPUFwiLCBcIkNSQ1wiLCBcIkNaS1wiLCBcIkRLS1wiLCBcIkRPUFwiLCBcIkdFTFwiLCBcIkdUUVwiLCBcIkhOTFwiLCBcIkhVRlwiLCBcIklTS1wiLCBcIklOUlwiLCBcIklMU1wiLCBcIktaVFwiLCBcIktFU1wiLCBcIktXRFwiLCBcIkxBS1wiLCBcIk1LRFwiLCBcIk1ZUlwiLCBcIk1YTlwiLCBcIk1ETFwiLCBcIk1aTlwiLCBcIk5aRFwiLCBcIk5HTlwiLCBcIlBZR1wiLCBcIlBFTlwiLCBcIlBMTlwiLCBcIlJPTlwiLCBcIlJTRFwiLCBcIlNHRFwiLCBcIlpBUlwiLCBcIkxLUlwiLCBcIlNFS1wiLCBcIkNIRlwiLCBcIlRKU1wiLCBcIlRIQlwiLCBcIlVZVVwiXSxcbiAgLy8gRnJvbSBodHRwczovL3hhbnBvb2wuY29tLyBmaWF0IHNlbGVjdCBkcm9wZG93blxuICBbUEFZTUVOVF9QUk9WSURFUi5YQU5QT09MXTogW1wiU0dEXCIsIFwiSEtEXCIsIFwiVEhCXCIsIFwiUEhQXCIsIFwiSU5SXCIsIFwiSURSXCIsIFwiTVlSXCIsIFwiQVVEXCIsIFwiTlpEXCIsIFwiS1JXXCJdLFxuICAvLyBodHRwczovL2hlbHAubWVyY3VyeW8uaW8vZW4vYXJ0aWNsZXMvNjEyMTI0Ni13aGljaC1maWF0LWN1cnJlbmNpZXMtYXJlLXN1cHBvcnRlZFxuICAvLyBSVUIgLyBVQUggY3VycmVudGx5IG5vdCBzdXBwb3J0ZWRcbiAgW1BBWU1FTlRfUFJPVklERVIuTUVSQ1VSWU9dOiBbXCJFVVJcIiwgXCJVU0RcIiwgXCJHQlBcIiwgXCJUUllcIiwgXCJKUFlcIiwgXCJCUkxcIiwgXCJOR05cIiwgXCJWTkRcIiwgXCJNWE5cIiwgXCJLUldcIiwgXCJQTE5cIiwgXCJTRUtcIiwgXCJDSEZcIiwgXCJDQURcIiwgXCJDWktcIiwgXCJES0tcIiwgXCJCR05cIiwgXCJIS0RcIiwgXCJBVURcIiwgXCJJTlJcIl0sXG4gIC8qKlxuICAgKiBodHRwczovL3N1cHBvcnQudHJhbnNhay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMzYwMDIwNjE1NTc4LUNyZWRpdC1hbmQtRGViaXQtQ2FyZC1QYXltZW50cy10aHJvdWdoLVRyYW5zYWtcbiAgICogb3JcbiAgICogaHR0cHM6Ly90cmFuc2FrLnN0b3BsaWdodC5pby9kb2NzL3RyYW5zYWstZG9jcy9iM0E2T1RrMU9EUTAtMi1nZXQtZmlhdC1jdXJyZW5jaWVzXG4gICAqL1xuICBbUEFZTUVOVF9QUk9WSURFUi5UUkFOU0FLXTogW1wiQVJTXCIsIFwiQVVEXCIsIFwiQkJEXCIsIFwiQkdOXCIsIFwiQk1EXCIsIFwiQlJMXCIsIFwiQ0FEXCIsIFwiQ0hGXCIsIFwiQ0xQXCIsIFwiQ1JDXCIsIFwiQ1pLXCIsIFwiREtLXCIsIFwiRE9QXCIsIFwiRVVSXCIsIFwiRkpEXCIsIFwiRktQXCIsIFwiR0JQXCIsIFwiR0lQXCIsIFwiSFJLXCIsIFwiSFVGXCIsIFwiSURSXCIsIFwiSUxTXCIsIFwiSVNLXCIsIFwiSk1EXCIsIFwiSlBZXCIsIFwiS0VTXCIsIFwiS1JXXCIsIFwiTURMXCIsIFwiTVhOXCIsIFwiTVlSXCIsIFwiTk9LXCIsIFwiTlpEXCIsIFwiUEVOXCIsIFwiUEhQXCIsIFwiUExOXCIsIFwiUFlHXCIsIFwiUk9OXCIsIFwiU0VLXCIsIFwiU0dEXCIsIFwiVEhCXCIsIFwiVFJZXCIsIFwiVFpTXCIsIFwiVVNEXCIsIFwiWkFSXCJdLFxuICBbUEFZTUVOVF9QUk9WSURFUi5CQU5YQV06IFtcIkFVRFwiLCBcIkNBRFwiLCBcIkNaS1wiLCBcIkRLS1wiLCBcIkVVUlwiLCBcIkdCUFwiLCBcIkhLRFwiLCBcIkpQWVwiLCBcIk5PS1wiLCBcIk5aRFwiLCBcIk5aRFwiLCBcIlBMTlwiLCBcIlJVQlwiLCBcIlNFS1wiLCBcIlNHRFwiLCBcIlRSWVwiLCBcIlVTRFwiXVxufTtcbmNvbnN0IGNyeXB0b0NvbXBhcmVDdXJyZW5jaWVzU2V0ID0gbmV3IFNldChDUllQVE9fQ09NUEFSRV9DVVJSRU5DSUVTKTtcbi8qKlxuICogRmlhdCBjdXJyZW5jaWVzIHRoYXQgd2Ugc3VwcG9ydFxuICovXG5mdW5jdGlvbiBzdXBwb3J0ZWRGaWF0Q3VycmVuY2llcyhwcm92aWRlcikge1xuICBjb25zdCBwcm92aWRlclN1cHBvcnRlZEZpYXRDdXJyZW5jaWVzID0gUFJPVklERVJfU1VQUE9SVEVEX0ZJQVRfQ1VSUkVOQ0lFU1twcm92aWRlcl07XG4gIHJldHVybiBwcm92aWRlclN1cHBvcnRlZEZpYXRDdXJyZW5jaWVzLmZpbHRlcihjdXJyZW5jeSA9PiBjcnlwdG9Db21wYXJlQ3VycmVuY2llc1NldC5oYXMoY3VycmVuY3kpKTtcbn1cblxuY29uc3QgcGF5bWVudFByb3ZpZGVycyQxID0ge1xuICBbUEFZTUVOVF9QUk9WSURFUi5NT09OUEFZXToge1xuICAgIGxpbmUxOiBcIkNyZWRpdC8gRGViaXQgQ2FyZC8gQXBwbGUgUGF5XCIsXG4gICAgbGluZTI6IFwiNC41JSBvciA1IFVTRFwiLFxuICAgIGxpbmUzOiBcIjIsMDAw4oKsL2RheSwgMTAsMDAw4oKsL21vXCIsXG4gICAgc3VwcG9ydFBhZ2U6IFwiaHR0cHM6Ly9oZWxwLm1vb25wYXkuaW8vZW4vXCIsXG4gICAgbWluT3JkZXJWYWx1ZTogMjQuOTksXG4gICAgbWF4T3JkZXJWYWx1ZTogNTAwMDAsXG4gICAgdmFsaWRDdXJyZW5jaWVzOiBzdXBwb3J0ZWRGaWF0Q3VycmVuY2llcyhQQVlNRU5UX1BST1ZJREVSLk1PT05QQVkpLFxuICAgIHZhbGlkQ3J5cHRvQ3VycmVuY2llc0J5Q2hhaW46IHtcbiAgICAgIFtTVVBQT1JURURfUEFZTUVOVF9ORVRXT1JLLk1BSU5ORVRdOiBbe1xuICAgICAgICB2YWx1ZTogXCJhYXZlXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiQUFWRVwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcImJhdFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkJBVFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcImRhaVwiLFxuICAgICAgICBkaXNwbGF5OiBcIkRBSVwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcImV0aFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkVUSFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIm1rclwiLFxuICAgICAgICBkaXNwbGF5OiBcIk1LUlwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIm1hdGljXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiTUFUSUNcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJ1c2R0XCIsXG4gICAgICAgIGRpc3BsYXk6IFwiVVNEVFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcInVuaVwiLFxuICAgICAgICBkaXNwbGF5OiBcIlVOSVwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcInVzZGNcIixcbiAgICAgICAgZGlzcGxheTogXCJVU0RDXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwid2V0aFwiLFxuICAgICAgICBkaXNwbGF5OiBcIldFVEhcIlxuICAgICAgfV0sXG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5NQVRJQ106IFt7XG4gICAgICAgIHZhbHVlOiBcImV0aF9wb2x5Z29uXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiRVRIXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwibWF0aWNfcG9seWdvblwiLFxuICAgICAgICBkaXNwbGF5OiBcIk1BVElDXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwidXNkY19wb2x5Z29uXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiVVNEQ1wiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcInVzZHRfcG9seWdvblwiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRFRcIlxuICAgICAgfV0sXG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5CU0NfTUFJTk5FVF06IFt7XG4gICAgICAgIHZhbHVlOiBcImJuYl9ic2NcIixcbiAgICAgICAgZGlzcGxheTogXCJCTkJcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJidXNkX2JzY1wiLFxuICAgICAgICBkaXNwbGF5OiBcIkJVU0RcIlxuICAgICAgfV0sXG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5BVkFMQU5DSEVfTUFJTk5FVF06IFt7XG4gICAgICAgIHZhbHVlOiBcImF2YXhfY2NoYWluXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiQVZBWFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcInVzZGNfY2NoYWluXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiVVNEQ1wiXG4gICAgICB9XSxcbiAgICAgIFtTVVBQT1JURURfUEFZTUVOVF9ORVRXT1JLLkFSQklUUlVNX01BSU5ORVRdOiBbe1xuICAgICAgICB2YWx1ZTogXCJldGhfYXJiaXRydW1cIixcbiAgICAgICAgZGlzcGxheTogXCJFVEhcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJ1c2RjX2FyYml0cnVtXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiVVNEQ1wiXG4gICAgICB9XSxcbiAgICAgIFtTVVBQT1JURURfUEFZTUVOVF9ORVRXT1JLLk9QVElNSVNNX01BSU5ORVRdOiBbe1xuICAgICAgICB2YWx1ZTogXCJldGhfb3B0aW1pc21cIixcbiAgICAgICAgZGlzcGxheTogXCJFVEhcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJ1c2RjX29wdGltaXNtXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiVVNEQ1wiXG4gICAgICB9XVxuICAgIH0sXG4gICAgaW5jbHVkZUZlZXM6IHRydWUsXG4gICAgYXBpOiB0cnVlLFxuICAgIGVuZm9yY2VNYXg6IGZhbHNlXG4gIH0sXG4gIFtQQVlNRU5UX1BST1ZJREVSLldZUkVdOiB7XG4gICAgbGluZTE6IFwiQXBwbGUgUGF5LyBEZWJpdC8gQ3JlZGl0IENhcmRcIixcbiAgICBsaW5lMjogXCI0LjklICsgMzDCoiBvciA1IFVTRFwiLFxuICAgIGxpbmUzOiBcIiQyNTAvZGF5XCIsXG4gICAgc3VwcG9ydFBhZ2U6IFwiaHR0cHM6Ly9zdXBwb3J0LnNlbmR3eXJlLmNvbS9lbi9cIixcbiAgICBtaW5PcmRlclZhbHVlOiA1LFxuICAgIG1heE9yZGVyVmFsdWU6IDUwMCxcbiAgICB2YWxpZEN1cnJlbmNpZXM6IHN1cHBvcnRlZEZpYXRDdXJyZW5jaWVzKFBBWU1FTlRfUFJPVklERVIuV1lSRSksXG4gICAgdmFsaWRDcnlwdG9DdXJyZW5jaWVzQnlDaGFpbjoge1xuICAgICAgW1NVUFBPUlRFRF9QQVlNRU5UX05FVFdPUksuTUFJTk5FVF06IFt7XG4gICAgICAgIHZhbHVlOiBcIkFBVkVcIixcbiAgICAgICAgZGlzcGxheTogXCJBQVZFXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiQ09NUFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkNPTVBcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJCQVRcIixcbiAgICAgICAgZGlzcGxheTogXCJCQVRcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJCVVNEXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiQlVTRFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIkRBSVwiLFxuICAgICAgICBkaXNwbGF5OiBcIkRBSVwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIkVUSFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkVUSFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIldCVENcIixcbiAgICAgICAgZGlzcGxheTogXCJXQlRDXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiTUtSXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiTUtSXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiVU5JXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiVU5JXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiV0VUSFwiLFxuICAgICAgICBkaXNwbGF5OiBcIldFVEhcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJVU0RDXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiVVNEQ1wiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIlVTRFRcIixcbiAgICAgICAgZGlzcGxheTogXCJVU0RUXCJcbiAgICAgIH1dLFxuICAgICAgW1NVUFBPUlRFRF9QQVlNRU5UX05FVFdPUksuTUFUSUNdOiBbe1xuICAgICAgICB2YWx1ZTogXCJtVVNEQ1wiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRENcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJNQVRJQ1wiLFxuICAgICAgICBkaXNwbGF5OiBcIk1BVElDXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiTVdFVEhcIixcbiAgICAgICAgZGlzcGxheTogXCJXRVRIXCJcbiAgICAgIH1dLFxuICAgICAgW1NVUFBPUlRFRF9QQVlNRU5UX05FVFdPUksuQVZBTEFOQ0hFX01BSU5ORVRdOiBbe1xuICAgICAgICB2YWx1ZTogXCJBVkFYQ1wiLFxuICAgICAgICBkaXNwbGF5OiBcIkFWQVhcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJBVkFYQ1VTRENcIixcbiAgICAgICAgZGlzcGxheTogXCJVU0RDXCJcbiAgICAgIH1dLFxuICAgICAgW1NVUFBPUlRFRF9QQVlNRU5UX05FVFdPUksuQlNDX01BSU5ORVRdOiBbe1xuICAgICAgICB2YWx1ZTogXCJCTkJcIixcbiAgICAgICAgZGlzcGxheTogXCJCTkJcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJCQlVTRFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkJVU0RcIlxuICAgICAgfV1cbiAgICB9LFxuICAgIGluY2x1ZGVGZWVzOiBmYWxzZSxcbiAgICBhcGk6IHRydWUsXG4gICAgZW5mb3JjZU1heDogZmFsc2VcbiAgfSxcbiAgW1BBWU1FTlRfUFJPVklERVIuUkFNUE5FVFdPUktdOiB7XG4gICAgbGluZTE6IFwiRGViaXQgQ2FyZC8gPGJyPkFwcGxlIFBheS8gQmFuayB0cmFuc2ZlclwiLFxuICAgIGxpbmUyOiBcIjAuNDklIC0gMi45JVwiLFxuICAgIGxpbmUzOiBcIjUsMDAw4oKsL3B1cmNoYXNlLCAyMCwwMDDigqwvbW9cIixcbiAgICBzdXBwb3J0UGFnZTogXCJodHRwczovL2luc3RhbnQucmFtcC5uZXR3b3JrL1wiLFxuICAgIG1pbk9yZGVyVmFsdWU6IDUwLFxuICAgIG1heE9yZGVyVmFsdWU6IDIwMDAwLFxuICAgIHZhbGlkQ3VycmVuY2llczogc3VwcG9ydGVkRmlhdEN1cnJlbmNpZXMoUEFZTUVOVF9QUk9WSURFUi5SQU1QTkVUV09SSyksXG4gICAgdmFsaWRDcnlwdG9DdXJyZW5jaWVzQnlDaGFpbjoge1xuICAgICAgW1NVUFBPUlRFRF9QQVlNRU5UX05FVFdPUksuTUFJTk5FVF06IFt7XG4gICAgICAgIHZhbHVlOiBcIkVUSFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkVUSFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIkRBSVwiLFxuICAgICAgICBkaXNwbGF5OiBcIkRBSVwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIkJBVFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkJBVFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIlVTRENcIixcbiAgICAgICAgZGlzcGxheTogXCJVU0RDXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiVVNEVFwiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRFRcIlxuICAgICAgfV0sXG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5NQVRJQ106IFt7XG4gICAgICAgIHZhbHVlOiBcIk1BVElDX0JBVFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkJBVFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIk1BVElDX0RBSVwiLFxuICAgICAgICBkaXNwbGF5OiBcIkRBSVwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIk1BVElDX01BVElDXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiTUFUSUNcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJNQVRJQ19VU0RDXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiVVNEQ1wiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIk1BVElDX1VTRFRcIixcbiAgICAgICAgZGlzcGxheTogXCJVU0RUXCJcbiAgICAgIH1dLFxuICAgICAgW1NVUFBPUlRFRF9QQVlNRU5UX05FVFdPUksuQVZBTEFOQ0hFX01BSU5ORVRdOiBbe1xuICAgICAgICB2YWx1ZTogXCJBVkFYX0FWQVhcIixcbiAgICAgICAgZGlzcGxheTogXCJBVkFYXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiQVZBWF9VU0RDXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiVVNEQ1wiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIkFWQVhfVVNEVFwiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRFRcIlxuICAgICAgfV0sXG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5BUkJJVFJVTV9NQUlOTkVUXTogW3tcbiAgICAgICAgdmFsdWU6IFwiQVJCSVRSVU1fRVRIXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiRVRIXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiQVJCSVRSVU1fVVNEQy5lXHRcIixcbiAgICAgICAgZGlzcGxheTogXCJVU0RDXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiQVJCSVRSVU1fVVNEVFwiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRFRcIlxuICAgICAgfV0sXG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5PUFRJTUlTTV9NQUlOTkVUXTogW3tcbiAgICAgICAgdmFsdWU6IFwiT1BUSU1JU01fREFJXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiREFJXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiT1BUSU1JU01fT1BUSU1JU01cIixcbiAgICAgICAgZGlzcGxheTogXCJPUFRJTUlTTVwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIk9QVElNSVNNX1VTRENcIixcbiAgICAgICAgZGlzcGxheTogXCJVU0RDXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiT1BUSU1JU01fVVNEVFwiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRFRcIlxuICAgICAgfV0sXG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5CU0NfTUFJTk5FVF06IFt7XG4gICAgICAgIHZhbHVlOiBcIkJTQ19CTkJcIixcbiAgICAgICAgZGlzcGxheTogXCJCTkJcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJCU0NfQlVTRFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkJVU0RcIlxuICAgICAgfV1cbiAgICB9LFxuICAgIGluY2x1ZGVGZWVzOiB0cnVlLFxuICAgIGFwaTogdHJ1ZSxcbiAgICByZWNlaXZlSGludDogXCJ3YWxsZXRUb3BVcC5yZWNlaXZlSGludFJhbXBcIixcbiAgICBlbmZvcmNlTWF4OiBmYWxzZVxuICB9LFxuICBbUEFZTUVOVF9QUk9WSURFUi5YQU5QT09MXToge1xuICAgIGxpbmUxOiBcIlBheU5vdy8gSW5zdGFQYXkvIEZQUy8gR29KZWtQYXkvIFVQSS8gUHJvbXB0UGF5LyA8YnI+VmlldHRlbFBheS8gRHVpdE5vd1wiLFxuICAgIGxpbmUyOiBcIjIuNSUgYnV5aW5nLCAzJSBzZWxsaW5nXCIsXG4gICAgbGluZTM6IFwiJDIsNTAwIC8gZGF5XCIsXG4gICAgc3VwcG9ydFBhZ2U6IFwibWFpbHRvOnN1cHBvcnRAeGFucG9vbC5jb21cIixcbiAgICBtaW5PcmRlclZhbHVlOiAxMDAsXG4gICAgbWF4T3JkZXJWYWx1ZTogMjUwMCxcbiAgICB2YWxpZEN1cnJlbmNpZXM6IHN1cHBvcnRlZEZpYXRDdXJyZW5jaWVzKFBBWU1FTlRfUFJPVklERVIuWEFOUE9PTCksXG4gICAgdmFsaWRDcnlwdG9DdXJyZW5jaWVzQnlDaGFpbjoge1xuICAgICAgW1NVUFBPUlRFRF9QQVlNRU5UX05FVFdPUksuTUFJTk5FVF06IFt7XG4gICAgICAgIHZhbHVlOiBcIkVUSFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkVUSFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIlVTRFRcIixcbiAgICAgICAgZGlzcGxheTogXCJVU0RUXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiVVNEQ1wiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRENcIlxuICAgICAgfV1cbiAgICB9LFxuICAgIGluY2x1ZGVGZWVzOiB0cnVlLFxuICAgIGFwaTogdHJ1ZSxcbiAgICBzZWxsOiB0cnVlLFxuICAgIGVuZm9yY2VNYXg6IGZhbHNlXG4gIH0sXG4gIFtQQVlNRU5UX1BST1ZJREVSLk1FUkNVUllPXToge1xuICAgIGxpbmUxOiBcIkNyZWRpdC8gRGViaXQgQ2FyZC8gQXBwbGUgUGF5XCIsXG4gICAgbGluZTI6IFwiMy45NSUgb3IgNCBVU0RcIixcbiAgICBsaW5lMzogXCIxMCwwMDDigqwvZGF5LCAyNSwwMDDigqwvbW9cIixcbiAgICBzdXBwb3J0UGFnZTogXCJtYWlsdG86c3VwcG9ydEBtZXJjdXJ5by5pb1wiLFxuICAgIG1pbk9yZGVyVmFsdWU6IDMwLFxuICAgIG1heE9yZGVyVmFsdWU6IDUwMDAsXG4gICAgdmFsaWRDdXJyZW5jaWVzOiBzdXBwb3J0ZWRGaWF0Q3VycmVuY2llcyhQQVlNRU5UX1BST1ZJREVSLk1FUkNVUllPKSxcbiAgICB2YWxpZENyeXB0b0N1cnJlbmNpZXNCeUNoYWluOiB7XG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5NQUlOTkVUXTogW3tcbiAgICAgICAgdmFsdWU6IFwiRVRIXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiRVRIXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiQkFUXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiQkFUXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiVVNEVFwiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRFRcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJEQUlcIixcbiAgICAgICAgZGlzcGxheTogXCJEQUlcIlxuICAgICAgfV0sXG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5CU0NfTUFJTk5FVF06IFt7XG4gICAgICAgIHZhbHVlOiBcIkJOQlwiLFxuICAgICAgICBkaXNwbGF5OiBcIkJOQlwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIkJVU0RcIixcbiAgICAgICAgZGlzcGxheTogXCJCVVNEXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiMUlOQ0hcIixcbiAgICAgICAgZGlzcGxheTogXCIxSU5DSFwiXG4gICAgICB9XSxcbiAgICAgIFtTVVBQT1JURURfUEFZTUVOVF9ORVRXT1JLLkFWQUxBTkNIRV9NQUlOTkVUXTogW3tcbiAgICAgICAgdmFsdWU6IFwiQVZBWFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkFWQVhcIlxuICAgICAgfV0sXG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5NQVRJQ106IFt7XG4gICAgICAgIHZhbHVlOiBcIk1BVElDXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiTUFUSUNcIlxuICAgICAgfV1cbiAgICB9LFxuICAgIGluY2x1ZGVGZWVzOiB0cnVlLFxuICAgIGFwaTogdHJ1ZSxcbiAgICBlbmZvcmNlTWF4OiBmYWxzZVxuICB9LFxuICBbUEFZTUVOVF9QUk9WSURFUi5UUkFOU0FLXToge1xuICAgIGxpbmUxOiBcIkFwcGxlICYgR29vZ2xlIFBheSAvIENyZWRpdC9EZWJpdCBDYXJkPGJyLz5CYW5na29rIEJhbmsgTW9iaWxlICYgaVBheTxici8+QmFuayBUcmFuc2ZlciAoc2VwYS9nYnApIC8gU0NCIE1vYmlsZSAmIEVhc3lcIixcbiAgICBsaW5lMjogXCIwLjk5JSAtIDUuNSUgb3IgNSBVU0RcIixcbiAgICBsaW5lMzogXCIkNSwwMDAvZGF5LCAkMjgsMDAwL21vXCIsXG4gICAgc3VwcG9ydFBhZ2U6IFwiaHR0cHM6Ly9zdXBwb3J0LnRyYW5zYWsuY29tL2hjL2VuLVVTXCIsXG4gICAgbWluT3JkZXJWYWx1ZTogMzAsXG4gICAgbWF4T3JkZXJWYWx1ZTogNTAwLFxuICAgIHZhbGlkQ3VycmVuY2llczogc3VwcG9ydGVkRmlhdEN1cnJlbmNpZXMoUEFZTUVOVF9QUk9WSURFUi5UUkFOU0FLKSxcbiAgICB2YWxpZENyeXB0b0N1cnJlbmNpZXNCeUNoYWluOiB7XG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5NQUlOTkVUXTogW3tcbiAgICAgICAgdmFsdWU6IFwiMUlOQ0hcIixcbiAgICAgICAgZGlzcGxheTogXCIxSU5DSFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIkJBVFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkJBVFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIkFBVkVcIixcbiAgICAgICAgZGlzcGxheTogXCJBQVZFXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiREFJXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiREFJXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiRVRIXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiRVRIXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiVVNEQ1wiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRENcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJVU0RUXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiVVNEVFwiXG4gICAgICB9XSxcbiAgICAgIFtTVVBQT1JURURfUEFZTUVOVF9ORVRXT1JLLk1BVElDXTogW3tcbiAgICAgICAgdmFsdWU6IFwiQkFUXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiQkFUXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiQUFWRVwiLFxuICAgICAgICBkaXNwbGF5OiBcIkFBVkVcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJEQUlcIixcbiAgICAgICAgZGlzcGxheTogXCJEQUlcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJNQVRJQ1wiLFxuICAgICAgICBkaXNwbGF5OiBcIk1BVElDXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiVVNEQ1wiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRENcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJVU0RUXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiVVNEVFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIldFVEhcIixcbiAgICAgICAgZGlzcGxheTogXCJXRVRIXCJcbiAgICAgIH1dLFxuICAgICAgW1NVUFBPUlRFRF9QQVlNRU5UX05FVFdPUksuQlNDX01BSU5ORVRdOiBbe1xuICAgICAgICB2YWx1ZTogXCJCQVRcIixcbiAgICAgICAgZGlzcGxheTogXCJCQVRcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJCTkJcIixcbiAgICAgICAgZGlzcGxheTogXCJCTkJcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJCVVNEXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiQlVTRFwiXG4gICAgICB9XSxcbiAgICAgIFtTVVBQT1JURURfUEFZTUVOVF9ORVRXT1JLLkFWQUxBTkNIRV9NQUlOTkVUXTogW3tcbiAgICAgICAgdmFsdWU6IFwiQVZBWFwiLFxuICAgICAgICBkaXNwbGF5OiBcIkFWQVhcIlxuICAgICAgfV0sXG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5PUFRJTUlTTV9NQUlOTkVUXTogW3tcbiAgICAgICAgdmFsdWU6IFwiRVRIXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiRVRIXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiVVNEQ1wiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRENcIlxuICAgICAgfV0sXG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5BUkJJVFJVTV9NQUlOTkVUXTogW3tcbiAgICAgICAgdmFsdWU6IFwiVVNEQ1wiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRENcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJFVEhcIixcbiAgICAgICAgZGlzcGxheTogXCJFVEhcIlxuICAgICAgfV1cbiAgICB9LFxuICAgIGluY2x1ZGVGZWVzOiB0cnVlLFxuICAgIGVuZm9yY2VNYXg6IHRydWVcbiAgfSxcbiAgW1BBWU1FTlRfUFJPVklERVIuQkFOWEFdOiB7XG4gICAgbGluZTE6IFwiRGViaXQgQ2FyZC8gPGJyPkFwcGxlIFBheS8gQmFuayB0cmFuc2ZlclwiLFxuICAgIGxpbmUyOiBcIjAuNDklIC0gMi45JVwiLFxuICAgIGxpbmUzOiBcIjUsMDAw4oKsL3B1cmNoYXNlLCAyMCwwMDDigqwvbW9cIixcbiAgICBzdXBwb3J0UGFnZTogXCJodHRwczovL3N1cHBvcnQuYmFueGEuY29tXCIsXG4gICAgbWluT3JkZXJWYWx1ZTogMjAsXG4gICAgbWF4T3JkZXJWYWx1ZTogMTUwMDAsXG4gICAgdmFsaWRDdXJyZW5jaWVzOiBzdXBwb3J0ZWRGaWF0Q3VycmVuY2llcyhQQVlNRU5UX1BST1ZJREVSLkJBTlhBKSxcbiAgICB2YWxpZENyeXB0b0N1cnJlbmNpZXNCeUNoYWluOiB7XG4gICAgICBbU1VQUE9SVEVEX1BBWU1FTlRfTkVUV09SSy5NQUlOTkVUXTogW3tcbiAgICAgICAgdmFsdWU6IFwiRVRIXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiRVRIXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiREFJXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiREFJXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiTUtSXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiTUtSXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiVVNEVFwiLFxuICAgICAgICBkaXNwbGF5OiBcIlVTRFRcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJCVVNEXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiQlVTRFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIlVTRENcIixcbiAgICAgICAgZGlzcGxheTogXCJVU0RDXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiQkFUXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiQkFUXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6IFwiQUFWRVwiLFxuICAgICAgICBkaXNwbGF5OiBcIkFBVkVcIlxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogXCJDT01QXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiQ09NUFwiXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiBcIlVOSVwiLFxuICAgICAgICBkaXNwbGF5OiBcIlVOSVwiXG4gICAgICB9XSxcbiAgICAgIFtTVVBQT1JURURfUEFZTUVOVF9ORVRXT1JLLk1BVElDXTogW3tcbiAgICAgICAgdmFsdWU6IFwiTUFUSUNcIixcbiAgICAgICAgZGlzcGxheTogXCJNQVRJQ1wiXG4gICAgICB9XVxuICAgICAgLy8gW0JTQ19NQUlOTkVUXTogW3sgdmFsdWU6ICdCTkInLCBkaXNwbGF5OiAnQk5CJyB9XSxcbiAgICB9LFxuXG4gICAgaW5jbHVkZUZlZXM6IHRydWUsXG4gICAgZW5mb3JjZU1heDogdHJ1ZVxuICB9XG59O1xuY29uc3QgdHJhbnNsYXRpb25zID0ge1xuICBlbjoge1xuICAgIGVtYmVkOiB7XG4gICAgICBjb250aW51ZTogXCJDb250aW51ZVwiLFxuICAgICAgYWN0aW9uUmVxdWlyZWQ6IFwiQXV0aG9yaXphdGlvbiByZXF1aXJlZFwiLFxuICAgICAgcGVuZGluZ0FjdGlvbjogXCJDbGljayBjb250aW51ZSB0byBwcm9jZWVkIHdpdGggeW91ciByZXF1ZXN0IGluIGEgcG9wdXBcIixcbiAgICAgIGNvb2tpZXNSZXF1aXJlZDogXCJDb29raWVzIFJlcXVpcmVkXCIsXG4gICAgICBlbmFibGVDb29raWVzOiBcIlBsZWFzZSBlbmFibGUgY29va2llcyBpbiB5b3VyIGJyb3dzZXIgcHJlZmVyZW5jZXMgdG8gYWNjZXNzIFRvcnVzXCIsXG4gICAgICBjbGlja0hlcmU6IFwiTW9yZSBJbmZvXCJcbiAgICB9XG4gIH0sXG4gIGRlOiB7XG4gICAgZW1iZWQ6IHtcbiAgICAgIGNvbnRpbnVlOiBcIkZvcnRzZXR6ZW5cIixcbiAgICAgIGFjdGlvblJlcXVpcmVkOiBcIkF1dG9yaXNpZXJ1bmcgZXJmb3JkZXJsaWNoXCIsXG4gICAgICBwZW5kaW5nQWN0aW9uOiBcIktsaWNrZW4gU2llIGluIGVpbmVtIFBvcHVwIGF1ZiBXZWl0ZXIsIHVtIG1pdCBJaHJlciBBbmZyYWdlIGZvcnR6dWZhaHJlblwiLFxuICAgICAgY29va2llc1JlcXVpcmVkOiBcIkNvb2tpZXMgYmVuw7Z0aWd0XCIsXG4gICAgICBlbmFibGVDb29raWVzOiBcIkJpdHRlIGFrdGl2aWVyZW4gU2llIENvb2tpZXMgaW4gSWhyZW4gQnJvd3NlcmVpbnN0ZWxsdW5nZW4sIHVtIGF1ZiBUb3J1cyB6dXp1Z3JlaWZlblwiLFxuICAgICAgY2xpY2tIZXJlOiBcIk1laHIgSW5mb1wiXG4gICAgfVxuICB9LFxuICBqYToge1xuICAgIGVtYmVkOiB7XG4gICAgICBjb250aW51ZTogXCLntpnntprjgZnjgotcIixcbiAgICAgIGFjdGlvblJlcXVpcmVkOiBcIuiqjeiovOOBjOW/heimgeOBp+OBmVwiLFxuICAgICAgcGVuZGluZ0FjdGlvbjogXCLntprooYzjgpLjgq/jg6rjg4Pjgq/jgZfjgabjgIHjg53jg4Pjg5fjgqLjg4Pjg5fjgafjg6rjgq/jgqjjgrnjg4jjgpLntprooYzjgZfjgb7jgZlcIixcbiAgICAgIGNvb2tpZXNSZXF1aXJlZDogXCLlv4XopoHjgarjgq/jg4Pjgq3jg7xcIixcbiAgICAgIGVuYWJsZUNvb2tpZXM6IFwiVG9ydXPjgavjgqLjgq/jgrvjgrnjgZnjgovjgavjga/jgIHjg5bjg6njgqbjgrbjga7oqK3lrprjgadDb29raWXjgpLmnInlirnjgavjgZfjgabjgY/jgaDjgZXjgYTjgIJcIixcbiAgICAgIGNsaWNrSGVyZTogXCLoqbPjgZfjgY/jga9cIlxuICAgIH1cbiAgfSxcbiAga286IHtcbiAgICBlbWJlZDoge1xuICAgICAgY29udGludWU6IFwi6rOE7IaN7ZWY64ukXCIsXG4gICAgICBhY3Rpb25SZXF1aXJlZDogXCLsirnsnbgg7ZWE7JqUXCIsXG4gICAgICBwZW5kaW5nQWN0aW9uOiBcIu2MneyXheyXkOyEnCDsmpTssq3snYQg7KeE7ZaJ7ZWY66Ck66m0IOqzhOyGjeydhCDtgbTrpq3tlZjsi63si5zsmKQuXCIsXG4gICAgICBjb29raWVzUmVxdWlyZWQ6IFwi7L+g7YKkIO2VhOyalFwiLFxuICAgICAgZW5hYmxlQ29va2llczogXCLruIzrnbzsmrDsoIAg7ZmY6rK9IOyEpOygleyXkOyEnCDsv6DtgqTrpbwg7Zmc7ISx7ZmU7ZWY7JesIFRvcnVz7JeQIOyVoeyEuOyKpO2VmOyLreyLnOyYpC5cIixcbiAgICAgIGNsaWNrSGVyZTogXCLrjZQg66eO7J2AIOygleuztFwiXG4gICAgfVxuICB9LFxuICB6aDoge1xuICAgIGVtYmVkOiB7XG4gICAgICBjb250aW51ZTogXCLnu6fnu61cIixcbiAgICAgIGFjdGlvblJlcXVpcmVkOiBcIumcgOimgeaOiOadg1wiLFxuICAgICAgcGVuZGluZ0FjdGlvbjogXCLljZXlh7vnu6fnu63ku6XlnKjlvLnlh7rnqpflj6PkuK3nu6fnu63mgqjnmoTor7fmsYJcIixcbiAgICAgIGNvb2tpZXNSZXF1aXJlZDogXCLlv4XloatDb29raWVcIixcbiAgICAgIGVuYWJsZUNvb2tpZXM6IFwi6K+35Zyo5oKo55qE5rWP6KeI5Zmo6aaW6YCJ6aG55Lit5ZCv55SoY29va2ll5Lul6K6/6ZeuVG9ydXPjgIJcIixcbiAgICAgIGNsaWNrSGVyZTogXCLmm7TlpJrkv6Hmga9cIlxuICAgIH1cbiAgfVxufTtcbnZhciBjb25maWd1cmF0aW9uID0ge1xuICBzdXBwb3J0ZWRWZXJpZmllckxpc3Q6IE9iamVjdC52YWx1ZXMoV0FMTEVUX1ZFUklGSUVSUyksXG4gIHBheW1lbnRQcm92aWRlcnM6IHBheW1lbnRQcm92aWRlcnMkMSxcbiAgYXBpOiBcImh0dHBzOi8vYXBpLnRvci51c1wiLFxuICB0cmFuc2xhdGlvbnMsXG4gIHByb2RUb3J1c1VybDogXCJcIixcbiAgbG9jYWxTdG9yYWdlS2V5UHJlZml4OiBgdG9ydXMtYFxufTtcblxuY29uc3QgaHRtbFRvRWxlbWVudCA9IGh0bWwgPT4ge1xuICBjb25zdCB0ZW1wbGF0ZSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG4gIGNvbnN0IHRyaW1tZWRIdG1sID0gaHRtbC50cmltKCk7IC8vIE5ldmVyIHJldHVybiBhIHRleHQgbm9kZSBvZiB3aGl0ZXNwYWNlIGFzIHRoZSByZXN1bHRcbiAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdHJpbW1lZEh0bWw7XG4gIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmZpcnN0Q2hpbGQ7XG59O1xuY29uc3QgaGFuZGxlU3RyZWFtID0gKGhhbmRsZSwgZXZlbnROYW1lLCBoYW5kbGVyKSA9PiB7XG4gIGNvbnN0IGhhbmRsZXJXcmFwcGVyID0gY2h1bmsgPT4ge1xuICAgIGhhbmRsZXIoY2h1bmspO1xuICAgIGhhbmRsZS5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXJXcmFwcGVyKTtcbiAgfTtcbiAgaGFuZGxlLm9uKGV2ZW50TmFtZSwgaGFuZGxlcldyYXBwZXIpO1xufTtcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuZnVuY3Rpb24gaXNTdHJlYW0oc3RyZWFtKSB7XG4gIHJldHVybiBzdHJlYW0gIT09IG51bGwgJiYgdHlwZW9mIHN0cmVhbSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygc3RyZWFtLnBpcGUgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGlzV3JpdGFibGVTdHJlYW0oc3RyZWFtKSB7XG4gIHJldHVybiBpc1N0cmVhbShzdHJlYW0pICYmIHN0cmVhbS53cml0YWJsZSAhPT0gZmFsc2UgJiYgdHlwZW9mIHN0cmVhbS5fd3JpdGUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygc3RyZWFtLl93cml0YWJsZVN0YXRlID09PSBcIm9iamVjdFwiO1xufVxuZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbShzdHJlYW0pIHtcbiAgcmV0dXJuIGlzU3RyZWFtKHN0cmVhbSkgJiYgc3RyZWFtLnJlYWRhYmxlICE9PSBmYWxzZSAmJiB0eXBlb2Ygc3RyZWFtLl9yZWFkID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHN0cmVhbS5fcmVhZGFibGVTdGF0ZSA9PT0gXCJvYmplY3RcIjtcbn1cbmZ1bmN0aW9uIGlzRHVwbGV4U3RyZWFtKHN0cmVhbSkge1xuICByZXR1cm4gaXNXcml0YWJsZVN0cmVhbShzdHJlYW0pICYmIGlzUmVhZGFibGVTdHJlYW0oc3RyZWFtKTtcbn1cblxudmFyIGxvZyA9IGxvZ2xldmVsLmdldExvZ2dlcihcInRvcnVzLWVtYmVkXCIpO1xuXG52YXIgbWVzc2FnZXMgPSB7XG4gIGVycm9yczoge1xuICAgIGRpc2Nvbm5lY3RlZDogKCkgPT4gXCJUb3J1czogTG9zdCBjb25uZWN0aW9uIHRvIFRvcnVzLlwiLFxuICAgIHBlcm1hbmVudGx5RGlzY29ubmVjdGVkOiAoKSA9PiBcIlRvcnVzOiBEaXNjb25uZWN0ZWQgZnJvbSBpZnJhbWUuIFBhZ2UgcmVsb2FkIHJlcXVpcmVkLlwiLFxuICAgIHNlbmRTaXRlTWV0YWRhdGE6ICgpID0+IFwiVG9ydXM6IEZhaWxlZCB0byBzZW5kIHNpdGUgbWV0YWRhdGEuIFRoaXMgaXMgYW4gaW50ZXJuYWwgZXJyb3IsIHBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsXG4gICAgdW5zdXBwb3J0ZWRTeW5jOiBtZXRob2QgPT4gYFRvcnVzOiBUaGUgVG9ydXMgRXRoZXJldW0gcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCBzeW5jaHJvbm91cyBtZXRob2RzIGxpa2UgJHttZXRob2R9IHdpdGhvdXQgYSBjYWxsYmFjayBwYXJhbWV0ZXIuYCxcbiAgICBpbnZhbGlkRHVwbGV4U3RyZWFtOiAoKSA9PiBcIk11c3QgcHJvdmlkZSBhIE5vZGUuanMtc3R5bGUgZHVwbGV4IHN0cmVhbS5cIixcbiAgICBpbnZhbGlkT3B0aW9uczogKG1heEV2ZW50TGlzdGVuZXJzLCBzaG91bGRTZW5kTWV0YWRhdGEpID0+IGBJbnZhbGlkIG9wdGlvbnMuIFJlY2VpdmVkOiB7IG1heEV2ZW50TGlzdGVuZXJzOiAke21heEV2ZW50TGlzdGVuZXJzfSwgc2hvdWxkU2VuZE1ldGFkYXRhOiAke3Nob3VsZFNlbmRNZXRhZGF0YX0gfWAsXG4gICAgaW52YWxpZFJlcXVlc3RBcmdzOiAoKSA9PiBgRXhwZWN0ZWQgYSBzaW5nbGUsIG5vbi1hcnJheSwgb2JqZWN0IGFyZ3VtZW50LmAsXG4gICAgaW52YWxpZFJlcXVlc3RNZXRob2Q6ICgpID0+IGAnYXJncy5tZXRob2QnIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nLmAsXG4gICAgaW52YWxpZFJlcXVlc3RQYXJhbXM6ICgpID0+IGAnYXJncy5wYXJhbXMnIG11c3QgYmUgYW4gb2JqZWN0IG9yIGFycmF5IGlmIHByb3ZpZGVkLmAsXG4gICAgaW52YWxpZExvZ2dlck9iamVjdDogKCkgPT4gYCdhcmdzLmxvZ2dlcicgbXVzdCBiZSBhbiBvYmplY3QgaWYgcHJvdmlkZWQuYCxcbiAgICBpbnZhbGlkTG9nZ2VyTWV0aG9kOiBtZXRob2QgPT4gYCdhcmdzLmxvZ2dlcicgbXVzdCBpbmNsdWRlIHJlcXVpcmVkIG1ldGhvZCAnJHttZXRob2R9Jy5gXG4gIH0sXG4gIGluZm86IHtcbiAgICBjb25uZWN0ZWQ6IGNoYWluSWQgPT4gYFRvcnVzOiBDb25uZWN0ZWQgdG8gY2hhaW4gd2l0aCBJRCBcIiR7Y2hhaW5JZH1cIi5gXG4gIH0sXG4gIHdhcm5pbmdzOiB7XG4gICAgLy8gZGVwcmVjYXRlZCBtZXRob2RzXG4gICAgZW5hYmxlRGVwcmVjYXRpb246ICdUb3J1czogXCJcImV0aGVyZXVtLmVuYWJsZSgpXCIgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gJyArICdQbGVhc2UgdXNlIFwiZXRoZXJldW0uc2VuZChcImV0aF9yZXF1ZXN0QWNjb3VudHNcIilcIiBpbnN0ZWFkLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExMDInLFxuICAgIHNlbmREZXByZWNhdGlvbjogJ1RvcnVzOiBcImV0aGVyZXVtLnNlbmQoLi4uKVwiIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuJyArICcgUGxlYXNlIHVzZSBcImV0aGVyZXVtLnNlbmRBc3luYyguLi4pXCIgb3IgXCJldGhlcmV1bS5yZXF1ZXN0KC4uLilcIiBpbnN0ZWFkLlxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6IGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTE5MydcbiAgfVxufTtcblxuY29uc3Qge1xuICBwYXltZW50UHJvdmlkZXJzXG59ID0gY29uZmlndXJhdGlvbjtcbmNvbnN0IHZhbGlkYXRlUGF5bWVudFByb3ZpZGVyID0gKHByb3ZpZGVyLCBwYXJhbXMpID0+IHtcbiAgY29uc3QgZXJyb3JzID0ge307XG4gIGlmICghcHJvdmlkZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JzLFxuICAgICAgaXNWYWxpZDogdHJ1ZVxuICAgIH07XG4gIH1cbiAgaWYgKHByb3ZpZGVyICYmICFwYXltZW50UHJvdmlkZXJzW3Byb3ZpZGVyXSkge1xuICAgIGVycm9ycy5wcm92aWRlciA9IFwiSW52YWxpZCBQcm92aWRlclwiO1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcnMsXG4gICAgICBpc1ZhbGlkOiBPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCA9PT0gMFxuICAgIH07XG4gIH1cbiAgY29uc3Qgc2VsZWN0ZWRQcm92aWRlciA9IHBheW1lbnRQcm92aWRlcnNbcHJvdmlkZXJdO1xuICBjb25zdCBzZWxlY3RlZFBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcblxuICAvLyBzZXQgZGVmYXVsdCB2YWx1ZXNcbiAgLy8gaWYgKCFzZWxlY3RlZFBhcmFtcy5zZWxlY3RlZEN1cnJlbmN5KSBbc2VsZWN0ZWRQYXJhbXMuc2VsZWN0ZWRDdXJyZW5jeV0gPSBzZWxlY3RlZFByb3ZpZGVyLnZhbGlkQ3VycmVuY2llc1xuICAvLyBpZiAoIXNlbGVjdGVkUGFyYW1zLmZpYXRWYWx1ZSkgc2VsZWN0ZWRQYXJhbXMuZmlhdFZhbHVlID0gc2VsZWN0ZWRQcm92aWRlci5taW5PcmRlclZhbHVlXG4gIC8vIGlmICghc2VsZWN0ZWRQYXJhbXMuc2VsZWN0ZWRDcnlwdG9DdXJyZW5jeSkgW3NlbGVjdGVkUGFyYW1zLnNlbGVjdGVkQ3J5cHRvQ3VycmVuY3ldID0gc2VsZWN0ZWRQcm92aWRlci52YWxpZENyeXB0b0N1cnJlbmNpZXNcblxuICAvLyB2YWxpZGF0aW9uc1xuICBpZiAoc2VsZWN0ZWRQYXJhbXMuZmlhdFZhbHVlKSB7XG4gICAgY29uc3QgcmVxdWVzdGVkT3JkZXJBbW91bnQgPSArcGFyc2VGbG9hdChzZWxlY3RlZFBhcmFtcy5maWF0VmFsdWUudG9TdHJpbmcoKSkgfHwgMDtcbiAgICBpZiAocmVxdWVzdGVkT3JkZXJBbW91bnQgPCBzZWxlY3RlZFByb3ZpZGVyLm1pbk9yZGVyVmFsdWUpIGVycm9ycy5maWF0VmFsdWUgPSBcIlJlcXVlc3RlZCBhbW91bnQgaXMgbG93ZXIgdGhhbiBzdXBwb3J0ZWRcIjtcbiAgICBpZiAocmVxdWVzdGVkT3JkZXJBbW91bnQgPiBzZWxlY3RlZFByb3ZpZGVyLm1heE9yZGVyVmFsdWUgJiYgc2VsZWN0ZWRQcm92aWRlci5lbmZvcmNlTWF4KSBlcnJvcnMuZmlhdFZhbHVlID0gXCJSZXF1ZXN0ZWQgYW1vdW50IGlzIGhpZ2hlciB0aGFuIHN1cHBvcnRlZFwiO1xuICB9XG4gIGlmIChzZWxlY3RlZFBhcmFtcy5zZWxlY3RlZEN1cnJlbmN5ICYmICFzZWxlY3RlZFByb3ZpZGVyLnZhbGlkQ3VycmVuY2llcy5pbmNsdWRlcyhzZWxlY3RlZFBhcmFtcy5zZWxlY3RlZEN1cnJlbmN5KSkge1xuICAgIGVycm9ycy5zZWxlY3RlZEN1cnJlbmN5ID0gXCJVbnN1cHBvcnRlZCBjdXJyZW5jeVwiO1xuICB9XG4gIGlmIChzZWxlY3RlZFBhcmFtcy5zZWxlY3RlZENyeXB0b0N1cnJlbmN5KSB7XG4gICAgY29uc3QgdmFsaWRDcnlwdG9DdXJyZW5jaWVzQnlDaGFpbiA9IE9iamVjdC52YWx1ZXMoc2VsZWN0ZWRQcm92aWRlci52YWxpZENyeXB0b0N1cnJlbmNpZXNCeUNoYWluKS5mbGF0KCkubWFwKGN1cnJlbmN5ID0+IGN1cnJlbmN5LnZhbHVlKTtcbiAgICBjb25zdCBmaW5hbENyeXB0b0N1cnJlbmN5ID0gcHJvdmlkZXIgPT09IFBBWU1FTlRfUFJPVklERVIuTU9PTlBBWSA/IHNlbGVjdGVkUGFyYW1zLnNlbGVjdGVkQ3J5cHRvQ3VycmVuY3kudG9Mb3dlckNhc2UoKSA6IHNlbGVjdGVkUGFyYW1zLnNlbGVjdGVkQ3J5cHRvQ3VycmVuY3k7XG4gICAgaWYgKHZhbGlkQ3J5cHRvQ3VycmVuY2llc0J5Q2hhaW4gJiYgIXZhbGlkQ3J5cHRvQ3VycmVuY2llc0J5Q2hhaW4uaW5jbHVkZXMoZmluYWxDcnlwdG9DdXJyZW5jeSkpIGVycm9ycy5zZWxlY3RlZENyeXB0b0N1cnJlbmN5ID0gXCJVbnN1cHBvcnRlZCBjcnlwdG9DdXJyZW5jeVwiO1xuICB9XG4gIHJldHVybiB7XG4gICAgZXJyb3JzLFxuICAgIGlzVmFsaWQ6IE9iamVjdC5rZXlzKGVycm9ycykubGVuZ3RoID09PSAwXG4gIH07XG59O1xuXG4vLyB1dGlsaXR5IGZ1bmN0aW9uc1xuXG4vKipcbiAqIGpzb24tcnBjLWVuZ2luZSBtaWRkbGV3YXJlIHRoYXQgbG9ncyBSUEMgZXJyb3JzIGFuZCBhbmQgdmFsaWRhdGVzIHJlcS5tZXRob2QuXG4gKlxuICogQHBhcmFtIGxvZyAtIFRoZSBsb2dnaW5nIEFQSSB0byB1c2UuXG4gKiBAcmV0dXJucyAganNvbi1ycGMtZW5naW5lIG1pZGRsZXdhcmUgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRXJyb3JNaWRkbGV3YXJlKCkge1xuICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgLy8ganNvbi1ycGMtZW5naW5lIHdpbGwgdGVybWluYXRlIHRoZSByZXF1ZXN0IHdoZW4gaXQgbm90aWNlcyB0aGlzIGVycm9yXG4gICAgaWYgKHR5cGVvZiByZXEubWV0aG9kICE9PSBcInN0cmluZ1wiIHx8ICFyZXEubWV0aG9kKSB7XG4gICAgICByZXMuZXJyb3IgPSBycGNFcnJvcnMuaW52YWxpZFJlcXVlc3Qoe1xuICAgICAgICBtZXNzYWdlOiBgVGhlIHJlcXVlc3QgJ21ldGhvZCcgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcuYCxcbiAgICAgICAgZGF0YTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCByZXEgfHwge30pLCB7fSwge1xuICAgICAgICAgIGNhdXNlOiBcIlRoZSByZXF1ZXN0ICdtZXRob2QnIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nLlwiXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICB9XG4gICAgbmV4dChkb25lID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZXJyb3JcbiAgICAgIH0gPSByZXM7XG4gICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgICB9XG4gICAgICBsb2cuZXJyb3IoYE1ldGFNYXNrIC0gUlBDIEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCwgZXJyb3IpO1xuICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBMb2dzIGEgc3RyZWFtIGRpc2Nvbm5lY3Rpb24gZXJyb3IuIEVtaXRzIGFuICdlcnJvcicgaWYgZ2l2ZW4gYW5cbiAqIEV2ZW50RW1pdHRlciB0aGF0IGhhcyBsaXN0ZW5lcnMgZm9yIHRoZSAnZXJyb3InIGV2ZW50LlxuICpcbiAqIEBwYXJhbSBsb2cgLSBUaGUgbG9nZ2luZyBBUEkgdG8gdXNlLlxuICogQHBhcmFtIHJlbW90ZUxhYmVsIC0gVGhlIGxhYmVsIG9mIHRoZSBkaXNjb25uZWN0ZWQgc3RyZWFtLlxuICogQHBhcmFtIGVycm9yIC0gVGhlIGFzc29jaWF0ZWQgZXJyb3IgdG8gbG9nLlxuICogQHBhcmFtIGVtaXR0ZXIgLSBUaGUgbG9nZ2luZyBBUEkgdG8gdXNlLlxuICovXG5mdW5jdGlvbiBsb2dTdHJlYW1EaXNjb25uZWN0V2FybmluZyhyZW1vdGVMYWJlbCwgZXJyb3IsIGVtaXR0ZXIpIHtcbiAgbGV0IHdhcm5pbmdNc2cgPSBgTWV0YU1hc2s6IExvc3QgY29ubmVjdGlvbiB0byBcIiR7cmVtb3RlTGFiZWx9XCIuYDtcbiAgaWYgKGVycm9yICE9PSBudWxsICYmIGVycm9yICE9PSB2b2lkIDAgJiYgZXJyb3Iuc3RhY2spIHtcbiAgICB3YXJuaW5nTXNnICs9IGBcXG4ke2Vycm9yLnN0YWNrfWA7XG4gIH1cbiAgbG9nLndhcm4od2FybmluZ01zZyk7XG4gIGlmIChlbWl0dGVyICYmIGVtaXR0ZXIubGlzdGVuZXJDb3VudChcImVycm9yXCIpID4gMCkge1xuICAgIGVtaXR0ZXIuZW1pdChcImVycm9yXCIsIHdhcm5pbmdNc2cpO1xuICB9XG59XG5jb25zdCBnZXRQcmVvcGVuSW5zdGFuY2VJZCA9ICgpID0+IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xuY29uc3QgZ2V0VG9ydXNVcmwgPSBhc3luYyAoYnVpbGRFbnYsIGludGVncml0eSkgPT4ge1xuICBsZXQgdG9ydXNVcmw7XG4gIGxldCBsb2dMZXZlbDtcbiAgLy8gRG8gbm90IGNoYW5nZSB0aGlzIGxpbmVcbiAgY29uc3QgdmVyc2lvbiA9IFwiNC4wLjhcIjtcbiAgbGV0IHZlcnNpb25Vc2VkID0gaW50ZWdyaXR5LnZlcnNpb24gfHwgdmVyc2lvbjtcbiAgdHJ5IHtcbiAgICBpZiAoKGJ1aWxkRW52ID09PSBcImJpbmFuY2VcIiB8fCBidWlsZEVudiA9PT0gXCJwcm9kdWN0aW9uXCIpICYmICFpbnRlZ3JpdHkudmVyc2lvbikge1xuICAgICAgbGV0IHJlc3BvbnNlO1xuICAgICAgaWYgKCFjb25maWd1cmF0aW9uLnByb2RUb3J1c1VybCkgcmVzcG9uc2UgPSBhd2FpdCBnZXQoYCR7Y29uZmlndXJhdGlvbi5hcGl9L2xhdGVzdHZlcnNpb24/bmFtZT1AdG9ydXNsYWJzL3RvcnVzLWVtYmVkJnZlcnNpb249JHt2ZXJzaW9ufWAsIHt9LCB7XG4gICAgICAgIHVzZUFQSUtleTogdHJ1ZVxuICAgICAgfSk7ZWxzZSByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogY29uZmlndXJhdGlvbi5wcm9kVG9ydXNVcmxcbiAgICAgIH07XG4gICAgICB2ZXJzaW9uVXNlZCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1hdG9taWMtdXBkYXRlc1xuICAgICAgY29uZmlndXJhdGlvbi5wcm9kVG9ydXNVcmwgPSByZXNwb25zZS5kYXRhO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2cuZXJyb3IoZXJyb3IsIFwidW5hYmxlIHRvIGZldGNoIGxhdGVzdCB2ZXJzaW9uXCIpO1xuICB9XG4gIGxvZy5pbmZvKFwidmVyc2lvbiB1c2VkOiBcIiwgdmVyc2lvblVzZWQpO1xuICBzd2l0Y2ggKGJ1aWxkRW52KSB7XG4gICAgY2FzZSBcImJpbmFuY2VcIjpcbiAgICAgIHRvcnVzVXJsID0gYGh0dHBzOi8vYmluYW5jZS50b3IudXMvdiR7dmVyc2lvblVzZWR9YDtcbiAgICAgIGxvZ0xldmVsID0gXCJpbmZvXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidGVzdGluZ1wiOlxuICAgICAgdG9ydXNVcmwgPSBcImh0dHBzOi8vdGVzdGluZy50b3IudXNcIjtcbiAgICAgIGxvZ0xldmVsID0gXCJkZWJ1Z1wiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJuYlwiOlxuICAgICAgdG9ydXNVcmwgPSBcImh0dHBzOi8vYm5iLnRvci51c1wiO1xuICAgICAgbG9nTGV2ZWwgPSBcImVycm9yXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicG9seWdvblwiOlxuICAgICAgdG9ydXNVcmwgPSBcImh0dHBzOi8vcG9seWdvbi50b3IudXNcIjtcbiAgICAgIGxvZ0xldmVsID0gXCJlcnJvclwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImxyY1wiOlxuICAgICAgdG9ydXNVcmwgPSBcImh0dHBzOi8vbHJjLnRvci51c1wiO1xuICAgICAgbG9nTGV2ZWwgPSBcImRlYnVnXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYmV0YVwiOlxuICAgICAgdG9ydXNVcmwgPSBcImh0dHBzOi8vYmV0YS50b3IudXNcIjtcbiAgICAgIGxvZ0xldmVsID0gXCJkZWJ1Z1wiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRldmVsb3BtZW50XCI6XG4gICAgICB0b3J1c1VybCA9IFwiaHR0cDovL2xvY2FsaG9zdDo0MDUwXCI7XG4gICAgICBsb2dMZXZlbCA9IFwiZGVidWdcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJhbHBoYVwiOlxuICAgICAgdG9ydXNVcmwgPSBcImh0dHBzOi8vYWxwaGEudG9yLnVzXCI7XG4gICAgICBsb2dMZXZlbCA9IFwiZGVidWdcIjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0b3J1c1VybCA9IGBodHRwczovL2FwcC50b3IudXMvdiR7dmVyc2lvblVzZWR9YDtcbiAgICAgIGxvZ0xldmVsID0gXCJlcnJvclwiO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0b3J1c1VybCxcbiAgICBsb2dMZXZlbFxuICB9O1xufTtcbmNvbnN0IGdldFVzZXJMYW5ndWFnZSA9ICgpID0+IHtcbiAgbGV0IHVzZXJMYW5ndWFnZSA9IHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgXCJlbi1VU1wiO1xuICBjb25zdCB1c2VyTGFuZ3VhZ2VzID0gdXNlckxhbmd1YWdlLnNwbGl0KFwiLVwiKTtcbiAgdXNlckxhbmd1YWdlID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZ3VyYXRpb24udHJhbnNsYXRpb25zLCB1c2VyTGFuZ3VhZ2VzWzBdKSA/IHVzZXJMYW5ndWFnZXNbMF0gOiBcImVuXCI7XG4gIHJldHVybiB1c2VyTGFuZ3VhZ2U7XG59O1xuY29uc3QgRU1JVFRFRF9OT1RJRklDQVRJT05TID0gW1wiZXRoX3N1YnNjcmlwdGlvblwiIC8vIHBlciBldGgtanNvbi1ycGMtZmlsdGVycy9zdWJzY3JpcHRpb25NYW5hZ2VyXG5dO1xuXG5jb25zdCBOT09QID0gKCkgPT4ge1xuICAvLyBlbXB0eSBmdW5jdGlvblxufTtcbmNvbnN0IEZFQVRVUkVTX1BST1ZJREVSX0NIQU5HRV9XSU5ET1cgPSBcImRpcmVjdG9yaWVzPTAsdGl0bGViYXI9MCx0b29sYmFyPTAsc3RhdHVzPTAsbG9jYXRpb249MCxtZW51YmFyPTAsaGVpZ2h0PTY2MCx3aWR0aD0zNzVcIjtcbmNvbnN0IEZFQVRVUkVTX0RFRkFVTFRfV0FMTEVUX1dJTkRPVyA9IFwiZGlyZWN0b3JpZXM9MCx0aXRsZWJhcj0wLHRvb2xiYXI9MCxzdGF0dXM9MCxsb2NhdGlvbj0wLG1lbnViYXI9MCxoZWlnaHQ9NzQwLHdpZHRoPTEzMTVcIjtcbmNvbnN0IEZFQVRVUkVTX0NPTkZJUk1fV0lORE9XID0gXCJkaXJlY3Rvcmllcz0wLHRpdGxlYmFyPTAsdG9vbGJhcj0wLHN0YXR1cz0wLGxvY2F0aW9uPTAsbWVudWJhcj0wLGhlaWdodD03MDAsd2lkdGg9NDUwXCI7XG5mdW5jdGlvbiBnZXRQb3B1cEZlYXR1cmVzKCkge1xuICAvLyBGaXhlcyBkdWFsLXNjcmVlbiBwb3NpdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTW9zdCBicm93c2VycyAgICAgIEZpcmVmb3hcbiAgY29uc3QgZHVhbFNjcmVlbkxlZnQgPSB3aW5kb3cuc2NyZWVuTGVmdCAhPT0gdW5kZWZpbmVkID8gd2luZG93LnNjcmVlbkxlZnQgOiB3aW5kb3cuc2NyZWVuWDtcbiAgY29uc3QgZHVhbFNjcmVlblRvcCA9IHdpbmRvdy5zY3JlZW5Ub3AgIT09IHVuZGVmaW5lZCA/IHdpbmRvdy5zY3JlZW5Ub3AgOiB3aW5kb3cuc2NyZWVuWTtcbiAgY29uc3QgdyA9IDEyMDA7XG4gIGNvbnN0IGggPSA3MDA7XG4gIGNvbnN0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGggPyB3aW5kb3cuaW5uZXJXaWR0aCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA6IHdpbmRvdy5zY3JlZW4ud2lkdGg7XG4gIGNvbnN0IGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDogd2luZG93LnNjcmVlbi5oZWlnaHQ7XG4gIGNvbnN0IHN5c3RlbVpvb20gPSAxOyAvLyBObyByZWxpYWJsZSBlc3RpbWF0ZVxuXG4gIGNvbnN0IGxlZnQgPSBNYXRoLmFicygod2lkdGggLSB3KSAvIDIgLyBzeXN0ZW1ab29tICsgZHVhbFNjcmVlbkxlZnQpO1xuICBjb25zdCB0b3AgPSBNYXRoLmFicygoaGVpZ2h0IC0gaCkgLyAyIC8gc3lzdGVtWm9vbSArIGR1YWxTY3JlZW5Ub3ApO1xuICBjb25zdCBmZWF0dXJlcyA9IGB0aXRsZWJhcj0wLHRvb2xiYXI9MCxzdGF0dXM9MCxsb2NhdGlvbj0wLG1lbnViYXI9MCxoZWlnaHQ9JHtoIC8gc3lzdGVtWm9vbX0sd2lkdGg9JHt3IC8gc3lzdGVtWm9vbX0sdG9wPSR7dG9wfSxsZWZ0PSR7bGVmdH1gO1xuICByZXR1cm4gZmVhdHVyZXM7XG59XG5cblNhZmVFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwMDtcblxuLy8gcmVzb2x2ZSByZXNwb25zZS5yZXN1bHQsIHJlamVjdCBlcnJvcnNcbmNvbnN0IGdldFJwY1Byb21pc2VDYWxsYmFjayA9IGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgbGV0IHVud3JhcFJlc3VsdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcbiAgcmV0dXJuIChlcnJvciwgcmVzcG9uc2UpID0+IHtcbiAgICBpZiAoZXJyb3IgfHwgcmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgIHJldHVybiByZWplY3QoZXJyb3IgfHwgcmVzcG9uc2UuZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gIXVud3JhcFJlc3VsdCB8fCBBcnJheS5pc0FycmF5KHJlc3BvbnNlKSA/IHJlc29sdmUocmVzcG9uc2UpIDogcmVzb2x2ZShyZXNwb25zZS5yZXN1bHQpO1xuICB9O1xufTtcbmNsYXNzIFRvcnVzSW5wYWdlUHJvdmlkZXIgZXh0ZW5kcyBTYWZlRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IoY29ubmVjdGlvblN0cmVhbSkge1xuICAgIGxldCB7XG4gICAgICBtYXhFdmVudExpc3RlbmVycyA9IDEwMCxcbiAgICAgIHNob3VsZFNlbmRNZXRhZGF0YSA9IHRydWUsXG4gICAgICBqc29uUnBjU3RyZWFtTmFtZSA9IFwicHJvdmlkZXJcIlxuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogVGhlIGNoYWluIElEIG9mIHRoZSBjdXJyZW50bHkgY29ubmVjdGVkIEV0aGVyZXVtIGNoYWluLlxuICAgICAqIFNlZSBbY2hhaW5JZC5uZXR3b3JrXXtAbGluayBodHRwczovL2NoYWluaWQubmV0d29ya30gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY2hhaW5JZFwiLCB2b2lkIDApO1xuICAgIC8qKlxuICAgICAqIFRoZSB1c2VyJ3MgY3VycmVudGx5IHNlbGVjdGVkIEV0aGVyZXVtIGFkZHJlc3MuXG4gICAgICogSWYgbnVsbCwgTWV0YU1hc2sgaXMgZWl0aGVyIGxvY2tlZCBvciB0aGUgdXNlciBoYXMgbm90IHBlcm1pdHRlZCBhbnlcbiAgICAgKiBhZGRyZXNzZXMgdG8gYmUgdmlld2VkLlxuICAgICAqL1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNlbGVjdGVkQWRkcmVzc1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9ycGNFbmdpbmVcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJuZXR3b3JrVmVyc2lvblwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNob3VsZFNlbmRNZXRhZGF0YVwiLCB2b2lkIDApO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRpbmcgdGhhdCB0aGlzIHByb3ZpZGVyIGlzIGEgTWV0YU1hc2sgcHJvdmlkZXIuXG4gICAgICovXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaXNUb3J1c1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRyeVByZW9wZW5IYW5kbGVcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJlbmFibGVcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfc3RhdGVcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfanNvblJwY0Nvbm5lY3Rpb25cIiwgdm9pZCAwKTtcbiAgICBpZiAoIWlzRHVwbGV4U3RyZWFtKGNvbm5lY3Rpb25TdHJlYW0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuZXJyb3JzLmludmFsaWREdXBsZXhTdHJlYW0oKSk7XG4gICAgfVxuICAgIHRoaXMuaXNUb3J1cyA9IHRydWU7XG4gICAgdGhpcy5zZXRNYXhMaXN0ZW5lcnMobWF4RXZlbnRMaXN0ZW5lcnMpO1xuXG4gICAgLy8gcHJpdmF0ZSBzdGF0ZVxuICAgIHRoaXMuX3N0YXRlID0gX29iamVjdFNwcmVhZCh7fSwgVG9ydXNJbnBhZ2VQcm92aWRlci5fZGVmYXVsdFN0YXRlKTtcblxuICAgIC8vIHB1YmxpYyBzdGF0ZVxuICAgIHRoaXMuc2VsZWN0ZWRBZGRyZXNzID0gbnVsbDtcbiAgICB0aGlzLm5ldHdvcmtWZXJzaW9uID0gbnVsbDtcbiAgICB0aGlzLmNoYWluSWQgPSBudWxsO1xuICAgIHRoaXMuc2hvdWxkU2VuZE1ldGFkYXRhID0gc2hvdWxkU2VuZE1ldGFkYXRhO1xuXG4gICAgLy8gYmluZCBmdW5jdGlvbnMgKHRvIHByZXZlbnQgZS5nLiB3ZWIzQDEueCBmcm9tIG1ha2luZyB1bmJvdW5kIGNhbGxzKVxuICAgIHRoaXMuX2hhbmRsZUFjY291bnRzQ2hhbmdlZCA9IHRoaXMuX2hhbmRsZUFjY291bnRzQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZCA9IHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZCA9IHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZUNvbm5lY3QgPSB0aGlzLl9oYW5kbGVDb25uZWN0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlRGlzY29ubmVjdCA9IHRoaXMuX2hhbmRsZURpc2Nvbm5lY3QuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9oYW5kbGVTdHJlYW1EaXNjb25uZWN0ID0gdGhpcy5faGFuZGxlU3RyZWFtRGlzY29ubmVjdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3NlbmRTeW5jID0gdGhpcy5fc2VuZFN5bmMuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9ycGNSZXF1ZXN0ID0gdGhpcy5fcnBjUmVxdWVzdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2luaXRpYWxpemVTdGF0ZSA9IHRoaXMuX2luaXRpYWxpemVTdGF0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVxdWVzdCA9IHRoaXMucmVxdWVzdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2VuZCA9IHRoaXMuc2VuZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2VuZEFzeW5jID0gdGhpcy5zZW5kQXN5bmMuYmluZCh0aGlzKTtcbiAgICAvLyB0aGlzLmVuYWJsZSA9IHRoaXMuZW5hYmxlLmJpbmQodGhpcyk7XG5cbiAgICAvLyBzZXR1cCBjb25uZWN0aW9uU3RyZWFtIG11bHRpcGxleGluZ1xuICAgIGNvbnN0IG11eCA9IG5ldyBPYmplY3RNdWx0aXBsZXgoKTtcbiAgICBwdW1wKGNvbm5lY3Rpb25TdHJlYW0sIG11eCwgY29ubmVjdGlvblN0cmVhbSwgdGhpcy5faGFuZGxlU3RyZWFtRGlzY29ubmVjdC5iaW5kKHRoaXMsIFwiTWV0YU1hc2tcIikpO1xuXG4gICAgLy8gaWdub3JlIHBoaXNoaW5nIHdhcm5pbmcgbWVzc2FnZSAoaGFuZGxlZCBlbHNld2hlcmUpXG4gICAgbXV4Lmlnbm9yZVN0cmVhbShcInBoaXNoaW5nXCIpO1xuXG4gICAgLy8gc2V0dXAgb3duIGV2ZW50IGxpc3RlbmVyc1xuXG4gICAgLy8gRUlQLTExOTMgY29ubmVjdFxuICAgIHRoaXMub24oXCJjb25uZWN0XCIsICgpID0+IHtcbiAgICAgIHRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIC8vIGNvbm5lY3QgdG8gYXN5bmMgcHJvdmlkZXJcblxuICAgIGNvbnN0IGpzb25ScGNDb25uZWN0aW9uID0gY3JlYXRlU3RyZWFtTWlkZGxld2FyZSgpO1xuICAgIHB1bXAoanNvblJwY0Nvbm5lY3Rpb24uc3RyZWFtLCBtdXguY3JlYXRlU3RyZWFtKGpzb25ScGNTdHJlYW1OYW1lKSwganNvblJwY0Nvbm5lY3Rpb24uc3RyZWFtLCB0aGlzLl9oYW5kbGVTdHJlYW1EaXNjb25uZWN0LmJpbmQodGhpcywgXCJNZXRhTWFzayBScGNQcm92aWRlclwiKSk7XG5cbiAgICAvLyBoYW5kbGUgUlBDIHJlcXVlc3RzIHZpYSBkYXBwLXNpZGUgcnBjIGVuZ2luZVxuICAgIGNvbnN0IHJwY0VuZ2luZSA9IG5ldyBKUlBDRW5naW5lKCk7XG4gICAgcnBjRW5naW5lLnB1c2goY3JlYXRlSWRSZW1hcE1pZGRsZXdhcmUoKSk7XG4gICAgcnBjRW5naW5lLnB1c2goY3JlYXRlRXJyb3JNaWRkbGV3YXJlKCkpO1xuICAgIHJwY0VuZ2luZS5wdXNoKGpzb25ScGNDb25uZWN0aW9uLm1pZGRsZXdhcmUpO1xuICAgIHRoaXMuX3JwY0VuZ2luZSA9IHJwY0VuZ2luZTtcblxuICAgIC8vIGpzb24gcnBjIG5vdGlmaWNhdGlvbiBsaXN0ZW5lclxuICAgIGpzb25ScGNDb25uZWN0aW9uLmV2ZW50cy5vbihcIm5vdGlmaWNhdGlvblwiLCBwYXlsb2FkID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBwYXJhbXNcbiAgICAgIH0gPSBwYXlsb2FkO1xuICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ3YWxsZXRfYWNjb3VudHNDaGFuZ2VkXCIpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkKHBhcmFtcyk7XG4gICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJ3YWxsZXRfdW5sb2NrU3RhdGVDaGFuZ2VkXCIpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlVW5sb2NrU3RhdGVDaGFuZ2VkKHBhcmFtcyk7XG4gICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJ3YWxsZXRfY2hhaW5DaGFuZ2VkXCIpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlQ2hhaW5DaGFuZ2VkKHBhcmFtcyk7XG4gICAgICB9IGVsc2UgaWYgKEVNSVRURURfTk9USUZJQ0FUSU9OUy5pbmNsdWRlcyhwYXlsb2FkLm1ldGhvZCkpIHtcbiAgICAgICAgLy8gRUlQIDExOTMgc3Vic2NyaXB0aW9ucywgcGVyIGV0aC1qc29uLXJwYy1maWx0ZXJzL3N1YnNjcmlwdGlvbk1hbmFnZXJcbiAgICAgICAgdGhpcy5lbWl0KFwiZGF0YVwiLCBwYXlsb2FkKTsgLy8gZGVwcmVjYXRlZFxuICAgICAgICB0aGlzLmVtaXQoXCJub3RpZmljYXRpb25cIiwgcGFyYW1zLnJlc3VsdCk7XG4gICAgICAgIHRoaXMuZW1pdChcIm1lc3NhZ2VcIiwge1xuICAgICAgICAgIHR5cGU6IG1ldGhvZCxcbiAgICAgICAgICBkYXRhOiBwYXJhbXNcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHkgZm9yIG9sZGVyIG5vbiBFSVAgMTE5MyBzdWJzY3JpcHRpb25zXG4gICAgICAvLyB0aGlzLmVtaXQoJ2RhdGEnLCBudWxsLCBwYXlsb2FkKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgaW5wYWdlIHByb3ZpZGVyIGlzIGNvbm5lY3RlZCB0byBUb3J1cy5cbiAgICovXG4gIGlzQ29ubmVjdGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJtaXRzIGFuIFJQQyByZXF1ZXN0IGZvciB0aGUgZ2l2ZW4gbWV0aG9kLCB3aXRoIHRoZSBnaXZlbiBwYXJhbXMuXG4gICAqIFJlc29sdmVzIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgbWV0aG9kIGNhbGwsIG9yIHJlamVjdHMgb24gZXJyb3IuXG4gICAqXG4gICAqIEBwYXJhbSBhcmdzIC0gVGhlIFJQQyByZXF1ZXN0IGFyZ3VtZW50cy5cbiAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBSUEMgbWV0aG9kLFxuICAgKiBvciByZWplY3RzIGlmIGFuIGVycm9yIGlzIGVuY291bnRlcmVkLlxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChhcmdzKSB7XG4gICAgaWYgKCFhcmdzIHx8IHR5cGVvZiBhcmdzICE9PSBcIm9iamVjdFwiIHx8IEFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgIHRocm93IHJwY0Vycm9ycy5pbnZhbGlkUmVxdWVzdCh7XG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VzLmVycm9ycy5pbnZhbGlkUmVxdWVzdEFyZ3MoKSxcbiAgICAgICAgZGF0YTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBhcmdzIHx8IHt9KSwge30sIHtcbiAgICAgICAgICBjYXVzZTogbWVzc2FnZXMuZXJyb3JzLmludmFsaWRSZXF1ZXN0QXJncygpXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgbWV0aG9kLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IGFyZ3M7XG4gICAgaWYgKHR5cGVvZiBtZXRob2QgIT09IFwic3RyaW5nXCIgfHwgbWV0aG9kLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgcnBjRXJyb3JzLmludmFsaWRSZXF1ZXN0KHtcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZXMuZXJyb3JzLmludmFsaWRSZXF1ZXN0TWV0aG9kKCksXG4gICAgICAgIGRhdGE6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgYXJncyB8fCB7fSksIHt9LCB7XG4gICAgICAgICAgY2F1c2U6IG1lc3NhZ2VzLmVycm9ycy5pbnZhbGlkUmVxdWVzdEFyZ3MoKVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMgIT09IHVuZGVmaW5lZCAmJiAhQXJyYXkuaXNBcnJheShwYXJhbXMpICYmICh0eXBlb2YgcGFyYW1zICE9PSBcIm9iamVjdFwiIHx8IHBhcmFtcyA9PT0gbnVsbCkpIHtcbiAgICAgIHRocm93IHJwY0Vycm9ycy5pbnZhbGlkUmVxdWVzdCh7XG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VzLmVycm9ycy5pbnZhbGlkUmVxdWVzdFBhcmFtcygpLFxuICAgICAgICBkYXRhOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGFyZ3MgfHwge30pLCB7fSwge1xuICAgICAgICAgIGNhdXNlOiBtZXNzYWdlcy5lcnJvcnMuaW52YWxpZFJlcXVlc3RBcmdzKClcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5fcnBjUmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcGFyYW1zXG4gICAgICB9LCBnZXRScGNQcm9taXNlQ2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0KSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3VibWl0cyBhbiBSUEMgcmVxdWVzdCBwZXIgdGhlIGdpdmVuIEpTT04tUlBDIHJlcXVlc3Qgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gcGF5bG9hZCAtIFRoZSBSUEMgcmVxdWVzdCBvYmplY3QuXG4gICAqIEBwYXJhbSBjYiAtIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICovXG4gIHNlbmRBc3luYyhwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIHRoaXMuX3JwY1JlcXVlc3QocGF5bG9hZCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gUHJpdmF0ZSBNZXRob2RzXG4gIC8vPSA9PT09PT09PT09PT09PT09PT09XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBoZWxwZXIuXG4gICAqIFBvcHVsYXRlcyBpbml0aWFsIHN0YXRlIGJ5IGNhbGxpbmcgJ3dhbGxldF9nZXRQcm92aWRlclN0YXRlJyBhbmQgZW1pdHNcbiAgICogbmVjZXNzYXJ5IGV2ZW50cy5cbiAgICovXG4gIGFzeW5jIF9pbml0aWFsaXplU3RhdGUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYWNjb3VudHMsXG4gICAgICAgIGNoYWluSWQsXG4gICAgICAgIGlzVW5sb2NrZWQsXG4gICAgICAgIG5ldHdvcmtWZXJzaW9uXG4gICAgICB9ID0gYXdhaXQgdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiBcIndhbGxldF9nZXRQcm92aWRlclN0YXRlXCJcbiAgICAgIH0pO1xuXG4gICAgICAvLyBpbmRpY2F0ZSB0aGF0IHdlJ3ZlIGNvbm5lY3RlZCwgZm9yIEVJUC0xMTkzIGNvbXBsaWFuY2VcbiAgICAgIHRoaXMuZW1pdChcImNvbm5lY3RcIiwge1xuICAgICAgICBjaGFpbklkXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZCh7XG4gICAgICAgIGNoYWluSWQsXG4gICAgICAgIG5ldHdvcmtWZXJzaW9uXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZCh7XG4gICAgICAgIGFjY291bnRzLFxuICAgICAgICBpc1VubG9ja2VkXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2hhbmRsZUFjY291bnRzQ2hhbmdlZChhY2NvdW50cyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZy5lcnJvcihcIk1ldGFNYXNrOiBGYWlsZWQgdG8gZ2V0IGluaXRpYWwgc3RhdGUuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsIGVycm9yKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgbG9nLmluZm8oXCJpbml0aWFsaXplZCBzdGF0ZVwiKTtcbiAgICAgIHRoaXMuX3N0YXRlLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZW1pdChcIl9pbml0aWFsaXplZFwiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJuYWwgUlBDIG1ldGhvZC4gRm9yd2FyZHMgcmVxdWVzdHMgdG8gYmFja2dyb3VuZCB2aWEgdGhlIFJQQyBlbmdpbmUuXG4gICAqIEFsc28gcmVtYXAgaWRzIGluYm91bmQgYW5kIG91dGJvdW5kLlxuICAgKlxuICAgKiBAcGFyYW0gcGF5bG9hZCAtIFRoZSBSUEMgcmVxdWVzdCBvYmplY3QuXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIFRoZSBjb25zdW1lcidzIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0gaXNJbnRlcm5hbCAtIGZhbHNlIC0gV2hldGhlciB0aGUgcmVxdWVzdCBpcyBpbnRlcm5hbC5cbiAgICovXG4gIF9ycGNSZXF1ZXN0KHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgbGV0IGlzSW50ZXJuYWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgIGxldCBjYiA9IGNhbGxiYWNrO1xuICAgIGNvbnN0IF9wYXlsb2FkID0gcGF5bG9hZDtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoX3BheWxvYWQpKSB7XG4gICAgICBpZiAoIV9wYXlsb2FkLmpzb25ycGMpIHtcbiAgICAgICAgX3BheWxvYWQuanNvbnJwYyA9IFwiMi4wXCI7XG4gICAgICB9XG4gICAgICBpZiAoX3BheWxvYWQubWV0aG9kID09PSBcImV0aF9hY2NvdW50c1wiIHx8IF9wYXlsb2FkLm1ldGhvZCA9PT0gXCJldGhfcmVxdWVzdEFjY291bnRzXCIpIHtcbiAgICAgICAgLy8gaGFuZGxlIGFjY291bnRzIGNoYW5naW5nXG4gICAgICAgIGNiID0gKGVyciwgcmVzKSA9PiB7XG4gICAgICAgICAgdGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkKHJlcy5yZXN1bHQgfHwgW10sIF9wYXlsb2FkLm1ldGhvZCA9PT0gXCJldGhfYWNjb3VudHNcIiwgaXNJbnRlcm5hbCk7XG4gICAgICAgICAgY2FsbGJhY2soZXJyLCByZXMpO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChfcGF5bG9hZC5tZXRob2QgPT09IFwid2FsbGV0X2dldFByb3ZpZGVyU3RhdGVcIikge1xuICAgICAgICB0aGlzLl9ycGNFbmdpbmUuaGFuZGxlKHBheWxvYWQsIGNiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRyeVByZW9wZW5IYW5kbGUoX3BheWxvYWQsIGNiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJtaXRzIGFuIFJQQyByZXF1ZXN0IGZvciB0aGUgZ2l2ZW4gbWV0aG9kLCB3aXRoIHRoZSBnaXZlbiBwYXJhbXMuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBcInJlcXVlc3RcIiBpbnN0ZWFkLlxuICAgKiBAcGFyYW0gbWV0aG9kIC0gVGhlIG1ldGhvZCB0byByZXF1ZXN0LlxuICAgKiBAcGFyYW0gcGFyYW1zIC0gQW55IHBhcmFtcyBmb3IgdGhlIG1ldGhvZC5cbiAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgSlNPTi1SUEMgcmVzcG9uc2Ugb2JqZWN0IGZvciB0aGVcbiAgICogcmVxdWVzdC5cbiAgICovXG5cbiAgLyoqXG4gICAqIFN1Ym1pdHMgYW4gUlBDIHJlcXVlc3QgcGVyIHRoZSBnaXZlbiBKU09OLVJQQyByZXF1ZXN0IG9iamVjdC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFwicmVxdWVzdFwiIGluc3RlYWQuXG4gICAqIEBwYXJhbSBwYXlsb2FkIC0gQSBKU09OLVJQQyByZXF1ZXN0IG9iamVjdC5cbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gQW4gZXJyb3ItZmlyc3QgY2FsbGJhY2sgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIEpTT04tUlBDXG4gICAqIHJlc3BvbnNlIG9iamVjdC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEFjY2VwdHMgYSBKU09OLVJQQyByZXF1ZXN0IG9iamVjdCwgYW5kIHN5bmNocm9ub3VzbHkgcmV0dXJucyB0aGUgY2FjaGVkIHJlc3VsdFxuICAgKiBmb3IgdGhlIGdpdmVuIG1ldGhvZC4gT25seSBzdXBwb3J0cyA0IHNwZWNpZmljIFJQQyBtZXRob2RzLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgXCJyZXF1ZXN0XCIgaW5zdGVhZC5cbiAgICogQHBhcmFtIHBheWxvYWQgLSBBIEpTT04tUlBDIHJlcXVlc3Qgb2JqZWN0LlxuICAgKiBAcmV0dXJucyBBIEpTT04tUlBDIHJlc3BvbnNlIG9iamVjdC5cbiAgICovXG5cbiAgc2VuZChtZXRob2RPclBheWxvYWQsIGNhbGxiYWNrT3JBcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBtZXRob2RPclBheWxvYWQgPT09IFwic3RyaW5nXCIgJiYgKCFjYWxsYmFja09yQXJncyB8fCBBcnJheS5pc0FycmF5KGNhbGxiYWNrT3JBcmdzKSkpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5fcnBjUmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZE9yUGF5bG9hZCxcbiAgICAgICAgICAgIHBhcmFtczogY2FsbGJhY2tPckFyZ3NcbiAgICAgICAgICB9LCBnZXRScGNQcm9taXNlQ2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0LCBmYWxzZSkpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobWV0aG9kT3JQYXlsb2FkICYmIHR5cGVvZiBtZXRob2RPclBheWxvYWQgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGNhbGxiYWNrT3JBcmdzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ycGNSZXF1ZXN0KG1ldGhvZE9yUGF5bG9hZCwgY2FsbGJhY2tPckFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc2VuZFN5bmMobWV0aG9kT3JQYXlsb2FkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBERVBSRUNBVEVELlxuICAgKiBJbnRlcm5hbCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBtZXRob2QsIHVzZWQgaW4gc2VuZC5cbiAgICovXG4gIF9zZW5kU3luYyhwYXlsb2FkKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBzd2l0Y2ggKHBheWxvYWQubWV0aG9kKSB7XG4gICAgICBjYXNlIFwiZXRoX2FjY291bnRzXCI6XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuc2VsZWN0ZWRBZGRyZXNzID8gW3RoaXMuc2VsZWN0ZWRBZGRyZXNzXSA6IFtdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJldGhfY29pbmJhc2VcIjpcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5zZWxlY3RlZEFkZHJlc3MgfHwgbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZXRoX3VuaW5zdGFsbEZpbHRlclwiOlxuICAgICAgICB0aGlzLl9ycGNSZXF1ZXN0KHBheWxvYWQsIE5PT1ApO1xuICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJuZXRfdmVyc2lvblwiOlxuICAgICAgICByZXN1bHQgPSB0aGlzLm5ldHdvcmtWZXJzaW9uIHx8IG51bGw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLmVycm9ycy51bnN1cHBvcnRlZFN5bmMocGF5bG9hZC5tZXRob2QpKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBwYXlsb2FkLmlkLFxuICAgICAganNvbnJwYzogcGF5bG9hZC5qc29ucnBjLFxuICAgICAgcmVzdWx0XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSBwcm92aWRlciBiZWNvbWVzIGNvbm5lY3RlZCwgdXBkYXRlcyBpbnRlcm5hbCBzdGF0ZSBhbmQgZW1pdHNcbiAgICogcmVxdWlyZWQgZXZlbnRzLiBJZGVtcG90ZW50LlxuICAgKlxuICAgKiBAcGFyYW0gY2hhaW5JZCAtIFRoZSBJRCBvZiB0aGUgbmV3bHkgY29ubmVjdGVkIGNoYWluLlxuICAgKiBlbWl0cyBNZXRhTWFza0lucGFnZVByb3ZpZGVyI2Nvbm5lY3RcbiAgICovXG4gIF9oYW5kbGVDb25uZWN0KGNoYWluSWQpIHtcbiAgICBpZiAoIXRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkKSB7XG4gICAgICB0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICB0aGlzLmVtaXQoXCJjb25uZWN0XCIsIHtcbiAgICAgICAgY2hhaW5JZFxuICAgICAgfSk7XG4gICAgICBsb2cuZGVidWcobWVzc2FnZXMuaW5mby5jb25uZWN0ZWQoY2hhaW5JZCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSBwcm92aWRlciBiZWNvbWVzIGRpc2Nvbm5lY3RlZCwgdXBkYXRlcyBpbnRlcm5hbCBzdGF0ZSBhbmQgZW1pdHNcbiAgICogcmVxdWlyZWQgZXZlbnRzLiBJZGVtcG90ZW50IHdpdGggcmVzcGVjdCB0byB0aGUgaXNSZWNvdmVyYWJsZSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIEVycm9yIGNvZGVzIHBlciB0aGUgQ2xvc2VFdmVudCBzdGF0dXMgY29kZXMgYXMgcmVxdWlyZWQgYnkgRUlQLTExOTM6XG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DbG9zZUV2ZW50I1N0YXR1c19jb2Rlc1xuICAgKlxuICAgKiBAcGFyYW0gaXNSZWNvdmVyYWJsZSAtIFdoZXRoZXIgdGhlIGRpc2Nvbm5lY3Rpb24gaXMgcmVjb3ZlcmFibGUuXG4gICAqIEBwYXJhbSBlcnJvck1lc3NhZ2UgLSBBIGN1c3RvbSBlcnJvciBtZXNzYWdlLlxuICAgKiBlbWl0cyBNZXRhTWFza0lucGFnZVByb3ZpZGVyI2Rpc2Nvbm5lY3RcbiAgICovXG4gIF9oYW5kbGVEaXNjb25uZWN0KGlzUmVjb3ZlcmFibGUsIGVycm9yTWVzc2FnZSkge1xuICAgIGlmICh0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZCB8fCAhdGhpcy5fc3RhdGUuaXNQZXJtYW5lbnRseURpc2Nvbm5lY3RlZCAmJiAhaXNSZWNvdmVyYWJsZSkge1xuICAgICAgdGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgIGxldCBlcnJvcjtcbiAgICAgIGlmIChpc1JlY292ZXJhYmxlKSB7XG4gICAgICAgIGVycm9yID0gbmV3IEV0aGVyZXVtUHJvdmlkZXJFcnJvcigxMDEzLFxuICAgICAgICAvLyBUcnkgYWdhaW4gbGF0ZXJcbiAgICAgICAgZXJyb3JNZXNzYWdlIHx8IG1lc3NhZ2VzLmVycm9ycy5kaXNjb25uZWN0ZWQoKSk7XG4gICAgICAgIGxvZy5kZWJ1ZyhlcnJvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvciA9IG5ldyBFdGhlcmV1bVByb3ZpZGVyRXJyb3IoMTAxMSxcbiAgICAgICAgLy8gSW50ZXJuYWwgZXJyb3JcbiAgICAgICAgZXJyb3JNZXNzYWdlIHx8IG1lc3NhZ2VzLmVycm9ycy5wZXJtYW5lbnRseURpc2Nvbm5lY3RlZCgpKTtcbiAgICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICAgICAgdGhpcy5jaGFpbklkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3RhdGUuYWNjb3VudHMgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkQWRkcmVzcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N0YXRlLmlzVW5sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc3RhdGUuaXNQZXJtYW5lbnRseURpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLmVtaXQoXCJkaXNjb25uZWN0XCIsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gY29ubmVjdGlvbiBpcyBsb3N0IHRvIGNyaXRpY2FsIHN0cmVhbXMuXG4gICAqXG4gICAqIGVtaXRzIE1ldGFtYXNrSW5wYWdlUHJvdmlkZXIjZGlzY29ubmVjdFxuICAgKi9cbiAgX2hhbmRsZVN0cmVhbURpc2Nvbm5lY3Qoc3RyZWFtTmFtZSwgZXJyb3IpIHtcbiAgICBsb2dTdHJlYW1EaXNjb25uZWN0V2FybmluZyhzdHJlYW1OYW1lLCBlcnJvciwgdGhpcyk7XG4gICAgdGhpcy5faGFuZGxlRGlzY29ubmVjdChmYWxzZSwgZXJyb3IgPyBlcnJvci5tZXNzYWdlIDogdW5kZWZpbmVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhY2NvdW50cyBtYXkgaGF2ZSBjaGFuZ2VkLlxuICAgKi9cbiAgX2hhbmRsZUFjY291bnRzQ2hhbmdlZChhY2NvdW50cykge1xuICAgIGxldCBpc0V0aEFjY291bnRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICBsZXQgaXNJbnRlcm5hbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gICAgLy8gZGVmZW5zaXZlIHByb2dyYW1taW5nXG4gICAgbGV0IGZpbmFsQWNjb3VudHMgPSBhY2NvdW50cztcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmluYWxBY2NvdW50cykpIHtcbiAgICAgIGxvZy5lcnJvcihcIk1ldGFNYXNrOiBSZWNlaXZlZCBub24tYXJyYXkgYWNjb3VudHMgcGFyYW1ldGVyLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLlwiLCBmaW5hbEFjY291bnRzKTtcbiAgICAgIGZpbmFsQWNjb3VudHMgPSBbXTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBhY2NvdW50IG9mIGFjY291bnRzKSB7XG4gICAgICBpZiAodHlwZW9mIGFjY291bnQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbG9nLmVycm9yKFwiTWV0YU1hc2s6IFJlY2VpdmVkIG5vbi1zdHJpbmcgYWNjb3VudC4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy5cIiwgYWNjb3VudHMpO1xuICAgICAgICBmaW5hbEFjY291bnRzID0gW107XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGVtaXQgYWNjb3VudHNDaGFuZ2VkIGlmIGFueXRoaW5nIGFib3V0IHRoZSBhY2NvdW50cyBhcnJheSBoYXMgY2hhbmdlZFxuICAgIGlmICghZGVxdWFsKHRoaXMuX3N0YXRlLmFjY291bnRzLCBmaW5hbEFjY291bnRzKSkge1xuICAgICAgLy8gd2Ugc2hvdWxkIGFsd2F5cyBoYXZlIHRoZSBjb3JyZWN0IGFjY291bnRzIGV2ZW4gYmVmb3JlIGV0aF9hY2NvdW50c1xuICAgICAgLy8gcmV0dXJucywgZXhjZXB0IGluIGNhc2VzIHdoZXJlIGlzSW50ZXJuYWwgaXMgdHJ1ZVxuICAgICAgaWYgKGlzRXRoQWNjb3VudHMgJiYgQXJyYXkuaXNBcnJheSh0aGlzLl9zdGF0ZS5hY2NvdW50cykgJiYgdGhpcy5fc3RhdGUuYWNjb3VudHMubGVuZ3RoID4gMCAmJiAhaXNJbnRlcm5hbCkge1xuICAgICAgICBsb2cuZXJyb3IoJ01ldGFNYXNrOiBcImV0aF9hY2NvdW50c1wiIHVuZXhwZWN0ZWRseSB1cGRhdGVkIGFjY291bnRzLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLicsIGZpbmFsQWNjb3VudHMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3RhdGUuYWNjb3VudHMgPSBmaW5hbEFjY291bnRzO1xuICAgICAgdGhpcy5lbWl0KFwiYWNjb3VudHNDaGFuZ2VkXCIsIGZpbmFsQWNjb3VudHMpO1xuICAgIH1cblxuICAgIC8vIGhhbmRsZSBzZWxlY3RlZEFkZHJlc3NcbiAgICBpZiAodGhpcy5zZWxlY3RlZEFkZHJlc3MgIT09IGZpbmFsQWNjb3VudHNbMF0pIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRBZGRyZXNzID0gZmluYWxBY2NvdW50c1swXSB8fCBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcG9uIHJlY2VpcHQgb2YgYSBuZXcgY2hhaW5JZCBhbmQgbmV0d29ya1ZlcnNpb24sIGVtaXRzIGNvcnJlc3BvbmRpbmdcbiAgICogZXZlbnRzIGFuZCBzZXRzIHJlbGV2YW50IHB1YmxpYyBzdGF0ZS5cbiAgICogRG9lcyBub3RoaW5nIGlmIG5laXRoZXIgdGhlIGNoYWluSWQgbm9yIHRoZSBuZXR3b3JrVmVyc2lvbiBhcmUgZGlmZmVyZW50XG4gICAqIGZyb20gZXhpc3RpbmcgdmFsdWVzLlxuICAgKlxuICAgKiBlbWl0cyBNZXRhbWFza0lucGFnZVByb3ZpZGVyI2NoYWluQ2hhbmdlZFxuICAgKiBAcGFyYW0gbmV0d29ya0luZm8gLSBBbiBvYmplY3Qgd2l0aCBuZXR3b3JrIGluZm8uXG4gICAqL1xuICBfaGFuZGxlQ2hhaW5DaGFuZ2VkKCkge1xuICAgIGxldCB7XG4gICAgICBjaGFpbklkLFxuICAgICAgbmV0d29ya1ZlcnNpb25cbiAgICB9ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBpZiAoIWNoYWluSWQgfHwgIW5ldHdvcmtWZXJzaW9uKSB7XG4gICAgICBsb2cuZXJyb3IoXCJNZXRhTWFzazogUmVjZWl2ZWQgaW52YWxpZCBuZXR3b3JrIHBhcmFtZXRlcnMuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsIHtcbiAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgbmV0d29ya1ZlcnNpb25cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobmV0d29ya1ZlcnNpb24gPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICB0aGlzLl9oYW5kbGVEaXNjb25uZWN0KHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oYW5kbGVDb25uZWN0KGNoYWluSWQpO1xuICAgICAgaWYgKGNoYWluSWQgIT09IHRoaXMuY2hhaW5JZCkge1xuICAgICAgICB0aGlzLmNoYWluSWQgPSBjaGFpbklkO1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJjaGFpbkNoYW5nZWRcIiwgdGhpcy5jaGFpbklkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcG9uIHJlY2VpcHQgb2YgYSBuZXcgaXNVbmxvY2tlZCBzdGF0ZSwgc2V0cyByZWxldmFudCBwdWJsaWMgc3RhdGUuXG4gICAqIENhbGxzIHRoZSBhY2NvdW50cyBjaGFuZ2VkIGhhbmRsZXIgd2l0aCB0aGUgcmVjZWl2ZWQgYWNjb3VudHMsIG9yIGFuIGVtcHR5XG4gICAqIGFycmF5LlxuICAgKlxuICAgKiBEb2VzIG5vdGhpbmcgaWYgdGhlIHJlY2VpdmVkIHZhbHVlIGlzIGVxdWFsIHRvIHRoZSBleGlzdGluZyB2YWx1ZS5cbiAgICogVGhlcmUgYXJlIG5vIGxvY2svdW5sb2NrIGV2ZW50cy5cbiAgICpcbiAgICogQHBhcmFtIG9wdHMgLSBPcHRpb25zIGJhZy5cbiAgICovXG4gIF9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQoKSB7XG4gICAgbGV0IHtcbiAgICAgIGFjY291bnRzLFxuICAgICAgaXNVbmxvY2tlZFxuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIGlmICh0eXBlb2YgaXNVbmxvY2tlZCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgIGxvZy5lcnJvcihcIk1ldGFNYXNrOiBSZWNlaXZlZCBpbnZhbGlkIGlzVW5sb2NrZWQgcGFyYW1ldGVyLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLlwiLCB7XG4gICAgICAgIGlzVW5sb2NrZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNVbmxvY2tlZCAhPT0gdGhpcy5fc3RhdGUuaXNVbmxvY2tlZCkge1xuICAgICAgdGhpcy5fc3RhdGUuaXNVbmxvY2tlZCA9IGlzVW5sb2NrZWQ7XG4gICAgICB0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQoYWNjb3VudHMgfHwgW10pO1xuICAgIH1cbiAgfVxufVxuX2RlZmluZVByb3BlcnR5KFRvcnVzSW5wYWdlUHJvdmlkZXIsIFwiX2RlZmF1bHRTdGF0ZVwiLCB7XG4gIGFjY291bnRzOiBudWxsLFxuICBpc0Nvbm5lY3RlZDogZmFsc2UsXG4gIGlzVW5sb2NrZWQ6IGZhbHNlLFxuICBpbml0aWFsaXplZDogZmFsc2UsXG4gIGlzUGVybWFuZW50bHlEaXNjb25uZWN0ZWQ6IGZhbHNlLFxuICBoYXNFbWl0dGVkQ29ubmVjdGlvbjogZmFsc2Vcbn0pO1xuXG5jbGFzcyBQb3B1cEhhbmRsZXIgZXh0ZW5kcyBTYWZlRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IoX3JlZikge1xuICAgIGxldCB7XG4gICAgICB1cmwsXG4gICAgICB0YXJnZXQsXG4gICAgICBmZWF0dXJlcyxcbiAgICAgIHRpbWVvdXQgPSAzMDAwMFxuICAgIH0gPSBfcmVmO1xuICAgIHN1cGVyKCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidXJsXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidGFyZ2V0XCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZmVhdHVyZXNcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ3aW5kb3dcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ3aW5kb3dUaW1lclwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlDbG9zZWRXaW5kb3dcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0aW1lb3V0XCIsIHZvaWQgMCk7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQgfHwgXCJfYmxhbmtcIjtcbiAgICB0aGlzLmZlYXR1cmVzID0gZmVhdHVyZXMgfHwgZ2V0UG9wdXBGZWF0dXJlcygpO1xuICAgIHRoaXMud2luZG93ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2luZG93VGltZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5pQ2xvc2VkV2luZG93ID0gZmFsc2U7XG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgICB0aGlzLl9zZXR1cFRpbWVyKCk7XG4gIH1cbiAgX3NldHVwVGltZXIoKSB7XG4gICAgdGhpcy53aW5kb3dUaW1lciA9IE51bWJlcihzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy53aW5kb3cgJiYgdGhpcy53aW5kb3cuY2xvc2VkKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy53aW5kb3dUaW1lcik7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICghdGhpcy5pQ2xvc2VkV2luZG93KSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJjbG9zZVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pQ2xvc2VkV2luZG93ID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy53aW5kb3cgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0sIHRoaXMudGltZW91dCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy53aW5kb3cgPT09IHVuZGVmaW5lZCkgY2xlYXJJbnRlcnZhbCh0aGlzLndpbmRvd1RpbWVyKTtcbiAgICB9LCA1MDApKTtcbiAgfVxuICBvcGVuKCkge1xuICAgIHZhciBfdGhpcyR3aW5kb3c7XG4gICAgdGhpcy53aW5kb3cgPSB3aW5kb3cub3Blbih0aGlzLnVybC5ocmVmLCB0aGlzLnRhcmdldCwgdGhpcy5mZWF0dXJlcyk7XG4gICAgaWYgKChfdGhpcyR3aW5kb3cgPSB0aGlzLndpbmRvdykgIT09IG51bGwgJiYgX3RoaXMkd2luZG93ICE9PSB2b2lkIDAgJiYgX3RoaXMkd2luZG93LmZvY3VzKSB0aGlzLndpbmRvdy5mb2N1cygpO1xuICB9XG4gIGNsb3NlKCkge1xuICAgIHRoaXMuaUNsb3NlZFdpbmRvdyA9IHRydWU7XG4gICAgaWYgKHRoaXMud2luZG93KSB0aGlzLndpbmRvdy5jbG9zZSgpO1xuICB9XG4gIHJlZGlyZWN0KGxvY2F0aW9uUmVwbGFjZU9uUmVkaXJlY3QpIHtcbiAgICBpZiAobG9jYXRpb25SZXBsYWNlT25SZWRpcmVjdCkge1xuICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UodGhpcy51cmwuaHJlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhpcy51cmwuaHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIGltYWdlIFVSTCBleGlzdHNcbiAqIEBwYXJhbSB1cmwgLSB0aGUgdXJsIG9mIHRoZSBpbWFnZVxuICogQHJldHVybnMgLSB3aGV0aGVyIHRoZSBpbWFnZSBleGlzdHNcbiAqL1xuZnVuY3Rpb24gaW1nRXhpc3RzKHVybCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHJlc29sdmUodHJ1ZSk7XG4gICAgICBpbWcub25lcnJvciA9ICgpID0+IHJlc29sdmUoZmFsc2UpO1xuICAgICAgaW1nLnNyYyA9IHVybDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZWplY3QoZSk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBFeHRyYWN0cyBhIG5hbWUgZm9yIHRoZSBzaXRlIGZyb20gdGhlIERPTVxuICovXG5jb25zdCBnZXRTaXRlTmFtZSA9IHdpbmRvdyA9PiB7XG4gIGNvbnN0IHtcbiAgICBkb2N1bWVudFxuICB9ID0gd2luZG93O1xuICBjb25zdCBzaXRlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQgPiBtZXRhW3Byb3BlcnR5PVwib2c6c2l0ZV9uYW1lXCJdJyk7XG4gIGlmIChzaXRlTmFtZSkge1xuICAgIHJldHVybiBzaXRlTmFtZS5jb250ZW50O1xuICB9XG4gIGNvbnN0IG1ldGFUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQgPiBtZXRhW25hbWU9XCJ0aXRsZVwiXScpO1xuICBpZiAobWV0YVRpdGxlKSB7XG4gICAgcmV0dXJuIG1ldGFUaXRsZS5jb250ZW50O1xuICB9XG4gIGlmIChkb2N1bWVudC50aXRsZSAmJiBkb2N1bWVudC50aXRsZS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnRpdGxlO1xuICB9XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWU7XG59O1xuXG4vKipcbiAqIEV4dHJhY3RzIGFuIGljb24gZm9yIHRoZSBzaXRlIGZyb20gdGhlIERPTVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRTaXRlSWNvbih3aW5kb3cpIHtcbiAgY29uc3Qge1xuICAgIGRvY3VtZW50XG4gIH0gPSB3aW5kb3c7XG5cbiAgLy8gVXNlIHRoZSBzaXRlJ3MgZmF2aWNvbiBpZiBpdCBleGlzdHNcbiAgbGV0IGljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkID4gbGlua1tyZWw9XCJzaG9ydGN1dCBpY29uXCJdJyk7XG4gIGlmIChpY29uICYmIChhd2FpdCBpbWdFeGlzdHMoaWNvbi5ocmVmKSkpIHtcbiAgICByZXR1cm4gaWNvbi5ocmVmO1xuICB9XG5cbiAgLy8gU2VhcmNoIHRocm91Z2ggYXZhaWxhYmxlIGljb25zIGluIG5vIHBhcnRpY3VsYXIgb3JkZXJcbiAgaWNvbiA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaGVhZCA+IGxpbmtbcmVsPVwiaWNvblwiXScpKS5maW5kKF9pY29uID0+IEJvb2xlYW4oX2ljb24uaHJlZikpO1xuICBpZiAoaWNvbiAmJiAoYXdhaXQgaW1nRXhpc3RzKGljb24uaHJlZikpKSB7XG4gICAgcmV0dXJuIGljb24uaHJlZjtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBHZXRzIHNpdGUgbWV0YWRhdGEgYW5kIHJldHVybnMgaXRcbiAqXG4gKi9cbmNvbnN0IGdldFNpdGVNZXRhZGF0YSA9IGFzeW5jICgpID0+ICh7XG4gIG5hbWU6IGdldFNpdGVOYW1lKHdpbmRvdyksXG4gIGljb246IGF3YWl0IGdldFNpdGVJY29uKHdpbmRvdylcbn0pO1xuXG4vKipcbiAqIFNlbmRzIHNpdGUgbWV0YWRhdGEgb3ZlciBhbiBSUEMgcmVxdWVzdC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2VuZFNpdGVNZXRhZGF0YShlbmdpbmUpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBkb21haW5NZXRhZGF0YSA9IGF3YWl0IGdldFNpdGVNZXRhZGF0YSgpO1xuICAgIC8vIGNhbGwgZW5naW5lLmhhbmRsZSBkaXJlY3RseSB0byBhdm9pZCBub3JtYWwgUlBDIHJlcXVlc3QgaGFuZGxpbmdcbiAgICBlbmdpbmUuaGFuZGxlKHtcbiAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICBpZDogZ2V0UHJlb3Blbkluc3RhbmNlSWQoKSxcbiAgICAgIG1ldGhvZDogXCJ3YWxsZXRfc2VuZERvbWFpbk1ldGFkYXRhXCIsXG4gICAgICBwYXJhbXM6IGRvbWFpbk1ldGFkYXRhXG4gICAgfSwgTk9PUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nLmVycm9yKHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VzLmVycm9ycy5zZW5kU2l0ZU1ldGFkYXRhKCksXG4gICAgICBvcmlnaW5hbEVycm9yOiBlcnJvclxuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IF9leGNsdWRlZCA9IFtcImhvc3RcIiwgXCJjaGFpbklkXCIsIFwibmV0d29ya05hbWVcIl07XG5jb25zdCBVTlNBRkVfTUVUSE9EUyA9IFtcImV0aF9zZW5kVHJhbnNhY3Rpb25cIiwgXCJldGhfc2lnblR5cGVkRGF0YVwiLCBcImV0aF9zaWduVHlwZWREYXRhX3YzXCIsIFwiZXRoX3NpZ25UeXBlZERhdGFfdjRcIiwgXCJwZXJzb25hbF9zaWduXCIsIFwiZXRoX2dldEVuY3J5cHRpb25QdWJsaWNLZXlcIiwgXCJldGhfZGVjcnlwdFwiLCBcIndhbGxldF9hZGRFdGhlcmV1bUNoYWluXCIsIFwid2FsbGV0X3N3aXRjaEV0aGVyZXVtQ2hhaW5cIl07XG5cbi8vIHByZWxvYWQgZm9yIGlmcmFtZSBkb2Vzbid0IHdvcmsgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTkzMjY3XG4oYXN5bmMgZnVuY3Rpb24gcHJlTG9hZElmcmFtZSgpIHtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm47XG4gICAgY29uc3QgdG9ydXNJZnJhbWVIdG1sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgY29uc3Qge1xuICAgICAgdG9ydXNVcmxcbiAgICB9ID0gYXdhaXQgZ2V0VG9ydXNVcmwoXCJwcm9kdWN0aW9uXCIsIHtcbiAgICAgIHZlcnNpb246IFwiXCJcbiAgICB9KTtcbiAgICB0b3J1c0lmcmFtZUh0bWwuaHJlZiA9IGAke3RvcnVzVXJsfS9wb3B1cGA7XG4gICAgdG9ydXNJZnJhbWVIdG1sLmNyb3NzT3JpZ2luID0gXCJhbm9ueW1vdXNcIjtcbiAgICB0b3J1c0lmcmFtZUh0bWwudHlwZSA9IFwidGV4dC9odG1sXCI7XG4gICAgdG9ydXNJZnJhbWVIdG1sLnJlbCA9IFwicHJlZmV0Y2hcIjtcbiAgICBpZiAodG9ydXNJZnJhbWVIdG1sLnJlbExpc3QgJiYgdG9ydXNJZnJhbWVIdG1sLnJlbExpc3Quc3VwcG9ydHMpIHtcbiAgICAgIGlmICh0b3J1c0lmcmFtZUh0bWwucmVsTGlzdC5zdXBwb3J0cyhcInByZWZldGNoXCIpKSB7XG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodG9ydXNJZnJhbWVIdG1sKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nLndhcm4oZXJyb3IpO1xuICB9XG59KSgpO1xuY2xhc3MgVG9ydXMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQge1xuICAgICAgYnV0dG9uUG9zaXRpb24gPSBCVVRUT05fUE9TSVRJT04uQk9UVE9NX0xFRlQsXG4gICAgICBidXR0b25TaXplID0gNTYsXG4gICAgICBtb2RhbFpJbmRleCA9IDk5OTk5LFxuICAgICAgYXBpS2V5ID0gXCJ0b3J1cy1kZWZhdWx0XCJcbiAgICB9ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJidXR0b25Qb3NpdGlvblwiLCBCVVRUT05fUE9TSVRJT04uQk9UVE9NX0xFRlQpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImJ1dHRvblNpemVcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b3J1c1VybFwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRvcnVzSWZyYW1lXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic3R5bGVMaW5rXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaXNMb2dnZWRJblwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlzSW5pdGlhbGl6ZWRcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b3J1c1dpZGdldFZpc2liaWxpdHlcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b3J1c0FsZXJ0XCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiYXBpS2V5XCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwibW9kYWxaSW5kZXhcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJhbGVydFpJbmRleFwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRvcnVzQWxlcnRDb250YWluZXJcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJpc0lmcmFtZUZ1bGxTY3JlZW5cIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ3aGl0ZUxhYmVsXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicmVxdWVzdGVkVmVyaWZpZXJcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjdXJyZW50VmVyaWZpZXJcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJlbWJlZFRyYW5zbGF0aW9uc1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV0aGVyZXVtXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicHJvdmlkZXJcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb21tdW5pY2F0aW9uTXV4XCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaXNMb2dpbkNhbGxiYWNrXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicGF5bWVudFByb3ZpZGVyc1wiLCBjb25maWd1cmF0aW9uLnBheW1lbnRQcm92aWRlcnMpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxvZ2luSGludFwiLCBcIlwiKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1c2VXYWxsZXRDb25uZWN0XCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaXNDdXN0b21Mb2dpblwiLCBmYWxzZSk7XG4gICAgdGhpcy5idXR0b25Qb3NpdGlvbiA9IGJ1dHRvblBvc2l0aW9uO1xuICAgIHRoaXMuYnV0dG9uU2l6ZSA9IGJ1dHRvblNpemU7XG4gICAgdGhpcy50b3J1c1VybCA9IFwiXCI7XG4gICAgdGhpcy5pc0xvZ2dlZEluID0gZmFsc2U7IC8vIGV0aGVyZXVtLmVuYWJsZSB3b3JraW5nXG4gICAgdGhpcy5pc0luaXRpYWxpemVkID0gZmFsc2U7IC8vIGluaXQgZG9uZVxuICAgIHRoaXMudG9ydXNXaWRnZXRWaXNpYmlsaXR5ID0gdHJ1ZTtcbiAgICB0aGlzLnJlcXVlc3RlZFZlcmlmaWVyID0gXCJcIjtcbiAgICB0aGlzLmN1cnJlbnRWZXJpZmllciA9IFwiXCI7XG4gICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XG4gICAgc2V0QVBJS2V5KGFwaUtleSk7XG4gICAgdGhpcy5tb2RhbFpJbmRleCA9IG1vZGFsWkluZGV4O1xuICAgIHRoaXMuYWxlcnRaSW5kZXggPSBtb2RhbFpJbmRleCArIDEwMDA7XG4gICAgdGhpcy5pc0lmcmFtZUZ1bGxTY3JlZW4gPSBmYWxzZTtcbiAgfVxuICBhc3luYyBpbml0KCkge1xuICAgIGxldCB7XG4gICAgICBidWlsZEVudiA9IFRPUlVTX0JVSUxEX0VOVi5QUk9EVUNUSU9OLFxuICAgICAgZW5hYmxlTG9nZ2luZyA9IGZhbHNlLFxuICAgICAgbmV0d29yayA9IHtcbiAgICAgICAgaG9zdDogXCJtYWlubmV0XCIsXG4gICAgICAgIGNoYWluSWQ6IG51bGwsXG4gICAgICAgIG5ldHdvcmtOYW1lOiBcIlwiLFxuICAgICAgICBibG9ja0V4cGxvcmVyOiBcIlwiLFxuICAgICAgICB0aWNrZXI6IFwiXCIsXG4gICAgICAgIHRpY2tlck5hbWU6IFwiXCJcbiAgICAgIH0sXG4gICAgICBsb2dpbkNvbmZpZyA9IHt9LFxuICAgICAgc2hvd1RvcnVzQnV0dG9uID0gdHJ1ZSxcbiAgICAgIGludGVncml0eSA9IHtcbiAgICAgICAgdmVyc2lvbjogXCJcIlxuICAgICAgfSxcbiAgICAgIHdoaXRlTGFiZWwsXG4gICAgICB1c2VXYWxsZXRDb25uZWN0ID0gZmFsc2UsXG4gICAgICBtZmFMZXZlbCA9IFwiZGVmYXVsdFwiXG4gICAgfSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZCkgdGhyb3cgbmV3IEVycm9yKFwiQWxyZWFkeSBpbml0aWFsaXplZFwiKTtcbiAgICBjb25zdCB7XG4gICAgICB0b3J1c1VybCxcbiAgICAgIGxvZ0xldmVsXG4gICAgfSA9IGF3YWl0IGdldFRvcnVzVXJsKGJ1aWxkRW52LCBpbnRlZ3JpdHkpO1xuICAgIGxvZy5pbmZvKHRvcnVzVXJsLCBcInVybCBsb2FkZWRcIik7XG4gICAgdGhpcy50b3J1c1VybCA9IHRvcnVzVXJsO1xuICAgIHRoaXMud2hpdGVMYWJlbCA9IHdoaXRlTGFiZWw7XG4gICAgdGhpcy51c2VXYWxsZXRDb25uZWN0ID0gdXNlV2FsbGV0Q29ubmVjdDtcbiAgICB0aGlzLmlzQ3VzdG9tTG9naW4gPSAhIShsb2dpbkNvbmZpZyAmJiBPYmplY3Qua2V5cyhsb2dpbkNvbmZpZykubGVuZ3RoID4gMCkgfHwgISEod2hpdGVMYWJlbCAmJiBPYmplY3Qua2V5cyh3aGl0ZUxhYmVsKS5sZW5ndGggPiAwKTtcbiAgICBsb2cuc2V0RGVmYXVsdExldmVsKGxvZ0xldmVsKTtcbiAgICBpZiAoZW5hYmxlTG9nZ2luZykgbG9nLmVuYWJsZUFsbCgpO2Vsc2UgbG9nLmRpc2FibGVBbGwoKTtcbiAgICB0aGlzLnRvcnVzV2lkZ2V0VmlzaWJpbGl0eSA9IHNob3dUb3J1c0J1dHRvbjtcbiAgICBjb25zdCB0b3J1c0lmcmFtZVVybCA9IG5ldyBVUkwodG9ydXNVcmwpO1xuICAgIGlmICh0b3J1c0lmcmFtZVVybC5wYXRobmFtZS5lbmRzV2l0aChcIi9cIikpIHRvcnVzSWZyYW1lVXJsLnBhdGhuYW1lICs9IFwicG9wdXBcIjtlbHNlIHRvcnVzSWZyYW1lVXJsLnBhdGhuYW1lICs9IFwiL3BvcHVwXCI7XG4gICAgdG9ydXNJZnJhbWVVcmwuaGFzaCA9IGAjaXNDdXN0b21Mb2dpbj0ke3RoaXMuaXNDdXN0b21Mb2dpbn1gO1xuXG4gICAgLy8gSWZyYW1lIGNvZGVcbiAgICB0aGlzLnRvcnVzSWZyYW1lID0gaHRtbFRvRWxlbWVudChgPGlmcmFtZVxuICAgICAgICBpZD1cInRvcnVzSWZyYW1lXCJcbiAgICAgICAgYWxsb3c9JHt1c2VXYWxsZXRDb25uZWN0ID8gXCJjYW1lcmFcIiA6IFwiXCJ9XG4gICAgICAgIGNsYXNzPVwidG9ydXNJZnJhbWVcIlxuICAgICAgICBzcmM9XCIke3RvcnVzSWZyYW1lVXJsLmhyZWZ9XCJcbiAgICAgICAgc3R5bGU9XCJkaXNwbGF5OiBub25lOyBwb3NpdGlvbjogZml4ZWQ7IHRvcDogMDsgcmlnaHQ6IDA7IHdpZHRoOiAxMDAlOyBjb2xvci1zY2hlbWU6IG5vbmU7XG4gICAgICAgIGhlaWdodDogMTAwJTsgYm9yZGVyOiBub25lOyBib3JkZXItcmFkaXVzOiAwOyB6LWluZGV4OiAke3RoaXMubW9kYWxaSW5kZXh9XCJcbiAgICAgID48L2lmcmFtZT5gKTtcbiAgICB0aGlzLnRvcnVzQWxlcnRDb250YWluZXIgPSBodG1sVG9FbGVtZW50KCc8ZGl2IGlkPVwidG9ydXNBbGVydENvbnRhaW5lclwiPjwvZGl2PicpO1xuICAgIHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgdGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyLnN0eWxlLnNldFByb3BlcnR5KFwiei1pbmRleFwiLCB0aGlzLmFsZXJ0WkluZGV4LnRvU3RyaW5nKCkpO1xuICAgIGNvbnN0IGxpbmsgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgbGluay5zZXRBdHRyaWJ1dGUoXCJyZWxcIiwgXCJzdHlsZXNoZWV0XCIpO1xuICAgIGxpbmsuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHQvY3NzXCIpO1xuICAgIGxpbmsuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBgJHt0b3J1c1VybH0vY3NzL3dpZGdldC5jc3NgKTtcbiAgICB0aGlzLnN0eWxlTGluayA9IGxpbms7XG4gICAgY29uc3Qge1xuICAgICAgZGVmYXVsdExhbmd1YWdlID0gZ2V0VXNlckxhbmd1YWdlKCksXG4gICAgICBjdXN0b21UcmFuc2xhdGlvbnMgPSB7fVxuICAgIH0gPSB0aGlzLndoaXRlTGFiZWwgfHwge307XG4gICAgY29uc3QgbWVyZ2VkVHJhbnNsYXRpb25zID0gZGVlcG1lcmdlKGNvbmZpZ3VyYXRpb24udHJhbnNsYXRpb25zLCBjdXN0b21UcmFuc2xhdGlvbnMpO1xuICAgIGNvbnN0IGxhbmd1YWdlVHJhbnNsYXRpb25zID0gbWVyZ2VkVHJhbnNsYXRpb25zW2RlZmF1bHRMYW5ndWFnZV0gfHwgY29uZmlndXJhdGlvbi50cmFuc2xhdGlvbnNbZ2V0VXNlckxhbmd1YWdlKCldO1xuICAgIHRoaXMuZW1iZWRUcmFuc2xhdGlvbnMgPSBsYW5ndWFnZVRyYW5zbGF0aW9ucy5lbWJlZDtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy50b3J1c0lmcmFtZS5vbmxvYWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIG9ubHkgZG8gdGhpcyBpZiBpZnJhbWUgaXMgbm90IGZ1bGwgc2NyZWVuXG4gICAgICAgIHRoaXMuX3NldHVwV2ViMygpO1xuICAgICAgICBjb25zdCBpbml0U3RyZWFtID0gdGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcImluaXRfc3RyZWFtXCIpO1xuICAgICAgICBpbml0U3RyZWFtLm9uKFwiZGF0YVwiLCBjaHVuayA9PiB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBlcnJvclxuICAgICAgICAgIH0gPSBjaHVuaztcbiAgICAgICAgICBpZiAobmFtZSA9PT0gXCJpbml0X2NvbXBsZXRlXCIgJiYgZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAvLyByZXNvbHZlIHByb21pc2VcbiAgICAgICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9kaXNwbGF5SWZyYW1lKHRoaXMuaXNJZnJhbWVGdWxsU2NyZWVuKTtcbiAgICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGVycm9yKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaW5pdFN0cmVhbS53cml0ZSh7XG4gICAgICAgICAgbmFtZTogXCJpbml0X3N0cmVhbVwiLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGxvZ2luQ29uZmlnLFxuICAgICAgICAgICAgd2hpdGVMYWJlbDogdGhpcy53aGl0ZUxhYmVsLFxuICAgICAgICAgICAgYnV0dG9uUG9zaXRpb246IHRoaXMuYnV0dG9uUG9zaXRpb24sXG4gICAgICAgICAgICBidXR0b25TaXplOiB0aGlzLmJ1dHRvblNpemUsXG4gICAgICAgICAgICB0b3J1c1dpZGdldFZpc2liaWxpdHk6IHRoaXMudG9ydXNXaWRnZXRWaXNpYmlsaXR5LFxuICAgICAgICAgICAgYXBpS2V5OiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgIG5ldHdvcmssXG4gICAgICAgICAgICBtZmFMZXZlbFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgd2luZG93LmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodGhpcy5zdHlsZUxpbmspO1xuICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy50b3J1c0lmcmFtZSk7XG4gICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnRvcnVzQWxlcnRDb250YWluZXIpO1xuICAgIH0pO1xuICB9XG4gIGxvZ2luKCkge1xuICAgIGxldCB7XG4gICAgICB2ZXJpZmllciA9IFwiXCIsXG4gICAgICBsb2dpbl9oaW50OiBsb2dpbkhpbnQgPSBcIlwiXG4gICAgfSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQpIHRocm93IG5ldyBFcnJvcihcIkNhbGwgaW5pdCgpIGZpcnN0XCIpO1xuICAgIHRoaXMucmVxdWVzdGVkVmVyaWZpZXIgPSB2ZXJpZmllcjtcbiAgICB0aGlzLmxvZ2luSGludCA9IGxvZ2luSGludDtcbiAgICByZXR1cm4gdGhpcy5ldGhlcmV1bS5lbmFibGUoKTtcbiAgfVxuICBsb2dvdXQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICghdGhpcy5pc0xvZ2dlZEluKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJVc2VyIGhhcyBub3QgbG9nZ2VkIGluIHlldFwiKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxvZ091dFN0cmVhbSA9IHRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJsb2dvdXRcIik7XG4gICAgICBsb2dPdXRTdHJlYW0ud3JpdGUoe1xuICAgICAgICBuYW1lOiBcImxvZ091dFwiXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHN0YXR1c1N0cmVhbSA9IHRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJzdGF0dXNcIik7XG4gICAgICBjb25zdCBzdGF0dXNTdHJlYW1IYW5kbGVyID0gYXJnID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gYXJnO1xuICAgICAgICBpZiAoIXN0YXR1cy5sb2dnZWRJbikge1xuICAgICAgICAgIHRoaXMuaXNMb2dnZWRJbiA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuY3VycmVudFZlcmlmaWVyID0gXCJcIjtcbiAgICAgICAgICB0aGlzLnJlcXVlc3RlZFZlcmlmaWVyID0gXCJcIjtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QobmV3IEVycm9yKFwiU29tZSBFcnJvciBPY2N1cmVkXCIpKTtcbiAgICAgIH07XG4gICAgICBoYW5kbGVTdHJlYW0oc3RhdHVzU3RyZWFtLCBcImRhdGFcIiwgc3RhdHVzU3RyZWFtSGFuZGxlcik7XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgY2xlYW5VcCgpIHtcbiAgICBpZiAodGhpcy5pc0xvZ2dlZEluKSB7XG4gICAgICBhd2FpdCB0aGlzLmxvZ291dCgpO1xuICAgIH1cbiAgICB0aGlzLmNsZWFySW5pdCgpO1xuICB9XG4gIGNsZWFySW5pdCgpIHtcbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50IHx8IGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRG9jdW1lbnQ7XG4gICAgfVxuICAgIGlmIChpc0VsZW1lbnQodGhpcy5zdHlsZUxpbmspICYmIHdpbmRvdy5kb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMuc3R5bGVMaW5rKSkge1xuICAgICAgdGhpcy5zdHlsZUxpbmsucmVtb3ZlKCk7XG4gICAgICB0aGlzLnN0eWxlTGluayA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudCh0aGlzLnRvcnVzSWZyYW1lKSAmJiB3aW5kb3cuZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLnRvcnVzSWZyYW1lKSkge1xuICAgICAgdGhpcy50b3J1c0lmcmFtZS5yZW1vdmUoKTtcbiAgICAgIHRoaXMudG9ydXNJZnJhbWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc0VsZW1lbnQodGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyKSAmJiB3aW5kb3cuZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLnRvcnVzQWxlcnRDb250YWluZXIpKSB7XG4gICAgICB0aGlzLnRvcnVzQWxlcnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnRvcnVzQWxlcnRDb250YWluZXIucmVtb3ZlKCk7XG4gICAgICB0aGlzLnRvcnVzQWxlcnRDb250YWluZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuICB9XG4gIGhpZGVUb3J1c0J1dHRvbigpIHtcbiAgICB0aGlzLnRvcnVzV2lkZ2V0VmlzaWJpbGl0eSA9IGZhbHNlO1xuICAgIHRoaXMuX3NlbmRXaWRnZXRWaXNpYmlsaXR5U3RhdHVzKGZhbHNlKTtcbiAgICB0aGlzLl9kaXNwbGF5SWZyYW1lKCk7XG4gIH1cbiAgc2hvd1RvcnVzQnV0dG9uKCkge1xuICAgIHRoaXMudG9ydXNXaWRnZXRWaXNpYmlsaXR5ID0gdHJ1ZTtcbiAgICB0aGlzLl9zZW5kV2lkZ2V0VmlzaWJpbGl0eVN0YXR1cyh0cnVlKTtcbiAgICB0aGlzLl9kaXNwbGF5SWZyYW1lKCk7XG4gIH1cbiAgc2V0UHJvdmlkZXIoX3JlZikge1xuICAgIGxldCB7XG4gICAgICAgIGhvc3QgPSBcIm1haW5uZXRcIixcbiAgICAgICAgY2hhaW5JZCA9IG51bGwsXG4gICAgICAgIG5ldHdvcmtOYW1lID0gXCJcIlxuICAgICAgfSA9IF9yZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHByb3ZpZGVyQ2hhbmdlU3RyZWFtID0gdGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcInByb3ZpZGVyX2NoYW5nZVwiKTtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSBhcmcgPT4ge1xuICAgICAgICBjb25zdCBjaHVuayA9IGFyZztcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGVycixcbiAgICAgICAgICBzdWNjZXNzXG4gICAgICAgIH0gPSBjaHVuay5kYXRhO1xuICAgICAgICBsb2cuaW5mbyhjaHVuayk7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KG5ldyBFcnJvcihcInNvbWUgZXJyb3Igb2NjdXJyZWRcIikpO1xuICAgICAgfTtcbiAgICAgIGhhbmRsZVN0cmVhbShwcm92aWRlckNoYW5nZVN0cmVhbSwgXCJkYXRhXCIsIGhhbmRsZXIpO1xuICAgICAgY29uc3QgcHJlb3Blbkluc3RhbmNlSWQgPSBnZXRQcmVvcGVuSW5zdGFuY2VJZCgpO1xuICAgICAgdGhpcy5faGFuZGxlV2luZG93KHByZW9wZW5JbnN0YW5jZUlkLCB7XG4gICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgZmVhdHVyZXM6IEZFQVRVUkVTX1BST1ZJREVSX0NIQU5HRV9XSU5ET1dcbiAgICAgIH0pO1xuICAgICAgcHJvdmlkZXJDaGFuZ2VTdHJlYW0ud3JpdGUoe1xuICAgICAgICBuYW1lOiBcInNob3dfcHJvdmlkZXJfY2hhbmdlXCIsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBuZXR3b3JrOiBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICAgIGhvc3QsXG4gICAgICAgICAgICBjaGFpbklkLFxuICAgICAgICAgICAgbmV0d29ya05hbWVcbiAgICAgICAgICB9LCByZXN0KSxcbiAgICAgICAgICBwcmVvcGVuSW5zdGFuY2VJZCxcbiAgICAgICAgICBvdmVycmlkZTogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgc2hvd1dhbGxldChwYXRoKSB7XG4gICAgbGV0IHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgY29uc3Qgc2hvd1dhbGxldFN0cmVhbSA9IHRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJzaG93X3dhbGxldFwiKTtcbiAgICBjb25zdCBmaW5hbFBhdGggPSBwYXRoID8gYC8ke3BhdGh9YCA6IFwiXCI7XG4gICAgc2hvd1dhbGxldFN0cmVhbS53cml0ZSh7XG4gICAgICBuYW1lOiBcInNob3dfd2FsbGV0XCIsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHBhdGg6IGZpbmFsUGF0aFxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHNob3dXYWxsZXRIYW5kbGVyID0gYXJnID0+IHtcbiAgICAgIGNvbnN0IGNodW5rID0gYXJnO1xuICAgICAgaWYgKGNodW5rLm5hbWUgPT09IFwic2hvd193YWxsZXRfaW5zdGFuY2VcIikge1xuICAgICAgICAvLyBMZXQgdGhlIGVycm9yIHByb3BvZ2F0ZSB1cCAoaGVuY2UsIG5vIHRyeSBjYXRjaClcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGluc3RhbmNlSWRcbiAgICAgICAgfSA9IGNodW5rLmRhdGE7XG4gICAgICAgIGNvbnN0IGZpbmFsVXJsID0gbmV3IFVSTChgJHt0aGlzLnRvcnVzVXJsfS93YWxsZXQke2ZpbmFsUGF0aH1gKTtcbiAgICAgICAgLy8gVXNpbmcgVVJMIGNvbnN0cnVjdG9yIHRvIHByZXZlbnQganMgaW5qZWN0aW9uIGFuZCBhbGxvdyBwYXJhbWV0ZXIgdmFsaWRhdGlvbi4hXG4gICAgICAgIGZpbmFsVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpbnRlZ3JpdHlcIiwgXCJ0cnVlXCIpO1xuICAgICAgICBmaW5hbFVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiaW5zdGFuY2VJZFwiLCBpbnN0YW5jZUlkKTtcbiAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKHggPT4ge1xuICAgICAgICAgIGZpbmFsVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoeCwgcGFyYW1zW3hdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZpbmFsVXJsLmhhc2ggPSBgI2lzQ3VzdG9tTG9naW49JHt0aGlzLmlzQ3VzdG9tTG9naW59YDtcbiAgICAgICAgY29uc3Qgd2FsbGV0V2luZG93ID0gbmV3IFBvcHVwSGFuZGxlcih7XG4gICAgICAgICAgdXJsOiBmaW5hbFVybCxcbiAgICAgICAgICBmZWF0dXJlczogRkVBVFVSRVNfREVGQVVMVF9XQUxMRVRfV0lORE9XXG4gICAgICAgIH0pO1xuICAgICAgICB3YWxsZXRXaW5kb3cub3BlbigpO1xuICAgICAgfVxuICAgIH07XG4gICAgaGFuZGxlU3RyZWFtKHNob3dXYWxsZXRTdHJlYW0sIFwiZGF0YVwiLCBzaG93V2FsbGV0SGFuZGxlcik7XG4gIH1cbiAgYXN5bmMgZ2V0UHVibGljQWRkcmVzcyhfcmVmMikge1xuICAgIGxldCB7XG4gICAgICB2ZXJpZmllcixcbiAgICAgIHZlcmlmaWVySWQsXG4gICAgICBpc0V4dGVuZGVkID0gZmFsc2VcbiAgICB9ID0gX3JlZjI7XG4gICAgaWYgKCFjb25maWd1cmF0aW9uLnN1cHBvcnRlZFZlcmlmaWVyTGlzdC5pbmNsdWRlcyh2ZXJpZmllcikgfHwgIVdBTExFVF9PUEVOTE9HSU5fVkVSSUZJRVJfTUFQW3ZlcmlmaWVyXSkgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgdmVyaWZpZXJcIik7XG4gICAgY29uc3Qgd2FsbGV0VmVyaWZpZXIgPSB2ZXJpZmllcjtcbiAgICBjb25zdCBvcGVubG9naW5WZXJpZmllciA9IFdBTExFVF9PUEVOTE9HSU5fVkVSSUZJRVJfTUFQW3ZlcmlmaWVyXTtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGBodHRwczovL2FwaS50b3IudXMvbG9va3VwL3RvcnVzYCk7XG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJ2ZXJpZmllclwiLCBvcGVubG9naW5WZXJpZmllcik7XG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJ2ZXJpZmllcklkXCIsIHZlcmlmaWVySWQpO1xuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwid2FsbGV0VmVyaWZpZXJcIiwgd2FsbGV0VmVyaWZpZXIpO1xuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwibmV0d29ya1wiLCBcIm1haW5uZXRcIik7XG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpc0V4dGVuZGVkXCIsIGlzRXh0ZW5kZWQudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIGdldCh1cmwuaHJlZiwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIlxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHVzZUFQSUtleTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGdldFVzZXJJbmZvKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNMb2dnZWRJbikge1xuICAgICAgICBjb25zdCB1c2VySW5mb0FjY2Vzc1N0cmVhbSA9IHRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJ1c2VyX2luZm9fYWNjZXNzXCIpO1xuICAgICAgICB1c2VySW5mb0FjY2Vzc1N0cmVhbS53cml0ZSh7XG4gICAgICAgICAgbmFtZTogXCJ1c2VyX2luZm9fYWNjZXNzX3JlcXVlc3RcIlxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdXNlckluZm9BY2Nlc3NIYW5kbGVyID0gYXJnID0+IHtcbiAgICAgICAgICBjb25zdCBjaHVuayA9IGFyZztcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBhcHByb3ZlZCxcbiAgICAgICAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgICAgICAgcmVqZWN0ZWQsXG4gICAgICAgICAgICAgIG5ld1JlcXVlc3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9ID0gY2h1bms7XG4gICAgICAgICAgaWYgKG5hbWUgPT09IFwidXNlcl9pbmZvX2FjY2Vzc19yZXNwb25zZVwiKSB7XG4gICAgICAgICAgICBpZiAoYXBwcm92ZWQpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShwYXlsb2FkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlVzZXIgcmVqZWN0ZWQgdGhlIHJlcXVlc3RcIikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXdSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgIGNvbnN0IHVzZXJJbmZvU3RyZWFtID0gdGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcInVzZXJfaW5mb1wiKTtcbiAgICAgICAgICAgICAgY29uc3QgdXNlckluZm9IYW5kbGVyID0gYXJnMiA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlckNodW5rID0gYXJnMjtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlckNodW5rLm5hbWUgPT09IFwidXNlcl9pbmZvX3Jlc3BvbnNlXCIpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyQ2h1bmsuZGF0YS5hcHByb3ZlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGhhbmRsZXJDaHVuay5kYXRhLnBheWxvYWQpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlVzZXIgcmVqZWN0ZWQgdGhlIHJlcXVlc3RcIikpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaGFuZGxlU3RyZWFtKHVzZXJJbmZvU3RyZWFtLCBcImRhdGFcIiwgdXNlckluZm9IYW5kbGVyKTtcbiAgICAgICAgICAgICAgY29uc3QgcHJlb3Blbkluc3RhbmNlSWQgPSBnZXRQcmVvcGVuSW5zdGFuY2VJZCgpO1xuICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVXaW5kb3cocHJlb3Blbkluc3RhbmNlSWQsIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgICAgICAgZmVhdHVyZXM6IEZFQVRVUkVTX1BST1ZJREVSX0NIQU5HRV9XSU5ET1dcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHVzZXJJbmZvU3RyZWFtLndyaXRlKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInVzZXJfaW5mb19yZXF1ZXN0XCIsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgIHByZW9wZW5JbnN0YW5jZUlkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGhhbmRsZVN0cmVhbSh1c2VySW5mb0FjY2Vzc1N0cmVhbSwgXCJkYXRhXCIsIHVzZXJJbmZvQWNjZXNzSGFuZGxlcik7XG4gICAgICB9IGVsc2UgcmVqZWN0KG5ldyBFcnJvcihcIlVzZXIgaGFzIG5vdCBsb2dnZWQgaW4geWV0XCIpKTtcbiAgICB9KTtcbiAgfVxuICBpbml0aWF0ZVRvcHVwKHByb3ZpZGVyLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZXJyb3JzLFxuICAgICAgICAgIGlzVmFsaWRcbiAgICAgICAgfSA9IHZhbGlkYXRlUGF5bWVudFByb3ZpZGVyKHByb3ZpZGVyLCBwYXJhbXMpO1xuICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KGVycm9ycykpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9wdXBTdHJlYW0gPSB0aGlzLmNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwidG9wdXBcIik7XG4gICAgICAgIGNvbnN0IHRvcHVwSGFuZGxlciA9IGFyZyA9PiB7XG4gICAgICAgICAgY29uc3QgY2h1bmsgPSBhcmc7XG4gICAgICAgICAgaWYgKGNodW5rLm5hbWUgPT09IFwidG9wdXBfcmVzcG9uc2VcIikge1xuICAgICAgICAgICAgaWYgKGNodW5rLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICByZXNvbHZlKGNodW5rLmRhdGEuc3VjY2Vzcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGNodW5rLmRhdGEuZXJyb3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGhhbmRsZVN0cmVhbSh0b3B1cFN0cmVhbSwgXCJkYXRhXCIsIHRvcHVwSGFuZGxlcik7XG4gICAgICAgIGNvbnN0IHByZW9wZW5JbnN0YW5jZUlkID0gZ2V0UHJlb3Blbkluc3RhbmNlSWQoKTtcbiAgICAgICAgdGhpcy5faGFuZGxlV2luZG93KHByZW9wZW5JbnN0YW5jZUlkKTtcbiAgICAgICAgdG9wdXBTdHJlYW0ud3JpdGUoe1xuICAgICAgICAgIG5hbWU6IFwidG9wdXBfcmVxdWVzdFwiLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHByb3ZpZGVyLFxuICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgcHJlb3Blbkluc3RhbmNlSWRcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHJlamVjdChuZXcgRXJyb3IoXCJUb3J1cyBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0XCIpKTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBsb2dpbldpdGhQcml2YXRlS2V5KGxvZ2luUGFyYW1zKSB7XG4gICAgY29uc3Qge1xuICAgICAgcHJpdmF0ZUtleSxcbiAgICAgIHVzZXJJbmZvXG4gICAgfSA9IGxvZ2luUGFyYW1zO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSB7XG4gICAgICAgIGlmIChCdWZmZXIuZnJvbShwcml2YXRlS2V5LCBcImhleFwiKS5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgcHJpdmF0ZSBrZXksIFBsZWFzZSBwcm92aWRlIGEgMzIgYnl0ZSB2YWxpZCBzZWNwMjVrMSBwcml2YXRlIGtleVwiKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvZ2luUHJpdktleVN0cmVhbSA9IHRoaXMuY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJsb2dpbl93aXRoX3ByaXZhdGVfa2V5XCIpO1xuICAgICAgICBjb25zdCBsb2dpbkhhbmRsZXIgPSBhcmcgPT4ge1xuICAgICAgICAgIGNvbnN0IGNodW5rID0gYXJnO1xuICAgICAgICAgIGlmIChjaHVuay5uYW1lID09PSBcImxvZ2luX3dpdGhfcHJpdmF0ZV9rZXlfcmVzcG9uc2VcIikge1xuICAgICAgICAgICAgaWYgKGNodW5rLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICByZXNvbHZlKGNodW5rLmRhdGEuc3VjY2Vzcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGNodW5rLmRhdGEuZXJyb3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGhhbmRsZVN0cmVhbShsb2dpblByaXZLZXlTdHJlYW0sIFwiZGF0YVwiLCBsb2dpbkhhbmRsZXIpO1xuICAgICAgICBsb2dpblByaXZLZXlTdHJlYW0ud3JpdGUoe1xuICAgICAgICAgIG5hbWU6IFwibG9naW5fd2l0aF9wcml2YXRlX2tleV9yZXF1ZXN0XCIsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcHJpdmF0ZUtleSxcbiAgICAgICAgICAgIHVzZXJJbmZvXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSByZWplY3QobmV3IEVycm9yKFwiVG9ydXMgaXMgbm90IGluaXRpYWxpemVkIHlldFwiKSk7XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgc2hvd1dhbGxldENvbm5lY3RTY2FubmVyKCkge1xuICAgIGlmICghdGhpcy51c2VXYWxsZXRDb25uZWN0KSB0aHJvdyBuZXcgRXJyb3IoXCJTZXQgYHVzZVdhbGxldENvbm5lY3RgIGFzIHRydWUgaW4gaW5pdCBmdW5jdGlvbiBvcHRpb25zIHRvIHVzZSB3YWxsZXQgY29ubmVjdCBzY2FubmVyXCIpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodGhpcy5pc0xvZ2dlZEluKSB7XG4gICAgICAgIGNvbnN0IHdhbGxldENvbm5lY3RTdHJlYW0gPSB0aGlzLmNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwid2FsbGV0X2Nvbm5lY3Rfc3RyZWFtXCIpO1xuICAgICAgICBjb25zdCB3YWxsZXRDb25uZWN0SGFuZGxlciA9IGFyZyA9PiB7XG4gICAgICAgICAgY29uc3QgY2h1bmsgPSBhcmc7XG4gICAgICAgICAgaWYgKGNodW5rLm5hbWUgPT09IFwid2FsbGV0X2Nvbm5lY3Rfc3RyZWFtX3Jlc1wiKSB7XG4gICAgICAgICAgICBpZiAoY2h1bmsuZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoY2h1bmsuZGF0YS5zdWNjZXNzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoY2h1bmsuZGF0YS5lcnJvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZGlzcGxheUlmcmFtZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaGFuZGxlU3RyZWFtKHdhbGxldENvbm5lY3RTdHJlYW0sIFwiZGF0YVwiLCB3YWxsZXRDb25uZWN0SGFuZGxlcik7XG4gICAgICAgIHdhbGxldENvbm5lY3RTdHJlYW0ud3JpdGUoe1xuICAgICAgICAgIG5hbWU6IFwid2FsbGV0X2Nvbm5lY3Rfc3RyZWFtX3JlcVwiXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9kaXNwbGF5SWZyYW1lKHRydWUpO1xuICAgICAgfSBlbHNlIHJlamVjdChuZXcgRXJyb3IoXCJVc2VyIGhhcyBub3QgbG9nZ2VkIGluIHlldFwiKSk7XG4gICAgfSk7XG4gIH1cbiAgX2hhbmRsZVdpbmRvdyhwcmVvcGVuSW5zdGFuY2VJZCkge1xuICAgIGxldCB7XG4gICAgICB1cmwsXG4gICAgICB0YXJnZXQsXG4gICAgICBmZWF0dXJlc1xuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIGlmIChwcmVvcGVuSW5zdGFuY2VJZCkge1xuICAgICAgY29uc3Qgd2luZG93U3RyZWFtID0gdGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcIndpbmRvd1wiKTtcbiAgICAgIGNvbnN0IGZpbmFsVXJsID0gbmV3IFVSTCh1cmwgfHwgYCR7dGhpcy50b3J1c1VybH0vcmVkaXJlY3Q/cHJlb3Blbkluc3RhbmNlSWQ9JHtwcmVvcGVuSW5zdGFuY2VJZH1gKTtcbiAgICAgIGlmIChmaW5hbFVybC5oYXNoKSBmaW5hbFVybC5oYXNoICs9IGAmaXNDdXN0b21Mb2dpbj0ke3RoaXMuaXNDdXN0b21Mb2dpbn1gO2Vsc2UgZmluYWxVcmwuaGFzaCA9IGAjaXNDdXN0b21Mb2dpbj0ke3RoaXMuaXNDdXN0b21Mb2dpbn1gO1xuICAgICAgY29uc3QgaGFuZGxlZFdpbmRvdyA9IG5ldyBQb3B1cEhhbmRsZXIoe1xuICAgICAgICB1cmw6IGZpbmFsVXJsLFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIGZlYXR1cmVzXG4gICAgICB9KTtcbiAgICAgIGhhbmRsZWRXaW5kb3cub3BlbigpO1xuICAgICAgaWYgKCFoYW5kbGVkV2luZG93LndpbmRvdykge1xuICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cEJsb2NrQWxlcnQocHJlb3Blbkluc3RhbmNlSWQsIGZpbmFsVXJsLmhyZWYpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3aW5kb3dTdHJlYW0ud3JpdGUoe1xuICAgICAgICBuYW1lOiBcIm9wZW5lZF93aW5kb3dcIixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHByZW9wZW5JbnN0YW5jZUlkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc3QgY2xvc2VIYW5kbGVyID0gX3JlZjMgPT4ge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIHByZW9wZW5JbnN0YW5jZUlkOiByZWNlaXZlZElkLFxuICAgICAgICAgIGNsb3NlXG4gICAgICAgIH0gPSBfcmVmMztcbiAgICAgICAgaWYgKHJlY2VpdmVkSWQgPT09IHByZW9wZW5JbnN0YW5jZUlkICYmIGNsb3NlKSB7XG4gICAgICAgICAgaGFuZGxlZFdpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgIHdpbmRvd1N0cmVhbS5yZW1vdmVMaXN0ZW5lcihcImRhdGFcIiwgY2xvc2VIYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHdpbmRvd1N0cmVhbS5vbihcImRhdGFcIiwgY2xvc2VIYW5kbGVyKTtcbiAgICAgIGhhbmRsZWRXaW5kb3cub25jZShcImNsb3NlXCIsICgpID0+IHtcbiAgICAgICAgd2luZG93U3RyZWFtLndyaXRlKHtcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBwcmVvcGVuSW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGNsb3NlZDogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHdpbmRvd1N0cmVhbS5yZW1vdmVMaXN0ZW5lcihcImRhdGFcIiwgY2xvc2VIYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBfc2V0RW1iZWRXaGl0ZUxhYmVsKGVsZW1lbnQpIHtcbiAgICAvLyBTZXQgd2hpdGVsYWJlbFxuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lXG4gICAgfSA9IHRoaXMud2hpdGVMYWJlbCB8fCB7fTtcbiAgICBpZiAodGhlbWUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgaXNEYXJrID0gZmFsc2UsXG4gICAgICAgIGNvbG9ycyA9IHt9XG4gICAgICB9ID0gdGhlbWU7XG4gICAgICBpZiAoaXNEYXJrKSBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0b3J1cy1kYXJrXCIpO1xuICAgICAgaWYgKGNvbG9ycy50b3J1c0JyYW5kMSkgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tdG9ydXMtYnJhbmQtMVwiLCBjb2xvcnMudG9ydXNCcmFuZDEpO1xuICAgICAgaWYgKGNvbG9ycy50b3J1c0dyYXkyKSBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS10b3J1cy1ncmF5LTJcIiwgY29sb3JzLnRvcnVzR3JheTIpO1xuICAgIH1cbiAgfVxuICBfZ2V0TG9nb1VybCgpIHtcbiAgICB2YXIgX3RoaXMkd2hpdGVMYWJlbDtcbiAgICBsZXQgbG9nb1VybCA9IGAke3RoaXMudG9ydXNVcmx9L2ltYWdlcy90b3J1c19pY29uLWJsdWUuc3ZnYDtcbiAgICBpZiAoKF90aGlzJHdoaXRlTGFiZWwgPSB0aGlzLndoaXRlTGFiZWwpICE9PSBudWxsICYmIF90aGlzJHdoaXRlTGFiZWwgIT09IHZvaWQgMCAmJiAoX3RoaXMkd2hpdGVMYWJlbCA9IF90aGlzJHdoaXRlTGFiZWwudGhlbWUpICE9PSBudWxsICYmIF90aGlzJHdoaXRlTGFiZWwgIT09IHZvaWQgMCAmJiBfdGhpcyR3aGl0ZUxhYmVsLmlzRGFyaykge1xuICAgICAgdmFyIF90aGlzJHdoaXRlTGFiZWwyO1xuICAgICAgbG9nb1VybCA9ICgoX3RoaXMkd2hpdGVMYWJlbDIgPSB0aGlzLndoaXRlTGFiZWwpID09PSBudWxsIHx8IF90aGlzJHdoaXRlTGFiZWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyR3aGl0ZUxhYmVsMi5sb2dvTGlnaHQpIHx8IGxvZ29Vcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfdGhpcyR3aGl0ZUxhYmVsMztcbiAgICAgIGxvZ29VcmwgPSAoKF90aGlzJHdoaXRlTGFiZWwzID0gdGhpcy53aGl0ZUxhYmVsKSA9PT0gbnVsbCB8fCBfdGhpcyR3aGl0ZUxhYmVsMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkd2hpdGVMYWJlbDMubG9nb0RhcmspIHx8IGxvZ29Vcmw7XG4gICAgfVxuICAgIHJldHVybiBsb2dvVXJsO1xuICB9XG4gIF9zZW5kV2lkZ2V0VmlzaWJpbGl0eVN0YXR1cyhzdGF0dXMpIHtcbiAgICBjb25zdCB0b3J1c1dpZGdldFZpc2liaWxpdHlTdHJlYW0gPSB0aGlzLmNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwidG9ydXMtd2lkZ2V0LXZpc2liaWxpdHlcIik7XG4gICAgdG9ydXNXaWRnZXRWaXNpYmlsaXR5U3RyZWFtLndyaXRlKHtcbiAgICAgIGRhdGE6IHN0YXR1c1xuICAgIH0pO1xuICB9XG4gIF9kaXNwbGF5SWZyYW1lKCkge1xuICAgIGxldCBpc0Z1bGwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIGNvbnN0IHN0eWxlID0ge307XG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuYnV0dG9uU2l6ZSArIDE0OyAvLyAxNXB4IHBhZGRpbmdcbiAgICAvLyBzZXQgcGhhc2VcbiAgICBpZiAoIWlzRnVsbCkge1xuICAgICAgc3R5bGUuZGlzcGxheSA9IHRoaXMudG9ydXNXaWRnZXRWaXNpYmlsaXR5ID8gXCJibG9ja1wiIDogXCJub25lXCI7XG4gICAgICBzdHlsZS5oZWlnaHQgPSBgJHtzaXplfXB4YDtcbiAgICAgIHN0eWxlLndpZHRoID0gYCR7c2l6ZX1weGA7XG4gICAgICBzd2l0Y2ggKHRoaXMuYnV0dG9uUG9zaXRpb24pIHtcbiAgICAgICAgY2FzZSBCVVRUT05fUE9TSVRJT04uVE9QX0xFRlQ6XG4gICAgICAgICAgc3R5bGUudG9wID0gXCIwcHhcIjtcbiAgICAgICAgICBzdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgICAgICBzdHlsZS5yaWdodCA9IFwiYXV0b1wiO1xuICAgICAgICAgIHN0eWxlLmJvdHRvbSA9IFwiYXV0b1wiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJVVFRPTl9QT1NJVElPTi5UT1BfUklHSFQ6XG4gICAgICAgICAgc3R5bGUudG9wID0gXCIwcHhcIjtcbiAgICAgICAgICBzdHlsZS5yaWdodCA9IFwiMHB4XCI7XG4gICAgICAgICAgc3R5bGUubGVmdCA9IFwiYXV0b1wiO1xuICAgICAgICAgIHN0eWxlLmJvdHRvbSA9IFwiYXV0b1wiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJVVFRPTl9QT1NJVElPTi5CT1RUT01fUklHSFQ6XG4gICAgICAgICAgc3R5bGUuYm90dG9tID0gXCIwcHhcIjtcbiAgICAgICAgICBzdHlsZS5yaWdodCA9IFwiMHB4XCI7XG4gICAgICAgICAgc3R5bGUudG9wID0gXCJhdXRvXCI7XG4gICAgICAgICAgc3R5bGUubGVmdCA9IFwiYXV0b1wiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJVVFRPTl9QT1NJVElPTi5CT1RUT01fTEVGVDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBzdHlsZS5ib3R0b20gPSBcIjBweFwiO1xuICAgICAgICAgIHN0eWxlLmxlZnQgPSBcIjBweFwiO1xuICAgICAgICAgIHN0eWxlLnRvcCA9IFwiYXV0b1wiO1xuICAgICAgICAgIHN0eWxlLnJpZ2h0ID0gXCJhdXRvXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICBzdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICBzdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgc3R5bGUucmlnaHQgPSBcIjBweFwiO1xuICAgICAgc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgICBzdHlsZS5ib3R0b20gPSBcIjBweFwiO1xuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHRoaXMudG9ydXNJZnJhbWUuc3R5bGUsIHN0eWxlKTtcbiAgICB0aGlzLmlzSWZyYW1lRnVsbFNjcmVlbiA9IGlzRnVsbDtcbiAgfVxuICBfc2V0dXBXZWIzKCkge1xuICAgIGxvZy5pbmZvKFwic2V0dXBXZWIzIHJ1bm5pbmdcIik7XG4gICAgLy8gc2V0dXAgYmFja2dyb3VuZCBjb25uZWN0aW9uXG4gICAgY29uc3QgbWV0YW1hc2tTdHJlYW0gPSBuZXcgQmFzZVBvc3RNZXNzYWdlU3RyZWFtKHtcbiAgICAgIG5hbWU6IFwiZW1iZWRfbWV0YW1hc2tcIixcbiAgICAgIHRhcmdldDogXCJpZnJhbWVfbWV0YW1hc2tcIixcbiAgICAgIHRhcmdldFdpbmRvdzogdGhpcy50b3J1c0lmcmFtZS5jb250ZW50V2luZG93LFxuICAgICAgdGFyZ2V0T3JpZ2luOiBuZXcgVVJMKHRoaXMudG9ydXNVcmwpLm9yaWdpblxuICAgIH0pO1xuXG4gICAgLy8gRHVlIHRvIGNvbXBhdGliaWxpdHkgcmVhc29ucywgd2Ugc2hvdWxkIG5vdCBzZXQgdXAgbXVsdGlwbGV4aW5nIG9uIHdpbmRvdy5tZXRhbWFza3N0cmVhbVxuICAgIC8vIGJlY2F1c2UgdGhlIE1ldGFtYXNrSW5wYWdlUHJvdmlkZXIgYWxzbyBhdHRlbXB0cyB0byBkbyBzby5cbiAgICAvLyBXZSBjcmVhdGUgYW5vdGhlciBMb2NhbE1lc3NhZ2VEdXBsZXhTdHJlYW0gZm9yIGNvbW11bmljYXRpb24gYmV0d2VlbiBkYXBwIDw+IGlmcmFtZVxuICAgIGNvbnN0IGNvbW11bmljYXRpb25TdHJlYW0gPSBuZXcgQmFzZVBvc3RNZXNzYWdlU3RyZWFtKHtcbiAgICAgIG5hbWU6IFwiZW1iZWRfY29tbVwiLFxuICAgICAgdGFyZ2V0OiBcImlmcmFtZV9jb21tXCIsXG4gICAgICB0YXJnZXRXaW5kb3c6IHRoaXMudG9ydXNJZnJhbWUuY29udGVudFdpbmRvdyxcbiAgICAgIHRhcmdldE9yaWdpbjogbmV3IFVSTCh0aGlzLnRvcnVzVXJsKS5vcmlnaW5cbiAgICB9KTtcblxuICAgIC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBHb3RjaGkgOilcbiAgICAvLyB3aW5kb3cubWV0YW1hc2tTdHJlYW0gPSB0aGlzLmNvbW11bmljYXRpb25TdHJlYW1cblxuICAgIC8vIGNvbXBvc2UgdGhlIGlucGFnZSBwcm92aWRlclxuICAgIGNvbnN0IGlucGFnZVByb3ZpZGVyID0gbmV3IFRvcnVzSW5wYWdlUHJvdmlkZXIobWV0YW1hc2tTdHJlYW0pO1xuXG4gICAgLy8gZGV0ZWN0IGV0aF9yZXF1ZXN0QWNjb3VudHMgYW5kIHBpcGUgdG8gZW5hYmxlIGZvciBub3dcbiAgICBjb25zdCBkZXRlY3RBY2NvdW50UmVxdWVzdFByb3RvdHlwZU1vZGlmaWVyID0gbSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGlucGFnZVByb3ZpZGVyW21dO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaW5wYWdlUHJvdmlkZXJbbV0gPSBmdW5jdGlvbiBwcm92aWRlckZ1bmMobWV0aG9kKSB7XG4gICAgICAgIGlmIChtZXRob2QgJiYgbWV0aG9kID09PSBcImV0aF9yZXF1ZXN0QWNjb3VudHNcIikge1xuICAgICAgICAgIHJldHVybiBpbnBhZ2VQcm92aWRlci5lbmFibGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIFttZXRob2QsIC4uLmFyZ3NdKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICBkZXRlY3RBY2NvdW50UmVxdWVzdFByb3RvdHlwZU1vZGlmaWVyKFwic2VuZFwiKTtcbiAgICBkZXRlY3RBY2NvdW50UmVxdWVzdFByb3RvdHlwZU1vZGlmaWVyKFwic2VuZEFzeW5jXCIpO1xuICAgIGlucGFnZVByb3ZpZGVyLmVuYWJsZSA9ICgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIC8vIElmIHVzZXIgaXMgYWxyZWFkeSBsb2dnZWQgaW4sIHdlIGFzc3VtZSB0aGV5IGhhdmUgZ2l2ZW4gYWNjZXNzIHRvIHRoZSB3ZWJzaXRlXG4gICAgICAgIGlucGFnZVByb3ZpZGVyLnNlbmRBc3luYyh7XG4gICAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgICBpZDogZ2V0UHJlb3Blbkluc3RhbmNlSWQoKSxcbiAgICAgICAgICBtZXRob2Q6IFwiZXRoX3JlcXVlc3RBY2NvdW50c1wiLFxuICAgICAgICAgIHBhcmFtczogW11cbiAgICAgICAgfSwgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICByZXN1bHQ6IHJlc1xuICAgICAgICAgIH0gPSByZXNwb25zZSB8fCB7fTtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlcykgJiYgcmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIElmIHVzZXIgaXMgYWxyZWFkeSByZWh5ZHJhdGVkLCByZXNvbHZlIHRoaXNcbiAgICAgICAgICAgIC8vIGVsc2Ugd2FpdCBmb3Igc29tZXRoaW5nIHRvIGJlIHdyaXR0ZW4gdG8gc3RhdHVzIHN0cmVhbVxuICAgICAgICAgICAgY29uc3QgaGFuZGxlTG9naW5DYiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMucmVxdWVzdGVkVmVyaWZpZXIgIT09IFwiXCIgJiYgdGhpcy5jdXJyZW50VmVyaWZpZXIgIT09IHRoaXMucmVxdWVzdGVkVmVyaWZpZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRWZXJpZmllclxuICAgICAgICAgICAgICAgIH0gPSB0aGlzO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL25vLXByb21pc2UtaW4tY2FsbGJhY2tcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ291dCgpXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2UvYWx3YXlzLXJldHVyblxuICAgICAgICAgICAgICAgIC50aGVuKF8gPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ZWRWZXJpZmllciA9IHJlcXVlc3RlZFZlcmlmaWVyO1xuICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvd0xvZ2luUG9wdXAodHJ1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiByZWplY3QoZXJyb3IpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpcy5pc0xvZ2dlZEluKSB7XG4gICAgICAgICAgICAgIGhhbmRsZUxvZ2luQ2IoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuaXNMb2dpbkNhbGxiYWNrID0gaGFuZGxlTG9naW5DYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2V0IHVwIGxpc3RlbmVyIGZvciBsb2dpblxuICAgICAgICAgICAgdGhpcy5fc2hvd0xvZ2luUG9wdXAodHJ1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBpbnBhZ2VQcm92aWRlci50cnlQcmVvcGVuSGFuZGxlID0gKHBheWxvYWQsIGNiKSA9PiB7XG4gICAgICBjb25zdCBfcGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoX3BheWxvYWQpICYmIFVOU0FGRV9NRVRIT0RTLmluY2x1ZGVzKF9wYXlsb2FkLm1ldGhvZCkpIHtcbiAgICAgICAgY29uc3QgcHJlb3Blbkluc3RhbmNlSWQgPSBnZXRQcmVvcGVuSW5zdGFuY2VJZCgpO1xuICAgICAgICB0aGlzLl9oYW5kbGVXaW5kb3cocHJlb3Blbkluc3RhbmNlSWQsIHtcbiAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgZmVhdHVyZXM6IEZFQVRVUkVTX0NPTkZJUk1fV0lORE9XXG4gICAgICAgIH0pO1xuICAgICAgICBfcGF5bG9hZC5wcmVvcGVuSW5zdGFuY2VJZCA9IHByZW9wZW5JbnN0YW5jZUlkO1xuICAgICAgfVxuICAgICAgaW5wYWdlUHJvdmlkZXIuX3JwY0VuZ2luZS5oYW5kbGUoX3BheWxvYWQsIGNiKTtcbiAgICB9O1xuXG4gICAgLy8gV29yayBhcm91bmQgZm9yIHdlYjNAMS4wIGRlbGV0aW5nIHRoZSBib3VuZCBgc2VuZEFzeW5jYCBidXQgbm90IHRoZSB1bmJvdW5kXG4gICAgLy8gYHNlbmRBc3luY2AgbWV0aG9kIG9uIHRoZSBwcm90b3R5cGUsIGNhdXNpbmcgYHRoaXNgIHJlZmVyZW5jZSBpc3N1ZXMgd2l0aCBkcml6emxlXG4gICAgY29uc3QgcHJveGllZElucGFnZVByb3ZpZGVyID0gbmV3IFByb3h5KGlucGFnZVByb3ZpZGVyLCB7XG4gICAgICAvLyBzdHJhaWdodCB1cCBsaWUgdGhhdCB3ZSBkZWxldGVkIHRoZSBwcm9wZXJ0eSBzbyB0aGF0IGl0IGRvZXNudFxuICAgICAgLy8gdGhyb3cgYW4gZXJyb3IgaW4gc3RyaWN0IG1vZGVcbiAgICAgIGRlbGV0ZVByb3BlcnR5OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5ldGhlcmV1bSA9IHByb3hpZWRJbnBhZ2VQcm92aWRlcjtcbiAgICBjb25zdCBjb21tdW5pY2F0aW9uTXV4ID0gc2V0dXBNdWx0aXBsZXgoY29tbXVuaWNhdGlvblN0cmVhbSk7XG4gICAgdGhpcy5jb21tdW5pY2F0aW9uTXV4ID0gY29tbXVuaWNhdGlvbk11eDtcbiAgICBjb25zdCB3aW5kb3dTdHJlYW0gPSBjb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcIndpbmRvd1wiKTtcbiAgICB3aW5kb3dTdHJlYW0ub24oXCJkYXRhXCIsIGNodW5rID0+IHtcbiAgICAgIGlmIChjaHVuay5uYW1lID09PSBcImNyZWF0ZV93aW5kb3dcIikge1xuICAgICAgICAvLyB1cmwgaXMgdGhlIHVybCB3ZSBuZWVkIHRvIG9wZW5cbiAgICAgICAgLy8gd2UgY2FuIHBhc3MgdGhlIGZpbmFsIHVybCB1cGZyb250IHNvIHRoYXQgaXQgcmVtb3ZlcyB0aGUgc3RlcCBvZiByZWRpcmVjdGluZyB0byAvcmVkaXJlY3QgYW5kIHdhaXRpbmcgZm9yIGZpbmFsVXJsXG4gICAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwQmxvY2tBbGVydChjaHVuay5kYXRhLnByZW9wZW5JbnN0YW5jZUlkLCBjaHVuay5kYXRhLnVybCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBzaG93IHRvcnVzIHdpZGdldCBpZiBidXR0b24gY2xpY2tlZFxuICAgIGNvbnN0IHdpZGdldFN0cmVhbSA9IGNvbW11bmljYXRpb25NdXguZ2V0U3RyZWFtKFwid2lkZ2V0XCIpO1xuICAgIHdpZGdldFN0cmVhbS5vbihcImRhdGFcIiwgY2h1bmsgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBkYXRhXG4gICAgICB9ID0gY2h1bms7XG4gICAgICB0aGlzLl9kaXNwbGF5SWZyYW1lKGRhdGEpO1xuICAgIH0pO1xuXG4gICAgLy8gU2hvdyB0b3J1cyBidXR0b24gaWYgd2FsbGV0IGhhcyBiZWVuIGh5ZHJhdGVkL2RldGVjdGVkXG4gICAgY29uc3Qgc3RhdHVzU3RyZWFtID0gY29tbXVuaWNhdGlvbk11eC5nZXRTdHJlYW0oXCJzdGF0dXNcIik7XG4gICAgc3RhdHVzU3RyZWFtLm9uKFwiZGF0YVwiLCBzdGF0dXMgPT4ge1xuICAgICAgLy8gbG9naW5cbiAgICAgIGlmIChzdGF0dXMubG9nZ2VkSW4pIHtcbiAgICAgICAgdGhpcy5pc0xvZ2dlZEluID0gc3RhdHVzLmxvZ2dlZEluO1xuICAgICAgICB0aGlzLmN1cnJlbnRWZXJpZmllciA9IHN0YXR1cy52ZXJpZmllcjtcbiAgICAgIH0gLy8gbG9nb3V0XG4gICAgICBlbHNlIHRoaXMuX2Rpc3BsYXlJZnJhbWUoKTtcbiAgICAgIGlmICh0aGlzLmlzTG9naW5DYWxsYmFjaykge1xuICAgICAgICB0aGlzLmlzTG9naW5DYWxsYmFjaygpO1xuICAgICAgICBkZWxldGUgdGhpcy5pc0xvZ2luQ2FsbGJhY2s7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5wcm92aWRlciA9IHByb3hpZWRJbnBhZ2VQcm92aWRlcjtcbiAgICBpZiAodGhpcy5wcm92aWRlci5zaG91bGRTZW5kTWV0YWRhdGEpIHNlbmRTaXRlTWV0YWRhdGEodGhpcy5wcm92aWRlci5fcnBjRW5naW5lKTtcbiAgICBpbnBhZ2VQcm92aWRlci5faW5pdGlhbGl6ZVN0YXRlKCk7XG4gICAgbG9nLmRlYnVnKFwiVG9ydXMgLSBpbmplY3RlZCBwcm92aWRlclwiKTtcbiAgfVxuICBfc2hvd0xvZ2luUG9wdXAoY2FsbGVkRnJvbUVtYmVkLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBsb2dpbkhhbmRsZXIgPSBhcmcgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGFyZztcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZXJyLFxuICAgICAgICBzZWxlY3RlZEFkZHJlc3NcbiAgICAgIH0gPSBkYXRhO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBsb2cuZXJyb3IoZXJyKTtcbiAgICAgICAgaWYgKHJlamVjdCkgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm5zIGFuIGFycmF5IChjYXVzZSBhY2NvdW50cyBleHBlY3RzIGl0KVxuICAgICAgZWxzZSBpZiAocmVzb2x2ZSkgcmVzb2x2ZShbc2VsZWN0ZWRBZGRyZXNzXSk7XG4gICAgICBpZiAodGhpcy5pc0lmcmFtZUZ1bGxTY3JlZW4pIHRoaXMuX2Rpc3BsYXlJZnJhbWUoKTtcbiAgICB9O1xuICAgIGNvbnN0IG9hdXRoU3RyZWFtID0gdGhpcy5jb21tdW5pY2F0aW9uTXV4LmdldFN0cmVhbShcIm9hdXRoXCIpO1xuICAgIGlmICghdGhpcy5yZXF1ZXN0ZWRWZXJpZmllcikge1xuICAgICAgdGhpcy5fZGlzcGxheUlmcmFtZSh0cnVlKTtcbiAgICAgIGhhbmRsZVN0cmVhbShvYXV0aFN0cmVhbSwgXCJkYXRhXCIsIGxvZ2luSGFuZGxlcik7XG4gICAgICBvYXV0aFN0cmVhbS53cml0ZSh7XG4gICAgICAgIG5hbWU6IFwib2F1dGhfbW9kYWxcIixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGNhbGxlZEZyb21FbWJlZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlU3RyZWFtKG9hdXRoU3RyZWFtLCBcImRhdGFcIiwgbG9naW5IYW5kbGVyKTtcbiAgICAgIGNvbnN0IHByZW9wZW5JbnN0YW5jZUlkID0gZ2V0UHJlb3Blbkluc3RhbmNlSWQoKTtcbiAgICAgIHRoaXMuX2hhbmRsZVdpbmRvdyhwcmVvcGVuSW5zdGFuY2VJZCk7XG4gICAgICBvYXV0aFN0cmVhbS53cml0ZSh7XG4gICAgICAgIG5hbWU6IFwib2F1dGhcIixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGNhbGxlZEZyb21FbWJlZCxcbiAgICAgICAgICB2ZXJpZmllcjogdGhpcy5yZXF1ZXN0ZWRWZXJpZmllcixcbiAgICAgICAgICBwcmVvcGVuSW5zdGFuY2VJZCxcbiAgICAgICAgICBsb2dpbl9oaW50OiB0aGlzLmxvZ2luSGludFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgX2NyZWF0ZVBvcHVwQmxvY2tBbGVydChwcmVvcGVuSW5zdGFuY2VJZCwgdXJsKSB7XG4gICAgY29uc3QgbG9nb1VybCA9IHRoaXMuX2dldExvZ29VcmwoKTtcbiAgICBjb25zdCB0b3J1c0FsZXJ0ID0gaHRtbFRvRWxlbWVudCgnPGRpdiBpZD1cInRvcnVzQWxlcnRcIiBjbGFzcz1cInRvcnVzLWFsZXJ0LS12MlwiPicgKyBgPGRpdiBpZD1cInRvcnVzQWxlcnRfX2xvZ29cIj48aW1nIHNyYz1cIiR7bG9nb1VybH1cIiAvPjwvZGl2PmAgKyBcIjxkaXY+XCIgKyBgPGgxIGlkPVwidG9ydXNBbGVydF9fdGl0bGVcIj4ke3RoaXMuZW1iZWRUcmFuc2xhdGlvbnMuYWN0aW9uUmVxdWlyZWR9PC9oMT5gICsgYDxwIGlkPVwidG9ydXNBbGVydF9fZGVzY1wiPiR7dGhpcy5lbWJlZFRyYW5zbGF0aW9ucy5wZW5kaW5nQWN0aW9ufTwvcD5gICsgXCI8L2Rpdj5cIiArIFwiPC9kaXY+XCIpO1xuICAgIGNvbnN0IHN1Y2Nlc3NBbGVydCA9IGh0bWxUb0VsZW1lbnQoYDxkaXY+PGEgaWQ9XCJ0b3J1c0FsZXJ0X19idG5cIj4ke3RoaXMuZW1iZWRUcmFuc2xhdGlvbnMuY29udGludWV9PC9hPjwvZGl2PmApO1xuICAgIGNvbnN0IGJ0bkNvbnRhaW5lciA9IGh0bWxUb0VsZW1lbnQoJzxkaXYgaWQ9XCJ0b3J1c0FsZXJ0X19idG4tY29udGFpbmVyXCI+PC9kaXY+Jyk7XG4gICAgYnRuQ29udGFpbmVyLmFwcGVuZENoaWxkKHN1Y2Nlc3NBbGVydCk7XG4gICAgdG9ydXNBbGVydC5hcHBlbmRDaGlsZChidG5Db250YWluZXIpO1xuICAgIHRoaXMuX3NldEVtYmVkV2hpdGVMYWJlbCh0b3J1c0FsZXJ0KTtcbiAgICB0aGlzLnRvcnVzQWxlcnRDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICB0aGlzLnRvcnVzQWxlcnRDb250YWluZXIuYXBwZW5kQ2hpbGQodG9ydXNBbGVydCk7XG4gICAgc3VjY2Vzc0FsZXJ0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVXaW5kb3cocHJlb3Blbkluc3RhbmNlSWQsIHtcbiAgICAgICAgdXJsLFxuICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCIsXG4gICAgICAgIGZlYXR1cmVzOiBGRUFUVVJFU19DT05GSVJNX1dJTkRPV1xuICAgICAgfSk7XG4gICAgICB0b3J1c0FsZXJ0LnJlbW92ZSgpO1xuICAgICAgaWYgKHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGggPT09IDApIHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgQlVUVE9OX1BPU0lUSU9OLCBQQVlNRU5UX1BST1ZJREVSLCBTVVBQT1JURURfUEFZTUVOVF9ORVRXT1JLLCBUT1JVU19CVUlMRF9FTlYsIFRvcnVzSW5wYWdlUHJvdmlkZXIsIFdBTExFVF9PUEVOTE9HSU5fVkVSSUZJRVJfTUFQLCBXQUxMRVRfVkVSSUZJRVJTLCBUb3J1cyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b3J1cy5lc20uanMubWFwXG4iXSwibmFtZXMiOlsiX29iamVjdFNwcmVhZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldCIsInNldEFQSUtleSIsIlNhZmVFdmVudEVtaXR0ZXIiLCJPYmplY3RNdWx0aXBsZXgiLCJjcmVhdGVTdHJlYW1NaWRkbGV3YXJlIiwiSlJQQ0VuZ2luZSIsImNyZWF0ZUlkUmVtYXBNaWRkbGV3YXJlIiwiQmFzZVBvc3RNZXNzYWdlU3RyZWFtIiwic2V0dXBNdWx0aXBsZXgiLCJkZWVwbWVyZ2UiLCJycGNFcnJvcnMiLCJFdGhlcmV1bVByb3ZpZGVyRXJyb3IiLCJkZXF1YWwiLCJwdW1wIiwibG9nbGV2ZWwiLCJXQUxMRVRfVkVSSUZJRVJTIiwiR09PR0xFIiwiRkFDRUJPT0siLCJUV0lUQ0giLCJSRURESVQiLCJESVNDT1JEIiwiRU1BSUxfUEFTU1dPUkRMRVNTIiwiV0FMTEVUX09QRU5MT0dJTl9WRVJJRklFUl9NQVAiLCJQQVlNRU5UX1BST1ZJREVSIiwiTU9PTlBBWSIsIldZUkUiLCJSQU1QTkVUV09SSyIsIlhBTlBPT0wiLCJNRVJDVVJZTyIsIlRSQU5TQUsiLCJCQU5YQSIsIlNVUFBPUlRFRF9QQVlNRU5UX05FVFdPUksiLCJNQUlOTkVUIiwiTUFUSUMiLCJCU0NfTUFJTk5FVCIsIkFWQUxBTkNIRV9NQUlOTkVUIiwiWERBSSIsIkFSQklUUlVNX01BSU5ORVQiLCJPUFRJTUlTTV9NQUlOTkVUIiwiVE9SVVNfQlVJTERfRU5WIiwiUFJPRFVDVElPTiIsIkRFVkVMT1BNRU5UIiwiQklOQU5DRSIsIlRFU1RJTkciLCJMUkMiLCJCRVRBIiwiQk5CIiwiUE9MWUdPTiIsIkFMUEhBIiwiQlVUVE9OX1BPU0lUSU9OIiwiQk9UVE9NX0xFRlQiLCJUT1BfTEVGVCIsIkJPVFRPTV9SSUdIVCIsIlRPUF9SSUdIVCIsIkNSWVBUT19DT01QQVJFX0NVUlJFTkNJRVMiLCJQUk9WSURFUl9TVVBQT1JURURfRklBVF9DVVJSRU5DSUVTIiwiY3J5cHRvQ29tcGFyZUN1cnJlbmNpZXNTZXQiLCJTZXQiLCJzdXBwb3J0ZWRGaWF0Q3VycmVuY2llcyIsInByb3ZpZGVyIiwicHJvdmlkZXJTdXBwb3J0ZWRGaWF0Q3VycmVuY2llcyIsImZpbHRlciIsImN1cnJlbmN5IiwiaGFzIiwicGF5bWVudFByb3ZpZGVycyQxIiwibGluZTEiLCJsaW5lMiIsImxpbmUzIiwic3VwcG9ydFBhZ2UiLCJtaW5PcmRlclZhbHVlIiwibWF4T3JkZXJWYWx1ZSIsInZhbGlkQ3VycmVuY2llcyIsInZhbGlkQ3J5cHRvQ3VycmVuY2llc0J5Q2hhaW4iLCJ2YWx1ZSIsImRpc3BsYXkiLCJpbmNsdWRlRmVlcyIsImFwaSIsImVuZm9yY2VNYXgiLCJyZWNlaXZlSGludCIsInNlbGwiLCJ0cmFuc2xhdGlvbnMiLCJlbiIsImVtYmVkIiwiY29udGludWUiLCJhY3Rpb25SZXF1aXJlZCIsInBlbmRpbmdBY3Rpb24iLCJjb29raWVzUmVxdWlyZWQiLCJlbmFibGVDb29raWVzIiwiY2xpY2tIZXJlIiwiZGUiLCJqYSIsImtvIiwiemgiLCJjb25maWd1cmF0aW9uIiwic3VwcG9ydGVkVmVyaWZpZXJMaXN0IiwiT2JqZWN0IiwidmFsdWVzIiwicGF5bWVudFByb3ZpZGVycyIsInByb2RUb3J1c1VybCIsImxvY2FsU3RvcmFnZUtleVByZWZpeCIsImh0bWxUb0VsZW1lbnQiLCJodG1sIiwidGVtcGxhdGUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0cmltbWVkSHRtbCIsInRyaW0iLCJpbm5lckhUTUwiLCJjb250ZW50IiwiZmlyc3RDaGlsZCIsImhhbmRsZVN0cmVhbSIsImhhbmRsZSIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJoYW5kbGVyV3JhcHBlciIsImNodW5rIiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsImlzU3RyZWFtIiwic3RyZWFtIiwicGlwZSIsImlzV3JpdGFibGVTdHJlYW0iLCJ3cml0YWJsZSIsIl93cml0ZSIsIl93cml0YWJsZVN0YXRlIiwiaXNSZWFkYWJsZVN0cmVhbSIsInJlYWRhYmxlIiwiX3JlYWQiLCJfcmVhZGFibGVTdGF0ZSIsImlzRHVwbGV4U3RyZWFtIiwibG9nIiwiZ2V0TG9nZ2VyIiwibWVzc2FnZXMiLCJlcnJvcnMiLCJkaXNjb25uZWN0ZWQiLCJwZXJtYW5lbnRseURpc2Nvbm5lY3RlZCIsInNlbmRTaXRlTWV0YWRhdGEiLCJ1bnN1cHBvcnRlZFN5bmMiLCJtZXRob2QiLCJpbnZhbGlkRHVwbGV4U3RyZWFtIiwiaW52YWxpZE9wdGlvbnMiLCJtYXhFdmVudExpc3RlbmVycyIsInNob3VsZFNlbmRNZXRhZGF0YSIsImludmFsaWRSZXF1ZXN0QXJncyIsImludmFsaWRSZXF1ZXN0TWV0aG9kIiwiaW52YWxpZFJlcXVlc3RQYXJhbXMiLCJpbnZhbGlkTG9nZ2VyT2JqZWN0IiwiaW52YWxpZExvZ2dlck1ldGhvZCIsImluZm8iLCJjb25uZWN0ZWQiLCJjaGFpbklkIiwid2FybmluZ3MiLCJlbmFibGVEZXByZWNhdGlvbiIsInNlbmREZXByZWNhdGlvbiIsInZhbGlkYXRlUGF5bWVudFByb3ZpZGVyIiwicGFyYW1zIiwiaXNWYWxpZCIsImtleXMiLCJsZW5ndGgiLCJzZWxlY3RlZFByb3ZpZGVyIiwic2VsZWN0ZWRQYXJhbXMiLCJmaWF0VmFsdWUiLCJyZXF1ZXN0ZWRPcmRlckFtb3VudCIsInBhcnNlRmxvYXQiLCJ0b1N0cmluZyIsInNlbGVjdGVkQ3VycmVuY3kiLCJpbmNsdWRlcyIsInNlbGVjdGVkQ3J5cHRvQ3VycmVuY3kiLCJmbGF0IiwibWFwIiwiZmluYWxDcnlwdG9DdXJyZW5jeSIsInRvTG93ZXJDYXNlIiwiY3JlYXRlRXJyb3JNaWRkbGV3YXJlIiwicmVxIiwicmVzIiwibmV4dCIsImVycm9yIiwiaW52YWxpZFJlcXVlc3QiLCJtZXNzYWdlIiwiZGF0YSIsImNhdXNlIiwiZG9uZSIsImxvZ1N0cmVhbURpc2Nvbm5lY3RXYXJuaW5nIiwicmVtb3RlTGFiZWwiLCJlbWl0dGVyIiwid2FybmluZ01zZyIsInN0YWNrIiwid2FybiIsImxpc3RlbmVyQ291bnQiLCJlbWl0IiwiZ2V0UHJlb3Blbkluc3RhbmNlSWQiLCJNYXRoIiwicmFuZG9tIiwic2xpY2UiLCJnZXRUb3J1c1VybCIsImJ1aWxkRW52IiwiaW50ZWdyaXR5IiwidG9ydXNVcmwiLCJsb2dMZXZlbCIsInZlcnNpb24iLCJ2ZXJzaW9uVXNlZCIsInJlc3BvbnNlIiwidXNlQVBJS2V5IiwiZ2V0VXNlckxhbmd1YWdlIiwidXNlckxhbmd1YWdlIiwibmF2aWdhdG9yIiwibGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2VzIiwic3BsaXQiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJFTUlUVEVEX05PVElGSUNBVElPTlMiLCJOT09QIiwiRkVBVFVSRVNfUFJPVklERVJfQ0hBTkdFX1dJTkRPVyIsIkZFQVRVUkVTX0RFRkFVTFRfV0FMTEVUX1dJTkRPVyIsIkZFQVRVUkVTX0NPTkZJUk1fV0lORE9XIiwiZ2V0UG9wdXBGZWF0dXJlcyIsImR1YWxTY3JlZW5MZWZ0Iiwic2NyZWVuTGVmdCIsInVuZGVmaW5lZCIsInNjcmVlblgiLCJkdWFsU2NyZWVuVG9wIiwic2NyZWVuVG9wIiwic2NyZWVuWSIsInciLCJoIiwid2lkdGgiLCJpbm5lcldpZHRoIiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJzY3JlZW4iLCJoZWlnaHQiLCJpbm5lckhlaWdodCIsImNsaWVudEhlaWdodCIsInN5c3RlbVpvb20iLCJsZWZ0IiwiYWJzIiwidG9wIiwiZmVhdHVyZXMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiZ2V0UnBjUHJvbWlzZUNhbGxiYWNrIiwicmVzb2x2ZSIsInJlamVjdCIsInVud3JhcFJlc3VsdCIsImFyZ3VtZW50cyIsIkFycmF5IiwiaXNBcnJheSIsInJlc3VsdCIsIlRvcnVzSW5wYWdlUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsImNvbm5lY3Rpb25TdHJlYW0iLCJqc29uUnBjU3RyZWFtTmFtZSIsIkVycm9yIiwiaXNUb3J1cyIsInNldE1heExpc3RlbmVycyIsIl9zdGF0ZSIsIl9kZWZhdWx0U3RhdGUiLCJzZWxlY3RlZEFkZHJlc3MiLCJuZXR3b3JrVmVyc2lvbiIsIl9oYW5kbGVBY2NvdW50c0NoYW5nZWQiLCJiaW5kIiwiX2hhbmRsZUNoYWluQ2hhbmdlZCIsIl9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQiLCJfaGFuZGxlQ29ubmVjdCIsIl9oYW5kbGVEaXNjb25uZWN0IiwiX2hhbmRsZVN0cmVhbURpc2Nvbm5lY3QiLCJfc2VuZFN5bmMiLCJfcnBjUmVxdWVzdCIsIl9pbml0aWFsaXplU3RhdGUiLCJyZXF1ZXN0Iiwic2VuZCIsInNlbmRBc3luYyIsIm11eCIsImlnbm9yZVN0cmVhbSIsImlzQ29ubmVjdGVkIiwianNvblJwY0Nvbm5lY3Rpb24iLCJjcmVhdGVTdHJlYW0iLCJycGNFbmdpbmUiLCJwdXNoIiwibWlkZGxld2FyZSIsIl9ycGNFbmdpbmUiLCJldmVudHMiLCJwYXlsb2FkIiwidHlwZSIsImFyZ3MiLCJQcm9taXNlIiwiY2FsbGJhY2siLCJhY2NvdW50cyIsImlzVW5sb2NrZWQiLCJpbml0aWFsaXplZCIsImlzSW50ZXJuYWwiLCJjYiIsIl9wYXlsb2FkIiwianNvbnJwYyIsImVyciIsInRyeVByZW9wZW5IYW5kbGUiLCJtZXRob2RPclBheWxvYWQiLCJjYWxsYmFja09yQXJncyIsImlkIiwiZGVidWciLCJpc1JlY292ZXJhYmxlIiwiZXJyb3JNZXNzYWdlIiwiaXNQZXJtYW5lbnRseURpc2Nvbm5lY3RlZCIsInN0cmVhbU5hbWUiLCJpc0V0aEFjY291bnRzIiwiZmluYWxBY2NvdW50cyIsImFjY291bnQiLCJoYXNFbWl0dGVkQ29ubmVjdGlvbiIsIlBvcHVwSGFuZGxlciIsIl9yZWYiLCJ1cmwiLCJ0YXJnZXQiLCJ0aW1lb3V0Iiwid2luZG93VGltZXIiLCJpQ2xvc2VkV2luZG93IiwiX3NldHVwVGltZXIiLCJOdW1iZXIiLCJzZXRJbnRlcnZhbCIsImNsb3NlZCIsImNsZWFySW50ZXJ2YWwiLCJzZXRUaW1lb3V0Iiwib3BlbiIsIl90aGlzJHdpbmRvdyIsImhyZWYiLCJmb2N1cyIsImNsb3NlIiwicmVkaXJlY3QiLCJsb2NhdGlvblJlcGxhY2VPblJlZGlyZWN0IiwibG9jYXRpb24iLCJyZXBsYWNlIiwiaW1nRXhpc3RzIiwiaW1nIiwib25sb2FkIiwib25lcnJvciIsInNyYyIsImUiLCJnZXRTaXRlTmFtZSIsInNpdGVOYW1lIiwicXVlcnlTZWxlY3RvciIsIm1ldGFUaXRsZSIsInRpdGxlIiwiaG9zdG5hbWUiLCJnZXRTaXRlSWNvbiIsImljb24iLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImZpbmQiLCJfaWNvbiIsIkJvb2xlYW4iLCJnZXRTaXRlTWV0YWRhdGEiLCJuYW1lIiwiZW5naW5lIiwiZG9tYWluTWV0YWRhdGEiLCJvcmlnaW5hbEVycm9yIiwiX2V4Y2x1ZGVkIiwiVU5TQUZFX01FVEhPRFMiLCJwcmVMb2FkSWZyYW1lIiwidG9ydXNJZnJhbWVIdG1sIiwiY3Jvc3NPcmlnaW4iLCJyZWwiLCJyZWxMaXN0Iiwic3VwcG9ydHMiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJUb3J1cyIsImJ1dHRvblBvc2l0aW9uIiwiYnV0dG9uU2l6ZSIsIm1vZGFsWkluZGV4IiwiYXBpS2V5IiwiaXNMb2dnZWRJbiIsImlzSW5pdGlhbGl6ZWQiLCJ0b3J1c1dpZGdldFZpc2liaWxpdHkiLCJyZXF1ZXN0ZWRWZXJpZmllciIsImN1cnJlbnRWZXJpZmllciIsImFsZXJ0WkluZGV4IiwiaXNJZnJhbWVGdWxsU2NyZWVuIiwiaW5pdCIsImVuYWJsZUxvZ2dpbmciLCJuZXR3b3JrIiwiaG9zdCIsIm5ldHdvcmtOYW1lIiwiYmxvY2tFeHBsb3JlciIsInRpY2tlciIsInRpY2tlck5hbWUiLCJsb2dpbkNvbmZpZyIsInNob3dUb3J1c0J1dHRvbiIsIndoaXRlTGFiZWwiLCJ1c2VXYWxsZXRDb25uZWN0IiwibWZhTGV2ZWwiLCJpc0N1c3RvbUxvZ2luIiwic2V0RGVmYXVsdExldmVsIiwiZW5hYmxlQWxsIiwiZGlzYWJsZUFsbCIsInRvcnVzSWZyYW1lVXJsIiwiVVJMIiwicGF0aG5hbWUiLCJlbmRzV2l0aCIsImhhc2giLCJ0b3J1c0lmcmFtZSIsInRvcnVzQWxlcnRDb250YWluZXIiLCJzdHlsZSIsInNldFByb3BlcnR5IiwibGluayIsInNldEF0dHJpYnV0ZSIsInN0eWxlTGluayIsImRlZmF1bHRMYW5ndWFnZSIsImN1c3RvbVRyYW5zbGF0aW9ucyIsIm1lcmdlZFRyYW5zbGF0aW9ucyIsImxhbmd1YWdlVHJhbnNsYXRpb25zIiwiZW1iZWRUcmFuc2xhdGlvbnMiLCJfc2V0dXBXZWIzIiwiaW5pdFN0cmVhbSIsImNvbW11bmljYXRpb25NdXgiLCJnZXRTdHJlYW0iLCJzdWNjZXNzIiwiX2Rpc3BsYXlJZnJhbWUiLCJ3cml0ZSIsImJvZHkiLCJsb2dpbiIsInZlcmlmaWVyIiwibG9naW5faGludCIsImxvZ2luSGludCIsImV0aGVyZXVtIiwiZW5hYmxlIiwibG9nb3V0IiwibG9nT3V0U3RyZWFtIiwic3RhdHVzU3RyZWFtIiwic3RhdHVzU3RyZWFtSGFuZGxlciIsImFyZyIsInN0YXR1cyIsImxvZ2dlZEluIiwiY2xlYW5VcCIsImNsZWFySW5pdCIsImlzRWxlbWVudCIsImVsZW1lbnQiLCJFbGVtZW50IiwiSFRNTERvY3VtZW50IiwiY29udGFpbnMiLCJyZW1vdmUiLCJ0b3J1c0FsZXJ0IiwiaGlkZVRvcnVzQnV0dG9uIiwiX3NlbmRXaWRnZXRWaXNpYmlsaXR5U3RhdHVzIiwic2V0UHJvdmlkZXIiLCJyZXN0IiwicHJvdmlkZXJDaGFuZ2VTdHJlYW0iLCJwcmVvcGVuSW5zdGFuY2VJZCIsIl9oYW5kbGVXaW5kb3ciLCJvdmVycmlkZSIsInNob3dXYWxsZXQiLCJwYXRoIiwic2hvd1dhbGxldFN0cmVhbSIsImZpbmFsUGF0aCIsInNob3dXYWxsZXRIYW5kbGVyIiwiaW5zdGFuY2VJZCIsImZpbmFsVXJsIiwic2VhcmNoUGFyYW1zIiwiYXBwZW5kIiwiZm9yRWFjaCIsIngiLCJ3YWxsZXRXaW5kb3ciLCJnZXRQdWJsaWNBZGRyZXNzIiwiX3JlZjIiLCJ2ZXJpZmllcklkIiwiaXNFeHRlbmRlZCIsIndhbGxldFZlcmlmaWVyIiwib3BlbmxvZ2luVmVyaWZpZXIiLCJoZWFkZXJzIiwiZ2V0VXNlckluZm8iLCJ1c2VySW5mb0FjY2Vzc1N0cmVhbSIsInVzZXJJbmZvQWNjZXNzSGFuZGxlciIsImFwcHJvdmVkIiwicmVqZWN0ZWQiLCJuZXdSZXF1ZXN0IiwidXNlckluZm9TdHJlYW0iLCJ1c2VySW5mb0hhbmRsZXIiLCJhcmcyIiwiaGFuZGxlckNodW5rIiwiaW5pdGlhdGVUb3B1cCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b3B1cFN0cmVhbSIsInRvcHVwSGFuZGxlciIsImxvZ2luV2l0aFByaXZhdGVLZXkiLCJsb2dpblBhcmFtcyIsInByaXZhdGVLZXkiLCJ1c2VySW5mbyIsIkJ1ZmZlciIsImxvZ2luUHJpdktleVN0cmVhbSIsImxvZ2luSGFuZGxlciIsInNob3dXYWxsZXRDb25uZWN0U2Nhbm5lciIsIndhbGxldENvbm5lY3RTdHJlYW0iLCJ3YWxsZXRDb25uZWN0SGFuZGxlciIsIndpbmRvd1N0cmVhbSIsImhhbmRsZWRXaW5kb3ciLCJfY3JlYXRlUG9wdXBCbG9ja0FsZXJ0IiwiY2xvc2VIYW5kbGVyIiwiX3JlZjMiLCJyZWNlaXZlZElkIiwib25jZSIsIl9zZXRFbWJlZFdoaXRlTGFiZWwiLCJ0aGVtZSIsImlzRGFyayIsImNvbG9ycyIsImNsYXNzTGlzdCIsImFkZCIsInRvcnVzQnJhbmQxIiwidG9ydXNHcmF5MiIsIl9nZXRMb2dvVXJsIiwiX3RoaXMkd2hpdGVMYWJlbCIsImxvZ29VcmwiLCJfdGhpcyR3aGl0ZUxhYmVsMiIsImxvZ29MaWdodCIsIl90aGlzJHdoaXRlTGFiZWwzIiwibG9nb0RhcmsiLCJ0b3J1c1dpZGdldFZpc2liaWxpdHlTdHJlYW0iLCJpc0Z1bGwiLCJzaXplIiwicmlnaHQiLCJib3R0b20iLCJhc3NpZ24iLCJtZXRhbWFza1N0cmVhbSIsInRhcmdldFdpbmRvdyIsImNvbnRlbnRXaW5kb3ciLCJ0YXJnZXRPcmlnaW4iLCJvcmlnaW4iLCJjb21tdW5pY2F0aW9uU3RyZWFtIiwiaW5wYWdlUHJvdmlkZXIiLCJkZXRlY3RBY2NvdW50UmVxdWVzdFByb3RvdHlwZU1vZGlmaWVyIiwibSIsIm9yaWdpbmFsTWV0aG9kIiwicHJvdmlkZXJGdW5jIiwiX2xlbiIsIl9rZXkiLCJhcHBseSIsImhhbmRsZUxvZ2luQ2IiLCJ0aGVuIiwiXyIsIl9zaG93TG9naW5Qb3B1cCIsImNhdGNoIiwiaXNMb2dpbkNhbGxiYWNrIiwicHJveGllZElucGFnZVByb3ZpZGVyIiwiUHJveHkiLCJkZWxldGVQcm9wZXJ0eSIsIndpZGdldFN0cmVhbSIsImNhbGxlZEZyb21FbWJlZCIsIm9hdXRoU3RyZWFtIiwic3VjY2Vzc0FsZXJ0IiwiYnRuQ29udGFpbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNoaWxkcmVuIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/torus-embed/dist/torus.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/torus-embed/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/torus-embed/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePostMessageStream: () => (/* binding */ BasePostMessageStream),\n/* harmony export */   IGNORE_SUBSTREAM: () => (/* binding */ IGNORE_SUBSTREAM),\n/* harmony export */   JRPCEngine: () => (/* binding */ JRPCEngine),\n/* harmony export */   ObjectMultiplex: () => (/* binding */ ObjectMultiplex),\n/* harmony export */   PostMessageStream: () => (/* binding */ PostMessageStream),\n/* harmony export */   SafeEventEmitter: () => (/* binding */ SafeEventEmitter),\n/* harmony export */   SerializableError: () => (/* binding */ SerializableError),\n/* harmony export */   Substream: () => (/* binding */ Substream),\n/* harmony export */   createAsyncMiddleware: () => (/* binding */ createAsyncMiddleware),\n/* harmony export */   createEngineStream: () => (/* binding */ createEngineStream),\n/* harmony export */   createErrorMiddleware: () => (/* binding */ createErrorMiddleware),\n/* harmony export */   createIdRemapMiddleware: () => (/* binding */ createIdRemapMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createScaffoldMiddleware: () => (/* binding */ createScaffoldMiddleware),\n/* harmony export */   createStreamMiddleware: () => (/* binding */ createStreamMiddleware),\n/* harmony export */   getRpcPromiseCallback: () => (/* binding */ getRpcPromiseCallback),\n/* harmony export */   mergeMiddleware: () => (/* binding */ mergeMiddleware),\n/* harmony export */   providerAsMiddleware: () => (/* binding */ providerAsMiddleware),\n/* harmony export */   providerFromEngine: () => (/* binding */ providerFromEngine),\n/* harmony export */   providerFromMiddleware: () => (/* binding */ providerFromMiddleware),\n/* harmony export */   setupMultiplex: () => (/* binding */ setupMultiplex)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/lib/ours/index.js\");\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(readable_stream__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-safe-stringify */ \"(ssr)/./node_modules/fast-safe-stringify/index.js\");\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @metamask/rpc-errors */ \"(ssr)/./node_modules/@metamask/rpc-errors/dist/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! end-of-stream */ \"(ssr)/./node_modules/end-of-stream/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(end_of_stream__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\");\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(once__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\nfunction noop() {\n    return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { name, target, targetWindow = window, targetOrigin = \"*\" } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_init\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_haveSyn\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_target\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetWindow\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetOrigin\", void 0);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_onMessage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_synIntervalId\", void 0);\n        if (!name || !target) {\n            throw new Error(\"Invalid input.\");\n        }\n        this._init = false;\n        this._haveSyn = false;\n        this._name = name;\n        this._target = target; // target origin\n        this._targetWindow = targetWindow;\n        this._targetOrigin = targetOrigin;\n        this._onMessage = this.onMessage.bind(this);\n        this._synIntervalId = null;\n        window.addEventListener(\"message\", this._onMessage, false);\n        this._handShake();\n    }\n    _break() {\n        this.cork();\n        this._write(BRK, null, noop);\n        this._haveSyn = false;\n        this._init = false;\n    }\n    _handShake() {\n        this._write(SYN, null, noop);\n        this.cork();\n    }\n    _onData(data) {\n        if (!this._init) {\n            // listen for handshake\n            if (data === SYN) {\n                this._haveSyn = true;\n                this._write(ACK, null, noop);\n            } else if (data === ACK) {\n                this._init = true;\n                if (!this._haveSyn) {\n                    this._write(ACK, null, noop);\n                }\n                this.uncork();\n            }\n        } else if (data === BRK) {\n            this._break();\n        } else {\n            // forward message\n            try {\n                this.push(data);\n            } catch (err) {\n                this.emit(\"error\", err);\n            }\n        }\n    }\n    _postMessage(data) {\n        const originConstraint = this._targetOrigin;\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n    onMessage(event) {\n        const message = event.data;\n        // validate message\n        if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n            return;\n        }\n        this._onData(message.data);\n    }\n    _read() {\n        return undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _write(data, _, cb) {\n        this._postMessage(data);\n        cb();\n    }\n    _destroy() {\n        window.removeEventListener(\"message\", this._onMessage, false);\n    }\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */ function safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    } catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(()=>{\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for(let i = 0; i < n; i += 1){\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {\n    emit(type) {\n        let doError = type === \"error\";\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        } else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === \"function\") {\n            safeApply(handler, this, args);\n        } else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for(let i = 0; i < len; i += 1){\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nclass SerializableError extends Error {\n    constructor(_ref){\n        let { code, message, data } = _ref;\n        if (!Number.isInteger(code)) {\n            throw new Error(\"code must be an integer\");\n        }\n        if (!message || typeof message !== \"string\") {\n            throw new Error(\"message must be string\");\n        }\n        super(message);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"code\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"data\", void 0);\n        this.code = code;\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n    toString() {\n        return fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3___default()({\n            code: this.code,\n            message: this.message,\n            data: this.data,\n            stack: this.stack\n        });\n    }\n}\nconst getRpcPromiseCallback = function(resolve, reject) {\n    let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return (error, response)=>{\n        if (error || response.error) {\n            reject(error || response.error);\n        } else if (!unwrapResult || Array.isArray(response)) {\n            resolve(response);\n        } else {\n            resolve(response.result);\n        }\n    };\n};\nfunction createErrorMiddleware(log) {\n    return (req, res, next, end)=>{\n        try {\n            // json-rpc-engine will terminate the request when it notices this error\n            if (typeof req.method !== \"string\" || !req.method) {\n                res.error = new SerializableError({\n                    code: -32603,\n                    message: \"invalid method\"\n                });\n                end();\n                return;\n            }\n            next((done)=>{\n                const { error } = res;\n                if (!error) {\n                    return done();\n                }\n                log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n                return done();\n            });\n        } catch (error) {\n            log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n            res.error = new SerializableError({\n                code: -32603,\n                message: error.message\n            });\n            end();\n        }\n    };\n}\nfunction createStreamMiddleware() {\n    const idMap = {};\n    function readNoop() {\n        return false;\n    }\n    const events = new SafeEventEmitter();\n    function processResponse(res) {\n        const context = idMap[res.id];\n        if (!context) {\n            throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n        }\n        delete idMap[res.id];\n        // copy whole res onto original res\n        Object.assign(context.res, res);\n        // run callback on empty stack,\n        // prevent internal stream-handler from catching errors\n        setTimeout(context.end);\n    }\n    function processNotification(res) {\n        events.emit(\"notification\", res);\n    }\n    function processMessage(res, _encoding, cb) {\n        let err;\n        try {\n            const isNotification = !res.id;\n            if (isNotification) {\n                processNotification(res);\n            } else {\n                processResponse(res);\n            }\n        } catch (_err) {\n            err = _err;\n        }\n        // continue processing stream\n        cb(err);\n    }\n    const stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read: readNoop,\n        write: processMessage\n    });\n    const middleware = (req, res, next, end)=>{\n        // write req to stream\n        stream.push(req);\n        // register request on id map\n        idMap[req.id] = {\n            req,\n            res,\n            next,\n            end\n        };\n    };\n    return {\n        events,\n        middleware,\n        stream\n    };\n}\nfunction createScaffoldMiddleware(handlers) {\n    return (req, res, next, end)=>{\n        const handler = handlers[req.method];\n        // if no handler, return\n        if (handler === undefined) {\n            return next();\n        }\n        // if handler is fn, call as middleware\n        if (typeof handler === \"function\") {\n            return handler(req, res, next, end);\n        }\n        // if handler is some other value, use as result\n        res.result = handler;\n        return end();\n    };\n}\nfunction createIdRemapMiddleware() {\n    return (req, res, next, _end)=>{\n        const originalId = req.id;\n        const newId = Math.random().toString(36).slice(2);\n        req.id = newId;\n        res.id = newId;\n        next((done)=>{\n            req.id = originalId;\n            res.id = originalId;\n            done();\n        });\n    };\n}\nfunction createLoggerMiddleware(logger) {\n    return (req, res, next, _)=>{\n        logger.debug(\"REQ\", req, \"RES\", res);\n        next();\n    };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n    return async (req, res, next, end)=>{\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve)=>{\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback = null;\n        let nextWasCalled = false;\n        // This will be called by the consumer's async middleware.\n        const asyncNext = async ()=>{\n            nextWasCalled = true;\n            // We pass a return handler to next(). When it is called by the engine,\n            // the consumer's async middleware will resume executing.\n            next((runReturnHandlersCallback)=>{\n                // This callback comes from JRPCEngine._runReturnHandlers\n                returnHandlerCallback = runReturnHandlersCallback;\n                resolveNextPromise();\n            });\n            await nextPromise;\n        };\n        try {\n            await asyncMiddleware(req, res, asyncNext);\n            if (nextWasCalled) {\n                await nextPromise; // we must wait until the return handler is called\n                returnHandlerCallback(null);\n            } else {\n                end(null);\n            }\n        } catch (err) {\n            const error = err;\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            } else {\n                end(error);\n            }\n        }\n    };\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */ class JRPCEngine extends SafeEventEmitter {\n    constructor(){\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_middleware\", void 0);\n        this._middleware = [];\n    }\n    /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */ static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack){\n            [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [\n            error,\n            isComplete,\n            returnHandlers.reverse()\n        ];\n    }\n    /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */ static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve)=>{\n            const end = (err)=>{\n                const error = err || res.error;\n                if (error) {\n                    res.error = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n                }\n                // True indicates that the request should end\n                resolve([\n                    error,\n                    true\n                ]);\n            };\n            const next = (returnHandler)=>{\n                if (res.error) {\n                    end(res.error);\n                } else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== \"function\") {\n                            end(new SerializableError({\n                                code: -32603,\n                                message: \"JRPCEngine: 'next' return handlers must be functions\"\n                            }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([\n                        null,\n                        false\n                    ]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            } catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */ static async _runReturnHandlers(handlers) {\n        for (const handler of handlers){\n            await new Promise((resolve, reject)=>{\n                handler((err)=>err ? reject(err) : resolve());\n            });\n        }\n    }\n    /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */ static _checkForCompletion(_req, res, isComplete) {\n        if (!(\"result\" in res) && !(\"error\" in res)) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Response has no error or result for request\"\n            });\n        }\n        if (!isComplete) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Nothing ended request\"\n            });\n        }\n    }\n    /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */ push(middleware) {\n        this._middleware.push(middleware);\n    }\n    /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */ /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */ /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */ /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    handle(req, cb) {\n        if (cb && typeof cb !== \"function\") {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */ asMiddleware() {\n        return async (req, res, next, end)=>{\n            try {\n                const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JRPCEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback)=>{\n                    try {\n                        await JRPCEngine._runReturnHandlers(returnHandlers);\n                    } catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            } catch (error) {\n                return end(error);\n            }\n        };\n    }\n    /**\n   * Like _handle, but for batch requests.\n   */ /**\n   * Like _handle, but for batch requests.\n   */ async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(// 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        } catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n   * A promise-wrapped _handle.\n   */ _promiseHandle(req) {\n        return new Promise((resolve)=>{\n            this._handle(req, (_err, res)=>{\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                resolve(res);\n            });\n        });\n    }\n    /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */ async _handle(callerReq, cb) {\n        if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"request must be plain object\"\n            });\n            return cb(error, {\n                id: undefined,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        if (typeof callerReq.method !== \"string\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"method must be string\"\n            });\n            return cb(error, {\n                id: callerReq.id,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        const req = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        } catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */ async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JRPCEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JRPCEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n}\nfunction mergeMiddleware(middlewareStack) {\n    const engine = new JRPCEngine();\n    middlewareStack.forEach((middleware)=>engine.push(middleware));\n    return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n    if (!opts || !opts.engine) {\n        throw new Error(\"Missing engine parameter!\");\n    }\n    const { engine } = opts;\n    // eslint-disable-next-line prefer-const\n    let stream;\n    function read() {\n        return undefined;\n    }\n    function write(req, _encoding, cb) {\n        engine.handle(req, (_err, res)=>{\n            stream.push(res);\n        });\n        cb();\n    }\n    stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read,\n        write\n    });\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            stream.push(message);\n        });\n    }\n    return stream;\n}\nfunction providerFromEngine(engine) {\n    const provider = new SafeEventEmitter();\n    // handle both rpc send methods\n    provider.sendAsync = async (req)=>{\n        const res = await engine.handle(req);\n        if (res.error) {\n            var _res$error, _res$error2;\n            const err = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(res.error, {\n                fallbackError: {\n                    message: ((_res$error = res.error) === null || _res$error === void 0 ? void 0 : _res$error.message) || res.error.toString(),\n                    code: ((_res$error2 = res.error) === null || _res$error2 === void 0 ? void 0 : _res$error2.code) || -32603\n                }\n            });\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.internal(err);\n        }\n        return res.result;\n    };\n    provider.send = (req, callback)=>{\n        if (typeof callback !== \"function\") {\n            throw new Error('Must provide callback to \"send\" method.');\n        }\n        engine.handle(req, callback);\n    };\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            provider.emit(\"data\", null, message);\n        });\n    }\n    provider.request = async (args)=>{\n        const req = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, args), {}, {\n            id: Math.random().toString(36).slice(2),\n            jsonrpc: \"2.0\"\n        });\n        const res = await provider.sendAsync(req);\n        return res;\n    };\n    return provider;\n}\nfunction providerFromMiddleware(middleware) {\n    const engine = new JRPCEngine();\n    engine.push(middleware);\n    const provider = providerFromEngine(engine);\n    return provider;\n}\nfunction providerAsMiddleware(provider) {\n    return async (req, res, _next, end)=>{\n        // send request to provider\n        try {\n            const providerRes = await provider.sendAsync(req);\n            res.result = providerRes;\n            return end();\n        } catch (error) {\n            return end(error);\n        }\n    };\n}\nclass Substream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { parent, name } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_parent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        this._parent = parent;\n        this._name = name;\n    }\n    /**\n   * Explicitly sets read operations to a no-op.\n   */ _read() {\n        return undefined;\n    }\n    /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */ _write(chunk, _encoding, callback) {\n        this._parent.push({\n            name: this._name,\n            data: chunk\n        });\n        callback();\n    }\n}\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(){\n        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_4___default()({}, opts), {}, {\n            objectMode: true\n        }));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_substreams\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"getStream\", void 0);\n        this._substreams = {};\n    }\n    createStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // create substream\n        const substream = new Substream({\n            parent: this,\n            name\n        });\n        this._substreams[name] = substream;\n        // listen for parent stream to end\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        anyStreamEnd(this, (_error)=>substream.destroy(_error || undefined));\n        return substream;\n    }\n    // ignore streams (dont display orphaned data warning)\n    ignoreStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // set\n        this._substreams[name] = IGNORE_SUBSTREAM;\n    }\n    _read() {\n        return undefined;\n    }\n    _write(chunk, _encoding, callback) {\n        const { name, data } = chunk;\n        if (!name) {\n            window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n            return callback();\n        }\n        // get corresponding substream\n        const substream = this._substreams[name];\n        if (!substream) {\n            window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n            return callback();\n        }\n        // push data into substream\n        if (substream !== IGNORE_SUBSTREAM) {\n            substream.push(data);\n        }\n        return callback();\n    }\n}\n// util\nfunction anyStreamEnd(stream, _cb) {\n    const cb = once__WEBPACK_IMPORTED_MODULE_7___default()(_cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n        readable: false\n    }, cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n        writable: false\n    }, cb);\n}\nfunction setupMultiplex(stream) {\n    const mux = new ObjectMultiplex();\n    mux.getStream = function streamHelper(name) {\n        if (this._substreams[name]) {\n            return this._substreams[name];\n        }\n        return this.createStream(name);\n    };\n    pump__WEBPACK_IMPORTED_MODULE_8___default()(stream, mux, stream, (err)=>{\n        if (err) window.console.error(err);\n    });\n    return mux;\n}\nclass PostMessageStream extends BasePostMessageStream {\n    _postMessage(data) {\n        let originConstraint = this._targetOrigin;\n        if (typeof data === \"object\") {\n            const dataObj = data;\n            if (typeof dataObj.data === \"object\") {\n                const dataObjData = dataObj.data;\n                if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n                    const dataObjDataParam = dataObjData.params[0];\n                    if (dataObjDataParam._origin) {\n                        originConstraint = dataObjDataParam._origin;\n                    }\n                    // add a constraint for the response\n                    dataObjDataParam._origin = window.location.origin;\n                }\n            }\n        }\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n}\n //# sourceMappingURL=openloginJrpc.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/torus-embed/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/tweetnacl-js/nacl-fast.js":
/*!***********************************************************!*\
  !*** ./node_modules/@toruslabs/tweetnacl-js/nacl-fast.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function(nacl) {\n    \"use strict\";\n    // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n    // Public domain.\n    //\n    // Implementation derived from TweetNaCl version 20140427.\n    // See for details: http://tweetnacl.cr.yp.to/\n    var gf = function(init) {\n        var i, r = new Float64Array(16);\n        if (init) for(i = 0; i < init.length; i++)r[i] = init[i];\n        return r;\n    };\n    //  Pluggable, initialized in high-level API below.\n    var randombytes = function() {\n        throw new Error(\"no PRNG\");\n    };\n    var _0 = new Uint8Array(16);\n    var _9 = new Uint8Array(32);\n    _9[0] = 9;\n    var gf0 = gf(), gf1 = gf([\n        1\n    ]), _121665 = gf([\n        0xdb41,\n        1\n    ]), D = gf([\n        0x78a3,\n        0x1359,\n        0x4dca,\n        0x75eb,\n        0xd8ab,\n        0x4141,\n        0x0a4d,\n        0x0070,\n        0xe898,\n        0x7779,\n        0x4079,\n        0x8cc7,\n        0xfe73,\n        0x2b6f,\n        0x6cee,\n        0x5203\n    ]), D2 = gf([\n        0xf159,\n        0x26b2,\n        0x9b94,\n        0xebd6,\n        0xb156,\n        0x8283,\n        0x149a,\n        0x00e0,\n        0xd130,\n        0xeef3,\n        0x80f2,\n        0x198e,\n        0xfce7,\n        0x56df,\n        0xd9dc,\n        0x2406\n    ]), X = gf([\n        0xd51a,\n        0x8f25,\n        0x2d60,\n        0xc956,\n        0xa7b2,\n        0x9525,\n        0xc760,\n        0x692c,\n        0xdc5c,\n        0xfdd6,\n        0xe231,\n        0xc0a4,\n        0x53fe,\n        0xcd6e,\n        0x36d3,\n        0x2169\n    ]), Y = gf([\n        0x6658,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666,\n        0x6666\n    ]), I = gf([\n        0xa0b0,\n        0x4a0e,\n        0x1b27,\n        0xc4ee,\n        0xe478,\n        0xad2f,\n        0x1806,\n        0x2f43,\n        0xd7a7,\n        0x3dfb,\n        0x0099,\n        0x2b4d,\n        0xdf0b,\n        0x4fc1,\n        0x2480,\n        0x2b83\n    ]);\n    function ts64(x, i, h, l) {\n        x[i] = h >> 24 & 0xff;\n        x[i + 1] = h >> 16 & 0xff;\n        x[i + 2] = h >> 8 & 0xff;\n        x[i + 3] = h & 0xff;\n        x[i + 4] = l >> 24 & 0xff;\n        x[i + 5] = l >> 16 & 0xff;\n        x[i + 6] = l >> 8 & 0xff;\n        x[i + 7] = l & 0xff;\n    }\n    function vn(x, xi, y, yi, n) {\n        var i, d = 0;\n        for(i = 0; i < n; i++)d |= x[xi + i] ^ y[yi + i];\n        return (1 & d - 1 >>> 8) - 1;\n    }\n    function crypto_verify_16(x, xi, y, yi) {\n        return vn(x, xi, y, yi, 16);\n    }\n    function crypto_verify_32(x, xi, y, yi) {\n        return vn(x, xi, y, yi, 32);\n    }\n    function core_salsa20(o, p, k, c) {\n        var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24, j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24, j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24, j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24, j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24, j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24, j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24, j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24, j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24, j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24, j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24, j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24, j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24, j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24, j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24, j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;\n        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;\n        for(var i = 0; i < 20; i += 2){\n            u = x0 + x12 | 0;\n            x4 ^= u << 7 | u >>> 32 - 7;\n            u = x4 + x0 | 0;\n            x8 ^= u << 9 | u >>> 32 - 9;\n            u = x8 + x4 | 0;\n            x12 ^= u << 13 | u >>> 32 - 13;\n            u = x12 + x8 | 0;\n            x0 ^= u << 18 | u >>> 32 - 18;\n            u = x5 + x1 | 0;\n            x9 ^= u << 7 | u >>> 32 - 7;\n            u = x9 + x5 | 0;\n            x13 ^= u << 9 | u >>> 32 - 9;\n            u = x13 + x9 | 0;\n            x1 ^= u << 13 | u >>> 32 - 13;\n            u = x1 + x13 | 0;\n            x5 ^= u << 18 | u >>> 32 - 18;\n            u = x10 + x6 | 0;\n            x14 ^= u << 7 | u >>> 32 - 7;\n            u = x14 + x10 | 0;\n            x2 ^= u << 9 | u >>> 32 - 9;\n            u = x2 + x14 | 0;\n            x6 ^= u << 13 | u >>> 32 - 13;\n            u = x6 + x2 | 0;\n            x10 ^= u << 18 | u >>> 32 - 18;\n            u = x15 + x11 | 0;\n            x3 ^= u << 7 | u >>> 32 - 7;\n            u = x3 + x15 | 0;\n            x7 ^= u << 9 | u >>> 32 - 9;\n            u = x7 + x3 | 0;\n            x11 ^= u << 13 | u >>> 32 - 13;\n            u = x11 + x7 | 0;\n            x15 ^= u << 18 | u >>> 32 - 18;\n            u = x0 + x3 | 0;\n            x1 ^= u << 7 | u >>> 32 - 7;\n            u = x1 + x0 | 0;\n            x2 ^= u << 9 | u >>> 32 - 9;\n            u = x2 + x1 | 0;\n            x3 ^= u << 13 | u >>> 32 - 13;\n            u = x3 + x2 | 0;\n            x0 ^= u << 18 | u >>> 32 - 18;\n            u = x5 + x4 | 0;\n            x6 ^= u << 7 | u >>> 32 - 7;\n            u = x6 + x5 | 0;\n            x7 ^= u << 9 | u >>> 32 - 9;\n            u = x7 + x6 | 0;\n            x4 ^= u << 13 | u >>> 32 - 13;\n            u = x4 + x7 | 0;\n            x5 ^= u << 18 | u >>> 32 - 18;\n            u = x10 + x9 | 0;\n            x11 ^= u << 7 | u >>> 32 - 7;\n            u = x11 + x10 | 0;\n            x8 ^= u << 9 | u >>> 32 - 9;\n            u = x8 + x11 | 0;\n            x9 ^= u << 13 | u >>> 32 - 13;\n            u = x9 + x8 | 0;\n            x10 ^= u << 18 | u >>> 32 - 18;\n            u = x15 + x14 | 0;\n            x12 ^= u << 7 | u >>> 32 - 7;\n            u = x12 + x15 | 0;\n            x13 ^= u << 9 | u >>> 32 - 9;\n            u = x13 + x12 | 0;\n            x14 ^= u << 13 | u >>> 32 - 13;\n            u = x14 + x13 | 0;\n            x15 ^= u << 18 | u >>> 32 - 18;\n        }\n        x0 = x0 + j0 | 0;\n        x1 = x1 + j1 | 0;\n        x2 = x2 + j2 | 0;\n        x3 = x3 + j3 | 0;\n        x4 = x4 + j4 | 0;\n        x5 = x5 + j5 | 0;\n        x6 = x6 + j6 | 0;\n        x7 = x7 + j7 | 0;\n        x8 = x8 + j8 | 0;\n        x9 = x9 + j9 | 0;\n        x10 = x10 + j10 | 0;\n        x11 = x11 + j11 | 0;\n        x12 = x12 + j12 | 0;\n        x13 = x13 + j13 | 0;\n        x14 = x14 + j14 | 0;\n        x15 = x15 + j15 | 0;\n        o[0] = x0 >>> 0 & 0xff;\n        o[1] = x0 >>> 8 & 0xff;\n        o[2] = x0 >>> 16 & 0xff;\n        o[3] = x0 >>> 24 & 0xff;\n        o[4] = x1 >>> 0 & 0xff;\n        o[5] = x1 >>> 8 & 0xff;\n        o[6] = x1 >>> 16 & 0xff;\n        o[7] = x1 >>> 24 & 0xff;\n        o[8] = x2 >>> 0 & 0xff;\n        o[9] = x2 >>> 8 & 0xff;\n        o[10] = x2 >>> 16 & 0xff;\n        o[11] = x2 >>> 24 & 0xff;\n        o[12] = x3 >>> 0 & 0xff;\n        o[13] = x3 >>> 8 & 0xff;\n        o[14] = x3 >>> 16 & 0xff;\n        o[15] = x3 >>> 24 & 0xff;\n        o[16] = x4 >>> 0 & 0xff;\n        o[17] = x4 >>> 8 & 0xff;\n        o[18] = x4 >>> 16 & 0xff;\n        o[19] = x4 >>> 24 & 0xff;\n        o[20] = x5 >>> 0 & 0xff;\n        o[21] = x5 >>> 8 & 0xff;\n        o[22] = x5 >>> 16 & 0xff;\n        o[23] = x5 >>> 24 & 0xff;\n        o[24] = x6 >>> 0 & 0xff;\n        o[25] = x6 >>> 8 & 0xff;\n        o[26] = x6 >>> 16 & 0xff;\n        o[27] = x6 >>> 24 & 0xff;\n        o[28] = x7 >>> 0 & 0xff;\n        o[29] = x7 >>> 8 & 0xff;\n        o[30] = x7 >>> 16 & 0xff;\n        o[31] = x7 >>> 24 & 0xff;\n        o[32] = x8 >>> 0 & 0xff;\n        o[33] = x8 >>> 8 & 0xff;\n        o[34] = x8 >>> 16 & 0xff;\n        o[35] = x8 >>> 24 & 0xff;\n        o[36] = x9 >>> 0 & 0xff;\n        o[37] = x9 >>> 8 & 0xff;\n        o[38] = x9 >>> 16 & 0xff;\n        o[39] = x9 >>> 24 & 0xff;\n        o[40] = x10 >>> 0 & 0xff;\n        o[41] = x10 >>> 8 & 0xff;\n        o[42] = x10 >>> 16 & 0xff;\n        o[43] = x10 >>> 24 & 0xff;\n        o[44] = x11 >>> 0 & 0xff;\n        o[45] = x11 >>> 8 & 0xff;\n        o[46] = x11 >>> 16 & 0xff;\n        o[47] = x11 >>> 24 & 0xff;\n        o[48] = x12 >>> 0 & 0xff;\n        o[49] = x12 >>> 8 & 0xff;\n        o[50] = x12 >>> 16 & 0xff;\n        o[51] = x12 >>> 24 & 0xff;\n        o[52] = x13 >>> 0 & 0xff;\n        o[53] = x13 >>> 8 & 0xff;\n        o[54] = x13 >>> 16 & 0xff;\n        o[55] = x13 >>> 24 & 0xff;\n        o[56] = x14 >>> 0 & 0xff;\n        o[57] = x14 >>> 8 & 0xff;\n        o[58] = x14 >>> 16 & 0xff;\n        o[59] = x14 >>> 24 & 0xff;\n        o[60] = x15 >>> 0 & 0xff;\n        o[61] = x15 >>> 8 & 0xff;\n        o[62] = x15 >>> 16 & 0xff;\n        o[63] = x15 >>> 24 & 0xff;\n    }\n    function core_hsalsa20(o, p, k, c) {\n        var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24, j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24, j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24, j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24, j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24, j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24, j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24, j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24, j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24, j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24, j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24, j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24, j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24, j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24, j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24, j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;\n        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;\n        for(var i = 0; i < 20; i += 2){\n            u = x0 + x12 | 0;\n            x4 ^= u << 7 | u >>> 32 - 7;\n            u = x4 + x0 | 0;\n            x8 ^= u << 9 | u >>> 32 - 9;\n            u = x8 + x4 | 0;\n            x12 ^= u << 13 | u >>> 32 - 13;\n            u = x12 + x8 | 0;\n            x0 ^= u << 18 | u >>> 32 - 18;\n            u = x5 + x1 | 0;\n            x9 ^= u << 7 | u >>> 32 - 7;\n            u = x9 + x5 | 0;\n            x13 ^= u << 9 | u >>> 32 - 9;\n            u = x13 + x9 | 0;\n            x1 ^= u << 13 | u >>> 32 - 13;\n            u = x1 + x13 | 0;\n            x5 ^= u << 18 | u >>> 32 - 18;\n            u = x10 + x6 | 0;\n            x14 ^= u << 7 | u >>> 32 - 7;\n            u = x14 + x10 | 0;\n            x2 ^= u << 9 | u >>> 32 - 9;\n            u = x2 + x14 | 0;\n            x6 ^= u << 13 | u >>> 32 - 13;\n            u = x6 + x2 | 0;\n            x10 ^= u << 18 | u >>> 32 - 18;\n            u = x15 + x11 | 0;\n            x3 ^= u << 7 | u >>> 32 - 7;\n            u = x3 + x15 | 0;\n            x7 ^= u << 9 | u >>> 32 - 9;\n            u = x7 + x3 | 0;\n            x11 ^= u << 13 | u >>> 32 - 13;\n            u = x11 + x7 | 0;\n            x15 ^= u << 18 | u >>> 32 - 18;\n            u = x0 + x3 | 0;\n            x1 ^= u << 7 | u >>> 32 - 7;\n            u = x1 + x0 | 0;\n            x2 ^= u << 9 | u >>> 32 - 9;\n            u = x2 + x1 | 0;\n            x3 ^= u << 13 | u >>> 32 - 13;\n            u = x3 + x2 | 0;\n            x0 ^= u << 18 | u >>> 32 - 18;\n            u = x5 + x4 | 0;\n            x6 ^= u << 7 | u >>> 32 - 7;\n            u = x6 + x5 | 0;\n            x7 ^= u << 9 | u >>> 32 - 9;\n            u = x7 + x6 | 0;\n            x4 ^= u << 13 | u >>> 32 - 13;\n            u = x4 + x7 | 0;\n            x5 ^= u << 18 | u >>> 32 - 18;\n            u = x10 + x9 | 0;\n            x11 ^= u << 7 | u >>> 32 - 7;\n            u = x11 + x10 | 0;\n            x8 ^= u << 9 | u >>> 32 - 9;\n            u = x8 + x11 | 0;\n            x9 ^= u << 13 | u >>> 32 - 13;\n            u = x9 + x8 | 0;\n            x10 ^= u << 18 | u >>> 32 - 18;\n            u = x15 + x14 | 0;\n            x12 ^= u << 7 | u >>> 32 - 7;\n            u = x12 + x15 | 0;\n            x13 ^= u << 9 | u >>> 32 - 9;\n            u = x13 + x12 | 0;\n            x14 ^= u << 13 | u >>> 32 - 13;\n            u = x14 + x13 | 0;\n            x15 ^= u << 18 | u >>> 32 - 18;\n        }\n        o[0] = x0 >>> 0 & 0xff;\n        o[1] = x0 >>> 8 & 0xff;\n        o[2] = x0 >>> 16 & 0xff;\n        o[3] = x0 >>> 24 & 0xff;\n        o[4] = x5 >>> 0 & 0xff;\n        o[5] = x5 >>> 8 & 0xff;\n        o[6] = x5 >>> 16 & 0xff;\n        o[7] = x5 >>> 24 & 0xff;\n        o[8] = x10 >>> 0 & 0xff;\n        o[9] = x10 >>> 8 & 0xff;\n        o[10] = x10 >>> 16 & 0xff;\n        o[11] = x10 >>> 24 & 0xff;\n        o[12] = x15 >>> 0 & 0xff;\n        o[13] = x15 >>> 8 & 0xff;\n        o[14] = x15 >>> 16 & 0xff;\n        o[15] = x15 >>> 24 & 0xff;\n        o[16] = x6 >>> 0 & 0xff;\n        o[17] = x6 >>> 8 & 0xff;\n        o[18] = x6 >>> 16 & 0xff;\n        o[19] = x6 >>> 24 & 0xff;\n        o[20] = x7 >>> 0 & 0xff;\n        o[21] = x7 >>> 8 & 0xff;\n        o[22] = x7 >>> 16 & 0xff;\n        o[23] = x7 >>> 24 & 0xff;\n        o[24] = x8 >>> 0 & 0xff;\n        o[25] = x8 >>> 8 & 0xff;\n        o[26] = x8 >>> 16 & 0xff;\n        o[27] = x8 >>> 24 & 0xff;\n        o[28] = x9 >>> 0 & 0xff;\n        o[29] = x9 >>> 8 & 0xff;\n        o[30] = x9 >>> 16 & 0xff;\n        o[31] = x9 >>> 24 & 0xff;\n    }\n    function crypto_core_salsa20(out, inp, k, c) {\n        core_salsa20(out, inp, k, c);\n    }\n    function crypto_core_hsalsa20(out, inp, k, c) {\n        core_hsalsa20(out, inp, k, c);\n    }\n    var sigma = new Uint8Array([\n        101,\n        120,\n        112,\n        97,\n        110,\n        100,\n        32,\n        51,\n        50,\n        45,\n        98,\n        121,\n        116,\n        101,\n        32,\n        107\n    ]);\n    // \"expand 32-byte k\"\n    function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {\n        var z = new Uint8Array(16), x = new Uint8Array(64);\n        var u, i;\n        for(i = 0; i < 16; i++)z[i] = 0;\n        for(i = 0; i < 8; i++)z[i] = n[i];\n        while(b >= 64){\n            crypto_core_salsa20(x, z, k, sigma);\n            for(i = 0; i < 64; i++)c[cpos + i] = m[mpos + i] ^ x[i];\n            u = 1;\n            for(i = 8; i < 16; i++){\n                u = u + (z[i] & 0xff) | 0;\n                z[i] = u & 0xff;\n                u >>>= 8;\n            }\n            b -= 64;\n            cpos += 64;\n            mpos += 64;\n        }\n        if (b > 0) {\n            crypto_core_salsa20(x, z, k, sigma);\n            for(i = 0; i < b; i++)c[cpos + i] = m[mpos + i] ^ x[i];\n        }\n        return 0;\n    }\n    function crypto_stream_salsa20(c, cpos, b, n, k) {\n        var z = new Uint8Array(16), x = new Uint8Array(64);\n        var u, i;\n        for(i = 0; i < 16; i++)z[i] = 0;\n        for(i = 0; i < 8; i++)z[i] = n[i];\n        while(b >= 64){\n            crypto_core_salsa20(x, z, k, sigma);\n            for(i = 0; i < 64; i++)c[cpos + i] = x[i];\n            u = 1;\n            for(i = 8; i < 16; i++){\n                u = u + (z[i] & 0xff) | 0;\n                z[i] = u & 0xff;\n                u >>>= 8;\n            }\n            b -= 64;\n            cpos += 64;\n        }\n        if (b > 0) {\n            crypto_core_salsa20(x, z, k, sigma);\n            for(i = 0; i < b; i++)c[cpos + i] = x[i];\n        }\n        return 0;\n    }\n    function crypto_stream(c, cpos, d, n, k) {\n        var s = new Uint8Array(32);\n        crypto_core_hsalsa20(s, n, k, sigma);\n        var sn = new Uint8Array(8);\n        for(var i = 0; i < 8; i++)sn[i] = n[i + 16];\n        return crypto_stream_salsa20(c, cpos, d, sn, s);\n    }\n    function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {\n        var s = new Uint8Array(32);\n        crypto_core_hsalsa20(s, n, k, sigma);\n        var sn = new Uint8Array(8);\n        for(var i = 0; i < 8; i++)sn[i] = n[i + 16];\n        return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);\n    }\n    /*\n* Port of Andrew Moon's Poly1305-donna-16. Public domain.\n* https://github.com/floodyberry/poly1305-donna\n*/ var poly1305 = function(key) {\n        this.buffer = new Uint8Array(16);\n        this.r = new Uint16Array(10);\n        this.h = new Uint16Array(10);\n        this.pad = new Uint16Array(8);\n        this.leftover = 0;\n        this.fin = 0;\n        var t0, t1, t2, t3, t4, t5, t6, t7;\n        t0 = key[0] & 0xff | (key[1] & 0xff) << 8;\n        this.r[0] = t0 & 0x1fff;\n        t1 = key[2] & 0xff | (key[3] & 0xff) << 8;\n        this.r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;\n        t2 = key[4] & 0xff | (key[5] & 0xff) << 8;\n        this.r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;\n        t3 = key[6] & 0xff | (key[7] & 0xff) << 8;\n        this.r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;\n        t4 = key[8] & 0xff | (key[9] & 0xff) << 8;\n        this.r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;\n        this.r[5] = t4 >>> 1 & 0x1ffe;\n        t5 = key[10] & 0xff | (key[11] & 0xff) << 8;\n        this.r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;\n        t6 = key[12] & 0xff | (key[13] & 0xff) << 8;\n        this.r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;\n        t7 = key[14] & 0xff | (key[15] & 0xff) << 8;\n        this.r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;\n        this.r[9] = t7 >>> 5 & 0x007f;\n        this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;\n        this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;\n        this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;\n        this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;\n        this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;\n        this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;\n        this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;\n        this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;\n    };\n    poly1305.prototype.blocks = function(m, mpos, bytes) {\n        var hibit = this.fin ? 0 : 1 << 11;\n        var t0, t1, t2, t3, t4, t5, t6, t7, c;\n        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;\n        var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];\n        var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];\n        while(bytes >= 16){\n            t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;\n            h0 += t0 & 0x1fff;\n            t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;\n            h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;\n            t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;\n            h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;\n            t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;\n            h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;\n            t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;\n            h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;\n            h5 += t4 >>> 1 & 0x1fff;\n            t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;\n            h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;\n            t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;\n            h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;\n            t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;\n            h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;\n            h9 += t7 >>> 5 | hibit;\n            c = 0;\n            d0 = c;\n            d0 += h0 * r0;\n            d0 += h1 * (5 * r9);\n            d0 += h2 * (5 * r8);\n            d0 += h3 * (5 * r7);\n            d0 += h4 * (5 * r6);\n            c = d0 >>> 13;\n            d0 &= 0x1fff;\n            d0 += h5 * (5 * r5);\n            d0 += h6 * (5 * r4);\n            d0 += h7 * (5 * r3);\n            d0 += h8 * (5 * r2);\n            d0 += h9 * (5 * r1);\n            c += d0 >>> 13;\n            d0 &= 0x1fff;\n            d1 = c;\n            d1 += h0 * r1;\n            d1 += h1 * r0;\n            d1 += h2 * (5 * r9);\n            d1 += h3 * (5 * r8);\n            d1 += h4 * (5 * r7);\n            c = d1 >>> 13;\n            d1 &= 0x1fff;\n            d1 += h5 * (5 * r6);\n            d1 += h6 * (5 * r5);\n            d1 += h7 * (5 * r4);\n            d1 += h8 * (5 * r3);\n            d1 += h9 * (5 * r2);\n            c += d1 >>> 13;\n            d1 &= 0x1fff;\n            d2 = c;\n            d2 += h0 * r2;\n            d2 += h1 * r1;\n            d2 += h2 * r0;\n            d2 += h3 * (5 * r9);\n            d2 += h4 * (5 * r8);\n            c = d2 >>> 13;\n            d2 &= 0x1fff;\n            d2 += h5 * (5 * r7);\n            d2 += h6 * (5 * r6);\n            d2 += h7 * (5 * r5);\n            d2 += h8 * (5 * r4);\n            d2 += h9 * (5 * r3);\n            c += d2 >>> 13;\n            d2 &= 0x1fff;\n            d3 = c;\n            d3 += h0 * r3;\n            d3 += h1 * r2;\n            d3 += h2 * r1;\n            d3 += h3 * r0;\n            d3 += h4 * (5 * r9);\n            c = d3 >>> 13;\n            d3 &= 0x1fff;\n            d3 += h5 * (5 * r8);\n            d3 += h6 * (5 * r7);\n            d3 += h7 * (5 * r6);\n            d3 += h8 * (5 * r5);\n            d3 += h9 * (5 * r4);\n            c += d3 >>> 13;\n            d3 &= 0x1fff;\n            d4 = c;\n            d4 += h0 * r4;\n            d4 += h1 * r3;\n            d4 += h2 * r2;\n            d4 += h3 * r1;\n            d4 += h4 * r0;\n            c = d4 >>> 13;\n            d4 &= 0x1fff;\n            d4 += h5 * (5 * r9);\n            d4 += h6 * (5 * r8);\n            d4 += h7 * (5 * r7);\n            d4 += h8 * (5 * r6);\n            d4 += h9 * (5 * r5);\n            c += d4 >>> 13;\n            d4 &= 0x1fff;\n            d5 = c;\n            d5 += h0 * r5;\n            d5 += h1 * r4;\n            d5 += h2 * r3;\n            d5 += h3 * r2;\n            d5 += h4 * r1;\n            c = d5 >>> 13;\n            d5 &= 0x1fff;\n            d5 += h5 * r0;\n            d5 += h6 * (5 * r9);\n            d5 += h7 * (5 * r8);\n            d5 += h8 * (5 * r7);\n            d5 += h9 * (5 * r6);\n            c += d5 >>> 13;\n            d5 &= 0x1fff;\n            d6 = c;\n            d6 += h0 * r6;\n            d6 += h1 * r5;\n            d6 += h2 * r4;\n            d6 += h3 * r3;\n            d6 += h4 * r2;\n            c = d6 >>> 13;\n            d6 &= 0x1fff;\n            d6 += h5 * r1;\n            d6 += h6 * r0;\n            d6 += h7 * (5 * r9);\n            d6 += h8 * (5 * r8);\n            d6 += h9 * (5 * r7);\n            c += d6 >>> 13;\n            d6 &= 0x1fff;\n            d7 = c;\n            d7 += h0 * r7;\n            d7 += h1 * r6;\n            d7 += h2 * r5;\n            d7 += h3 * r4;\n            d7 += h4 * r3;\n            c = d7 >>> 13;\n            d7 &= 0x1fff;\n            d7 += h5 * r2;\n            d7 += h6 * r1;\n            d7 += h7 * r0;\n            d7 += h8 * (5 * r9);\n            d7 += h9 * (5 * r8);\n            c += d7 >>> 13;\n            d7 &= 0x1fff;\n            d8 = c;\n            d8 += h0 * r8;\n            d8 += h1 * r7;\n            d8 += h2 * r6;\n            d8 += h3 * r5;\n            d8 += h4 * r4;\n            c = d8 >>> 13;\n            d8 &= 0x1fff;\n            d8 += h5 * r3;\n            d8 += h6 * r2;\n            d8 += h7 * r1;\n            d8 += h8 * r0;\n            d8 += h9 * (5 * r9);\n            c += d8 >>> 13;\n            d8 &= 0x1fff;\n            d9 = c;\n            d9 += h0 * r9;\n            d9 += h1 * r8;\n            d9 += h2 * r7;\n            d9 += h3 * r6;\n            d9 += h4 * r5;\n            c = d9 >>> 13;\n            d9 &= 0x1fff;\n            d9 += h5 * r4;\n            d9 += h6 * r3;\n            d9 += h7 * r2;\n            d9 += h8 * r1;\n            d9 += h9 * r0;\n            c += d9 >>> 13;\n            d9 &= 0x1fff;\n            c = (c << 2) + c | 0;\n            c = c + d0 | 0;\n            d0 = c & 0x1fff;\n            c = c >>> 13;\n            d1 += c;\n            h0 = d0;\n            h1 = d1;\n            h2 = d2;\n            h3 = d3;\n            h4 = d4;\n            h5 = d5;\n            h6 = d6;\n            h7 = d7;\n            h8 = d8;\n            h9 = d9;\n            mpos += 16;\n            bytes -= 16;\n        }\n        this.h[0] = h0;\n        this.h[1] = h1;\n        this.h[2] = h2;\n        this.h[3] = h3;\n        this.h[4] = h4;\n        this.h[5] = h5;\n        this.h[6] = h6;\n        this.h[7] = h7;\n        this.h[8] = h8;\n        this.h[9] = h9;\n    };\n    poly1305.prototype.finish = function(mac, macpos) {\n        var g = new Uint16Array(10);\n        var c, mask, f, i;\n        if (this.leftover) {\n            i = this.leftover;\n            this.buffer[i++] = 1;\n            for(; i < 16; i++)this.buffer[i] = 0;\n            this.fin = 1;\n            this.blocks(this.buffer, 0, 16);\n        }\n        c = this.h[1] >>> 13;\n        this.h[1] &= 0x1fff;\n        for(i = 2; i < 10; i++){\n            this.h[i] += c;\n            c = this.h[i] >>> 13;\n            this.h[i] &= 0x1fff;\n        }\n        this.h[0] += c * 5;\n        c = this.h[0] >>> 13;\n        this.h[0] &= 0x1fff;\n        this.h[1] += c;\n        c = this.h[1] >>> 13;\n        this.h[1] &= 0x1fff;\n        this.h[2] += c;\n        g[0] = this.h[0] + 5;\n        c = g[0] >>> 13;\n        g[0] &= 0x1fff;\n        for(i = 1; i < 10; i++){\n            g[i] = this.h[i] + c;\n            c = g[i] >>> 13;\n            g[i] &= 0x1fff;\n        }\n        g[9] -= 1 << 13;\n        mask = (c ^ 1) - 1;\n        for(i = 0; i < 10; i++)g[i] &= mask;\n        mask = ~mask;\n        for(i = 0; i < 10; i++)this.h[i] = this.h[i] & mask | g[i];\n        this.h[0] = (this.h[0] | this.h[1] << 13) & 0xffff;\n        this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 0xffff;\n        this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 0xffff;\n        this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 0xffff;\n        this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 0xffff;\n        this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 0xffff;\n        this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 0xffff;\n        this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 0xffff;\n        f = this.h[0] + this.pad[0];\n        this.h[0] = f & 0xffff;\n        for(i = 1; i < 8; i++){\n            f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;\n            this.h[i] = f & 0xffff;\n        }\n        mac[macpos + 0] = this.h[0] >>> 0 & 0xff;\n        mac[macpos + 1] = this.h[0] >>> 8 & 0xff;\n        mac[macpos + 2] = this.h[1] >>> 0 & 0xff;\n        mac[macpos + 3] = this.h[1] >>> 8 & 0xff;\n        mac[macpos + 4] = this.h[2] >>> 0 & 0xff;\n        mac[macpos + 5] = this.h[2] >>> 8 & 0xff;\n        mac[macpos + 6] = this.h[3] >>> 0 & 0xff;\n        mac[macpos + 7] = this.h[3] >>> 8 & 0xff;\n        mac[macpos + 8] = this.h[4] >>> 0 & 0xff;\n        mac[macpos + 9] = this.h[4] >>> 8 & 0xff;\n        mac[macpos + 10] = this.h[5] >>> 0 & 0xff;\n        mac[macpos + 11] = this.h[5] >>> 8 & 0xff;\n        mac[macpos + 12] = this.h[6] >>> 0 & 0xff;\n        mac[macpos + 13] = this.h[6] >>> 8 & 0xff;\n        mac[macpos + 14] = this.h[7] >>> 0 & 0xff;\n        mac[macpos + 15] = this.h[7] >>> 8 & 0xff;\n    };\n    poly1305.prototype.update = function(m, mpos, bytes) {\n        var i, want;\n        if (this.leftover) {\n            want = 16 - this.leftover;\n            if (want > bytes) want = bytes;\n            for(i = 0; i < want; i++)this.buffer[this.leftover + i] = m[mpos + i];\n            bytes -= want;\n            mpos += want;\n            this.leftover += want;\n            if (this.leftover < 16) return;\n            this.blocks(this.buffer, 0, 16);\n            this.leftover = 0;\n        }\n        if (bytes >= 16) {\n            want = bytes - bytes % 16;\n            this.blocks(m, mpos, want);\n            mpos += want;\n            bytes -= want;\n        }\n        if (bytes) {\n            for(i = 0; i < bytes; i++)this.buffer[this.leftover + i] = m[mpos + i];\n            this.leftover += bytes;\n        }\n    };\n    function crypto_onetimeauth(out, outpos, m, mpos, n, k) {\n        var s = new poly1305(k);\n        s.update(m, mpos, n);\n        s.finish(out, outpos);\n        return 0;\n    }\n    function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {\n        var x = new Uint8Array(16);\n        crypto_onetimeauth(x, 0, m, mpos, n, k);\n        return crypto_verify_16(h, hpos, x, 0);\n    }\n    function crypto_secretbox(c, m, d, n, k) {\n        var i;\n        if (d < 32) return -1;\n        crypto_stream_xor(c, 0, m, 0, d, n, k);\n        crypto_onetimeauth(c, 16, c, 32, d - 32, c);\n        for(i = 0; i < 16; i++)c[i] = 0;\n        return 0;\n    }\n    function crypto_secretbox_open(m, c, d, n, k) {\n        var i;\n        var x = new Uint8Array(32);\n        if (d < 32) return -1;\n        crypto_stream(x, 0, 32, n, k);\n        if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;\n        crypto_stream_xor(m, 0, c, 0, d, n, k);\n        for(i = 0; i < 32; i++)m[i] = 0;\n        return 0;\n    }\n    function set25519(r, a) {\n        var i;\n        for(i = 0; i < 16; i++)r[i] = a[i] | 0;\n    }\n    function car25519(o) {\n        var i, v, c = 1;\n        for(i = 0; i < 16; i++){\n            v = o[i] + c + 65535;\n            c = Math.floor(v / 65536);\n            o[i] = v - c * 65536;\n        }\n        o[0] += c - 1 + 37 * (c - 1);\n    }\n    function sel25519(p, q, b) {\n        var t, c = ~(b - 1);\n        for(var i = 0; i < 16; i++){\n            t = c & (p[i] ^ q[i]);\n            p[i] ^= t;\n            q[i] ^= t;\n        }\n    }\n    function pack25519(o, n) {\n        var i, j, b;\n        var m = gf(), t = gf();\n        for(i = 0; i < 16; i++)t[i] = n[i];\n        car25519(t);\n        car25519(t);\n        car25519(t);\n        for(j = 0; j < 2; j++){\n            m[0] = t[0] - 0xffed;\n            for(i = 1; i < 15; i++){\n                m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);\n                m[i - 1] &= 0xffff;\n            }\n            m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);\n            b = m[15] >> 16 & 1;\n            m[14] &= 0xffff;\n            sel25519(t, m, 1 - b);\n        }\n        for(i = 0; i < 16; i++){\n            o[2 * i] = t[i] & 0xff;\n            o[2 * i + 1] = t[i] >> 8;\n        }\n    }\n    function neq25519(a, b) {\n        var c = new Uint8Array(32), d = new Uint8Array(32);\n        pack25519(c, a);\n        pack25519(d, b);\n        return crypto_verify_32(c, 0, d, 0);\n    }\n    function par25519(a) {\n        var d = new Uint8Array(32);\n        pack25519(d, a);\n        return d[0] & 1;\n    }\n    function unpack25519(o, n) {\n        var i;\n        for(i = 0; i < 16; i++)o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n        o[15] &= 0x7fff;\n    }\n    function A(o, a, b) {\n        for(var i = 0; i < 16; i++)o[i] = a[i] + b[i];\n    }\n    function Z(o, a, b) {\n        for(var i = 0; i < 16; i++)o[i] = a[i] - b[i];\n    }\n    function M(o, a, b) {\n        var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n        v = a[0];\n        t0 += v * b0;\n        t1 += v * b1;\n        t2 += v * b2;\n        t3 += v * b3;\n        t4 += v * b4;\n        t5 += v * b5;\n        t6 += v * b6;\n        t7 += v * b7;\n        t8 += v * b8;\n        t9 += v * b9;\n        t10 += v * b10;\n        t11 += v * b11;\n        t12 += v * b12;\n        t13 += v * b13;\n        t14 += v * b14;\n        t15 += v * b15;\n        v = a[1];\n        t1 += v * b0;\n        t2 += v * b1;\n        t3 += v * b2;\n        t4 += v * b3;\n        t5 += v * b4;\n        t6 += v * b5;\n        t7 += v * b6;\n        t8 += v * b7;\n        t9 += v * b8;\n        t10 += v * b9;\n        t11 += v * b10;\n        t12 += v * b11;\n        t13 += v * b12;\n        t14 += v * b13;\n        t15 += v * b14;\n        t16 += v * b15;\n        v = a[2];\n        t2 += v * b0;\n        t3 += v * b1;\n        t4 += v * b2;\n        t5 += v * b3;\n        t6 += v * b4;\n        t7 += v * b5;\n        t8 += v * b6;\n        t9 += v * b7;\n        t10 += v * b8;\n        t11 += v * b9;\n        t12 += v * b10;\n        t13 += v * b11;\n        t14 += v * b12;\n        t15 += v * b13;\n        t16 += v * b14;\n        t17 += v * b15;\n        v = a[3];\n        t3 += v * b0;\n        t4 += v * b1;\n        t5 += v * b2;\n        t6 += v * b3;\n        t7 += v * b4;\n        t8 += v * b5;\n        t9 += v * b6;\n        t10 += v * b7;\n        t11 += v * b8;\n        t12 += v * b9;\n        t13 += v * b10;\n        t14 += v * b11;\n        t15 += v * b12;\n        t16 += v * b13;\n        t17 += v * b14;\n        t18 += v * b15;\n        v = a[4];\n        t4 += v * b0;\n        t5 += v * b1;\n        t6 += v * b2;\n        t7 += v * b3;\n        t8 += v * b4;\n        t9 += v * b5;\n        t10 += v * b6;\n        t11 += v * b7;\n        t12 += v * b8;\n        t13 += v * b9;\n        t14 += v * b10;\n        t15 += v * b11;\n        t16 += v * b12;\n        t17 += v * b13;\n        t18 += v * b14;\n        t19 += v * b15;\n        v = a[5];\n        t5 += v * b0;\n        t6 += v * b1;\n        t7 += v * b2;\n        t8 += v * b3;\n        t9 += v * b4;\n        t10 += v * b5;\n        t11 += v * b6;\n        t12 += v * b7;\n        t13 += v * b8;\n        t14 += v * b9;\n        t15 += v * b10;\n        t16 += v * b11;\n        t17 += v * b12;\n        t18 += v * b13;\n        t19 += v * b14;\n        t20 += v * b15;\n        v = a[6];\n        t6 += v * b0;\n        t7 += v * b1;\n        t8 += v * b2;\n        t9 += v * b3;\n        t10 += v * b4;\n        t11 += v * b5;\n        t12 += v * b6;\n        t13 += v * b7;\n        t14 += v * b8;\n        t15 += v * b9;\n        t16 += v * b10;\n        t17 += v * b11;\n        t18 += v * b12;\n        t19 += v * b13;\n        t20 += v * b14;\n        t21 += v * b15;\n        v = a[7];\n        t7 += v * b0;\n        t8 += v * b1;\n        t9 += v * b2;\n        t10 += v * b3;\n        t11 += v * b4;\n        t12 += v * b5;\n        t13 += v * b6;\n        t14 += v * b7;\n        t15 += v * b8;\n        t16 += v * b9;\n        t17 += v * b10;\n        t18 += v * b11;\n        t19 += v * b12;\n        t20 += v * b13;\n        t21 += v * b14;\n        t22 += v * b15;\n        v = a[8];\n        t8 += v * b0;\n        t9 += v * b1;\n        t10 += v * b2;\n        t11 += v * b3;\n        t12 += v * b4;\n        t13 += v * b5;\n        t14 += v * b6;\n        t15 += v * b7;\n        t16 += v * b8;\n        t17 += v * b9;\n        t18 += v * b10;\n        t19 += v * b11;\n        t20 += v * b12;\n        t21 += v * b13;\n        t22 += v * b14;\n        t23 += v * b15;\n        v = a[9];\n        t9 += v * b0;\n        t10 += v * b1;\n        t11 += v * b2;\n        t12 += v * b3;\n        t13 += v * b4;\n        t14 += v * b5;\n        t15 += v * b6;\n        t16 += v * b7;\n        t17 += v * b8;\n        t18 += v * b9;\n        t19 += v * b10;\n        t20 += v * b11;\n        t21 += v * b12;\n        t22 += v * b13;\n        t23 += v * b14;\n        t24 += v * b15;\n        v = a[10];\n        t10 += v * b0;\n        t11 += v * b1;\n        t12 += v * b2;\n        t13 += v * b3;\n        t14 += v * b4;\n        t15 += v * b5;\n        t16 += v * b6;\n        t17 += v * b7;\n        t18 += v * b8;\n        t19 += v * b9;\n        t20 += v * b10;\n        t21 += v * b11;\n        t22 += v * b12;\n        t23 += v * b13;\n        t24 += v * b14;\n        t25 += v * b15;\n        v = a[11];\n        t11 += v * b0;\n        t12 += v * b1;\n        t13 += v * b2;\n        t14 += v * b3;\n        t15 += v * b4;\n        t16 += v * b5;\n        t17 += v * b6;\n        t18 += v * b7;\n        t19 += v * b8;\n        t20 += v * b9;\n        t21 += v * b10;\n        t22 += v * b11;\n        t23 += v * b12;\n        t24 += v * b13;\n        t25 += v * b14;\n        t26 += v * b15;\n        v = a[12];\n        t12 += v * b0;\n        t13 += v * b1;\n        t14 += v * b2;\n        t15 += v * b3;\n        t16 += v * b4;\n        t17 += v * b5;\n        t18 += v * b6;\n        t19 += v * b7;\n        t20 += v * b8;\n        t21 += v * b9;\n        t22 += v * b10;\n        t23 += v * b11;\n        t24 += v * b12;\n        t25 += v * b13;\n        t26 += v * b14;\n        t27 += v * b15;\n        v = a[13];\n        t13 += v * b0;\n        t14 += v * b1;\n        t15 += v * b2;\n        t16 += v * b3;\n        t17 += v * b4;\n        t18 += v * b5;\n        t19 += v * b6;\n        t20 += v * b7;\n        t21 += v * b8;\n        t22 += v * b9;\n        t23 += v * b10;\n        t24 += v * b11;\n        t25 += v * b12;\n        t26 += v * b13;\n        t27 += v * b14;\n        t28 += v * b15;\n        v = a[14];\n        t14 += v * b0;\n        t15 += v * b1;\n        t16 += v * b2;\n        t17 += v * b3;\n        t18 += v * b4;\n        t19 += v * b5;\n        t20 += v * b6;\n        t21 += v * b7;\n        t22 += v * b8;\n        t23 += v * b9;\n        t24 += v * b10;\n        t25 += v * b11;\n        t26 += v * b12;\n        t27 += v * b13;\n        t28 += v * b14;\n        t29 += v * b15;\n        v = a[15];\n        t15 += v * b0;\n        t16 += v * b1;\n        t17 += v * b2;\n        t18 += v * b3;\n        t19 += v * b4;\n        t20 += v * b5;\n        t21 += v * b6;\n        t22 += v * b7;\n        t23 += v * b8;\n        t24 += v * b9;\n        t25 += v * b10;\n        t26 += v * b11;\n        t27 += v * b12;\n        t28 += v * b13;\n        t29 += v * b14;\n        t30 += v * b15;\n        t0 += 38 * t16;\n        t1 += 38 * t17;\n        t2 += 38 * t18;\n        t3 += 38 * t19;\n        t4 += 38 * t20;\n        t5 += 38 * t21;\n        t6 += 38 * t22;\n        t7 += 38 * t23;\n        t8 += 38 * t24;\n        t9 += 38 * t25;\n        t10 += 38 * t26;\n        t11 += 38 * t27;\n        t12 += 38 * t28;\n        t13 += 38 * t29;\n        t14 += 38 * t30;\n        // t15 left as is\n        // first car\n        c = 1;\n        v = t0 + c + 65535;\n        c = Math.floor(v / 65536);\n        t0 = v - c * 65536;\n        v = t1 + c + 65535;\n        c = Math.floor(v / 65536);\n        t1 = v - c * 65536;\n        v = t2 + c + 65535;\n        c = Math.floor(v / 65536);\n        t2 = v - c * 65536;\n        v = t3 + c + 65535;\n        c = Math.floor(v / 65536);\n        t3 = v - c * 65536;\n        v = t4 + c + 65535;\n        c = Math.floor(v / 65536);\n        t4 = v - c * 65536;\n        v = t5 + c + 65535;\n        c = Math.floor(v / 65536);\n        t5 = v - c * 65536;\n        v = t6 + c + 65535;\n        c = Math.floor(v / 65536);\n        t6 = v - c * 65536;\n        v = t7 + c + 65535;\n        c = Math.floor(v / 65536);\n        t7 = v - c * 65536;\n        v = t8 + c + 65535;\n        c = Math.floor(v / 65536);\n        t8 = v - c * 65536;\n        v = t9 + c + 65535;\n        c = Math.floor(v / 65536);\n        t9 = v - c * 65536;\n        v = t10 + c + 65535;\n        c = Math.floor(v / 65536);\n        t10 = v - c * 65536;\n        v = t11 + c + 65535;\n        c = Math.floor(v / 65536);\n        t11 = v - c * 65536;\n        v = t12 + c + 65535;\n        c = Math.floor(v / 65536);\n        t12 = v - c * 65536;\n        v = t13 + c + 65535;\n        c = Math.floor(v / 65536);\n        t13 = v - c * 65536;\n        v = t14 + c + 65535;\n        c = Math.floor(v / 65536);\n        t14 = v - c * 65536;\n        v = t15 + c + 65535;\n        c = Math.floor(v / 65536);\n        t15 = v - c * 65536;\n        t0 += c - 1 + 37 * (c - 1);\n        // second car\n        c = 1;\n        v = t0 + c + 65535;\n        c = Math.floor(v / 65536);\n        t0 = v - c * 65536;\n        v = t1 + c + 65535;\n        c = Math.floor(v / 65536);\n        t1 = v - c * 65536;\n        v = t2 + c + 65535;\n        c = Math.floor(v / 65536);\n        t2 = v - c * 65536;\n        v = t3 + c + 65535;\n        c = Math.floor(v / 65536);\n        t3 = v - c * 65536;\n        v = t4 + c + 65535;\n        c = Math.floor(v / 65536);\n        t4 = v - c * 65536;\n        v = t5 + c + 65535;\n        c = Math.floor(v / 65536);\n        t5 = v - c * 65536;\n        v = t6 + c + 65535;\n        c = Math.floor(v / 65536);\n        t6 = v - c * 65536;\n        v = t7 + c + 65535;\n        c = Math.floor(v / 65536);\n        t7 = v - c * 65536;\n        v = t8 + c + 65535;\n        c = Math.floor(v / 65536);\n        t8 = v - c * 65536;\n        v = t9 + c + 65535;\n        c = Math.floor(v / 65536);\n        t9 = v - c * 65536;\n        v = t10 + c + 65535;\n        c = Math.floor(v / 65536);\n        t10 = v - c * 65536;\n        v = t11 + c + 65535;\n        c = Math.floor(v / 65536);\n        t11 = v - c * 65536;\n        v = t12 + c + 65535;\n        c = Math.floor(v / 65536);\n        t12 = v - c * 65536;\n        v = t13 + c + 65535;\n        c = Math.floor(v / 65536);\n        t13 = v - c * 65536;\n        v = t14 + c + 65535;\n        c = Math.floor(v / 65536);\n        t14 = v - c * 65536;\n        v = t15 + c + 65535;\n        c = Math.floor(v / 65536);\n        t15 = v - c * 65536;\n        t0 += c - 1 + 37 * (c - 1);\n        o[0] = t0;\n        o[1] = t1;\n        o[2] = t2;\n        o[3] = t3;\n        o[4] = t4;\n        o[5] = t5;\n        o[6] = t6;\n        o[7] = t7;\n        o[8] = t8;\n        o[9] = t9;\n        o[10] = t10;\n        o[11] = t11;\n        o[12] = t12;\n        o[13] = t13;\n        o[14] = t14;\n        o[15] = t15;\n    }\n    function S(o, a) {\n        M(o, a, a);\n    }\n    function inv25519(o, i) {\n        var c = gf();\n        var a;\n        for(a = 0; a < 16; a++)c[a] = i[a];\n        for(a = 253; a >= 0; a--){\n            S(c, c);\n            if (a !== 2 && a !== 4) M(c, c, i);\n        }\n        for(a = 0; a < 16; a++)o[a] = c[a];\n    }\n    function pow2523(o, i) {\n        var c = gf();\n        var a;\n        for(a = 0; a < 16; a++)c[a] = i[a];\n        for(a = 250; a >= 0; a--){\n            S(c, c);\n            if (a !== 1) M(c, c, i);\n        }\n        for(a = 0; a < 16; a++)o[a] = c[a];\n    }\n    function crypto_scalarmult(q, n, p) {\n        var z = new Uint8Array(32);\n        var x = new Float64Array(80), r, i;\n        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();\n        for(i = 0; i < 31; i++)z[i] = n[i];\n        z[31] = n[31] & 127 | 64;\n        z[0] &= 248;\n        unpack25519(x, p);\n        for(i = 0; i < 16; i++){\n            b[i] = x[i];\n            d[i] = a[i] = c[i] = 0;\n        }\n        a[0] = d[0] = 1;\n        for(i = 254; i >= 0; --i){\n            r = z[i >>> 3] >>> (i & 7) & 1;\n            sel25519(a, b, r);\n            sel25519(c, d, r);\n            A(e, a, c);\n            Z(a, a, c);\n            A(c, b, d);\n            Z(b, b, d);\n            S(d, e);\n            S(f, a);\n            M(a, c, a);\n            M(c, b, e);\n            A(e, a, c);\n            Z(a, a, c);\n            S(b, a);\n            Z(c, d, f);\n            M(a, c, _121665);\n            A(a, a, d);\n            M(c, c, a);\n            M(a, d, f);\n            M(d, b, x);\n            S(b, e);\n            sel25519(a, b, r);\n            sel25519(c, d, r);\n        }\n        for(i = 0; i < 16; i++){\n            x[i + 16] = a[i];\n            x[i + 32] = c[i];\n            x[i + 48] = b[i];\n            x[i + 64] = d[i];\n        }\n        var x32 = x.subarray(32);\n        var x16 = x.subarray(16);\n        inv25519(x32, x32);\n        M(x16, x16, x32);\n        pack25519(q, x16);\n        return 0;\n    }\n    function crypto_scalarmult_base(q, n) {\n        return crypto_scalarmult(q, n, _9);\n    }\n    function crypto_box_keypair(y, x) {\n        randombytes(x, 32);\n        return crypto_scalarmult_base(y, x);\n    }\n    function crypto_box_beforenm(k, y, x) {\n        var s = new Uint8Array(32);\n        crypto_scalarmult(s, x, y);\n        return crypto_core_hsalsa20(k, _0, s, sigma);\n    }\n    var crypto_box_afternm = crypto_secretbox;\n    var crypto_box_open_afternm = crypto_secretbox_open;\n    function crypto_box(c, m, d, n, y, x) {\n        var k = new Uint8Array(32);\n        crypto_box_beforenm(k, y, x);\n        return crypto_box_afternm(c, m, d, n, k);\n    }\n    function crypto_box_open(m, c, d, n, y, x) {\n        var k = new Uint8Array(32);\n        crypto_box_beforenm(k, y, x);\n        return crypto_box_open_afternm(m, c, d, n, k);\n    }\n    var K = [\n        0x428a2f98,\n        0xd728ae22,\n        0x71374491,\n        0x23ef65cd,\n        0xb5c0fbcf,\n        0xec4d3b2f,\n        0xe9b5dba5,\n        0x8189dbbc,\n        0x3956c25b,\n        0xf348b538,\n        0x59f111f1,\n        0xb605d019,\n        0x923f82a4,\n        0xaf194f9b,\n        0xab1c5ed5,\n        0xda6d8118,\n        0xd807aa98,\n        0xa3030242,\n        0x12835b01,\n        0x45706fbe,\n        0x243185be,\n        0x4ee4b28c,\n        0x550c7dc3,\n        0xd5ffb4e2,\n        0x72be5d74,\n        0xf27b896f,\n        0x80deb1fe,\n        0x3b1696b1,\n        0x9bdc06a7,\n        0x25c71235,\n        0xc19bf174,\n        0xcf692694,\n        0xe49b69c1,\n        0x9ef14ad2,\n        0xefbe4786,\n        0x384f25e3,\n        0x0fc19dc6,\n        0x8b8cd5b5,\n        0x240ca1cc,\n        0x77ac9c65,\n        0x2de92c6f,\n        0x592b0275,\n        0x4a7484aa,\n        0x6ea6e483,\n        0x5cb0a9dc,\n        0xbd41fbd4,\n        0x76f988da,\n        0x831153b5,\n        0x983e5152,\n        0xee66dfab,\n        0xa831c66d,\n        0x2db43210,\n        0xb00327c8,\n        0x98fb213f,\n        0xbf597fc7,\n        0xbeef0ee4,\n        0xc6e00bf3,\n        0x3da88fc2,\n        0xd5a79147,\n        0x930aa725,\n        0x06ca6351,\n        0xe003826f,\n        0x14292967,\n        0x0a0e6e70,\n        0x27b70a85,\n        0x46d22ffc,\n        0x2e1b2138,\n        0x5c26c926,\n        0x4d2c6dfc,\n        0x5ac42aed,\n        0x53380d13,\n        0x9d95b3df,\n        0x650a7354,\n        0x8baf63de,\n        0x766a0abb,\n        0x3c77b2a8,\n        0x81c2c92e,\n        0x47edaee6,\n        0x92722c85,\n        0x1482353b,\n        0xa2bfe8a1,\n        0x4cf10364,\n        0xa81a664b,\n        0xbc423001,\n        0xc24b8b70,\n        0xd0f89791,\n        0xc76c51a3,\n        0x0654be30,\n        0xd192e819,\n        0xd6ef5218,\n        0xd6990624,\n        0x5565a910,\n        0xf40e3585,\n        0x5771202a,\n        0x106aa070,\n        0x32bbd1b8,\n        0x19a4c116,\n        0xb8d2d0c8,\n        0x1e376c08,\n        0x5141ab53,\n        0x2748774c,\n        0xdf8eeb99,\n        0x34b0bcb5,\n        0xe19b48a8,\n        0x391c0cb3,\n        0xc5c95a63,\n        0x4ed8aa4a,\n        0xe3418acb,\n        0x5b9cca4f,\n        0x7763e373,\n        0x682e6ff3,\n        0xd6b2b8a3,\n        0x748f82ee,\n        0x5defb2fc,\n        0x78a5636f,\n        0x43172f60,\n        0x84c87814,\n        0xa1f0ab72,\n        0x8cc70208,\n        0x1a6439ec,\n        0x90befffa,\n        0x23631e28,\n        0xa4506ceb,\n        0xde82bde9,\n        0xbef9a3f7,\n        0xb2c67915,\n        0xc67178f2,\n        0xe372532b,\n        0xca273ece,\n        0xea26619c,\n        0xd186b8c7,\n        0x21c0c207,\n        0xeada7dd6,\n        0xcde0eb1e,\n        0xf57d4f7f,\n        0xee6ed178,\n        0x06f067aa,\n        0x72176fba,\n        0x0a637dc5,\n        0xa2c898a6,\n        0x113f9804,\n        0xbef90dae,\n        0x1b710b35,\n        0x131c471b,\n        0x28db77f5,\n        0x23047d84,\n        0x32caab7b,\n        0x40c72493,\n        0x3c9ebe0a,\n        0x15c9bebc,\n        0x431d67c4,\n        0x9c100d4c,\n        0x4cc5d4be,\n        0xcb3e42b6,\n        0x597f299c,\n        0xfc657e2a,\n        0x5fcb6fab,\n        0x3ad6faec,\n        0x6c44198c,\n        0x4a475817\n    ];\n    function crypto_hashblocks_hl(hh, hl, m, n) {\n        var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i, j, h, l, a, b, c, d;\n        var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];\n        var pos = 0;\n        while(n >= 128){\n            for(i = 0; i < 16; i++){\n                j = 8 * i + pos;\n                wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];\n                wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];\n            }\n            for(i = 0; i < 80; i++){\n                bh0 = ah0;\n                bh1 = ah1;\n                bh2 = ah2;\n                bh3 = ah3;\n                bh4 = ah4;\n                bh5 = ah5;\n                bh6 = ah6;\n                bh7 = ah7;\n                bl0 = al0;\n                bl1 = al1;\n                bl2 = al2;\n                bl3 = al3;\n                bl4 = al4;\n                bl5 = al5;\n                bl6 = al6;\n                bl7 = al7;\n                // add\n                h = ah7;\n                l = al7;\n                a = l & 0xffff;\n                b = l >>> 16;\n                c = h & 0xffff;\n                d = h >>> 16;\n                // Sigma1\n                h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));\n                l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));\n                a += l & 0xffff;\n                b += l >>> 16;\n                c += h & 0xffff;\n                d += h >>> 16;\n                // Ch\n                h = ah4 & ah5 ^ ~ah4 & ah6;\n                l = al4 & al5 ^ ~al4 & al6;\n                a += l & 0xffff;\n                b += l >>> 16;\n                c += h & 0xffff;\n                d += h >>> 16;\n                // K\n                h = K[i * 2];\n                l = K[i * 2 + 1];\n                a += l & 0xffff;\n                b += l >>> 16;\n                c += h & 0xffff;\n                d += h >>> 16;\n                // w\n                h = wh[i % 16];\n                l = wl[i % 16];\n                a += l & 0xffff;\n                b += l >>> 16;\n                c += h & 0xffff;\n                d += h >>> 16;\n                b += a >>> 16;\n                c += b >>> 16;\n                d += c >>> 16;\n                th = c & 0xffff | d << 16;\n                tl = a & 0xffff | b << 16;\n                // add\n                h = th;\n                l = tl;\n                a = l & 0xffff;\n                b = l >>> 16;\n                c = h & 0xffff;\n                d = h >>> 16;\n                // Sigma0\n                h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));\n                l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));\n                a += l & 0xffff;\n                b += l >>> 16;\n                c += h & 0xffff;\n                d += h >>> 16;\n                // Maj\n                h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;\n                l = al0 & al1 ^ al0 & al2 ^ al1 & al2;\n                a += l & 0xffff;\n                b += l >>> 16;\n                c += h & 0xffff;\n                d += h >>> 16;\n                b += a >>> 16;\n                c += b >>> 16;\n                d += c >>> 16;\n                bh7 = c & 0xffff | d << 16;\n                bl7 = a & 0xffff | b << 16;\n                // add\n                h = bh3;\n                l = bl3;\n                a = l & 0xffff;\n                b = l >>> 16;\n                c = h & 0xffff;\n                d = h >>> 16;\n                h = th;\n                l = tl;\n                a += l & 0xffff;\n                b += l >>> 16;\n                c += h & 0xffff;\n                d += h >>> 16;\n                b += a >>> 16;\n                c += b >>> 16;\n                d += c >>> 16;\n                bh3 = c & 0xffff | d << 16;\n                bl3 = a & 0xffff | b << 16;\n                ah1 = bh0;\n                ah2 = bh1;\n                ah3 = bh2;\n                ah4 = bh3;\n                ah5 = bh4;\n                ah6 = bh5;\n                ah7 = bh6;\n                ah0 = bh7;\n                al1 = bl0;\n                al2 = bl1;\n                al3 = bl2;\n                al4 = bl3;\n                al5 = bl4;\n                al6 = bl5;\n                al7 = bl6;\n                al0 = bl7;\n                if (i % 16 === 15) {\n                    for(j = 0; j < 16; j++){\n                        // add\n                        h = wh[j];\n                        l = wl[j];\n                        a = l & 0xffff;\n                        b = l >>> 16;\n                        c = h & 0xffff;\n                        d = h >>> 16;\n                        h = wh[(j + 9) % 16];\n                        l = wl[(j + 9) % 16];\n                        a += l & 0xffff;\n                        b += l >>> 16;\n                        c += h & 0xffff;\n                        d += h >>> 16;\n                        // sigma0\n                        th = wh[(j + 1) % 16];\n                        tl = wl[(j + 1) % 16];\n                        h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;\n                        l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);\n                        a += l & 0xffff;\n                        b += l >>> 16;\n                        c += h & 0xffff;\n                        d += h >>> 16;\n                        // sigma1\n                        th = wh[(j + 14) % 16];\n                        tl = wl[(j + 14) % 16];\n                        h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;\n                        l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);\n                        a += l & 0xffff;\n                        b += l >>> 16;\n                        c += h & 0xffff;\n                        d += h >>> 16;\n                        b += a >>> 16;\n                        c += b >>> 16;\n                        d += c >>> 16;\n                        wh[j] = c & 0xffff | d << 16;\n                        wl[j] = a & 0xffff | b << 16;\n                    }\n                }\n            }\n            // add\n            h = ah0;\n            l = al0;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = hh[0];\n            l = hl[0];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            hh[0] = ah0 = c & 0xffff | d << 16;\n            hl[0] = al0 = a & 0xffff | b << 16;\n            h = ah1;\n            l = al1;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = hh[1];\n            l = hl[1];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            hh[1] = ah1 = c & 0xffff | d << 16;\n            hl[1] = al1 = a & 0xffff | b << 16;\n            h = ah2;\n            l = al2;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = hh[2];\n            l = hl[2];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            hh[2] = ah2 = c & 0xffff | d << 16;\n            hl[2] = al2 = a & 0xffff | b << 16;\n            h = ah3;\n            l = al3;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = hh[3];\n            l = hl[3];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            hh[3] = ah3 = c & 0xffff | d << 16;\n            hl[3] = al3 = a & 0xffff | b << 16;\n            h = ah4;\n            l = al4;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = hh[4];\n            l = hl[4];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            hh[4] = ah4 = c & 0xffff | d << 16;\n            hl[4] = al4 = a & 0xffff | b << 16;\n            h = ah5;\n            l = al5;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = hh[5];\n            l = hl[5];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            hh[5] = ah5 = c & 0xffff | d << 16;\n            hl[5] = al5 = a & 0xffff | b << 16;\n            h = ah6;\n            l = al6;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = hh[6];\n            l = hl[6];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            hh[6] = ah6 = c & 0xffff | d << 16;\n            hl[6] = al6 = a & 0xffff | b << 16;\n            h = ah7;\n            l = al7;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = hh[7];\n            l = hl[7];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            hh[7] = ah7 = c & 0xffff | d << 16;\n            hl[7] = al7 = a & 0xffff | b << 16;\n            pos += 128;\n            n -= 128;\n        }\n        return n;\n    }\n    function crypto_hash(out, m, n) {\n        var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i, b = n;\n        hh[0] = 0x6a09e667;\n        hh[1] = 0xbb67ae85;\n        hh[2] = 0x3c6ef372;\n        hh[3] = 0xa54ff53a;\n        hh[4] = 0x510e527f;\n        hh[5] = 0x9b05688c;\n        hh[6] = 0x1f83d9ab;\n        hh[7] = 0x5be0cd19;\n        hl[0] = 0xf3bcc908;\n        hl[1] = 0x84caa73b;\n        hl[2] = 0xfe94f82b;\n        hl[3] = 0x5f1d36f1;\n        hl[4] = 0xade682d1;\n        hl[5] = 0x2b3e6c1f;\n        hl[6] = 0xfb41bd6b;\n        hl[7] = 0x137e2179;\n        crypto_hashblocks_hl(hh, hl, m, n);\n        n %= 128;\n        for(i = 0; i < n; i++)x[i] = m[b - n + i];\n        x[n] = 128;\n        n = 256 - 128 * (n < 112 ? 1 : 0);\n        x[n - 9] = 0;\n        ts64(x, n - 8, b / 0x20000000 | 0, b << 3);\n        crypto_hashblocks_hl(hh, hl, x, n);\n        for(i = 0; i < 8; i++)ts64(out, 8 * i, hh[i], hl[i]);\n        return 0;\n    }\n    function add(p, q) {\n        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();\n        Z(a, p[1], p[0]);\n        Z(t, q[1], q[0]);\n        M(a, a, t);\n        A(b, p[0], p[1]);\n        A(t, q[0], q[1]);\n        M(b, b, t);\n        M(c, p[3], q[3]);\n        M(c, c, D2);\n        M(d, p[2], q[2]);\n        A(d, d, d);\n        Z(e, b, a);\n        Z(f, d, c);\n        A(g, d, c);\n        A(h, b, a);\n        M(p[0], e, f);\n        M(p[1], h, g);\n        M(p[2], g, f);\n        M(p[3], e, h);\n    }\n    function cswap(p, q, b) {\n        var i;\n        for(i = 0; i < 4; i++){\n            sel25519(p[i], q[i], b);\n        }\n    }\n    function pack(r, p) {\n        var tx = gf(), ty = gf(), zi = gf();\n        inv25519(zi, p[2]);\n        M(tx, p[0], zi);\n        M(ty, p[1], zi);\n        pack25519(r, ty);\n        r[31] ^= par25519(tx) << 7;\n    }\n    function scalarmult(p, q, s) {\n        var b, i;\n        set25519(p[0], gf0);\n        set25519(p[1], gf1);\n        set25519(p[2], gf1);\n        set25519(p[3], gf0);\n        for(i = 255; i >= 0; --i){\n            b = s[i / 8 | 0] >> (i & 7) & 1;\n            cswap(p, q, b);\n            add(q, p);\n            add(p, p);\n            cswap(p, q, b);\n        }\n    }\n    function scalarbase(p, s) {\n        var q = [\n            gf(),\n            gf(),\n            gf(),\n            gf()\n        ];\n        set25519(q[0], X);\n        set25519(q[1], Y);\n        set25519(q[2], gf1);\n        M(q[3], X, Y);\n        scalarmult(p, q, s);\n    }\n    function crypto_sign_keypair(pk, sk, seeded) {\n        var d = new Uint8Array(64);\n        var p = [\n            gf(),\n            gf(),\n            gf(),\n            gf()\n        ];\n        var i;\n        if (!seeded) randombytes(sk, 32);\n        crypto_hash(d, sk, 32);\n        d[0] &= 248;\n        d[31] &= 127;\n        d[31] |= 64;\n        scalarbase(p, d);\n        pack(pk, p);\n        for(i = 0; i < 32; i++)sk[i + 32] = pk[i];\n        return 0;\n    }\n    var L = new Float64Array([\n        0xed,\n        0xd3,\n        0xf5,\n        0x5c,\n        0x1a,\n        0x63,\n        0x12,\n        0x58,\n        0xd6,\n        0x9c,\n        0xf7,\n        0xa2,\n        0xde,\n        0xf9,\n        0xde,\n        0x14,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0x10\n    ]);\n    function modL(r, x) {\n        var carry, i, j, k;\n        for(i = 63; i >= 32; --i){\n            carry = 0;\n            for(j = i - 32, k = i - 12; j < k; ++j){\n                x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n                carry = Math.floor((x[j] + 128) / 256);\n                x[j] -= carry * 256;\n            }\n            x[j] += carry;\n            x[i] = 0;\n        }\n        carry = 0;\n        for(j = 0; j < 32; j++){\n            x[j] += carry - (x[31] >> 4) * L[j];\n            carry = x[j] >> 8;\n            x[j] &= 255;\n        }\n        for(j = 0; j < 32; j++)x[j] -= carry * L[j];\n        for(i = 0; i < 32; i++){\n            x[i + 1] += x[i] >> 8;\n            r[i] = x[i] & 255;\n        }\n    }\n    function reduce(r) {\n        var x = new Float64Array(64), i;\n        for(i = 0; i < 64; i++)x[i] = r[i];\n        for(i = 0; i < 64; i++)r[i] = 0;\n        modL(r, x);\n    }\n    // Note: difference from C - smlen returned, not passed as argument.\n    function crypto_sign(sm, m, n, sk) {\n        var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n        var i, j, x = new Float64Array(64);\n        var p = [\n            gf(),\n            gf(),\n            gf(),\n            gf()\n        ];\n        crypto_hash(d, sk, 32);\n        d[0] &= 248;\n        d[31] &= 127;\n        d[31] |= 64;\n        var smlen = n + 64;\n        for(i = 0; i < n; i++)sm[64 + i] = m[i];\n        for(i = 0; i < 32; i++)sm[32 + i] = d[32 + i];\n        crypto_hash(r, sm.subarray(32), n + 32);\n        reduce(r);\n        scalarbase(p, r);\n        pack(sm, p);\n        for(i = 32; i < 64; i++)sm[i] = sk[i];\n        crypto_hash(h, sm, n + 64);\n        reduce(h);\n        for(i = 0; i < 64; i++)x[i] = 0;\n        for(i = 0; i < 32; i++)x[i] = r[i];\n        for(i = 0; i < 32; i++){\n            for(j = 0; j < 32; j++){\n                x[i + j] += h[i] * d[j];\n            }\n        }\n        modL(sm.subarray(32), x);\n        return smlen;\n    }\n    function unpackneg(r, p) {\n        var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();\n        set25519(r[2], gf1);\n        unpack25519(r[1], p);\n        S(num, r[1]);\n        M(den, num, D);\n        Z(num, num, r[2]);\n        A(den, r[2], den);\n        S(den2, den);\n        S(den4, den2);\n        M(den6, den4, den2);\n        M(t, den6, num);\n        M(t, t, den);\n        pow2523(t, t);\n        M(t, t, num);\n        M(t, t, den);\n        M(t, t, den);\n        M(r[0], t, den);\n        S(chk, r[0]);\n        M(chk, chk, den);\n        if (neq25519(chk, num)) M(r[0], r[0], I);\n        S(chk, r[0]);\n        M(chk, chk, den);\n        if (neq25519(chk, num)) return -1;\n        if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);\n        M(r[3], r[0], r[1]);\n        return 0;\n    }\n    function crypto_sign_open(m, sm, n, pk) {\n        var i;\n        var t = new Uint8Array(32), h = new Uint8Array(64);\n        var p = [\n            gf(),\n            gf(),\n            gf(),\n            gf()\n        ], q = [\n            gf(),\n            gf(),\n            gf(),\n            gf()\n        ];\n        if (n < 64) return -1;\n        if (unpackneg(q, pk)) return -1;\n        for(i = 0; i < n; i++)m[i] = sm[i];\n        for(i = 0; i < 32; i++)m[i + 32] = pk[i];\n        crypto_hash(h, m, n);\n        reduce(h);\n        scalarmult(p, q, h);\n        scalarbase(q, sm.subarray(32));\n        add(p, q);\n        pack(t, p);\n        n -= 64;\n        if (crypto_verify_32(sm, 0, t, 0)) {\n            for(i = 0; i < n; i++)m[i] = 0;\n            return -1;\n        }\n        for(i = 0; i < n; i++)m[i] = sm[i + 64];\n        return n;\n    }\n    var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;\n    nacl.lowlevel = {\n        crypto_core_hsalsa20: crypto_core_hsalsa20,\n        crypto_stream_xor: crypto_stream_xor,\n        crypto_stream: crypto_stream,\n        crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,\n        crypto_stream_salsa20: crypto_stream_salsa20,\n        crypto_onetimeauth: crypto_onetimeauth,\n        crypto_onetimeauth_verify: crypto_onetimeauth_verify,\n        crypto_verify_16: crypto_verify_16,\n        crypto_verify_32: crypto_verify_32,\n        crypto_secretbox: crypto_secretbox,\n        crypto_secretbox_open: crypto_secretbox_open,\n        crypto_scalarmult: crypto_scalarmult,\n        crypto_scalarmult_base: crypto_scalarmult_base,\n        crypto_box_beforenm: crypto_box_beforenm,\n        crypto_box_afternm: crypto_box_afternm,\n        crypto_box: crypto_box,\n        crypto_box_open: crypto_box_open,\n        crypto_box_keypair: crypto_box_keypair,\n        crypto_hash: crypto_hash,\n        crypto_sign: crypto_sign,\n        crypto_sign_keypair: crypto_sign_keypair,\n        crypto_sign_open: crypto_sign_open,\n        crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,\n        crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,\n        crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,\n        crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,\n        crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,\n        crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,\n        crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,\n        crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,\n        crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,\n        crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,\n        crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,\n        crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,\n        crypto_sign_BYTES: crypto_sign_BYTES,\n        crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,\n        crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,\n        crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,\n        crypto_hash_BYTES: crypto_hash_BYTES,\n        gf: gf,\n        D: D,\n        L: L,\n        pack: pack,\n        pack25519: pack25519,\n        unpack25519: unpack25519,\n        M: M,\n        A: A,\n        S: S,\n        Z: Z,\n        pow2523: pow2523,\n        add: add,\n        set25519: set25519,\n        modL: modL,\n        scalarmult: scalarmult,\n        scalarbase: scalarbase\n    };\n    /* High-level API */ function checkLengths(k, n) {\n        if (k.length !== crypto_secretbox_KEYBYTES) throw new Error(\"bad key size\");\n        if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error(\"bad nonce size\");\n    }\n    function checkBoxLengths(pk, sk) {\n        if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error(\"bad public key size\");\n        if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error(\"bad secret key size\");\n    }\n    function checkArrayTypes() {\n        for(var i = 0; i < arguments.length; i++){\n            if (!(arguments[i] instanceof Uint8Array)) throw new TypeError(\"unexpected type, use Uint8Array\");\n        }\n    }\n    function cleanup(arr) {\n        for(var i = 0; i < arr.length; i++)arr[i] = 0;\n    }\n    nacl.randomBytes = function(n) {\n        var b = new Uint8Array(n);\n        randombytes(b, n);\n        return b;\n    };\n    nacl.secretbox = function(msg, nonce, key) {\n        checkArrayTypes(msg, nonce, key);\n        checkLengths(key, nonce);\n        var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);\n        var c = new Uint8Array(m.length);\n        for(var i = 0; i < msg.length; i++)m[i + crypto_secretbox_ZEROBYTES] = msg[i];\n        crypto_secretbox(c, m, m.length, nonce, key);\n        return c.subarray(crypto_secretbox_BOXZEROBYTES);\n    };\n    nacl.secretbox.open = function(box, nonce, key) {\n        checkArrayTypes(box, nonce, key);\n        checkLengths(key, nonce);\n        var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);\n        var m = new Uint8Array(c.length);\n        for(var i = 0; i < box.length; i++)c[i + crypto_secretbox_BOXZEROBYTES] = box[i];\n        if (c.length < 32) return null;\n        if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;\n        return m.subarray(crypto_secretbox_ZEROBYTES);\n    };\n    nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;\n    nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;\n    nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;\n    nacl.scalarMult = function(n, p) {\n        checkArrayTypes(n, p);\n        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error(\"bad n size\");\n        if (p.length !== crypto_scalarmult_BYTES) throw new Error(\"bad p size\");\n        var q = new Uint8Array(crypto_scalarmult_BYTES);\n        crypto_scalarmult(q, n, p);\n        return q;\n    };\n    nacl.scalarMult.base = function(n) {\n        checkArrayTypes(n);\n        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error(\"bad n size\");\n        var q = new Uint8Array(crypto_scalarmult_BYTES);\n        crypto_scalarmult_base(q, n);\n        return q;\n    };\n    nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;\n    nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;\n    nacl.box = function(msg, nonce, publicKey, secretKey) {\n        var k = nacl.box.before(publicKey, secretKey);\n        return nacl.secretbox(msg, nonce, k);\n    };\n    nacl.box.before = function(publicKey, secretKey) {\n        checkArrayTypes(publicKey, secretKey);\n        checkBoxLengths(publicKey, secretKey);\n        var k = new Uint8Array(crypto_box_BEFORENMBYTES);\n        crypto_box_beforenm(k, publicKey, secretKey);\n        return k;\n    };\n    nacl.box.after = nacl.secretbox;\n    nacl.box.open = function(msg, nonce, publicKey, secretKey) {\n        var k = nacl.box.before(publicKey, secretKey);\n        return nacl.secretbox.open(msg, nonce, k);\n    };\n    nacl.box.open.after = nacl.secretbox.open;\n    nacl.box.keyPair = function() {\n        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n        var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n        crypto_box_keypair(pk, sk);\n        return {\n            publicKey: pk,\n            secretKey: sk\n        };\n    };\n    nacl.box.keyPair.fromSecretKey = function(secretKey) {\n        checkArrayTypes(secretKey);\n        if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error(\"bad secret key size\");\n        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n        crypto_scalarmult_base(pk, secretKey);\n        return {\n            publicKey: pk,\n            secretKey: new Uint8Array(secretKey)\n        };\n    };\n    nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;\n    nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;\n    nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;\n    nacl.box.nonceLength = crypto_box_NONCEBYTES;\n    nacl.box.overheadLength = nacl.secretbox.overheadLength;\n    nacl.sign = function(msg, secretKey) {\n        checkArrayTypes(msg, secretKey);\n        if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error(\"bad secret key size\");\n        var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);\n        crypto_sign(signedMsg, msg, msg.length, secretKey);\n        return signedMsg;\n    };\n    nacl.sign.open = function(signedMsg, publicKey) {\n        checkArrayTypes(signedMsg, publicKey);\n        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error(\"bad public key size\");\n        var tmp = new Uint8Array(signedMsg.length);\n        var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n        if (mlen < 0) return null;\n        var m = new Uint8Array(mlen);\n        for(var i = 0; i < m.length; i++)m[i] = tmp[i];\n        return m;\n    };\n    nacl.sign.detached = function(msg, secretKey) {\n        var signedMsg = nacl.sign(msg, secretKey);\n        var sig = new Uint8Array(crypto_sign_BYTES);\n        for(var i = 0; i < sig.length; i++)sig[i] = signedMsg[i];\n        return sig;\n    };\n    nacl.sign.detached.verify = function(msg, sig, publicKey) {\n        checkArrayTypes(msg, sig, publicKey);\n        if (sig.length !== crypto_sign_BYTES) throw new Error(\"bad signature size\");\n        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error(\"bad public key size\");\n        var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n        var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n        var i;\n        for(i = 0; i < crypto_sign_BYTES; i++)sm[i] = sig[i];\n        for(i = 0; i < msg.length; i++)sm[i + crypto_sign_BYTES] = msg[i];\n        return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;\n    };\n    nacl.sign.keyPair = function() {\n        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n        crypto_sign_keypair(pk, sk);\n        return {\n            publicKey: pk,\n            secretKey: sk\n        };\n    };\n    nacl.sign.keyPair.fromSecretKey = function(secretKey) {\n        checkArrayTypes(secretKey);\n        if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error(\"bad secret key size\");\n        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n        for(var i = 0; i < pk.length; i++)pk[i] = secretKey[32 + i];\n        return {\n            publicKey: pk,\n            secretKey: new Uint8Array(secretKey)\n        };\n    };\n    nacl.sign.keyPair.fromSeed = function(seed) {\n        checkArrayTypes(seed);\n        if (seed.length !== crypto_sign_SEEDBYTES) throw new Error(\"bad seed size\");\n        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n        for(var i = 0; i < 32; i++)sk[i] = seed[i];\n        crypto_sign_keypair(pk, sk, true);\n        return {\n            publicKey: pk,\n            secretKey: sk\n        };\n    };\n    nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;\n    nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;\n    nacl.sign.seedLength = crypto_sign_SEEDBYTES;\n    nacl.sign.signatureLength = crypto_sign_BYTES;\n    nacl.hash = function(msg) {\n        checkArrayTypes(msg);\n        var h = new Uint8Array(crypto_hash_BYTES);\n        crypto_hash(h, msg, msg.length);\n        return h;\n    };\n    nacl.hash.hashLength = crypto_hash_BYTES;\n    nacl.verify = function(x, y) {\n        checkArrayTypes(x, y);\n        // Zero length arguments are considered not equal.\n        if (x.length === 0 || y.length === 0) return false;\n        if (x.length !== y.length) return false;\n        return vn(x, 0, y, 0, x.length) === 0 ? true : false;\n    };\n    nacl.setPRNG = function(fn) {\n        randombytes = fn;\n    };\n    (function() {\n        // Initialize PRNG if environment provides CSPRNG.\n        // If not, methods calling randombytes will throw.\n        var crypto = typeof self !== \"undefined\" ? self.crypto || self.msCrypto : null;\n        if (crypto && crypto.getRandomValues) {\n            // Browsers.\n            var QUOTA = 65536;\n            nacl.setPRNG(function(x, n) {\n                var i, v = new Uint8Array(n);\n                for(i = 0; i < n; i += QUOTA){\n                    crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n                }\n                for(i = 0; i < n; i++)x[i] = v[i];\n                cleanup(v);\n            });\n        } else if (true) {\n            // Node.js.\n            crypto = __webpack_require__(/*! crypto */ \"crypto\");\n            if (crypto && crypto.randomBytes) {\n                nacl.setPRNG(function(x, n) {\n                    var i, v = crypto.randomBytes(n);\n                    for(i = 0; i < n; i++)x[i] = v[i];\n                    cleanup(v);\n                });\n            }\n        }\n    })();\n})( true && module.exports ? module.exports : self.nacl = self.nacl || {});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/tweetnacl-js/nacl-fast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/rlp/dist/esm/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/rlp/dist/esm/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RLP: () => (/* binding */ RLP),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   utils: () => (/* binding */ utils)\n/* harmony export */ });\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/ function encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for(let i = 0; i < input.length; i++){\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */ function safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error(\"invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds\");\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */ function decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error(\"invalid RLP: extra zeros\");\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([\n            len + offset\n        ]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (typeof input === \"undefined\" || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error(\"invalid RLP: remainder must be zero\");\n    }\n    return decoded.data;\n}\n/** Decode an input with RLP */ function _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1)\n        };\n    } else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        } else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error(\"invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed\");\n        }\n        return {\n            data,\n            remainder: input.slice(length)\n        };\n    } else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error(\"invalid RLP: not enough bytes for string length\");\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error(\"invalid RLP: expected string length to be greater than 55\");\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.slice(length + llength)\n        };\n    } else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while(innerRemainder.length){\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length)\n        };\n    } else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error(\"invalid RLP: encoded list too short\");\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error(\"invalid RLP: total length is larger than the data\");\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while(innerRemainder.length){\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength)\n        };\n    }\n}\nconst cachedHexes = Array.from({\n    length: 256\n}, (_v, i)=>i.toString(16).padStart(2, \"0\"));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = \"\";\n    for(let i = 0; i < uint8a.length; i++){\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte)) throw new Error(\"Invalid byte sequence\");\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== \"string\") {\n        throw new TypeError(\"hexToBytes: expected string, got \" + typeof hex);\n    }\n    if (hex.length % 2) throw new Error(\"hexToBytes: received invalid unpadded hex\");\n    const array = new Uint8Array(hex.length / 2);\n    for(let i = 0; i < array.length; i++){\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */ function concatBytes(...arrays) {\n    if (arrays.length === 1) return arrays[0];\n    const length = arrays.reduce((a, arr)=>a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */ function numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error(\"Invalid integer as argument, must be unsigned!\");\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */ function padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */ function isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === \"0\" && str[1] === \"x\";\n}\n/** Removes 0x from a given String */ function stripHexPrefix(str) {\n    if (typeof str !== \"string\") {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */ function toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === \"string\") {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === \"number\" || typeof v === \"bigint\") {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error(\"toBytes: received unsupported type \" + typeof v);\n}\nconst utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes\n};\nconst RLP = {\n    encode,\n    decode\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/rlp/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/account.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/account.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   accountBodyFromSlim: () => (/* binding */ accountBodyFromSlim),\n/* harmony export */   accountBodyToRLP: () => (/* binding */ accountBodyToRLP),\n/* harmony export */   accountBodyToSlim: () => (/* binding */ accountBodyToSlim),\n/* harmony export */   generateAddress: () => (/* binding */ generateAddress),\n/* harmony export */   generateAddress2: () => (/* binding */ generateAddress2),\n/* harmony export */   importPublic: () => (/* binding */ importPublic),\n/* harmony export */   isValidAddress: () => (/* binding */ isValidAddress),\n/* harmony export */   isValidChecksumAddress: () => (/* binding */ isValidChecksumAddress),\n/* harmony export */   isValidPrivate: () => (/* binding */ isValidPrivate),\n/* harmony export */   isValidPublic: () => (/* binding */ isValidPublic),\n/* harmony export */   isZeroAddress: () => (/* binding */ isZeroAddress),\n/* harmony export */   privateToAddress: () => (/* binding */ privateToAddress),\n/* harmony export */   privateToPublic: () => (/* binding */ privateToPublic),\n/* harmony export */   pubToAddress: () => (/* binding */ pubToAddress),\n/* harmony export */   publicToAddress: () => (/* binding */ publicToAddress),\n/* harmony export */   toChecksumAddress: () => (/* binding */ toChecksumAddress),\n/* harmony export */   zeroAddress: () => (/* binding */ zeroAddress)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n\n\n\n\n\nclass Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */ constructor(nonce = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, balance = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, storageRoot = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP, codeHash = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL){\n        this.nonce = nonce;\n        this.balance = balance;\n        this.storageRoot = storageRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, storageRoot, codeHash } = accountData;\n        return new Account(nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(nonce)) : undefined, balance !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(balance)) : undefined, storageRoot !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(storageRoot) : undefined, codeHash !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(codeHash) : undefined);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized account input. Must be array\");\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, storageRoot, codeHash] = values;\n        return new Account((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(balance), storageRoot, codeHash);\n    }\n    _validate() {\n        if (this.nonce < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error(\"nonce must be greater than zero\");\n        }\n        if (this.balance < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error(\"balance must be greater than zero\");\n        }\n        if (this.storageRoot.length !== 32) {\n            throw new Error(\"storageRoot must have a length of 32\");\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error(\"codeHash must have a length of 32\");\n        }\n    }\n    /**\n     * Returns an array of Uint8Arrays of the raw bytes for the account, in order.\n     */ raw() {\n        return [\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.balance),\n            this.storageRoot,\n            this.codeHash\n        ];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Uint8Array`.\n     */ serialize() {\n        return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(this.raw());\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */ isContract() {\n        return !(0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */ isEmpty() {\n        return this.balance === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 && this.nonce === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 && (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL);\n    }\n}\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */ const isValidAddress = function(hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    } catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */ const toChecksumAddress = function(hexAddress, eip1191ChainId) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsHexString)(hexAddress);\n    const address = (0,_internal_js__WEBPACK_IMPORTED_MODULE_6__.stripHexPrefix)(hexAddress).toLowerCase();\n    let prefix = \"\";\n    if (eip1191ChainId !== undefined) {\n        const chainId = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(eip1191ChainId));\n        prefix = chainId.toString() + \"0x\";\n    }\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.utf8ToBytes)(prefix + address);\n    const hash = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)((0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(bytes)).slice(2);\n    let ret = \"0x\";\n    for(let i = 0; i < address.length; i++){\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        } else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */ const isValidChecksumAddress = function(hexAddress, eip1191ChainId) {\n    return isValidAddress(hexAddress) && toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */ const generateAddress = function(from, nonce) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(nonce);\n    if ((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce) === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([\n            from,\n            Uint8Array.from([])\n        ])).subarray(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([\n        from,\n        nonce\n    ])).subarray(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */ const generateAddress2 = function(from, salt, initCode) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(salt);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(initCode);\n    if (from.length !== 20) {\n        throw new Error(\"Expected from to be of length 20\");\n    }\n    if (salt.length !== 32) {\n        throw new Error(\"Expected salt to be of length 32\");\n    }\n    const address = (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(\"0xff\"), from, salt, (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(initCode)));\n    return address.subarray(-20);\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */ const isValidPrivate = function(privateKey) {\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.utils.isValidPrivateKey(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */ const isValidPublic = function(publicKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        // Automatically checks whether point is on curve\n        try {\n            ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(Uint8Array.from([\n                4\n            ]), publicKey));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    if (!sanitize) {\n        return false;\n    }\n    try {\n        ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */ const pubToAddress = function(pubKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n    }\n    if (pubKey.length !== 64) {\n        throw new Error(\"Expected pubKey to be of length 64\");\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(pubKey).subarray(-20);\n};\nconst publicToAddress = pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */ const privateToPublic = function(privateKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(privateKey);\n    // skip the type flag and use the X, Y points\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1);\n};\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */ const privateToAddress = function(privateKey) {\n    return publicToAddress(privateToPublic(privateKey));\n};\n/**\n * Converts a public key to the Ethereum format.\n */ const importPublic = function(publicKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1);\n    }\n    return publicKey;\n};\n/**\n * Returns the zero address.\n */ const zeroAddress = function() {\n    const addressLength = 20;\n    const addr = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.zeros)(addressLength);\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(addr);\n};\n/**\n * Checks if a given address is the zero address.\n */ const isZeroAddress = function(hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    } catch (e) {\n        return false;\n    }\n    const zeroAddr = zeroAddress();\n    return zeroAddr === hexAddress;\n};\nfunction accountBodyFromSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        storageRoot.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP : storageRoot,\n        codeHash.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL : codeHash\n    ];\n}\nconst emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(storageRoot, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL) ? emptyUint8Arr : codeHash\n    ];\n}\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Uint8Array-like items to represent the account\n * @returns RLP encoded version of the account\n */ function accountBodyToRLP(body, couldBeSlim = true) {\n    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n    return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(accountBody);\n} //# sourceMappingURL=account.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/address.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/address.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: () => (/* binding */ Address)\n/* harmony export */ });\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./account.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n\n\n/**\n * Handling and generating Ethereum addresses\n */ class Address {\n    constructor(bytes){\n        if (bytes.length !== 20) {\n            throw new Error(\"Invalid address length\");\n        }\n        this.bytes = bytes;\n    }\n    /**\n     * Returns the zero address.\n     */ static zero() {\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.zeros)(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */ static fromString(str) {\n        if (!(0,_account_js__WEBPACK_IMPORTED_MODULE_0__.isValidAddress)(str)) {\n            throw new Error(\"Invalid address\");\n        }\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */ static fromPublicKey(pubKey) {\n        if (!(pubKey instanceof Uint8Array)) {\n            throw new Error(\"Public key should be Uint8Array\");\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.pubToAddress)(pubKey);\n        return new Address(bytes);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */ static fromPrivateKey(privateKey) {\n        if (!(privateKey instanceof Uint8Array)) {\n            throw new Error(\"Private key should be Uint8Array\");\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.privateToAddress)(privateKey);\n        return new Address(bytes);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */ static generate(from, nonce) {\n        if (typeof nonce !== \"bigint\") {\n            throw new Error(\"Expected nonce to be a bigint\");\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress)(from.bytes, (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(nonce)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */ static generate2(from, salt, initCode) {\n        if (!(salt instanceof Uint8Array)) {\n            throw new Error(\"Expected salt to be a Uint8Array\");\n        }\n        if (!(initCode instanceof Uint8Array)) {\n            throw new Error(\"Expected initCode to be a Uint8Array\");\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress2)(from.bytes, salt, initCode));\n    }\n    /**\n     * Is address equal to another.\n     */ equals(address) {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(this.bytes, address.bytes);\n    }\n    /**\n     * Is address zero.\n     */ isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */ isPrecompileOrSystemAddress() {\n        const address = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(this.bytes);\n        const rangeMin = _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0;\n        const rangeMax = BigInt(\"0xffff\");\n        return address >= rangeMin && address <= rangeMax;\n    }\n    /**\n     * Returns hex encoding of address.\n     */ toString() {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.bytes);\n    }\n    /**\n     * Returns a new Uint8Array representation of address.\n     */ toBytes() {\n        return new Uint8Array(this.bytes);\n    }\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncEventEmitter: () => (/* binding */ AsyncEventEmitter)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/**\n * Ported to Typescript from original implementation below:\n * https://github.com/ahultgren/async-eventemitter -- MIT licensed\n *\n * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed\n * that was contributed to Definitely Typed below:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter\n */ \nasync function runInSeries(context, tasks, data) {\n    let error;\n    for await (const task of tasks){\n        try {\n            if (task.length < 2) {\n                //sync\n                task.call(context, data);\n            } else {\n                await new Promise((resolve, reject)=>{\n                    task.call(context, data, (error)=>{\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve();\n                        }\n                    });\n                });\n            }\n        } catch (e) {\n            error = e;\n        }\n    }\n    if (error) {\n        throw error;\n    }\n}\nclass AsyncEventEmitter extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    emit(event, ...args) {\n        let [data, callback] = args;\n        const self = this;\n        let listeners = self._events[event] ?? [];\n        // Optional data argument\n        if (callback === undefined && typeof data === \"function\") {\n            callback = data;\n            data = undefined;\n        }\n        // Special treatment of internal newListener and removeListener events\n        if (event === \"newListener\" || event === \"removeListener\") {\n            data = {\n                event: data,\n                fn: callback\n            };\n            callback = undefined;\n        }\n        // A single listener is just a function not an array...\n        listeners = Array.isArray(listeners) ? listeners : [\n            listeners\n        ];\n        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);\n        return self.listenerCount(event) > 0;\n    }\n    once(event, listener) {\n        const self = this;\n        let g;\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        // Hack to support set arity\n        if (listener.length >= 2) {\n            g = function(e, next) {\n                self.removeListener(event, g);\n                void listener(e, next);\n            };\n        } else {\n            g = function(e) {\n                self.removeListener(event, g);\n                void listener(e, g);\n            };\n        }\n        self.on(event, g);\n        return self;\n    }\n    first(event, listener) {\n        let listeners = this._events[event] ?? [];\n        // Contract\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [\n                listeners\n            ];\n        }\n        listeners.unshift(listener);\n        return this;\n    }\n    before(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener);\n    }\n    after(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener, \"after\");\n    }\n    beforeOrAfter(event, target, listener, beforeOrAfter) {\n        let listeners = this._events[event] ?? [];\n        let i;\n        let index;\n        const add = beforeOrAfter === \"after\" ? 1 : 0;\n        // Contract\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        if (typeof target !== \"function\") {\n            throw new TypeError(\"target must be a function\");\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [\n                listeners\n            ];\n        }\n        index = listeners.length;\n        for(i = listeners.length; i--;){\n            if (listeners[i] === target) {\n                index = i + add;\n                break;\n            }\n        }\n        listeners.splice(index, 0, listener);\n        return this;\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    addListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    prependListener(event, listener) {\n        return super.prependListener(event, listener);\n    }\n    prependOnceListener(event, listener) {\n        return super.prependOnceListener(event, listener);\n    }\n    removeAllListeners(event) {\n        return super.removeAllListeners(event);\n    }\n    removeListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    eventNames() {\n        return super.eventNames();\n    }\n    listeners(event) {\n        return super.listeners(event);\n    }\n    listenerCount(event) {\n        return super.listenerCount(event);\n    }\n    getMaxListeners() {\n        return super.getMaxListeners();\n    }\n    setMaxListeners(maxListeners) {\n        return super.setMaxListeners(maxListeners);\n    }\n} //# sourceMappingURL=asyncEventEmitter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/blobs.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/blobs.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blobsToCommitments: () => (/* binding */ blobsToCommitments),\n/* harmony export */   blobsToProofs: () => (/* binding */ blobsToProofs),\n/* harmony export */   commitmentsToVersionedHashes: () => (/* binding */ commitmentsToVersionedHashes),\n/* harmony export */   computeVersionedHash: () => (/* binding */ computeVersionedHash),\n/* harmony export */   getBlobs: () => (/* binding */ getBlobs)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/sha256.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/sha256.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _kzg_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./kzg.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/kzg.js\");\n\n\n\n/**\n * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git\n */ const BYTES_PER_FIELD_ELEMENT = 32;\nconst FIELD_ELEMENTS_PER_BLOB = 4096;\nconst USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB;\nconst MAX_BLOBS_PER_TX = 2;\nconst MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1;\nconst BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB;\nfunction get_padded(data, blobs_len) {\n    const pdata = new Uint8Array(blobs_len * USEFUL_BYTES_PER_BLOB).fill(0);\n    pdata.set(data);\n    pdata[data.byteLength] = 0x80;\n    return pdata;\n}\nfunction get_blob(data) {\n    const blob = new Uint8Array(BLOB_SIZE);\n    for(let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++){\n        const chunk = new Uint8Array(32);\n        chunk.set(data.subarray(i * 31, (i + 1) * 31), 0);\n        blob.set(chunk, i * 32);\n    }\n    return blob;\n}\nconst getBlobs = (input)=>{\n    const data = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)(input);\n    const len = data.byteLength;\n    if (len === 0) {\n        throw Error(\"invalid blob data\");\n    }\n    if (len > MAX_USEFUL_BYTES_PER_TX) {\n        throw Error(\"blob data is too large\");\n    }\n    const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB);\n    const pdata = get_padded(data, blobs_len);\n    const blobs = [];\n    for(let i = 0; i < blobs_len; i++){\n        const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB);\n        const blob = get_blob(chunk);\n        blobs.push(blob);\n    }\n    return blobs;\n};\nconst blobsToCommitments = (blobs)=>{\n    const commitments = [];\n    for (const blob of blobs){\n        commitments.push(_kzg_js__WEBPACK_IMPORTED_MODULE_2__.kzg.blobToKzgCommitment(blob));\n    }\n    return commitments;\n};\nconst blobsToProofs = (blobs, commitments)=>{\n    const proofs = blobs.map((blob, ctx)=>_kzg_js__WEBPACK_IMPORTED_MODULE_2__.kzg.computeBlobKzgProof(blob, commitments[ctx]));\n    return proofs;\n};\n/**\n * Converts a vector commitment for a given data blob to its versioned hash.  For 4844, this version\n * number will be 0x01 for KZG vector commitments but could be different if future vector commitment\n * types are introduced\n * @param commitment a vector commitment to a blob\n * @param blobCommitmentVersion the version number corresponding to the type of vector commitment\n * @returns a versioned hash corresponding to a given blob vector commitment\n */ const computeVersionedHash = (commitment, blobCommitmentVersion)=>{\n    const computedVersionedHash = new Uint8Array(32);\n    computedVersionedHash.set([\n        blobCommitmentVersion\n    ], 0);\n    computedVersionedHash.set((0,ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__.sha256)(commitment).subarray(1), 1);\n    return computedVersionedHash;\n};\n/**\n * Generate an array of versioned hashes from corresponding kzg commitments\n * @param commitments array of kzg commitments\n * @returns array of versioned hashes\n * Note: assumes KZG commitments (version 1 version hashes)\n */ const commitmentsToVersionedHashes = (commitments)=>{\n    const hashes = [];\n    for (const commitment of commitments){\n        hashes.push(computeVersionedHash(commitment, 0x01));\n    }\n    return hashes;\n}; //# sourceMappingURL=blobs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2Jsb2JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXlEO0FBQ2hCO0FBQ1Y7QUFDL0I7O0NBRUMsR0FDRCxNQUFNRywwQkFBMEI7QUFDaEMsTUFBTUMsMEJBQTBCO0FBQ2hDLE1BQU1DLHdCQUF3QixLQUFLRDtBQUNuQyxNQUFNRSxtQkFBbUI7QUFDekIsTUFBTUMsMEJBQTBCRix3QkFBd0JDLG1CQUFtQjtBQUMzRSxNQUFNRSxZQUFZTCwwQkFBMEJDO0FBQzVDLFNBQVNLLFdBQVdDLElBQUksRUFBRUMsU0FBUztJQUMvQixNQUFNQyxRQUFRLElBQUlDLFdBQVdGLFlBQVlOLHVCQUF1QlMsSUFBSSxDQUFDO0lBQ3JFRixNQUFNRyxHQUFHLENBQUNMO0lBQ1ZFLEtBQUssQ0FBQ0YsS0FBS00sVUFBVSxDQUFDLEdBQUc7SUFDekIsT0FBT0o7QUFDWDtBQUNBLFNBQVNLLFNBQVNQLElBQUk7SUFDbEIsTUFBTVEsT0FBTyxJQUFJTCxXQUFXTDtJQUM1QixJQUFLLElBQUlXLElBQUksR0FBR0EsSUFBSWYseUJBQXlCZSxJQUFLO1FBQzlDLE1BQU1DLFFBQVEsSUFBSVAsV0FBVztRQUM3Qk8sTUFBTUwsR0FBRyxDQUFDTCxLQUFLVyxRQUFRLENBQUNGLElBQUksSUFBSSxDQUFDQSxJQUFJLEtBQUssS0FBSztRQUMvQ0QsS0FBS0gsR0FBRyxDQUFDSyxPQUFPRCxJQUFJO0lBQ3hCO0lBQ0EsT0FBT0Q7QUFDWDtBQUNPLE1BQU1JLFdBQVcsQ0FBQ0M7SUFDckIsTUFBTWIsT0FBT1Qsc0RBQVdBLENBQUNzQjtJQUN6QixNQUFNQyxNQUFNZCxLQUFLTSxVQUFVO0lBQzNCLElBQUlRLFFBQVEsR0FBRztRQUNYLE1BQU1DLE1BQU07SUFDaEI7SUFDQSxJQUFJRCxNQUFNakIseUJBQXlCO1FBQy9CLE1BQU1rQixNQUFNO0lBQ2hCO0lBQ0EsTUFBTWQsWUFBWWUsS0FBS0MsSUFBSSxDQUFDSCxNQUFNbkI7SUFDbEMsTUFBTU8sUUFBUUgsV0FBV0MsTUFBTUM7SUFDL0IsTUFBTWlCLFFBQVEsRUFBRTtJQUNoQixJQUFLLElBQUlULElBQUksR0FBR0EsSUFBSVIsV0FBV1EsSUFBSztRQUNoQyxNQUFNQyxRQUFRUixNQUFNUyxRQUFRLENBQUNGLElBQUlkLHVCQUF1QixDQUFDYyxJQUFJLEtBQUtkO1FBQ2xFLE1BQU1hLE9BQU9ELFNBQVNHO1FBQ3RCUSxNQUFNQyxJQUFJLENBQUNYO0lBQ2Y7SUFDQSxPQUFPVTtBQUNYLEVBQUU7QUFDSyxNQUFNRSxxQkFBcUIsQ0FBQ0Y7SUFDL0IsTUFBTUcsY0FBYyxFQUFFO0lBQ3RCLEtBQUssTUFBTWIsUUFBUVUsTUFBTztRQUN0QkcsWUFBWUYsSUFBSSxDQUFDM0Isd0NBQUdBLENBQUM4QixtQkFBbUIsQ0FBQ2Q7SUFDN0M7SUFDQSxPQUFPYTtBQUNYLEVBQUU7QUFDSyxNQUFNRSxnQkFBZ0IsQ0FBQ0wsT0FBT0c7SUFDakMsTUFBTUcsU0FBU04sTUFBTU8sR0FBRyxDQUFDLENBQUNqQixNQUFNa0IsTUFBUWxDLHdDQUFHQSxDQUFDbUMsbUJBQW1CLENBQUNuQixNQUFNYSxXQUFXLENBQUNLLElBQUk7SUFDdEYsT0FBT0Y7QUFDWCxFQUFFO0FBQ0Y7Ozs7Ozs7Q0FPQyxHQUNNLE1BQU1JLHVCQUF1QixDQUFDQyxZQUFZQztJQUM3QyxNQUFNQyx3QkFBd0IsSUFBSTVCLFdBQVc7SUFDN0M0QixzQkFBc0IxQixHQUFHLENBQUM7UUFBQ3lCO0tBQXNCLEVBQUU7SUFDbkRDLHNCQUFzQjFCLEdBQUcsQ0FBQ2YsdUVBQU1BLENBQUN1QyxZQUFZbEIsUUFBUSxDQUFDLElBQUk7SUFDMUQsT0FBT29CO0FBQ1gsRUFBRTtBQUNGOzs7OztDQUtDLEdBQ00sTUFBTUMsK0JBQStCLENBQUNYO0lBQ3pDLE1BQU1ZLFNBQVMsRUFBRTtJQUNqQixLQUFLLE1BQU1KLGNBQWNSLFlBQWE7UUFDbENZLE9BQU9kLElBQUksQ0FBQ1MscUJBQXFCQyxZQUFZO0lBQ2pEO0lBQ0EsT0FBT0k7QUFDWCxFQUFFLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vYmxvYnMuanM/NjkyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGEyNTYgfSBmcm9tICdldGhlcmV1bS1jcnlwdG9ncmFwaHkvc2hhMjU2LmpzJztcbmltcG9ydCB7IHV0ZjhUb0J5dGVzIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5pbXBvcnQgeyBremcgfSBmcm9tICcuL2t6Zy5qcyc7XG4vKipcbiAqIFRoZXNlIHV0aWxpdGllcyBmb3IgY29uc3RydWN0aW5nIGJsb2JzIGFyZSBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9JbnBoaS9laXA0ODQ0LWludGVyb3AuZ2l0XG4gKi9cbmNvbnN0IEJZVEVTX1BFUl9GSUVMRF9FTEVNRU5UID0gMzI7XG5jb25zdCBGSUVMRF9FTEVNRU5UU19QRVJfQkxPQiA9IDQwOTY7XG5jb25zdCBVU0VGVUxfQllURVNfUEVSX0JMT0IgPSAzMiAqIEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9CO1xuY29uc3QgTUFYX0JMT0JTX1BFUl9UWCA9IDI7XG5jb25zdCBNQVhfVVNFRlVMX0JZVEVTX1BFUl9UWCA9IFVTRUZVTF9CWVRFU19QRVJfQkxPQiAqIE1BWF9CTE9CU19QRVJfVFggLSAxO1xuY29uc3QgQkxPQl9TSVpFID0gQllURVNfUEVSX0ZJRUxEX0VMRU1FTlQgKiBGSUVMRF9FTEVNRU5UU19QRVJfQkxPQjtcbmZ1bmN0aW9uIGdldF9wYWRkZWQoZGF0YSwgYmxvYnNfbGVuKSB7XG4gICAgY29uc3QgcGRhdGEgPSBuZXcgVWludDhBcnJheShibG9ic19sZW4gKiBVU0VGVUxfQllURVNfUEVSX0JMT0IpLmZpbGwoMCk7XG4gICAgcGRhdGEuc2V0KGRhdGEpO1xuICAgIHBkYXRhW2RhdGEuYnl0ZUxlbmd0aF0gPSAweDgwO1xuICAgIHJldHVybiBwZGF0YTtcbn1cbmZ1bmN0aW9uIGdldF9ibG9iKGRhdGEpIHtcbiAgICBjb25zdCBibG9iID0gbmV3IFVpbnQ4QXJyYXkoQkxPQl9TSVpFKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9COyBpKyspIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgICAgIGNodW5rLnNldChkYXRhLnN1YmFycmF5KGkgKiAzMSwgKGkgKyAxKSAqIDMxKSwgMCk7XG4gICAgICAgIGJsb2Iuc2V0KGNodW5rLCBpICogMzIpO1xuICAgIH1cbiAgICByZXR1cm4gYmxvYjtcbn1cbmV4cG9ydCBjb25zdCBnZXRCbG9icyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSB1dGY4VG9CeXRlcyhpbnB1dCk7XG4gICAgY29uc3QgbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ2ludmFsaWQgYmxvYiBkYXRhJyk7XG4gICAgfVxuICAgIGlmIChsZW4gPiBNQVhfVVNFRlVMX0JZVEVTX1BFUl9UWCkge1xuICAgICAgICB0aHJvdyBFcnJvcignYmxvYiBkYXRhIGlzIHRvbyBsYXJnZScpO1xuICAgIH1cbiAgICBjb25zdCBibG9ic19sZW4gPSBNYXRoLmNlaWwobGVuIC8gVVNFRlVMX0JZVEVTX1BFUl9CTE9CKTtcbiAgICBjb25zdCBwZGF0YSA9IGdldF9wYWRkZWQoZGF0YSwgYmxvYnNfbGVuKTtcbiAgICBjb25zdCBibG9icyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvYnNfbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBwZGF0YS5zdWJhcnJheShpICogVVNFRlVMX0JZVEVTX1BFUl9CTE9CLCAoaSArIDEpICogVVNFRlVMX0JZVEVTX1BFUl9CTE9CKTtcbiAgICAgICAgY29uc3QgYmxvYiA9IGdldF9ibG9iKGNodW5rKTtcbiAgICAgICAgYmxvYnMucHVzaChibG9iKTtcbiAgICB9XG4gICAgcmV0dXJuIGJsb2JzO1xufTtcbmV4cG9ydCBjb25zdCBibG9ic1RvQ29tbWl0bWVudHMgPSAoYmxvYnMpID0+IHtcbiAgICBjb25zdCBjb21taXRtZW50cyA9IFtdO1xuICAgIGZvciAoY29uc3QgYmxvYiBvZiBibG9icykge1xuICAgICAgICBjb21taXRtZW50cy5wdXNoKGt6Zy5ibG9iVG9LemdDb21taXRtZW50KGJsb2IpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1pdG1lbnRzO1xufTtcbmV4cG9ydCBjb25zdCBibG9ic1RvUHJvb2ZzID0gKGJsb2JzLCBjb21taXRtZW50cykgPT4ge1xuICAgIGNvbnN0IHByb29mcyA9IGJsb2JzLm1hcCgoYmxvYiwgY3R4KSA9PiBremcuY29tcHV0ZUJsb2JLemdQcm9vZihibG9iLCBjb21taXRtZW50c1tjdHhdKSk7XG4gICAgcmV0dXJuIHByb29mcztcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgdmVjdG9yIGNvbW1pdG1lbnQgZm9yIGEgZ2l2ZW4gZGF0YSBibG9iIHRvIGl0cyB2ZXJzaW9uZWQgaGFzaC4gIEZvciA0ODQ0LCB0aGlzIHZlcnNpb25cbiAqIG51bWJlciB3aWxsIGJlIDB4MDEgZm9yIEtaRyB2ZWN0b3IgY29tbWl0bWVudHMgYnV0IGNvdWxkIGJlIGRpZmZlcmVudCBpZiBmdXR1cmUgdmVjdG9yIGNvbW1pdG1lbnRcbiAqIHR5cGVzIGFyZSBpbnRyb2R1Y2VkXG4gKiBAcGFyYW0gY29tbWl0bWVudCBhIHZlY3RvciBjb21taXRtZW50IHRvIGEgYmxvYlxuICogQHBhcmFtIGJsb2JDb21taXRtZW50VmVyc2lvbiB0aGUgdmVyc2lvbiBudW1iZXIgY29ycmVzcG9uZGluZyB0byB0aGUgdHlwZSBvZiB2ZWN0b3IgY29tbWl0bWVudFxuICogQHJldHVybnMgYSB2ZXJzaW9uZWQgaGFzaCBjb3JyZXNwb25kaW5nIHRvIGEgZ2l2ZW4gYmxvYiB2ZWN0b3IgY29tbWl0bWVudFxuICovXG5leHBvcnQgY29uc3QgY29tcHV0ZVZlcnNpb25lZEhhc2ggPSAoY29tbWl0bWVudCwgYmxvYkNvbW1pdG1lbnRWZXJzaW9uKSA9PiB7XG4gICAgY29uc3QgY29tcHV0ZWRWZXJzaW9uZWRIYXNoID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICAgIGNvbXB1dGVkVmVyc2lvbmVkSGFzaC5zZXQoW2Jsb2JDb21taXRtZW50VmVyc2lvbl0sIDApO1xuICAgIGNvbXB1dGVkVmVyc2lvbmVkSGFzaC5zZXQoc2hhMjU2KGNvbW1pdG1lbnQpLnN1YmFycmF5KDEpLCAxKTtcbiAgICByZXR1cm4gY29tcHV0ZWRWZXJzaW9uZWRIYXNoO1xufTtcbi8qKlxuICogR2VuZXJhdGUgYW4gYXJyYXkgb2YgdmVyc2lvbmVkIGhhc2hlcyBmcm9tIGNvcnJlc3BvbmRpbmcga3pnIGNvbW1pdG1lbnRzXG4gKiBAcGFyYW0gY29tbWl0bWVudHMgYXJyYXkgb2Yga3pnIGNvbW1pdG1lbnRzXG4gKiBAcmV0dXJucyBhcnJheSBvZiB2ZXJzaW9uZWQgaGFzaGVzXG4gKiBOb3RlOiBhc3N1bWVzIEtaRyBjb21taXRtZW50cyAodmVyc2lvbiAxIHZlcnNpb24gaGFzaGVzKVxuICovXG5leHBvcnQgY29uc3QgY29tbWl0bWVudHNUb1ZlcnNpb25lZEhhc2hlcyA9IChjb21taXRtZW50cykgPT4ge1xuICAgIGNvbnN0IGhhc2hlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgY29tbWl0bWVudCBvZiBjb21taXRtZW50cykge1xuICAgICAgICBoYXNoZXMucHVzaChjb21wdXRlVmVyc2lvbmVkSGFzaChjb21taXRtZW50LCAweDAxKSk7XG4gICAgfVxuICAgIHJldHVybiBoYXNoZXM7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmxvYnMuanMubWFwIl0sIm5hbWVzIjpbInNoYTI1NiIsInV0ZjhUb0J5dGVzIiwia3pnIiwiQllURVNfUEVSX0ZJRUxEX0VMRU1FTlQiLCJGSUVMRF9FTEVNRU5UU19QRVJfQkxPQiIsIlVTRUZVTF9CWVRFU19QRVJfQkxPQiIsIk1BWF9CTE9CU19QRVJfVFgiLCJNQVhfVVNFRlVMX0JZVEVTX1BFUl9UWCIsIkJMT0JfU0laRSIsImdldF9wYWRkZWQiLCJkYXRhIiwiYmxvYnNfbGVuIiwicGRhdGEiLCJVaW50OEFycmF5IiwiZmlsbCIsInNldCIsImJ5dGVMZW5ndGgiLCJnZXRfYmxvYiIsImJsb2IiLCJpIiwiY2h1bmsiLCJzdWJhcnJheSIsImdldEJsb2JzIiwiaW5wdXQiLCJsZW4iLCJFcnJvciIsIk1hdGgiLCJjZWlsIiwiYmxvYnMiLCJwdXNoIiwiYmxvYnNUb0NvbW1pdG1lbnRzIiwiY29tbWl0bWVudHMiLCJibG9iVG9LemdDb21taXRtZW50IiwiYmxvYnNUb1Byb29mcyIsInByb29mcyIsIm1hcCIsImN0eCIsImNvbXB1dGVCbG9iS3pnUHJvb2YiLCJjb21wdXRlVmVyc2lvbmVkSGFzaCIsImNvbW1pdG1lbnQiLCJibG9iQ29tbWl0bWVudFZlcnNpb24iLCJjb21wdXRlZFZlcnNpb25lZEhhc2giLCJjb21taXRtZW50c1RvVmVyc2lvbmVkSGFzaGVzIiwiaGFzaGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/blobs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHexPrefix: () => (/* binding */ addHexPrefix),\n/* harmony export */   bigInt64ToBytes: () => (/* binding */ bigInt64ToBytes),\n/* harmony export */   bigIntToBytes: () => (/* binding */ bigIntToBytes),\n/* harmony export */   bigIntToHex: () => (/* binding */ bigIntToHex),\n/* harmony export */   bigIntToUnpaddedBytes: () => (/* binding */ bigIntToUnpaddedBytes),\n/* harmony export */   bytesToBigInt: () => (/* binding */ bytesToBigInt),\n/* harmony export */   bytesToBigInt64: () => (/* binding */ bytesToBigInt64),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToInt: () => (/* binding */ bytesToInt),\n/* harmony export */   bytesToInt32: () => (/* binding */ bytesToInt32),\n/* harmony export */   bytesToUnprefixedHex: () => (/* binding */ bytesToUnprefixedHex),\n/* harmony export */   bytesToUtf8: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToUtf8),\n/* harmony export */   compareBytes: () => (/* binding */ compareBytes),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   equalsBytes: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes),\n/* harmony export */   fromSigned: () => (/* binding */ fromSigned),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   int32ToBytes: () => (/* binding */ int32ToBytes),\n/* harmony export */   intToBytes: () => (/* binding */ intToBytes),\n/* harmony export */   intToHex: () => (/* binding */ intToHex),\n/* harmony export */   intToUnpaddedBytes: () => (/* binding */ intToUnpaddedBytes),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   setLengthLeft: () => (/* binding */ setLengthLeft),\n/* harmony export */   setLengthRight: () => (/* binding */ setLengthRight),\n/* harmony export */   short: () => (/* binding */ short),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toUnsigned: () => (/* binding */ toUnsigned),\n/* harmony export */   unpadArray: () => (/* binding */ unpadArray),\n/* harmony export */   unpadBytes: () => (/* binding */ unpadBytes),\n/* harmony export */   unpadHex: () => (/* binding */ unpadHex),\n/* harmony export */   unprefixedHexToBytes: () => (/* binding */ unprefixedHexToBytes),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes),\n/* harmony export */   validateNoLeadingZeroes: () => (/* binding */ validateNoLeadingZeroes),\n/* harmony export */   zeros: () => (/* binding */ zeros)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/random.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/random.js\");\n/* harmony import */ var ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/utils.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/utils.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n// eslint-disable-next-line no-restricted-imports\n\n\n\nconst BIGINT_0 = BigInt(0);\n/**\n * @deprecated\n */ const bytesToUnprefixedHex = ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex;\n/**\n * @deprecated\n */ const unprefixedHexToBytes = (inp)=>{\n    if (inp.slice(0, 2) === \"0x\") {\n        throw new Error(\"hex string is prefixed with 0x, should be unprefixed\");\n    } else {\n        return (0,ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)((0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(inp));\n    }\n};\n/****************  Borrowed from @chainsafe/ssz */ // Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = Array.from({\n    length: 256\n}, (v, i)=>i.toString(16).padStart(2, \"0\"));\nconst bytesToHex = (bytes)=>{\n    let hex = \"0x\";\n    if (bytes === undefined || bytes.length === 0) return hex;\n    for (const byte of bytes){\n        hex += hexByByte[byte];\n    }\n    return hex;\n};\n// BigInt cache for the numbers 0 - 256*256-1 (two-byte bytes)\nconst BIGINT_CACHE = [];\nfor(let i = 0; i <= 256 * 256 - 1; i++){\n    BIGINT_CACHE[i] = BigInt(i);\n}\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n * @param {Uint8Array} bytes the bytes to convert\n * @returns {bigint}\n */ const bytesToBigInt = (bytes)=>{\n    const hex = bytesToHex(bytes);\n    if (hex === \"0x\") {\n        return BIGINT_0;\n    }\n    if (hex.length === 4) {\n        // If the byte length is 1 (this is faster than checking `bytes.length === 1`)\n        return BIGINT_CACHE[bytes[0]];\n    }\n    if (hex.length === 6) {\n        return BIGINT_CACHE[bytes[0] * 256 + bytes[1]];\n    }\n    return BigInt(hex);\n};\n/**\n * Converts a {@link Uint8Array} to a {@link number}.\n * @param {Uint8Array} bytes the bytes to convert\n * @return  {number}\n * @throws If the input number exceeds 53 bits.\n */ const bytesToInt = (bytes)=>{\n    const res = Number(bytesToBigInt(bytes));\n    if (!Number.isSafeInteger(res)) throw new Error(\"Number exceeds 53 bits\");\n    return res;\n};\nconst hexToBytes = (hex)=>{\n    if (typeof hex !== \"string\") {\n        throw new Error(`hex argument type ${typeof hex} must be of type string`);\n    }\n    if (!hex.startsWith(\"0x\")) {\n        throw new Error(`prefixed hex input should start with 0x, got ${hex.substring(0, 2)}`);\n    }\n    hex = hex.slice(2);\n    if (hex.length % 2 !== 0) {\n        hex = (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(hex);\n    }\n    const byteLen = hex.length / 2;\n    const bytes = new Uint8Array(byteLen);\n    for(let i = 0; i < byteLen; i++){\n        const byte = parseInt(hex.slice(i * 2, (i + 1) * 2), 16);\n        bytes[i] = byte;\n    }\n    return bytes;\n};\n/******************************************/ /**\n * Converts a {@link number} into a {@link PrefixedHexString}\n * @param {number} i\n * @return {PrefixedHexString}\n */ const intToHex = (i)=>{\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\n/**\n * Converts an {@link number} to a {@link Uint8Array}\n * @param {Number} i\n * @return {Uint8Array}\n */ const intToBytes = (i)=>{\n    const hex = intToHex(i);\n    return hexToBytes(hex);\n};\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n *  * @param {bigint} num the bigint to convert\n * @returns {Uint8Array}\n */ const bigIntToBytes = (num)=>{\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return toBytes(\"0x\" + (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(num.toString(16)));\n};\n/**\n * Returns a Uint8Array filled with 0s.\n * @param {number} bytes the number of bytes of the Uint8Array\n * @return {Uint8Array}\n */ const zeros = (bytes)=>{\n    return new Uint8Array(bytes);\n};\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @param {boolean} right whether to start padding form the left or right\n * @return {Uint8Array}\n */ const setLength = (msg, length, right)=>{\n    if (right) {\n        if (msg.length < length) {\n            return new Uint8Array([\n                ...msg,\n                ...zeros(length - msg.length)\n            ]);\n        }\n        return msg.subarray(0, length);\n    } else {\n        if (msg.length < length) {\n            return new Uint8Array([\n                ...zeros(length - msg.length),\n                ...msg\n            ]);\n        }\n        return msg.subarray(-length);\n    }\n};\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */ const setLengthLeft = (msg, length)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Uint8Array` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */ const setLengthRight = (msg, length)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Uint8Array`, `number[]` or PrefixedHexString`.\n * @param {Uint8Array|number[]|PrefixedHexString} a\n * @return {Uint8Array|number[]|PrefixedHexString}\n */ const stripZeros = (a)=>{\n    let first = a[0];\n    while(a.length > 0 && first.toString() === \"0\"){\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param {Uint8Array} a\n * @return {Uint8Array}\n */ const unpadBytes = (a)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param  {number[]} a\n * @return {number[]}\n */ const unpadArray = (a)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsArray)(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from a `PrefixedHexString`.\n * @param {PrefixedHexString} a\n * @return {PrefixedHexString}\n */ const unpadHex = (a)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsHexString)(a);\n    a = (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(a);\n    return \"0x\" + stripZeros(a);\n};\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Buffer`, `Uint8Array`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBytes()` method.\n * @param {ToBytesInputTypes} v the value\n * @return {Uint8Array}\n */ const toBytes = (v)=>{\n    if (v === null || v === undefined) {\n        return new Uint8Array();\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Uint8Array.from(v);\n    }\n    if (typeof v === \"string\") {\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexString)(v)) {\n            throw new Error(`Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return hexToBytes(v);\n    }\n    if (typeof v === \"number\") {\n        return intToBytes(v);\n    }\n    if (typeof v === \"bigint\") {\n        if (v < BIGINT_0) {\n            throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2) n = \"0\" + n;\n        return unprefixedHexToBytes(n);\n    }\n    if (v.toBytes !== undefined) {\n        // converts a `TransformableToBytes` object to a Uint8Array\n        return v.toBytes();\n    }\n    throw new Error(\"invalid type\");\n};\n/**\n * Interprets a `Uint8Array` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param {Uint8Array} num Signed integer value\n * @returns {bigint}\n */ const fromSigned = (num)=>{\n    return BigInt.asIntN(256, bytesToBigInt(num));\n};\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Uint8Array`. Assumes 256-bit numbers.\n * @param {bigint} num\n * @returns {Uint8Array}\n */ const toUnsigned = (num)=>{\n    return bigIntToBytes(BigInt.asUintN(256, num));\n};\n/**\n * Adds \"0x\" to a given `string` if it does not already start with \"0x\".\n * @param {string} str\n * @return {PrefixedHexString}\n */ const addHexPrefix = (str)=>{\n    if (typeof str !== \"string\") {\n        return str;\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexPrefixed)(str) ? str : \"0x\" + str;\n};\n/**\n * Shortens a string  or Uint8Array's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n * @param {Uint8Array | string} bytes\n * @param {number} maxLength\n * @return {string}\n */ const short = (bytes, maxLength = 50)=>{\n    const byteStr = bytes instanceof Uint8Array ? bytesToHex(bytes) : bytes;\n    const len = byteStr.slice(0, 2) === \"0x\" ? maxLength + 2 : maxLength;\n    if (byteStr.length <= len) {\n        return byteStr;\n    }\n    return byteStr.slice(0, len) + \"…\";\n};\n/**\n * Checks provided Uint8Array for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Uint8Array values\n * @throws if any provided value is found to have leading zero bytes\n */ const validateNoLeadingZeroes = (values)=>{\n    for (const [k, v] of Object.entries(values)){\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${bytesToHex(v)}`);\n        }\n    }\n};\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n * @param {bigint} num the bigint to convert\n * @returns {PrefixedHexString}\n */ const bigIntToHex = (num)=>{\n    return \"0x\" + num.toString(16);\n};\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {bigint} value the bigint to convert\n * @returns {Uint8Array}\n */ const bigIntToUnpaddedBytes = (value)=>{\n    return unpadBytes(bigIntToBytes(value));\n};\n/**\n * Convert value from number to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {number} value the bigint to convert\n * @returns {Uint8Array}\n */ const intToUnpaddedBytes = (value)=>{\n    return unpadBytes(intToBytes(value));\n};\n/**\n * Compares two Uint8Arrays and returns a number indicating their order in a sorted array.\n *\n * @param {Uint8Array} value1 - The first Uint8Array to compare.\n * @param {Uint8Array} value2 - The second Uint8Array to compare.\n * @returns {number} A positive number if value1 is larger than value2,\n *                   A negative number if value1 is smaller than value2,\n *                   or 0 if value1 and value2 are equal.\n */ const compareBytes = (value1, value2)=>{\n    const bigIntValue1 = bytesToBigInt(value1);\n    const bigIntValue2 = bytesToBigInt(value2);\n    return bigIntValue1 > bigIntValue2 ? 1 : bigIntValue1 < bigIntValue2 ? -1 : 0;\n};\n/**\n * Generates a Uint8Array of random bytes of specified length.\n *\n * @param {number} length - The length of the Uint8Array.\n * @returns {Uint8Array} A Uint8Array of random bytes of specified length.\n */ const randomBytes = (length)=>{\n    return (0,ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__.getRandomBytesSync)(length);\n};\n/**\n * This mirrors the functionality of the `ethereum-cryptography` export except\n * it skips the check to validate that every element of `arrays` is indead a `uint8Array`\n * Can give small performance gains on large arrays\n * @param {Uint8Array[]} arrays an array of Uint8Arrays\n * @returns {Uint8Array} one Uint8Array with all the elements of the original set\n * works like `Buffer.concat`\n */ const concatBytes = (...arrays)=>{\n    if (arrays.length === 1) return arrays[0];\n    const length = arrays.reduce((a, arr)=>a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n};\n/**\n * @notice Convert a Uint8Array to a 32-bit integer\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 32-bit integer.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @throws {Error} If the input Uint8Array has a length less than 4.\n * @return {number} The 32-bit integer read from the input Uint8Array.\n */ function bytesToInt32(bytes, littleEndian = false) {\n    if (bytes.length < 4) {\n        throw new Error(\"The input Uint8Array must have at least 4 bytes.\");\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getInt32(0, littleEndian);\n}\n/**\n * @notice Convert a Uint8Array to a 64-bit bigint\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 64-bit bigint.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @throws {Error} If the input Uint8Array has a length less than 8.\n * @return {bigint} The 64-bit bigint read from the input Uint8Array.\n */ function bytesToBigInt64(bytes, littleEndian = false) {\n    if (bytes.length < 8) {\n        throw new Error(\"The input Uint8Array must have at least 8 bytes.\");\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getBigInt64(0, littleEndian);\n}\n/**\n * @notice Convert a 32-bit integer to a Uint8Array.\n * @param {number} value The 32-bit integer to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 4 containing the integer.\n */ function int32ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(4);\n    const dataView = new DataView(buffer);\n    dataView.setInt32(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n/**\n * @notice Convert a 64-bit bigint to a Uint8Array.\n * @param {bigint} value The 64-bit bigint to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 8 containing the bigint.\n */ function bigInt64ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(8);\n    const dataView = new DataView(buffer);\n    dataView.setBigInt64(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n// eslint-disable-next-line no-restricted-imports\n //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIGINT_0: () => (/* binding */ BIGINT_0),\n/* harmony export */   BIGINT_1: () => (/* binding */ BIGINT_1),\n/* harmony export */   BIGINT_100: () => (/* binding */ BIGINT_100),\n/* harmony export */   BIGINT_128: () => (/* binding */ BIGINT_128),\n/* harmony export */   BIGINT_160: () => (/* binding */ BIGINT_160),\n/* harmony export */   BIGINT_2: () => (/* binding */ BIGINT_2),\n/* harmony export */   BIGINT_224: () => (/* binding */ BIGINT_224),\n/* harmony export */   BIGINT_255: () => (/* binding */ BIGINT_255),\n/* harmony export */   BIGINT_256: () => (/* binding */ BIGINT_256),\n/* harmony export */   BIGINT_27: () => (/* binding */ BIGINT_27),\n/* harmony export */   BIGINT_28: () => (/* binding */ BIGINT_28),\n/* harmony export */   BIGINT_2EXP160: () => (/* binding */ BIGINT_2EXP160),\n/* harmony export */   BIGINT_2EXP224: () => (/* binding */ BIGINT_2EXP224),\n/* harmony export */   BIGINT_2EXP256: () => (/* binding */ BIGINT_2EXP256),\n/* harmony export */   BIGINT_2EXP96: () => (/* binding */ BIGINT_2EXP96),\n/* harmony export */   BIGINT_3: () => (/* binding */ BIGINT_3),\n/* harmony export */   BIGINT_31: () => (/* binding */ BIGINT_31),\n/* harmony export */   BIGINT_32: () => (/* binding */ BIGINT_32),\n/* harmony export */   BIGINT_64: () => (/* binding */ BIGINT_64),\n/* harmony export */   BIGINT_7: () => (/* binding */ BIGINT_7),\n/* harmony export */   BIGINT_8: () => (/* binding */ BIGINT_8),\n/* harmony export */   BIGINT_96: () => (/* binding */ BIGINT_96),\n/* harmony export */   BIGINT_NEG1: () => (/* binding */ BIGINT_NEG1),\n/* harmony export */   KECCAK256_NULL: () => (/* binding */ KECCAK256_NULL),\n/* harmony export */   KECCAK256_NULL_S: () => (/* binding */ KECCAK256_NULL_S),\n/* harmony export */   KECCAK256_RLP: () => (/* binding */ KECCAK256_RLP),\n/* harmony export */   KECCAK256_RLP_ARRAY: () => (/* binding */ KECCAK256_RLP_ARRAY),\n/* harmony export */   KECCAK256_RLP_ARRAY_S: () => (/* binding */ KECCAK256_RLP_ARRAY_S),\n/* harmony export */   KECCAK256_RLP_S: () => (/* binding */ KECCAK256_RLP_S),\n/* harmony export */   MAX_INTEGER: () => (/* binding */ MAX_INTEGER),\n/* harmony export */   MAX_INTEGER_BIGINT: () => (/* binding */ MAX_INTEGER_BIGINT),\n/* harmony export */   MAX_UINT64: () => (/* binding */ MAX_UINT64),\n/* harmony export */   MAX_WITHDRAWALS_PER_PAYLOAD: () => (/* binding */ MAX_WITHDRAWALS_PER_PAYLOAD),\n/* harmony export */   RIPEMD160_ADDRESS_STRING: () => (/* binding */ RIPEMD160_ADDRESS_STRING),\n/* harmony export */   RLP_EMPTY_STRING: () => (/* binding */ RLP_EMPTY_STRING),\n/* harmony export */   SECP256K1_ORDER: () => (/* binding */ SECP256K1_ORDER),\n/* harmony export */   SECP256K1_ORDER_DIV_2: () => (/* binding */ SECP256K1_ORDER_DIV_2),\n/* harmony export */   TWO_POW256: () => (/* binding */ TWO_POW256)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\n\n/**\n * 2^64-1\n */ const MAX_UINT64 = BigInt(\"0xffffffffffffffff\");\n/**\n * The max integer that the evm can handle (2^256-1)\n */ const MAX_INTEGER = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */ const MAX_INTEGER_BIGINT = BigInt(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\");\nconst SECP256K1_ORDER = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n;\nconst SECP256K1_ORDER_DIV_2 = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */ const TWO_POW256 = BigInt(\"0x10000000000000000000000000000000000000000000000000000000000000000\");\n/**\n * Keccak-256 hash of null\n */ const KECCAK256_NULL_S = \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\";\n/**\n * Keccak-256 hash of null\n */ const KECCAK256_NULL = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_NULL_S);\n/**\n * Keccak-256 of an RLP of an empty array\n */ const KECCAK256_RLP_ARRAY_S = \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\";\n/**\n * Keccak-256 of an RLP of an empty array\n */ const KECCAK256_RLP_ARRAY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_ARRAY_S);\n/**\n * Keccak-256 hash of the RLP of null\n */ const KECCAK256_RLP_S = \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\";\n/**\n * Keccak-256 hash of the RLP of null\n */ const KECCAK256_RLP = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_S);\n/**\n *  RLP encoded empty string\n */ const RLP_EMPTY_STRING = Uint8Array.from([\n    0x80\n]);\nconst MAX_WITHDRAWALS_PER_PAYLOAD = 16;\nconst RIPEMD160_ADDRESS_STRING = \"0000000000000000000000000000000000000003\";\n/**\n * BigInt constants\n */ const BIGINT_NEG1 = BigInt(-1);\nconst BIGINT_0 = BigInt(0);\nconst BIGINT_1 = BigInt(1);\nconst BIGINT_2 = BigInt(2);\nconst BIGINT_3 = BigInt(3);\nconst BIGINT_7 = BigInt(7);\nconst BIGINT_8 = BigInt(8);\nconst BIGINT_27 = BigInt(27);\nconst BIGINT_28 = BigInt(28);\nconst BIGINT_31 = BigInt(31);\nconst BIGINT_32 = BigInt(32);\nconst BIGINT_64 = BigInt(64);\nconst BIGINT_128 = BigInt(128);\nconst BIGINT_255 = BigInt(255);\nconst BIGINT_256 = BigInt(256);\nconst BIGINT_96 = BigInt(96);\nconst BIGINT_100 = BigInt(100);\nconst BIGINT_160 = BigInt(160);\nconst BIGINT_224 = BigInt(224);\nconst BIGINT_2EXP96 = BigInt(79228162514264337593543950336);\nconst BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976);\nconst BIGINT_2EXP224 = BigInt(26959946667150639794667015087019630673637144422540572481103610249216);\nconst BIGINT_2EXP256 = BIGINT_2 ** BIGINT_256; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStEO0FBQ3ZCO0FBQ3hDOztDQUVDLEdBQ00sTUFBTUUsYUFBYUMsT0FBTyxzQkFBc0I7QUFDdkQ7O0NBRUMsR0FDTSxNQUFNQyxjQUFjRCxPQUFPLHNFQUFzRTtBQUN4Rzs7OztDQUlDLEdBQ00sTUFBTUUscUJBQXFCRixPQUFPLGtGQUFrRjtBQUNwSCxNQUFNRyxrQkFBa0JOLHlFQUFTQSxDQUFDTyxLQUFLLENBQUNDLENBQUMsQ0FBQztBQUMxQyxNQUFNQyx3QkFBd0JULHlFQUFTQSxDQUFDTyxLQUFLLENBQUNDLENBQUMsR0FBR0wsT0FBTyxHQUFHO0FBQ25FOztDQUVDLEdBQ00sTUFBTU8sYUFBYVAsT0FBTyx1RUFBdUU7QUFDeEc7O0NBRUMsR0FDTSxNQUFNUSxtQkFBbUIscUVBQXFFO0FBQ3JHOztDQUVDLEdBQ00sTUFBTUMsaUJBQWlCWCxxREFBVUEsQ0FBQ1Usa0JBQWtCO0FBQzNEOztDQUVDLEdBQ00sTUFBTUUsd0JBQXdCLHFFQUFxRTtBQUMxRzs7Q0FFQyxHQUNNLE1BQU1DLHNCQUFzQmIscURBQVVBLENBQUNZLHVCQUF1QjtBQUNyRTs7Q0FFQyxHQUNNLE1BQU1FLGtCQUFrQixxRUFBcUU7QUFDcEc7O0NBRUMsR0FDTSxNQUFNQyxnQkFBZ0JmLHFEQUFVQSxDQUFDYyxpQkFBaUI7QUFDekQ7O0NBRUMsR0FDTSxNQUFNRSxtQkFBbUJDLFdBQVdDLElBQUksQ0FBQztJQUFDO0NBQUssRUFBRTtBQUNqRCxNQUFNQyw4QkFBOEIsR0FBRztBQUN2QyxNQUFNQywyQkFBMkIsMkNBQTJDO0FBQ25GOztDQUVDLEdBQ00sTUFBTUMsY0FBY25CLE9BQU8sQ0FBQyxHQUFHO0FBQy9CLE1BQU1vQixXQUFXcEIsT0FBTyxHQUFHO0FBQzNCLE1BQU1xQixXQUFXckIsT0FBTyxHQUFHO0FBQzNCLE1BQU1zQixXQUFXdEIsT0FBTyxHQUFHO0FBQzNCLE1BQU11QixXQUFXdkIsT0FBTyxHQUFHO0FBQzNCLE1BQU13QixXQUFXeEIsT0FBTyxHQUFHO0FBQzNCLE1BQU15QixXQUFXekIsT0FBTyxHQUFHO0FBQzNCLE1BQU0wQixZQUFZMUIsT0FBTyxJQUFJO0FBQzdCLE1BQU0yQixZQUFZM0IsT0FBTyxJQUFJO0FBQzdCLE1BQU00QixZQUFZNUIsT0FBTyxJQUFJO0FBQzdCLE1BQU02QixZQUFZN0IsT0FBTyxJQUFJO0FBQzdCLE1BQU04QixZQUFZOUIsT0FBTyxJQUFJO0FBQzdCLE1BQU0rQixhQUFhL0IsT0FBTyxLQUFLO0FBQy9CLE1BQU1nQyxhQUFhaEMsT0FBTyxLQUFLO0FBQy9CLE1BQU1pQyxhQUFhakMsT0FBTyxLQUFLO0FBQy9CLE1BQU1rQyxZQUFZbEMsT0FBTyxJQUFJO0FBQzdCLE1BQU1tQyxhQUFhbkMsT0FBTyxLQUFLO0FBQy9CLE1BQU1vQyxhQUFhcEMsT0FBTyxLQUFLO0FBQy9CLE1BQU1xQyxhQUFhckMsT0FBTyxLQUFLO0FBQy9CLE1BQU1zQyxnQkFBZ0J0QyxPQUFPLCtCQUErQjtBQUM1RCxNQUFNdUMsaUJBQWlCdkMsT0FBTyxtREFBbUQ7QUFDakYsTUFBTXdDLGlCQUFpQnhDLE9BQU8sc0VBQXNFO0FBQ3BHLE1BQU15QyxpQkFBaUJuQixZQUFZVyxXQUFXLENBQ3JELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2NvbnN0YW50cy5qcz84MDJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlY3AyNTZrMSB9IGZyb20gJ2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9zZWNwMjU2azEuanMnO1xuaW1wb3J0IHsgaGV4VG9CeXRlcyB9IGZyb20gJy4vYnl0ZXMuanMnO1xuLyoqXG4gKiAyXjY0LTFcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9VSU5UNjQgPSBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpO1xuLyoqXG4gKiBUaGUgbWF4IGludGVnZXIgdGhhdCB0aGUgZXZtIGNhbiBoYW5kbGUgKDJeMjU2LTEpXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfSU5URUdFUiA9IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmJyk7XG4vKipcbiAqIFRoZSBtYXggaW50ZWdlciB0aGF0IHRoZSBldm0gY2FuIGhhbmRsZSAoMl4yNTYtMSkgYXMgYSBiaWdpbnRcbiAqIDJeMjU2LTEgZXF1YWxzIHRvIDM0MDI4MjM2NjkyMDkzODQ2MzQ2MzM3NDYwNzQzMTc2ODIxMTQ1NVxuICogV2UgdXNlIGxpdGVyYWwgdmFsdWUgaW5zdGVhZCBvZiBjYWxjdWxhdGVkIHZhbHVlIGZvciBjb21wYXRpYmlsaXR5IGlzc3VlLlxuICovXG5leHBvcnQgY29uc3QgTUFYX0lOVEVHRVJfQklHSU5UID0gQmlnSW50KCcxMTU3OTIwODkyMzczMTYxOTU0MjM1NzA5ODUwMDg2ODc5MDc4NTMyNjk5ODQ2NjU2NDA1NjQwMzk0NTc1ODQwMDc5MTMxMjk2Mzk5MzUnKTtcbmV4cG9ydCBjb25zdCBTRUNQMjU2SzFfT1JERVIgPSBzZWNwMjU2azEuQ1VSVkUubjtcbmV4cG9ydCBjb25zdCBTRUNQMjU2SzFfT1JERVJfRElWXzIgPSBzZWNwMjU2azEuQ1VSVkUubiAvIEJpZ0ludCgyKTtcbi8qKlxuICogMl4yNTZcbiAqL1xuZXhwb3J0IGNvbnN0IFRXT19QT1cyNTYgPSBCaWdJbnQoJzB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnKTtcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIG51bGxcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9OVUxMX1MgPSAnMHhjNWQyNDYwMTg2ZjcyMzNjOTI3ZTdkYjJkY2M3MDNjMGU1MDBiNjUzY2E4MjI3M2I3YmZhZDgwNDVkODVhNDcwJztcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIG51bGxcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9OVUxMID0gaGV4VG9CeXRlcyhLRUNDQUsyNTZfTlVMTF9TKTtcbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9STFBfQVJSQVlfUyA9ICcweDFkY2M0ZGU4ZGVjNzVkN2FhYjg1YjU2N2I2Y2NkNDFhZDMxMjQ1MWI5NDhhNzQxM2YwYTE0MmZkNDBkNDkzNDcnO1xuLyoqXG4gKiBLZWNjYWstMjU2IG9mIGFuIFJMUCBvZiBhbiBlbXB0eSBhcnJheVxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X1JMUF9BUlJBWSA9IGhleFRvQnl0ZXMoS0VDQ0FLMjU2X1JMUF9BUlJBWV9TKTtcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbFxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X1JMUF9TID0gJzB4NTZlODFmMTcxYmNjNTVhNmZmODM0NWU2OTJjMGY4NmU1YjQ4ZTAxYjk5NmNhZGMwMDE2MjJmYjVlMzYzYjQyMSc7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGxcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9STFAgPSBoZXhUb0J5dGVzKEtFQ0NBSzI1Nl9STFBfUyk7XG4vKipcbiAqICBSTFAgZW5jb2RlZCBlbXB0eSBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IFJMUF9FTVBUWV9TVFJJTkcgPSBVaW50OEFycmF5LmZyb20oWzB4ODBdKTtcbmV4cG9ydCBjb25zdCBNQVhfV0lUSERSQVdBTFNfUEVSX1BBWUxPQUQgPSAxNjtcbmV4cG9ydCBjb25zdCBSSVBFTUQxNjBfQUREUkVTU19TVFJJTkcgPSAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMyc7XG4vKipcbiAqIEJpZ0ludCBjb25zdGFudHNcbiAqL1xuZXhwb3J0IGNvbnN0IEJJR0lOVF9ORUcxID0gQmlnSW50KC0xKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMCA9IEJpZ0ludCgwKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMSA9IEJpZ0ludCgxKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMiA9IEJpZ0ludCgyKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMyA9IEJpZ0ludCgzKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfNyA9IEJpZ0ludCg3KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfOCA9IEJpZ0ludCg4KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMjcgPSBCaWdJbnQoMjcpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yOCA9IEJpZ0ludCgyOCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzMxID0gQmlnSW50KDMxKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMzIgPSBCaWdJbnQoMzIpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF82NCA9IEJpZ0ludCg2NCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzEyOCA9IEJpZ0ludCgxMjgpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yNTUgPSBCaWdJbnQoMjU1KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMjU2ID0gQmlnSW50KDI1Nik7XG5leHBvcnQgY29uc3QgQklHSU5UXzk2ID0gQmlnSW50KDk2KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMTAwID0gQmlnSW50KDEwMCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzE2MCA9IEJpZ0ludCgxNjApO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yMjQgPSBCaWdJbnQoMjI0KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMkVYUDk2ID0gQmlnSW50KDc5MjI4MTYyNTE0MjY0MzM3NTkzNTQzOTUwMzM2KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMkVYUDE2MCA9IEJpZ0ludCgxNDYxNTAxNjM3MzMwOTAyOTE4MjAzNjg0ODMyNzE2MjgzMDE5NjU1OTMyNTQyOTc2KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMkVYUDIyNCA9IEJpZ0ludCgyNjk1OTk0NjY2NzE1MDYzOTc5NDY2NzAxNTA4NzAxOTYzMDY3MzYzNzE0NDQyMjU0MDU3MjQ4MTEwMzYxMDI0OTIxNik7XG5leHBvcnQgY29uc3QgQklHSU5UXzJFWFAyNTYgPSBCSUdJTlRfMiAqKiBCSUdJTlRfMjU2O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJzZWNwMjU2azEiLCJoZXhUb0J5dGVzIiwiTUFYX1VJTlQ2NCIsIkJpZ0ludCIsIk1BWF9JTlRFR0VSIiwiTUFYX0lOVEVHRVJfQklHSU5UIiwiU0VDUDI1NksxX09SREVSIiwiQ1VSVkUiLCJuIiwiU0VDUDI1NksxX09SREVSX0RJVl8yIiwiVFdPX1BPVzI1NiIsIktFQ0NBSzI1Nl9OVUxMX1MiLCJLRUNDQUsyNTZfTlVMTCIsIktFQ0NBSzI1Nl9STFBfQVJSQVlfUyIsIktFQ0NBSzI1Nl9STFBfQVJSQVkiLCJLRUNDQUsyNTZfUkxQX1MiLCJLRUNDQUsyNTZfUkxQIiwiUkxQX0VNUFRZX1NUUklORyIsIlVpbnQ4QXJyYXkiLCJmcm9tIiwiTUFYX1dJVEhEUkFXQUxTX1BFUl9QQVlMT0FEIiwiUklQRU1EMTYwX0FERFJFU1NfU1RSSU5HIiwiQklHSU5UX05FRzEiLCJCSUdJTlRfMCIsIkJJR0lOVF8xIiwiQklHSU5UXzIiLCJCSUdJTlRfMyIsIkJJR0lOVF83IiwiQklHSU5UXzgiLCJCSUdJTlRfMjciLCJCSUdJTlRfMjgiLCJCSUdJTlRfMzEiLCJCSUdJTlRfMzIiLCJCSUdJTlRfNjQiLCJCSUdJTlRfMTI4IiwiQklHSU5UXzI1NSIsIkJJR0lOVF8yNTYiLCJCSUdJTlRfOTYiLCJCSUdJTlRfMTAwIiwiQklHSU5UXzE2MCIsIkJJR0lOVF8yMjQiLCJCSUdJTlRfMkVYUDk2IiwiQklHSU5UXzJFWFAxNjAiLCJCSUdJTlRfMkVYUDIyNCIsIkJJR0lOVF8yRVhQMjU2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/db.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/db.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyEncoding: () => (/* binding */ KeyEncoding),\n/* harmony export */   ValueEncoding: () => (/* binding */ ValueEncoding)\n/* harmony export */ });\nvar KeyEncoding;\n(function(KeyEncoding) {\n    KeyEncoding[\"String\"] = \"string\";\n    KeyEncoding[\"Bytes\"] = \"view\";\n    KeyEncoding[\"Number\"] = \"number\";\n})(KeyEncoding || (KeyEncoding = {}));\nvar ValueEncoding;\n(function(ValueEncoding) {\n    ValueEncoding[\"String\"] = \"string\";\n    ValueEncoding[\"Bytes\"] = \"view\";\n    ValueEncoding[\"JSON\"] = \"json\";\n})(ValueEncoding || (ValueEncoding = {})); //# sourceMappingURL=db.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2RiLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sSUFBSUEsWUFBWTtBQUN0QixVQUFVQSxXQUFXO0lBQ2xCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0FBQzVCLEdBQUdBLGVBQWdCQSxDQUFBQSxjQUFjLENBQUM7QUFDM0IsSUFBSUMsY0FBYztBQUN4QixVQUFVQSxhQUFhO0lBQ3BCQSxhQUFhLENBQUMsU0FBUyxHQUFHO0lBQzFCQSxhQUFhLENBQUMsUUFBUSxHQUFHO0lBQ3pCQSxhQUFhLENBQUMsT0FBTyxHQUFHO0FBQzVCLEdBQUdBLGlCQUFrQkEsQ0FBQUEsZ0JBQWdCLENBQUMsS0FDdEMsOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vZGIuanM/YzczZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIEtleUVuY29kaW5nO1xuKGZ1bmN0aW9uIChLZXlFbmNvZGluZykge1xuICAgIEtleUVuY29kaW5nW1wiU3RyaW5nXCJdID0gXCJzdHJpbmdcIjtcbiAgICBLZXlFbmNvZGluZ1tcIkJ5dGVzXCJdID0gXCJ2aWV3XCI7XG4gICAgS2V5RW5jb2RpbmdbXCJOdW1iZXJcIl0gPSBcIm51bWJlclwiO1xufSkoS2V5RW5jb2RpbmcgfHwgKEtleUVuY29kaW5nID0ge30pKTtcbmV4cG9ydCB2YXIgVmFsdWVFbmNvZGluZztcbihmdW5jdGlvbiAoVmFsdWVFbmNvZGluZykge1xuICAgIFZhbHVlRW5jb2RpbmdbXCJTdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICAgIFZhbHVlRW5jb2RpbmdbXCJCeXRlc1wiXSA9IFwidmlld1wiO1xuICAgIFZhbHVlRW5jb2RpbmdbXCJKU09OXCJdID0gXCJqc29uXCI7XG59KShWYWx1ZUVuY29kaW5nIHx8IChWYWx1ZUVuY29kaW5nID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRiLmpzLm1hcCJdLCJuYW1lcyI6WyJLZXlFbmNvZGluZyIsIlZhbHVlRW5jb2RpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/genesis.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/genesis.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseGethGenesisState: () => (/* binding */ parseGethGenesisState)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n/**\n * Parses the geth genesis state into Blockchain {@link GenesisState}\n * @param json representing the `alloc` key in a Geth genesis file\n */ function parseGethGenesisState(json) {\n    const state = {};\n    for (let address of Object.keys(json.alloc)){\n        let { balance, code, storage, nonce } = json.alloc[address];\n        // create a map with lowercase for easy lookups\n        address = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(address.toLowerCase());\n        balance = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexPrefixed)(balance) ? balance : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bigIntToHex)(BigInt(balance));\n        code = code !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(code) : undefined;\n        storage = storage !== undefined ? Object.entries(storage) : undefined;\n        nonce = nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(nonce) : undefined;\n        state[address] = [\n            balance,\n            code,\n            storage,\n            nonce\n        ];\n    }\n    return state;\n} //# sourceMappingURL=genesis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2dlbmVzaXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVEO0FBQ1Q7QUFDOUM7OztDQUdDLEdBQ00sU0FBU0csc0JBQXNCQyxJQUFJO0lBQ3RDLE1BQU1DLFFBQVEsQ0FBQztJQUNmLEtBQUssSUFBSUMsV0FBV0MsT0FBT0MsSUFBSSxDQUFDSixLQUFLSyxLQUFLLEVBQUc7UUFDekMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUUsR0FBR1QsS0FBS0ssS0FBSyxDQUFDSCxRQUFRO1FBQzNELCtDQUErQztRQUMvQ0EsVUFBVU4sdURBQVlBLENBQUNNLFFBQVFRLFdBQVc7UUFDMUNKLFVBQVVSLDJEQUFhQSxDQUFDUSxXQUFXQSxVQUFVVCxzREFBV0EsQ0FBQ2MsT0FBT0w7UUFDaEVDLE9BQU9BLFNBQVNLLFlBQVloQix1REFBWUEsQ0FBQ1csUUFBUUs7UUFDakRKLFVBQVVBLFlBQVlJLFlBQVlULE9BQU9VLE9BQU8sQ0FBQ0wsV0FBV0k7UUFDNURILFFBQVFBLFVBQVVHLFlBQVloQix1REFBWUEsQ0FBQ2EsU0FBU0c7UUFDcERYLEtBQUssQ0FBQ0MsUUFBUSxHQUFHO1lBQUNJO1lBQVNDO1lBQU1DO1lBQVNDO1NBQU07SUFDcEQ7SUFDQSxPQUFPUjtBQUNYLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vZ2VuZXNpcy5qcz84NTZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZEhleFByZWZpeCwgYmlnSW50VG9IZXggfSBmcm9tICcuL2J5dGVzLmpzJztcbmltcG9ydCB7IGlzSGV4UHJlZml4ZWQgfSBmcm9tICcuL2ludGVybmFsLmpzJztcbi8qKlxuICogUGFyc2VzIHRoZSBnZXRoIGdlbmVzaXMgc3RhdGUgaW50byBCbG9ja2NoYWluIHtAbGluayBHZW5lc2lzU3RhdGV9XG4gKiBAcGFyYW0ganNvbiByZXByZXNlbnRpbmcgdGhlIGBhbGxvY2Aga2V5IGluIGEgR2V0aCBnZW5lc2lzIGZpbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2V0aEdlbmVzaXNTdGF0ZShqc29uKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7fTtcbiAgICBmb3IgKGxldCBhZGRyZXNzIG9mIE9iamVjdC5rZXlzKGpzb24uYWxsb2MpKSB7XG4gICAgICAgIGxldCB7IGJhbGFuY2UsIGNvZGUsIHN0b3JhZ2UsIG5vbmNlIH0gPSBqc29uLmFsbG9jW2FkZHJlc3NdO1xuICAgICAgICAvLyBjcmVhdGUgYSBtYXAgd2l0aCBsb3dlcmNhc2UgZm9yIGVhc3kgbG9va3Vwc1xuICAgICAgICBhZGRyZXNzID0gYWRkSGV4UHJlZml4KGFkZHJlc3MudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGJhbGFuY2UgPSBpc0hleFByZWZpeGVkKGJhbGFuY2UpID8gYmFsYW5jZSA6IGJpZ0ludFRvSGV4KEJpZ0ludChiYWxhbmNlKSk7XG4gICAgICAgIGNvZGUgPSBjb2RlICE9PSB1bmRlZmluZWQgPyBhZGRIZXhQcmVmaXgoY29kZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHN0b3JhZ2UgPSBzdG9yYWdlICE9PSB1bmRlZmluZWQgPyBPYmplY3QuZW50cmllcyhzdG9yYWdlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgbm9uY2UgPSBub25jZSAhPT0gdW5kZWZpbmVkID8gYWRkSGV4UHJlZml4KG5vbmNlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgc3RhdGVbYWRkcmVzc10gPSBbYmFsYW5jZSwgY29kZSwgc3RvcmFnZSwgbm9uY2VdO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lc2lzLmpzLm1hcCJdLCJuYW1lcyI6WyJhZGRIZXhQcmVmaXgiLCJiaWdJbnRUb0hleCIsImlzSGV4UHJlZml4ZWQiLCJwYXJzZUdldGhHZW5lc2lzU3RhdGUiLCJqc29uIiwic3RhdGUiLCJhZGRyZXNzIiwiT2JqZWN0Iiwia2V5cyIsImFsbG9jIiwiYmFsYW5jZSIsImNvZGUiLCJzdG9yYWdlIiwibm9uY2UiLCJ0b0xvd2VyQ2FzZSIsIkJpZ0ludCIsInVuZGVmaW5lZCIsImVudHJpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/genesis.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertIsArray: () => (/* binding */ assertIsArray),\n/* harmony export */   assertIsBytes: () => (/* binding */ assertIsBytes),\n/* harmony export */   assertIsHexString: () => (/* binding */ assertIsHexString),\n/* harmony export */   assertIsString: () => (/* binding */ assertIsString)\n/* harmony export */ });\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */ const assertIsHexString = function(input) {\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */ const assertIsBytes = function(input) {\n    if (!(input instanceof Uint8Array)) {\n        const msg = `This method only supports Uint8Array but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */ const assertIsArray = function(input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */ const assertIsString = function(input) {\n    if (typeof input !== \"string\") {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n}; //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEM7QUFDNUM7OztDQUdDLEdBQ00sTUFBTUMsb0JBQW9CLFNBQVVDLEtBQUs7SUFDNUMsSUFBSSxDQUFDRix5REFBV0EsQ0FBQ0UsUUFBUTtRQUNyQixNQUFNQyxNQUFNLENBQUMsaUVBQWlFLEVBQUVELE1BQU0sQ0FBQztRQUN2RixNQUFNLElBQUlFLE1BQU1EO0lBQ3BCO0FBQ0osRUFBRTtBQUNGOzs7Q0FHQyxHQUNNLE1BQU1FLGdCQUFnQixTQUFVSCxLQUFLO0lBQ3hDLElBQUksQ0FBRUEsQ0FBQUEsaUJBQWlCSSxVQUFTLEdBQUk7UUFDaEMsTUFBTUgsTUFBTSxDQUFDLG9EQUFvRCxFQUFFRCxNQUFNLENBQUM7UUFDMUUsTUFBTSxJQUFJRSxNQUFNRDtJQUNwQjtBQUNKLEVBQUU7QUFDRjs7O0NBR0MsR0FDTSxNQUFNSSxnQkFBZ0IsU0FBVUwsS0FBSztJQUN4QyxJQUFJLENBQUNNLE1BQU1DLE9BQU8sQ0FBQ1AsUUFBUTtRQUN2QixNQUFNQyxNQUFNLENBQUMsdURBQXVELEVBQUVELE1BQU0sQ0FBQztRQUM3RSxNQUFNLElBQUlFLE1BQU1EO0lBQ3BCO0FBQ0osRUFBRTtBQUNGOzs7Q0FHQyxHQUNNLE1BQU1PLGlCQUFpQixTQUFVUixLQUFLO0lBQ3pDLElBQUksT0FBT0EsVUFBVSxVQUFVO1FBQzNCLE1BQU1DLE1BQU0sQ0FBQyxpREFBaUQsRUFBRUQsTUFBTSxDQUFDO1FBQ3ZFLE1BQU0sSUFBSUUsTUFBTUQ7SUFDcEI7QUFDSixFQUFFLENBQ0YsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vaGVscGVycy5qcz80NGY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSGV4U3RyaW5nIH0gZnJvbSAnLi9pbnRlcm5hbC5qcyc7XG4vKipcbiAqIFRocm93cyBpZiBhIHN0cmluZyBpcyBub3QgaGV4IHByZWZpeGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgc3RyaW5nIHRvIGNoZWNrIGhleCBwcmVmaXggb2ZcbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydElzSGV4U3RyaW5nID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKCFpc0hleFN0cmluZyhpbnB1dCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgMHgtcHJlZml4ZWQgaGV4IHN0cmluZ3MgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGEgYnVmZmVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydElzQnl0ZXMgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIShpbnB1dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIFVpbnQ4QXJyYXkgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGFuIGFycmF5XG4gKiBAcGFyYW0ge251bWJlcltdfSBpbnB1dCB2YWx1ZSB0byBjaGVja1xuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0SXNBcnJheSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgbnVtYmVyIGFycmF5cyBidXQgaW5wdXQgd2FzOiAke2lucHV0fWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG4vKipcbiAqIFRocm93cyBpZiBpbnB1dCBpcyBub3QgYSBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCB2YWx1ZSB0byBjaGVja1xuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0SXNTdHJpbmcgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCBtc2cgPSBgVGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyBzdHJpbmdzIGJ1dCBpbnB1dCB3YXM6ICR7aW5wdXR9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbImlzSGV4U3RyaW5nIiwiYXNzZXJ0SXNIZXhTdHJpbmciLCJpbnB1dCIsIm1zZyIsIkVycm9yIiwiYXNzZXJ0SXNCeXRlcyIsIlVpbnQ4QXJyYXkiLCJhc3NlcnRJc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiYXNzZXJ0SXNTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.Account),\n/* harmony export */   Address: () => (/* reexport safe */ _address_js__WEBPACK_IMPORTED_MODULE_3__.Address),\n/* harmony export */   AsyncEventEmitter: () => (/* reexport safe */ _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__.AsyncEventEmitter),\n/* harmony export */   BIGINT_0: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0),\n/* harmony export */   BIGINT_1: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_1),\n/* harmony export */   BIGINT_100: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_100),\n/* harmony export */   BIGINT_128: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_128),\n/* harmony export */   BIGINT_160: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_160),\n/* harmony export */   BIGINT_2: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2),\n/* harmony export */   BIGINT_224: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_224),\n/* harmony export */   BIGINT_255: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_255),\n/* harmony export */   BIGINT_256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_256),\n/* harmony export */   BIGINT_27: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_27),\n/* harmony export */   BIGINT_28: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_28),\n/* harmony export */   BIGINT_2EXP160: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP160),\n/* harmony export */   BIGINT_2EXP224: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP224),\n/* harmony export */   BIGINT_2EXP256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP256),\n/* harmony export */   BIGINT_2EXP96: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP96),\n/* harmony export */   BIGINT_3: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_3),\n/* harmony export */   BIGINT_31: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_31),\n/* harmony export */   BIGINT_32: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_32),\n/* harmony export */   BIGINT_64: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_64),\n/* harmony export */   BIGINT_7: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_7),\n/* harmony export */   BIGINT_8: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_8),\n/* harmony export */   BIGINT_96: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_96),\n/* harmony export */   BIGINT_NEG1: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_NEG1),\n/* harmony export */   GWEI_TO_WEI: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_1__.GWEI_TO_WEI),\n/* harmony export */   KECCAK256_NULL: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_NULL),\n/* harmony export */   KECCAK256_NULL_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_NULL_S),\n/* harmony export */   KECCAK256_RLP: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP),\n/* harmony export */   KECCAK256_RLP_ARRAY: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_ARRAY),\n/* harmony export */   KECCAK256_RLP_ARRAY_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_ARRAY_S),\n/* harmony export */   KECCAK256_RLP_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_S),\n/* harmony export */   KeyEncoding: () => (/* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_4__.KeyEncoding),\n/* harmony export */   Lock: () => (/* reexport safe */ _lock_js__WEBPACK_IMPORTED_MODULE_14__.Lock),\n/* harmony export */   MAX_INTEGER: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INTEGER),\n/* harmony export */   MAX_INTEGER_BIGINT: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INTEGER_BIGINT),\n/* harmony export */   MAX_UINT64: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_UINT64),\n/* harmony export */   MAX_WITHDRAWALS_PER_PAYLOAD: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_WITHDRAWALS_PER_PAYLOAD),\n/* harmony export */   MapDB: () => (/* reexport safe */ _mapDB_js__WEBPACK_IMPORTED_MODULE_15__.MapDB),\n/* harmony export */   RIPEMD160_ADDRESS_STRING: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.RIPEMD160_ADDRESS_STRING),\n/* harmony export */   RLP_EMPTY_STRING: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.RLP_EMPTY_STRING),\n/* harmony export */   SECP256K1_ORDER: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER),\n/* harmony export */   SECP256K1_ORDER_DIV_2: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER_DIV_2),\n/* harmony export */   TWO_POW256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.TWO_POW256),\n/* harmony export */   TypeOutput: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.TypeOutput),\n/* harmony export */   ValueEncoding: () => (/* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_4__.ValueEncoding),\n/* harmony export */   Withdrawal: () => (/* reexport safe */ _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__.Withdrawal),\n/* harmony export */   accountBodyFromSlim: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyFromSlim),\n/* harmony export */   accountBodyToRLP: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyToRLP),\n/* harmony export */   accountBodyToSlim: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyToSlim),\n/* harmony export */   addHexPrefix: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.addHexPrefix),\n/* harmony export */   arrayContainsArray: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.arrayContainsArray),\n/* harmony export */   bigInt64ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigInt64ToBytes),\n/* harmony export */   bigIntToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToBytes),\n/* harmony export */   bigIntToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex),\n/* harmony export */   bigIntToUnpaddedBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedBytes),\n/* harmony export */   blobsToCommitments: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.blobsToCommitments),\n/* harmony export */   blobsToProofs: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.blobsToProofs),\n/* harmony export */   bytesToBigInt: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToBigInt),\n/* harmony export */   bytesToBigInt64: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToBigInt64),\n/* harmony export */   bytesToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToHex),\n/* harmony export */   bytesToInt: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToInt),\n/* harmony export */   bytesToInt32: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToInt32),\n/* harmony export */   bytesToUnprefixedHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToUnprefixedHex),\n/* harmony export */   bytesToUtf8: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToUtf8),\n/* harmony export */   commitmentsToVersionedHashes: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.commitmentsToVersionedHashes),\n/* harmony export */   compareBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.compareBytes),\n/* harmony export */   computeVersionedHash: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.computeVersionedHash),\n/* harmony export */   concatBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.concatBytes),\n/* harmony export */   ecrecover: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.ecrecover),\n/* harmony export */   ecsign: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.ecsign),\n/* harmony export */   equalsBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.equalsBytes),\n/* harmony export */   fetchFromProvider: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_16__.fetchFromProvider),\n/* harmony export */   formatBigDecimal: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_1__.formatBigDecimal),\n/* harmony export */   fromAscii: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromAscii),\n/* harmony export */   fromRpcSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.fromRpcSig),\n/* harmony export */   fromSigned: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.fromSigned),\n/* harmony export */   fromUtf8: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromUtf8),\n/* harmony export */   generateAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.generateAddress),\n/* harmony export */   generateAddress2: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.generateAddress2),\n/* harmony export */   getBinarySize: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getBinarySize),\n/* harmony export */   getBlobs: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.getBlobs),\n/* harmony export */   getKeys: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getKeys),\n/* harmony export */   getProvider: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_16__.getProvider),\n/* harmony export */   hashPersonalMessage: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.hashPersonalMessage),\n/* harmony export */   hexToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.hexToBytes),\n/* harmony export */   importPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.importPublic),\n/* harmony export */   initKZG: () => (/* reexport safe */ _kzg_js__WEBPACK_IMPORTED_MODULE_13__.initKZG),\n/* harmony export */   int32ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.int32ToBytes),\n/* harmony export */   intToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToBytes),\n/* harmony export */   intToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToHex),\n/* harmony export */   intToUnpaddedBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToUnpaddedBytes),\n/* harmony export */   isHexPrefixed: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.isHexPrefixed),\n/* harmony export */   isHexString: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.isHexString),\n/* harmony export */   isValidAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidAddress),\n/* harmony export */   isValidChecksumAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidChecksumAddress),\n/* harmony export */   isValidPrivate: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidPrivate),\n/* harmony export */   isValidPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidPublic),\n/* harmony export */   isValidSignature: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.isValidSignature),\n/* harmony export */   isZeroAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isZeroAddress),\n/* harmony export */   kzg: () => (/* reexport safe */ _kzg_js__WEBPACK_IMPORTED_MODULE_13__.kzg),\n/* harmony export */   padToEven: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.padToEven),\n/* harmony export */   parseGethGenesisState: () => (/* reexport safe */ _genesis_js__WEBPACK_IMPORTED_MODULE_11__.parseGethGenesisState),\n/* harmony export */   privateToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.privateToAddress),\n/* harmony export */   privateToPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.privateToPublic),\n/* harmony export */   pubToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.pubToAddress),\n/* harmony export */   publicToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.publicToAddress),\n/* harmony export */   randomBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.randomBytes),\n/* harmony export */   setLengthLeft: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.setLengthLeft),\n/* harmony export */   setLengthRight: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.setLengthRight),\n/* harmony export */   short: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.short),\n/* harmony export */   stripHexPrefix: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.stripHexPrefix),\n/* harmony export */   toAscii: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.toAscii),\n/* harmony export */   toBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.toBytes),\n/* harmony export */   toChecksumAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.toChecksumAddress),\n/* harmony export */   toCompactSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.toCompactSig),\n/* harmony export */   toRpcSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.toRpcSig),\n/* harmony export */   toType: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.toType),\n/* harmony export */   toUnsigned: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.toUnsigned),\n/* harmony export */   unpadArray: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadArray),\n/* harmony export */   unpadBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadBytes),\n/* harmony export */   unpadHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadHex),\n/* harmony export */   unprefixedHexToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unprefixedHexToBytes),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.utf8ToBytes),\n/* harmony export */   validateNoLeadingZeroes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.validateNoLeadingZeroes),\n/* harmony export */   zeroAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.zeroAddress),\n/* harmony export */   zeros: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.zeros)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _units_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./units.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/units.js\");\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./account.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./address.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./db.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/db.js\");\n/* harmony import */ var _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./withdrawal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/withdrawal.js\");\n/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./signature.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/signature.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/types.js\");\n/* harmony import */ var _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./asyncEventEmitter.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\");\n/* harmony import */ var _blobs_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./blobs.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/blobs.js\");\n/* harmony import */ var _genesis_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./genesis.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/genesis.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n/* harmony import */ var _kzg_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kzg.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/kzg.js\");\n/* harmony import */ var _lock_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lock.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/lock.js\");\n/* harmony import */ var _mapDB_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./mapDB.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/mapDB.js\");\n/* harmony import */ var _provider_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./provider.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/provider.js\");\n/**\n * Constants\n */ \n/**\n * Units helpers\n */ \n/**\n * Account class and helper functions\n */ \n/**\n * Address type\n */ \n/**\n * DB type\n */ \n/**\n * Withdrawal type\n */ \n/**\n * ECDSA signature\n */ \n/**\n * Utilities for manipulating bytes, Uint8Arrays, etc.\n */ \n/**\n * Helpful TypeScript types\n */ \n/**\n * Export ethjs-util methods\n */ \n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Q0FFQyxHQUM4QjtBQUMvQjs7Q0FFQyxHQUMwQjtBQUMzQjs7Q0FFQyxHQUM0QjtBQUM3Qjs7Q0FFQyxHQUM0QjtBQUM3Qjs7Q0FFQyxHQUN1QjtBQUN4Qjs7Q0FFQyxHQUMrQjtBQUNoQzs7Q0FFQyxHQUM4QjtBQUMvQjs7Q0FFQyxHQUMwQjtBQUMzQjs7Q0FFQyxHQUMwQjtBQUMzQjs7Q0FFQyxHQUNzQztBQUNaO0FBQ0U7QUFDb0k7QUFDeEk7QUFDQztBQUNDO0FBQ0csQ0FDOUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vaW5kZXguanM/YzQzOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnN0YW50c1xuICovXG5leHBvcnQgKiBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG4vKipcbiAqIFVuaXRzIGhlbHBlcnNcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi91bml0cy5qcyc7XG4vKipcbiAqIEFjY291bnQgY2xhc3MgYW5kIGhlbHBlciBmdW5jdGlvbnNcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9hY2NvdW50LmpzJztcbi8qKlxuICogQWRkcmVzcyB0eXBlXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vYWRkcmVzcy5qcyc7XG4vKipcbiAqIERCIHR5cGVcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9kYi5qcyc7XG4vKipcbiAqIFdpdGhkcmF3YWwgdHlwZVxuICovXG5leHBvcnQgKiBmcm9tICcuL3dpdGhkcmF3YWwuanMnO1xuLyoqXG4gKiBFQ0RTQSBzaWduYXR1cmVcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9zaWduYXR1cmUuanMnO1xuLyoqXG4gKiBVdGlsaXRpZXMgZm9yIG1hbmlwdWxhdGluZyBieXRlcywgVWludDhBcnJheXMsIGV0Yy5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9ieXRlcy5qcyc7XG4vKipcbiAqIEhlbHBmdWwgVHlwZVNjcmlwdCB0eXBlc1xuICovXG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbi8qKlxuICogRXhwb3J0IGV0aGpzLXV0aWwgbWV0aG9kc1xuICovXG5leHBvcnQgKiBmcm9tICcuL2FzeW5jRXZlbnRFbWl0dGVyLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vYmxvYnMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9nZW5lc2lzLmpzJztcbmV4cG9ydCB7IGFycmF5Q29udGFpbnNBcnJheSwgZnJvbUFzY2lpLCBmcm9tVXRmOCwgZ2V0QmluYXJ5U2l6ZSwgZ2V0S2V5cywgaXNIZXhQcmVmaXhlZCwgaXNIZXhTdHJpbmcsIHBhZFRvRXZlbiwgc3RyaXBIZXhQcmVmaXgsIHRvQXNjaWksIH0gZnJvbSAnLi9pbnRlcm5hbC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2t6Zy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xvY2suanMnO1xuZXhwb3J0ICogZnJvbSAnLi9tYXBEQi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3Byb3ZpZGVyLmpzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJhcnJheUNvbnRhaW5zQXJyYXkiLCJmcm9tQXNjaWkiLCJmcm9tVXRmOCIsImdldEJpbmFyeVNpemUiLCJnZXRLZXlzIiwiaXNIZXhQcmVmaXhlZCIsImlzSGV4U3RyaW5nIiwicGFkVG9FdmVuIiwic3RyaXBIZXhQcmVmaXgiLCJ0b0FzY2lpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayContainsArray: () => (/* binding */ arrayContainsArray),\n/* harmony export */   fromAscii: () => (/* binding */ fromAscii),\n/* harmony export */   fromUtf8: () => (/* binding */ fromUtf8),\n/* harmony export */   getBinarySize: () => (/* binding */ getBinarySize),\n/* harmony export */   getKeys: () => (/* binding */ getKeys),\n/* harmony export */   isHexPrefixed: () => (/* binding */ isHexPrefixed),\n/* harmony export */   isHexString: () => (/* binding */ isHexString),\n/* harmony export */   padToEven: () => (/* binding */ padToEven),\n/* harmony export */   stripHexPrefix: () => (/* binding */ stripHexPrefix),\n/* harmony export */   toAscii: () => (/* binding */ toAscii)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */ \n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */ function isHexPrefixed(str) {\n    if (typeof str !== \"string\") {\n        throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);\n    }\n    return str[0] === \"0\" && str[1] === \"x\";\n}\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */ const stripHexPrefix = (str)=>{\n    if (typeof str !== \"string\") throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n    return isHexPrefixed(str) ? str.slice(2) : str;\n};\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */ function padToEven(value) {\n    let a = value;\n    if (typeof a !== \"string\") {\n        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n    }\n    if (a.length % 2) a = `0${a}`;\n    return a;\n}\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */ function getBinarySize(str) {\n    if (typeof str !== \"string\") {\n        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(str).byteLength;\n}\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */ function arrayContainsArray(superset, subset, some) {\n    if (Array.isArray(superset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);\n    }\n    if (Array.isArray(subset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);\n    }\n    return subset[some === true ? \"some\" : \"every\"]((value)=>superset.indexOf(value) >= 0);\n}\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */ function toAscii(hex) {\n    let str = \"\";\n    let i = 0;\n    const l = hex.length;\n    if (hex.substring(0, 2) === \"0x\") i = 2;\n    for(; i < l; i += 2){\n        const code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string.\n * Strips leading and trailing 0's.\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */ function fromUtf8(stringValue) {\n    const str = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(stringValue);\n    return `0x${padToEven((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(str)).replace(/^0+|0+$/g, \"\")}`;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */ function fromAscii(stringValue) {\n    let hex = \"\";\n    for(let i = 0; i < stringValue.length; i++){\n        const code = stringValue.charCodeAt(i);\n        const n = code.toString(16);\n        hex += n.length < 2 ? `0${n}` : n;\n    }\n    return `0x${hex}`;\n}\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */ function getKeys(params, key, allowEmpty) {\n    if (!Array.isArray(params)) {\n        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);\n    }\n    if (typeof key !== \"string\") {\n        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);\n    }\n    const result = [];\n    for(let i = 0; i < params.length; i++){\n        let value = params[i][key];\n        if (allowEmpty === true && !value) {\n            value = \"\";\n        } else if (typeof value !== \"string\") {\n            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);\n        }\n        result.push(value);\n    }\n    return result;\n}\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */ function isHexString(value, length) {\n    if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;\n    if (typeof length !== \"undefined\" && length > 0 && value.length !== 2 + 2 * length) return false;\n    return true;\n} //# sourceMappingURL=internal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/kzg.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/kzg.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initKZG: () => (/* binding */ initKZG),\n/* harmony export */   kzg: () => (/* binding */ kzg)\n/* harmony export */ });\nfunction kzgNotLoaded() {\n    throw Error(\"kzg library not loaded\");\n}\n// eslint-disable-next-line import/no-mutable-exports\nlet kzg = {\n    loadTrustedSetup: kzgNotLoaded,\n    blobToKzgCommitment: kzgNotLoaded,\n    computeBlobKzgProof: kzgNotLoaded,\n    verifyKzgProof: kzgNotLoaded,\n    verifyBlobKzgProofBatch: kzgNotLoaded\n};\n/**\n * @param kzgLib a KZG implementation (defaults to c-kzg)\n * @param trustedSetupPath the full path (e.g. \"/home/linux/devnet4.txt\") to a kzg trusted setup text file\n */ function initKZG(kzgLib, trustedSetupPath) {\n    kzg = kzgLib;\n    kzg.loadTrustedSetup(trustedSetupPath);\n} //# sourceMappingURL=kzg.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2t6Zy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBO0lBQ0wsTUFBTUMsTUFBTTtBQUNoQjtBQUNBLHFEQUFxRDtBQUM5QyxJQUFJQyxNQUFNO0lBQ2JDLGtCQUFrQkg7SUFDbEJJLHFCQUFxQko7SUFDckJLLHFCQUFxQkw7SUFDckJNLGdCQUFnQk47SUFDaEJPLHlCQUF5QlA7QUFDN0IsRUFBRTtBQUNGOzs7Q0FHQyxHQUNNLFNBQVNRLFFBQVFDLE1BQU0sRUFBRUMsZ0JBQWdCO0lBQzVDUixNQUFNTztJQUNOUCxJQUFJQyxnQkFBZ0IsQ0FBQ087QUFDekIsRUFDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9remcuanM/MzM0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBremdOb3RMb2FkZWQoKSB7XG4gICAgdGhyb3cgRXJyb3IoJ2t6ZyBsaWJyYXJ5IG5vdCBsb2FkZWQnKTtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tbXV0YWJsZS1leHBvcnRzXG5leHBvcnQgbGV0IGt6ZyA9IHtcbiAgICBsb2FkVHJ1c3RlZFNldHVwOiBremdOb3RMb2FkZWQsXG4gICAgYmxvYlRvS3pnQ29tbWl0bWVudDoga3pnTm90TG9hZGVkLFxuICAgIGNvbXB1dGVCbG9iS3pnUHJvb2Y6IGt6Z05vdExvYWRlZCxcbiAgICB2ZXJpZnlLemdQcm9vZjoga3pnTm90TG9hZGVkLFxuICAgIHZlcmlmeUJsb2JLemdQcm9vZkJhdGNoOiBremdOb3RMb2FkZWQsXG59O1xuLyoqXG4gKiBAcGFyYW0ga3pnTGliIGEgS1pHIGltcGxlbWVudGF0aW9uIChkZWZhdWx0cyB0byBjLWt6ZylcbiAqIEBwYXJhbSB0cnVzdGVkU2V0dXBQYXRoIHRoZSBmdWxsIHBhdGggKGUuZy4gXCIvaG9tZS9saW51eC9kZXZuZXQ0LnR4dFwiKSB0byBhIGt6ZyB0cnVzdGVkIHNldHVwIHRleHQgZmlsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdEtaRyhremdMaWIsIHRydXN0ZWRTZXR1cFBhdGgpIHtcbiAgICBremcgPSBremdMaWI7XG4gICAga3pnLmxvYWRUcnVzdGVkU2V0dXAodHJ1c3RlZFNldHVwUGF0aCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1remcuanMubWFwIl0sIm5hbWVzIjpbImt6Z05vdExvYWRlZCIsIkVycm9yIiwia3pnIiwibG9hZFRydXN0ZWRTZXR1cCIsImJsb2JUb0t6Z0NvbW1pdG1lbnQiLCJjb21wdXRlQmxvYkt6Z1Byb29mIiwidmVyaWZ5S3pnUHJvb2YiLCJ2ZXJpZnlCbG9iS3pnUHJvb2ZCYXRjaCIsImluaXRLWkciLCJremdMaWIiLCJ0cnVzdGVkU2V0dXBQYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/kzg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/lock.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/lock.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lock: () => (/* binding */ Lock)\n/* harmony export */ });\n// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nclass Lock {\n    constructor(){\n        this.permits = 1;\n        this.promiseResolverQueue = [];\n    }\n    /**\n     * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */ async acquire() {\n        if (this.permits > 0) {\n            this.permits -= 1;\n            return Promise.resolve(true);\n        }\n        // If there is no permit available, we return a promise that resolves once the semaphore gets\n        // signaled enough times that permits is equal to one.\n        return new Promise((resolver)=>this.promiseResolverQueue.push(resolver));\n    }\n    /**\n     * Increases the number of permits by one. If there are other functions waiting, one of them will\n     * continue to execute in a future iteration of the event loop.\n     */ release() {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            // eslint-disable-next-line no-console\n            console.warn(\"Lock.permits should never be > 0 when there is someone waiting.\");\n        } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n            const nextResolver = this.promiseResolverQueue.shift();\n            if (nextResolver) {\n                nextResolver(true);\n            }\n        }\n    }\n} //# sourceMappingURL=lock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2xvY2suanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDhGQUE4RjtBQUN2RixNQUFNQTtJQUNUQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLG9CQUFvQixHQUFHLEVBQUU7SUFDbEM7SUFDQTs7O0tBR0MsR0FDRCxNQUFNQyxVQUFVO1FBQ1osSUFBSSxJQUFJLENBQUNGLE9BQU8sR0FBRyxHQUFHO1lBQ2xCLElBQUksQ0FBQ0EsT0FBTyxJQUFJO1lBQ2hCLE9BQU9HLFFBQVFDLE9BQU8sQ0FBQztRQUMzQjtRQUNBLDZGQUE2RjtRQUM3RixzREFBc0Q7UUFDdEQsT0FBTyxJQUFJRCxRQUFRLENBQUNFLFdBQWEsSUFBSSxDQUFDSixvQkFBb0IsQ0FBQ0ssSUFBSSxDQUFDRDtJQUNwRTtJQUNBOzs7S0FHQyxHQUNERSxVQUFVO1FBQ04sSUFBSSxDQUFDUCxPQUFPLElBQUk7UUFDaEIsSUFBSSxJQUFJLENBQUNBLE9BQU8sR0FBRyxLQUFLLElBQUksQ0FBQ0Msb0JBQW9CLENBQUNPLE1BQU0sR0FBRyxHQUFHO1lBQzFELHNDQUFzQztZQUN0Q0MsUUFBUUMsSUFBSSxDQUFDO1FBQ2pCLE9BQ0ssSUFBSSxJQUFJLENBQUNWLE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQ0Msb0JBQW9CLENBQUNPLE1BQU0sR0FBRyxHQUFHO1lBQ2pFLHFGQUFxRjtZQUNyRix5RUFBeUU7WUFDekUsSUFBSSxDQUFDUixPQUFPLElBQUk7WUFDaEIsTUFBTVcsZUFBZSxJQUFJLENBQUNWLG9CQUFvQixDQUFDVyxLQUFLO1lBQ3BELElBQUlELGNBQWM7Z0JBQ2RBLGFBQWE7WUFDakI7UUFDSjtJQUNKO0FBQ0osRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9sb2NrLmpzPzI0ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2pzb2VuZGVybWFubi9zZW1hcGhvcmUtYXN5bmMtYXdhaXQvYmxvYi9tYXN0ZXIvc3JjL1NlbWFwaG9yZS50c1xuZXhwb3J0IGNsYXNzIExvY2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnBlcm1pdHMgPSAxO1xuICAgICAgICB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBwcm9taXNlIHVzZWQgdG8gd2FpdCBmb3IgYSBwZXJtaXQgdG8gYmVjb21lIGF2YWlsYWJsZS4gVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGF3YWl0ZWQgb24uXG4gICAgICogQHJldHVybnMgIEEgcHJvbWlzZSB0aGF0IGdldHMgcmVzb2x2ZWQgd2hlbiBleGVjdXRpb24gaXMgYWxsb3dlZCB0byBwcm9jZWVkLlxuICAgICAqL1xuICAgIGFzeW5jIGFjcXVpcmUoKSB7XG4gICAgICAgIGlmICh0aGlzLnBlcm1pdHMgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnBlcm1pdHMgLT0gMTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gcGVybWl0IGF2YWlsYWJsZSwgd2UgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2UgdGhlIHNlbWFwaG9yZSBnZXRzXG4gICAgICAgIC8vIHNpZ25hbGVkIGVub3VnaCB0aW1lcyB0aGF0IHBlcm1pdHMgaXMgZXF1YWwgdG8gb25lLlxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmVyKSA9PiB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLnB1c2gocmVzb2x2ZXIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jcmVhc2VzIHRoZSBudW1iZXIgb2YgcGVybWl0cyBieSBvbmUuIElmIHRoZXJlIGFyZSBvdGhlciBmdW5jdGlvbnMgd2FpdGluZywgb25lIG9mIHRoZW0gd2lsbFxuICAgICAqIGNvbnRpbnVlIHRvIGV4ZWN1dGUgaW4gYSBmdXR1cmUgaXRlcmF0aW9uIG9mIHRoZSBldmVudCBsb29wLlxuICAgICAqL1xuICAgIHJlbGVhc2UoKSB7XG4gICAgICAgIHRoaXMucGVybWl0cyArPSAxO1xuICAgICAgICBpZiAodGhpcy5wZXJtaXRzID4gMSAmJiB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0xvY2sucGVybWl0cyBzaG91bGQgbmV2ZXIgYmUgPiAwIHdoZW4gdGhlcmUgaXMgc29tZW9uZSB3YWl0aW5nLicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVybWl0cyA9PT0gMSAmJiB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIHNvbWVvbmUgZWxzZSB3YWl0aW5nLCBpbW1lZGlhdGVseSBjb25zdW1lIHRoZSBwZXJtaXQgdGhhdCB3YXMgcmVsZWFzZWRcbiAgICAgICAgICAgIC8vIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBmdW5jdGlvbiBhbmQgbGV0IHRoZSB3YWl0aW5nIGZ1bmN0aW9uIHJlc3VtZS5cbiAgICAgICAgICAgIHRoaXMucGVybWl0cyAtPSAxO1xuICAgICAgICAgICAgY29uc3QgbmV4dFJlc29sdmVyID0gdGhpcy5wcm9taXNlUmVzb2x2ZXJRdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKG5leHRSZXNvbHZlcikge1xuICAgICAgICAgICAgICAgIG5leHRSZXNvbHZlcih0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2suanMubWFwIl0sIm5hbWVzIjpbIkxvY2siLCJjb25zdHJ1Y3RvciIsInBlcm1pdHMiLCJwcm9taXNlUmVzb2x2ZXJRdWV1ZSIsImFjcXVpcmUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlc29sdmVyIiwicHVzaCIsInJlbGVhc2UiLCJsZW5ndGgiLCJjb25zb2xlIiwid2FybiIsIm5leHRSZXNvbHZlciIsInNoaWZ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/lock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/mapDB.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/mapDB.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapDB: () => (/* binding */ MapDB)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\nclass MapDB {\n    constructor(database){\n        this._database = database ?? new Map();\n    }\n    async get(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        return this._database.get(dbKey);\n    }\n    async put(key, val) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.set(dbKey, val);\n    }\n    async del(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.delete(dbKey);\n    }\n    async batch(opStack) {\n        for (const op of opStack){\n            if (op.type === \"del\") {\n                await this.del(op.key);\n            }\n            if (op.type === \"put\") {\n                await this.put(op.key, op.value);\n            }\n        }\n    }\n    /**\n     * Note that the returned shallow copy will share the underlying database with the original\n     *\n     * @returns DB\n     */ shallowCopy() {\n        return new MapDB(this._database);\n    }\n    open() {\n        return Promise.resolve();\n    }\n} //# sourceMappingURL=mapDB.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL21hcERCLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtEO0FBQzNDLE1BQU1DO0lBQ1RDLFlBQVlDLFFBQVEsQ0FBRTtRQUNsQixJQUFJLENBQUNDLFNBQVMsR0FBR0QsWUFBWSxJQUFJRTtJQUNyQztJQUNBLE1BQU1DLElBQUlDLEdBQUcsRUFBRTtRQUNYLE1BQU1DLFFBQVFELGVBQWVFLGFBQWFULCtEQUFvQkEsQ0FBQ08sT0FBT0EsSUFBSUcsUUFBUTtRQUNsRixPQUFPLElBQUksQ0FBQ04sU0FBUyxDQUFDRSxHQUFHLENBQUNFO0lBQzlCO0lBQ0EsTUFBTUcsSUFBSUosR0FBRyxFQUFFSyxHQUFHLEVBQUU7UUFDaEIsTUFBTUosUUFBUUQsZUFBZUUsYUFBYVQsK0RBQW9CQSxDQUFDTyxPQUFPQSxJQUFJRyxRQUFRO1FBQ2xGLElBQUksQ0FBQ04sU0FBUyxDQUFDUyxHQUFHLENBQUNMLE9BQU9JO0lBQzlCO0lBQ0EsTUFBTUUsSUFBSVAsR0FBRyxFQUFFO1FBQ1gsTUFBTUMsUUFBUUQsZUFBZUUsYUFBYVQsK0RBQW9CQSxDQUFDTyxPQUFPQSxJQUFJRyxRQUFRO1FBQ2xGLElBQUksQ0FBQ04sU0FBUyxDQUFDVyxNQUFNLENBQUNQO0lBQzFCO0lBQ0EsTUFBTVEsTUFBTUMsT0FBTyxFQUFFO1FBQ2pCLEtBQUssTUFBTUMsTUFBTUQsUUFBUztZQUN0QixJQUFJQyxHQUFHQyxJQUFJLEtBQUssT0FBTztnQkFDbkIsTUFBTSxJQUFJLENBQUNMLEdBQUcsQ0FBQ0ksR0FBR1gsR0FBRztZQUN6QjtZQUNBLElBQUlXLEdBQUdDLElBQUksS0FBSyxPQUFPO2dCQUNuQixNQUFNLElBQUksQ0FBQ1IsR0FBRyxDQUFDTyxHQUFHWCxHQUFHLEVBQUVXLEdBQUdFLEtBQUs7WUFDbkM7UUFDSjtJQUNKO0lBQ0E7Ozs7S0FJQyxHQUNEQyxjQUFjO1FBQ1YsT0FBTyxJQUFJcEIsTUFBTSxJQUFJLENBQUNHLFNBQVM7SUFDbkM7SUFDQWtCLE9BQU87UUFDSCxPQUFPQyxRQUFRQyxPQUFPO0lBQzFCO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9tYXBEQi5qcz83ZTJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ5dGVzVG9VbnByZWZpeGVkSGV4IH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5leHBvcnQgY2xhc3MgTWFwREIge1xuICAgIGNvbnN0cnVjdG9yKGRhdGFiYXNlKSB7XG4gICAgICAgIHRoaXMuX2RhdGFiYXNlID0gZGF0YWJhc2UgPz8gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBhc3luYyBnZXQoa2V5KSB7XG4gICAgICAgIGNvbnN0IGRiS2V5ID0ga2V5IGluc3RhbmNlb2YgVWludDhBcnJheSA/IGJ5dGVzVG9VbnByZWZpeGVkSGV4KGtleSkgOiBrZXkudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFiYXNlLmdldChkYktleSk7XG4gICAgfVxuICAgIGFzeW5jIHB1dChrZXksIHZhbCkge1xuICAgICAgICBjb25zdCBkYktleSA9IGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBieXRlc1RvVW5wcmVmaXhlZEhleChrZXkpIDoga2V5LnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuX2RhdGFiYXNlLnNldChkYktleSwgdmFsKTtcbiAgICB9XG4gICAgYXN5bmMgZGVsKGtleSkge1xuICAgICAgICBjb25zdCBkYktleSA9IGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBieXRlc1RvVW5wcmVmaXhlZEhleChrZXkpIDoga2V5LnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuX2RhdGFiYXNlLmRlbGV0ZShkYktleSk7XG4gICAgfVxuICAgIGFzeW5jIGJhdGNoKG9wU3RhY2spIHtcbiAgICAgICAgZm9yIChjb25zdCBvcCBvZiBvcFN0YWNrKSB7XG4gICAgICAgICAgICBpZiAob3AudHlwZSA9PT0gJ2RlbCcpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmRlbChvcC5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wLnR5cGUgPT09ICdwdXQnKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wdXQob3Aua2V5LCBvcC52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTm90ZSB0aGF0IHRoZSByZXR1cm5lZCBzaGFsbG93IGNvcHkgd2lsbCBzaGFyZSB0aGUgdW5kZXJseWluZyBkYXRhYmFzZSB3aXRoIHRoZSBvcmlnaW5hbFxuICAgICAqXG4gICAgICogQHJldHVybnMgREJcbiAgICAgKi9cbiAgICBzaGFsbG93Q29weSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXBEQih0aGlzLl9kYXRhYmFzZSk7XG4gICAgfVxuICAgIG9wZW4oKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBEQi5qcy5tYXAiXSwibmFtZXMiOlsiYnl0ZXNUb1VucHJlZml4ZWRIZXgiLCJNYXBEQiIsImNvbnN0cnVjdG9yIiwiZGF0YWJhc2UiLCJfZGF0YWJhc2UiLCJNYXAiLCJnZXQiLCJrZXkiLCJkYktleSIsIlVpbnQ4QXJyYXkiLCJ0b1N0cmluZyIsInB1dCIsInZhbCIsInNldCIsImRlbCIsImRlbGV0ZSIsImJhdGNoIiwib3BTdGFjayIsIm9wIiwidHlwZSIsInZhbHVlIiwic2hhbGxvd0NvcHkiLCJvcGVuIiwiUHJvbWlzZSIsInJlc29sdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/mapDB.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/provider.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/provider.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchFromProvider: () => (/* binding */ fetchFromProvider),\n/* harmony export */   getProvider: () => (/* binding */ getProvider)\n/* harmony export */ });\n/**\n * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.\n * No parameter or response validation is done.\n *\n * @param url the URL for the JSON RPC provider\n * @param params the parameters for the JSON-RPC method - refer to\n * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods\n * @returns the `result` field from the JSON-RPC response\n */ const fetchFromProvider = async (url, params)=>{\n    const data = JSON.stringify({\n        method: params.method,\n        params: params.params,\n        jsonrpc: \"2.0\",\n        id: 1\n    });\n    const res = await fetch(url, {\n        headers: {\n            \"content-type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: data\n    });\n    const json = await res.json();\n    return json.result;\n};\n/**\n *\n * @param provider a URL string or {@link EthersProvider}\n * @returns the extracted URL string for the JSON-RPC Provider\n */ const getProvider = (provider)=>{\n    if (typeof provider === \"string\") {\n        return provider;\n    } else if (typeof provider === \"object\" && provider._getConnection !== undefined) {\n        return provider._getConnection().url;\n    } else {\n        throw new Error(\"Must provide valid provider URL or Web3Provider\");\n    }\n}; //# sourceMappingURL=provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7O0NBUUMsR0FDTSxNQUFNQSxvQkFBb0IsT0FBT0MsS0FBS0M7SUFDekMsTUFBTUMsT0FBT0MsS0FBS0MsU0FBUyxDQUFDO1FBQ3hCQyxRQUFRSixPQUFPSSxNQUFNO1FBQ3JCSixRQUFRQSxPQUFPQSxNQUFNO1FBQ3JCSyxTQUFTO1FBQ1RDLElBQUk7SUFDUjtJQUNBLE1BQU1DLE1BQU0sTUFBTUMsTUFBTVQsS0FBSztRQUN6QlUsU0FBUztZQUNMLGdCQUFnQjtRQUNwQjtRQUNBTCxRQUFRO1FBQ1JNLE1BQU1UO0lBQ1Y7SUFDQSxNQUFNVSxPQUFPLE1BQU1KLElBQUlJLElBQUk7SUFDM0IsT0FBT0EsS0FBS0MsTUFBTTtBQUN0QixFQUFFO0FBQ0Y7Ozs7Q0FJQyxHQUNNLE1BQU1DLGNBQWMsQ0FBQ0M7SUFDeEIsSUFBSSxPQUFPQSxhQUFhLFVBQVU7UUFDOUIsT0FBT0E7SUFDWCxPQUNLLElBQUksT0FBT0EsYUFBYSxZQUFZQSxTQUFTQyxjQUFjLEtBQUtDLFdBQVc7UUFDNUUsT0FBT0YsU0FBU0MsY0FBYyxHQUFHaEIsR0FBRztJQUN4QyxPQUNLO1FBQ0QsTUFBTSxJQUFJa0IsTUFBTTtJQUNwQjtBQUNKLEVBQUUsQ0FDRixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9wcm92aWRlci5qcz82ZjhhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFrZXMgYSBzaW1wbGUgUlBDIGNhbGwgdG8gYSByZW1vdGUgRXRoZXJldW0gSlNPTi1SUEMgcHJvdmlkZXIgYW5kIHBhc3NlcyB0aHJvdWdoIHRoZSByZXNwb25zZS5cbiAqIE5vIHBhcmFtZXRlciBvciByZXNwb25zZSB2YWxpZGF0aW9uIGlzIGRvbmUuXG4gKlxuICogQHBhcmFtIHVybCB0aGUgVVJMIGZvciB0aGUgSlNPTiBSUEMgcHJvdmlkZXJcbiAqIEBwYXJhbSBwYXJhbXMgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBKU09OLVJQQyBtZXRob2QgLSByZWZlciB0b1xuICogaHR0cHM6Ly9ldGhlcmV1bS5vcmcvZW4vZGV2ZWxvcGVycy9kb2NzL2FwaXMvanNvbi1ycGMvIGZvciBkZXRhaWxzIG9uIFJQQyBtZXRob2RzXG4gKiBAcmV0dXJucyB0aGUgYHJlc3VsdGAgZmllbGQgZnJvbSB0aGUgSlNPTi1SUEMgcmVzcG9uc2VcbiAqL1xuZXhwb3J0IGNvbnN0IGZldGNoRnJvbVByb3ZpZGVyID0gYXN5bmMgKHVybCwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbWV0aG9kOiBwYXJhbXMubWV0aG9kLFxuICAgICAgICBwYXJhbXM6IHBhcmFtcy5wYXJhbXMsXG4gICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgICBpZDogMSxcbiAgICB9KTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgfSk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIGpzb24ucmVzdWx0O1xufTtcbi8qKlxuICpcbiAqIEBwYXJhbSBwcm92aWRlciBhIFVSTCBzdHJpbmcgb3Ige0BsaW5rIEV0aGVyc1Byb3ZpZGVyfVxuICogQHJldHVybnMgdGhlIGV4dHJhY3RlZCBVUkwgc3RyaW5nIGZvciB0aGUgSlNPTi1SUEMgUHJvdmlkZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFByb3ZpZGVyID0gKHByb3ZpZGVyKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBwcm92aWRlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcHJvdmlkZXIgPT09ICdvYmplY3QnICYmIHByb3ZpZGVyLl9nZXRDb25uZWN0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyLl9nZXRDb25uZWN0aW9uKCkudXJsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgdmFsaWQgcHJvdmlkZXIgVVJMIG9yIFdlYjNQcm92aWRlcicpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOlsiZmV0Y2hGcm9tUHJvdmlkZXIiLCJ1cmwiLCJwYXJhbXMiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ldGhvZCIsImpzb25ycGMiLCJpZCIsInJlcyIsImZldGNoIiwiaGVhZGVycyIsImJvZHkiLCJqc29uIiwicmVzdWx0IiwiZ2V0UHJvdmlkZXIiLCJwcm92aWRlciIsIl9nZXRDb25uZWN0aW9uIiwidW5kZWZpbmVkIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/signature.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/signature.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ecrecover: () => (/* binding */ ecrecover),\n/* harmony export */   ecsign: () => (/* binding */ ecsign),\n/* harmony export */   fromRpcSig: () => (/* binding */ fromRpcSig),\n/* harmony export */   hashPersonalMessage: () => (/* binding */ hashPersonalMessage),\n/* harmony export */   isValidSignature: () => (/* binding */ isValidSignature),\n/* harmony export */   toCompactSig: () => (/* binding */ toCompactSig),\n/* harmony export */   toRpcSig: () => (/* binding */ toRpcSig)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n\n\n\n\n\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */ function ecsign(msgHash, privateKey, chainId) {\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.sign(msgHash, privateKey);\n    const buf = sig.toCompactRawBytes();\n    const r = buf.slice(0, 32);\n    const s = buf.slice(32, 64);\n    const v = chainId === undefined ? BigInt(sig.recovery + 27) : BigInt(sig.recovery + 35) + BigInt(chainId) * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2;\n    return {\n        r,\n        s,\n        v\n    };\n}\nfunction calculateSigRecovery(v, chainId) {\n    if (v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1) return v;\n    if (chainId === undefined) {\n        return v - _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return v - (chainId * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1;\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */ const ecrecover = function(msgHash, v, r, s, chainId) {\n    const signature = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32));\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n    const senderPubKey = sig.recoverPublicKey(msgHash);\n    return senderPubKey.toRawBytes(false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */ const toRpcSig = function(v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(v)));\n};\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */ const toCompactSig = function(v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    const ss = Uint8Array.from([\n        ...s\n    ]);\n    if (v > BigInt(28) && v % _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1 || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1 || v === BigInt(28)) {\n        ss[0] |= 0x80;\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(ss, 32)));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */ const fromRpcSig = function(sig) {\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(sig);\n    let r;\n    let s;\n    let v;\n    if (bytes.length >= 65) {\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(bytes.subarray(64));\n    } else if (bytes.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = BigInt((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToInt)(bytes.subarray(32, 33)) >> 7);\n        s[0] &= 0x7f;\n    } else {\n        throw new Error(\"Invalid signature length\");\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v = v + _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return {\n        v,\n        r,\n        s\n    };\n};\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */ const isValidSignature = function(v, r, s, homesteadOrLater = true, chainId) {\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(r);\n    const sBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(s);\n    if (rBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || rBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER || sBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER) {\n        return false;\n    }\n    if (homesteadOrLater && sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER_DIV_2) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */ const hashPersonalMessage = function(message) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.assertIsBytes)(message);\n    const prefix = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)(`\\u0019Ethereum Signed Message:\\n${message.length}`);\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)(prefix, message));\n}; //# sourceMappingURL=signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/types.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/types.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOutput: () => (/* binding */ TypeOutput),\n/* harmony export */   toType: () => (/* binding */ toType)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n/**\n * Type output options\n */ var TypeOutput;\n(function(TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n    TypeOutput[TypeOutput[\"Uint8Array\"] = 2] = \"Uint8Array\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput || (TypeOutput = {}));\nfunction toType(input, outputType) {\n    if (input === null) {\n        return null;\n    }\n    if (input === undefined) {\n        return undefined;\n    }\n    if (typeof input === \"string\" && !(0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    } else if (typeof input === \"number\" && !Number.isSafeInteger(input)) {\n        throw new Error(\"The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)\");\n    }\n    const output = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(input);\n    switch(outputType){\n        case TypeOutput.Uint8Array:\n            return output;\n        case TypeOutput.BigInt:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n        case TypeOutput.Number:\n            {\n                const bigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n                if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n                    throw new Error(\"The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)\");\n                }\n                return Number(bigInt);\n            }\n        case TypeOutput.PrefixedHexString:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(output);\n        default:\n            throw new Error(\"unknown outputType\");\n    }\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0U7QUFDcEI7QUFDNUM7O0NBRUMsR0FDTSxJQUFJSSxXQUFXO0FBQ3JCLFVBQVVBLFVBQVU7SUFDakJBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDM0NBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsR0FBRztBQUN0RCxHQUFHQSxjQUFlQSxDQUFBQSxhQUFhLENBQUM7QUFDekIsU0FBU0MsT0FBT0MsS0FBSyxFQUFFQyxVQUFVO0lBQ3BDLElBQUlELFVBQVUsTUFBTTtRQUNoQixPQUFPO0lBQ1g7SUFDQSxJQUFJQSxVQUFVRSxXQUFXO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQSxJQUFJLE9BQU9GLFVBQVUsWUFBWSxDQUFDSCx5REFBV0EsQ0FBQ0csUUFBUTtRQUNsRCxNQUFNLElBQUlHLE1BQU0sQ0FBQyxtREFBbUQsRUFBRUgsTUFBTSxDQUFDO0lBQ2pGLE9BQ0ssSUFBSSxPQUFPQSxVQUFVLFlBQVksQ0FBQ0ksT0FBT0MsYUFBYSxDQUFDTCxRQUFRO1FBQ2hFLE1BQU0sSUFBSUcsTUFBTTtJQUNwQjtJQUNBLE1BQU1HLFNBQVNWLGtEQUFPQSxDQUFDSTtJQUN2QixPQUFRQztRQUNKLEtBQUtILFdBQVdTLFVBQVU7WUFDdEIsT0FBT0Q7UUFDWCxLQUFLUixXQUFXVSxNQUFNO1lBQ2xCLE9BQU9kLHdEQUFhQSxDQUFDWTtRQUN6QixLQUFLUixXQUFXTSxNQUFNO1lBQUU7Z0JBQ3BCLE1BQU1LLFNBQVNmLHdEQUFhQSxDQUFDWTtnQkFDN0IsSUFBSUcsU0FBU0QsT0FBT0osT0FBT00sZ0JBQWdCLEdBQUc7b0JBQzFDLE1BQU0sSUFBSVAsTUFBTTtnQkFDcEI7Z0JBQ0EsT0FBT0MsT0FBT0s7WUFDbEI7UUFDQSxLQUFLWCxXQUFXYSxpQkFBaUI7WUFDN0IsT0FBT2hCLHFEQUFVQSxDQUFDVztRQUN0QjtZQUNJLE1BQU0sSUFBSUgsTUFBTTtJQUN4QjtBQUNKLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vdHlwZXMuanM/MTU3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBieXRlc1RvQmlnSW50LCBieXRlc1RvSGV4LCB0b0J5dGVzIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5pbXBvcnQgeyBpc0hleFN0cmluZyB9IGZyb20gJy4vaW50ZXJuYWwuanMnO1xuLyoqXG4gKiBUeXBlIG91dHB1dCBvcHRpb25zXG4gKi9cbmV4cG9ydCB2YXIgVHlwZU91dHB1dDtcbihmdW5jdGlvbiAoVHlwZU91dHB1dCkge1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIk51bWJlclwiXSA9IDBdID0gXCJOdW1iZXJcIjtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJCaWdJbnRcIl0gPSAxXSA9IFwiQmlnSW50XCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiVWludDhBcnJheVwiXSA9IDJdID0gXCJVaW50OEFycmF5XCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiUHJlZml4ZWRIZXhTdHJpbmdcIl0gPSAzXSA9IFwiUHJlZml4ZWRIZXhTdHJpbmdcIjtcbn0pKFR5cGVPdXRwdXQgfHwgKFR5cGVPdXRwdXQgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIHRvVHlwZShpbnB1dCwgb3V0cHV0VHlwZSkge1xuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiYgIWlzSGV4U3RyaW5nKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgc3RyaW5nIG11c3QgYmUgcHJvdmlkZWQgd2l0aCBhIDB4LXByZWZpeCwgZ2l2ZW46ICR7aW5wdXR9YCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc1NhZmVJbnRlZ2VyKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlZCBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIE1BWF9TQUZFX0lOVEVHRVIgKHBsZWFzZSB1c2UgYW4gYWx0ZXJuYXRpdmUgaW5wdXQgdHlwZSknKTtcbiAgICB9XG4gICAgY29uc3Qgb3V0cHV0ID0gdG9CeXRlcyhpbnB1dCk7XG4gICAgc3dpdGNoIChvdXRwdXRUeXBlKSB7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5VaW50OEFycmF5OlxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgY2FzZSBUeXBlT3V0cHV0LkJpZ0ludDpcbiAgICAgICAgICAgIHJldHVybiBieXRlc1RvQmlnSW50KG91dHB1dCk7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5OdW1iZXI6IHtcbiAgICAgICAgICAgIGNvbnN0IGJpZ0ludCA9IGJ5dGVzVG9CaWdJbnQob3V0cHV0KTtcbiAgICAgICAgICAgIGlmIChiaWdJbnQgPiBCaWdJbnQoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBNQVhfU0FGRV9JTlRFR0VSIChwbGVhc2UgdXNlIGFuIGFsdGVybmF0aXZlIG91dHB1dCB0eXBlKScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcihiaWdJbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5QcmVmaXhlZEhleFN0cmluZzpcbiAgICAgICAgICAgIHJldHVybiBieXRlc1RvSGV4KG91dHB1dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gb3V0cHV0VHlwZScpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJieXRlc1RvQmlnSW50IiwiYnl0ZXNUb0hleCIsInRvQnl0ZXMiLCJpc0hleFN0cmluZyIsIlR5cGVPdXRwdXQiLCJ0b1R5cGUiLCJpbnB1dCIsIm91dHB1dFR5cGUiLCJ1bmRlZmluZWQiLCJFcnJvciIsIk51bWJlciIsImlzU2FmZUludGVnZXIiLCJvdXRwdXQiLCJVaW50OEFycmF5IiwiQmlnSW50IiwiYmlnSW50IiwiTUFYX1NBRkVfSU5URUdFUiIsIlByZWZpeGVkSGV4U3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/units.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/units.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GWEI_TO_WEI: () => (/* binding */ GWEI_TO_WEI),\n/* harmony export */   formatBigDecimal: () => (/* binding */ formatBigDecimal)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n/** Easy conversion from Gwei to wei */ const GWEI_TO_WEI = BigInt(1000000000);\nfunction formatBigDecimal(numerator, denominator, maxDecimalFactor) {\n    if (denominator === _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0) {\n        denominator = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_1;\n    }\n    const full = numerator / denominator;\n    const fraction = (numerator - full * denominator) * maxDecimalFactor / denominator;\n    // zeros to be added post decimal are number of zeros in maxDecimalFactor - number of digits in fraction\n    const zerosPostDecimal = String(maxDecimalFactor).length - 1 - String(fraction).length;\n    return `${full}.${\"0\".repeat(zerosPostDecimal)}${fraction}`;\n} //# sourceMappingURL=units.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3VuaXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDtBQUNwRCxxQ0FBcUMsR0FDOUIsTUFBTUUsY0FBY0MsT0FBTyxZQUFZO0FBQ3ZDLFNBQVNDLGlCQUFpQkMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLGdCQUFnQjtJQUNyRSxJQUFJRCxnQkFBZ0JOLG1EQUFRQSxFQUFFO1FBQzFCTSxjQUFjTCxtREFBUUE7SUFDMUI7SUFDQSxNQUFNTyxPQUFPSCxZQUFZQztJQUN6QixNQUFNRyxXQUFXLENBQUVKLFlBQVlHLE9BQU9GLFdBQVUsSUFBS0MsbUJBQW9CRDtJQUN6RSx3R0FBd0c7SUFDeEcsTUFBTUksbUJBQW1CQyxPQUFPSixrQkFBa0JLLE1BQU0sR0FBRyxJQUFJRCxPQUFPRixVQUFVRyxNQUFNO0lBQ3RGLE9BQU8sQ0FBQyxFQUFFSixLQUFLLENBQUMsRUFBRSxJQUFJSyxNQUFNLENBQUNILGtCQUFrQixFQUFFRCxTQUFTLENBQUM7QUFDL0QsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS91bml0cy5qcz85ZDUwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJJR0lOVF8wLCBCSUdJTlRfMSB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbi8qKiBFYXN5IGNvbnZlcnNpb24gZnJvbSBHd2VpIHRvIHdlaSAqL1xuZXhwb3J0IGNvbnN0IEdXRUlfVE9fV0VJID0gQmlnSW50KDEwMDAwMDAwMDApO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEJpZ0RlY2ltYWwobnVtZXJhdG9yLCBkZW5vbWluYXRvciwgbWF4RGVjaW1hbEZhY3Rvcikge1xuICAgIGlmIChkZW5vbWluYXRvciA9PT0gQklHSU5UXzApIHtcbiAgICAgICAgZGVub21pbmF0b3IgPSBCSUdJTlRfMTtcbiAgICB9XG4gICAgY29uc3QgZnVsbCA9IG51bWVyYXRvciAvIGRlbm9taW5hdG9yO1xuICAgIGNvbnN0IGZyYWN0aW9uID0gKChudW1lcmF0b3IgLSBmdWxsICogZGVub21pbmF0b3IpICogbWF4RGVjaW1hbEZhY3RvcikgLyBkZW5vbWluYXRvcjtcbiAgICAvLyB6ZXJvcyB0byBiZSBhZGRlZCBwb3N0IGRlY2ltYWwgYXJlIG51bWJlciBvZiB6ZXJvcyBpbiBtYXhEZWNpbWFsRmFjdG9yIC0gbnVtYmVyIG9mIGRpZ2l0cyBpbiBmcmFjdGlvblxuICAgIGNvbnN0IHplcm9zUG9zdERlY2ltYWwgPSBTdHJpbmcobWF4RGVjaW1hbEZhY3RvcikubGVuZ3RoIC0gMSAtIFN0cmluZyhmcmFjdGlvbikubGVuZ3RoO1xuICAgIHJldHVybiBgJHtmdWxsfS4keycwJy5yZXBlYXQoemVyb3NQb3N0RGVjaW1hbCl9JHtmcmFjdGlvbn1gO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pdHMuanMubWFwIl0sIm5hbWVzIjpbIkJJR0lOVF8wIiwiQklHSU5UXzEiLCJHV0VJX1RPX1dFSSIsIkJpZ0ludCIsImZvcm1hdEJpZ0RlY2ltYWwiLCJudW1lcmF0b3IiLCJkZW5vbWluYXRvciIsIm1heERlY2ltYWxGYWN0b3IiLCJmdWxsIiwiZnJhY3Rpb24iLCJ6ZXJvc1Bvc3REZWNpbWFsIiwiU3RyaW5nIiwibGVuZ3RoIiwicmVwZWF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/units.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/withdrawal.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/withdrawal.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Withdrawal: () => (/* binding */ Withdrawal)\n/* harmony export */ });\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/types.js\");\n\n\n\n\n/**\n * Representation of EIP-4895 withdrawal data\n */ class Withdrawal {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n     */ constructor(index, validatorIndex, address, /**\n     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n     */ amount){\n        this.index = index;\n        this.validatorIndex = validatorIndex;\n        this.address = address;\n        this.amount = amount;\n    }\n    static fromWithdrawalData(withdrawalData) {\n        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData } = withdrawalData;\n        const index = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(indexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const validatorIndex = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const address = addressData instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? addressData : new _address_js__WEBPACK_IMPORTED_MODULE_0__.Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(addressData));\n        const amount = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amountData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        return new Withdrawal(index, validatorIndex, address, amount);\n    }\n    static fromValuesArray(withdrawalArray) {\n        if (withdrawalArray.length !== 4) {\n            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n        }\n        const [index, validatorIndex, address, amount] = withdrawalArray;\n        return Withdrawal.fromWithdrawalData({\n            index,\n            validatorIndex,\n            address,\n            amount\n        });\n    }\n    /**\n     * Convert a withdrawal to a buffer array\n     * @param withdrawal the withdrawal to convert\n     * @returns buffer array of the withdrawal\n     */ static toBytesArray(withdrawal) {\n        const { index, validatorIndex, address, amount } = withdrawal;\n        const indexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0 ? new Uint8Array() : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const validatorIndexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0 ? new Uint8Array() : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const addressBytes = address instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? address.bytes : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(address, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const amountBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0 ? new Uint8Array() : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        return [\n            indexBytes,\n            validatorIndexBytes,\n            addressBytes,\n            amountBytes\n        ];\n    }\n    raw() {\n        return Withdrawal.toBytesArray(this);\n    }\n    toValue() {\n        return {\n            index: this.index,\n            validatorIndex: this.validatorIndex,\n            address: this.address.bytes,\n            amount: this.amount\n        };\n    }\n    toJSON() {\n        return {\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.index),\n            validatorIndex: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.validatorIndex),\n            address: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.address.bytes),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.amount)\n        };\n    }\n} //# sourceMappingURL=withdrawal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@ethereumjs/util/dist/esm/withdrawal.js\n");

/***/ })

};
;