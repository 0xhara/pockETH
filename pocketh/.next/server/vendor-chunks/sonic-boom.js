"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sonic-boom";
exports.ids = ["vendor-chunks/sonic-boom"];
exports.modules = {

/***/ "(ssr)/./node_modules/sonic-boom/index.js":
/*!******************************************!*\
  !*** ./node_modules/sonic-boom/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nconst path = __webpack_require__(/*! path */ \"path\");\nconst sleep = __webpack_require__(/*! atomic-sleep */ \"(ssr)/./node_modules/atomic-sleep/index.js\");\nconst BUSY_WRITE_TIMEOUT = 100;\n// 16 KB. Don't write more than docker buffer size.\n// https://github.com/moby/moby/blob/513ec73831269947d38a644c278ce3cac36783b2/daemon/logger/copier.go#L13\nconst MAX_WRITE = 16 * 1024;\nfunction openFile(file, sonic) {\n    sonic._opening = true;\n    sonic._writing = true;\n    sonic._asyncDrainScheduled = false;\n    // NOTE: 'error' and 'ready' events emitted below only relevant when sonic.sync===false\n    // for sync mode, there is no way to add a listener that will receive these\n    function fileOpened(err, fd) {\n        if (err) {\n            sonic._reopening = false;\n            sonic._writing = false;\n            sonic._opening = false;\n            if (sonic.sync) {\n                process.nextTick(()=>{\n                    if (sonic.listenerCount(\"error\") > 0) {\n                        sonic.emit(\"error\", err);\n                    }\n                });\n            } else {\n                sonic.emit(\"error\", err);\n            }\n            return;\n        }\n        sonic.fd = fd;\n        sonic.file = file;\n        sonic._reopening = false;\n        sonic._opening = false;\n        sonic._writing = false;\n        if (sonic.sync) {\n            process.nextTick(()=>sonic.emit(\"ready\"));\n        } else {\n            sonic.emit(\"ready\");\n        }\n        if (sonic._reopening) {\n            return;\n        }\n        // start\n        if (!sonic._writing && sonic._len > sonic.minLength && !sonic.destroyed) {\n            actualWrite(sonic);\n        }\n    }\n    const flags = sonic.append ? \"a\" : \"w\";\n    const mode = sonic.mode;\n    if (sonic.sync) {\n        try {\n            if (sonic.mkdir) fs.mkdirSync(path.dirname(file), {\n                recursive: true\n            });\n            const fd = fs.openSync(file, flags, mode);\n            fileOpened(null, fd);\n        } catch (err) {\n            fileOpened(err);\n            throw err;\n        }\n    } else if (sonic.mkdir) {\n        fs.mkdir(path.dirname(file), {\n            recursive: true\n        }, (err)=>{\n            if (err) return fileOpened(err);\n            fs.open(file, flags, mode, fileOpened);\n        });\n    } else {\n        fs.open(file, flags, mode, fileOpened);\n    }\n}\nfunction SonicBoom(opts) {\n    if (!(this instanceof SonicBoom)) {\n        return new SonicBoom(opts);\n    }\n    let { fd, dest, minLength, maxLength, maxWrite, sync, append = true, mode, mkdir, retryEAGAIN } = opts || {};\n    fd = fd || dest;\n    this._bufs = [];\n    this._len = 0;\n    this.fd = -1;\n    this._writing = false;\n    this._writingBuf = \"\";\n    this._ending = false;\n    this._reopening = false;\n    this._asyncDrainScheduled = false;\n    this._hwm = Math.max(minLength || 0, 16387);\n    this.file = null;\n    this.destroyed = false;\n    this.minLength = minLength || 0;\n    this.maxLength = maxLength || 0;\n    this.maxWrite = maxWrite || MAX_WRITE;\n    this.sync = sync || false;\n    this.append = append || false;\n    this.mode = mode;\n    this.retryEAGAIN = retryEAGAIN || (()=>true);\n    this.mkdir = mkdir || false;\n    if (typeof fd === \"number\") {\n        this.fd = fd;\n        process.nextTick(()=>this.emit(\"ready\"));\n    } else if (typeof fd === \"string\") {\n        openFile(fd, this);\n    } else {\n        throw new Error(\"SonicBoom supports only file descriptors and files\");\n    }\n    if (this.minLength >= this.maxWrite) {\n        throw new Error(`minLength should be smaller than maxWrite (${this.maxWrite})`);\n    }\n    this.release = (err, n)=>{\n        if (err) {\n            if (err.code === \"EAGAIN\" && this.retryEAGAIN(err, this._writingBuf.length, this._len - this._writingBuf.length)) {\n                if (this.sync) {\n                    // This error code should not happen in sync mode, because it is\n                    // not using the underlining operating system asynchronous functions.\n                    // However it happens, and so we handle it.\n                    // Ref: https://github.com/pinojs/pino/issues/783\n                    try {\n                        sleep(BUSY_WRITE_TIMEOUT);\n                        this.release(undefined, 0);\n                    } catch (err) {\n                        this.release(err);\n                    }\n                } else {\n                    // Let's give the destination some time to process the chunk.\n                    setTimeout(()=>{\n                        fs.write(this.fd, this._writingBuf, \"utf8\", this.release);\n                    }, BUSY_WRITE_TIMEOUT);\n                }\n            } else {\n                this._writing = false;\n                this.emit(\"error\", err);\n            }\n            return;\n        }\n        this.emit(\"write\", n);\n        this._len -= n;\n        this._writingBuf = this._writingBuf.slice(n);\n        if (this._writingBuf.length) {\n            if (!this.sync) {\n                fs.write(this.fd, this._writingBuf, \"utf8\", this.release);\n                return;\n            }\n            try {\n                do {\n                    const n = fs.writeSync(this.fd, this._writingBuf, \"utf8\");\n                    this._len -= n;\n                    this._writingBuf = this._writingBuf.slice(n);\n                }while (this._writingBuf);\n            } catch (err) {\n                this.release(err);\n                return;\n            }\n        }\n        const len = this._len;\n        if (this._reopening) {\n            this._writing = false;\n            this._reopening = false;\n            this.reopen();\n        } else if (len > this.minLength) {\n            actualWrite(this);\n        } else if (this._ending) {\n            if (len > 0) {\n                actualWrite(this);\n            } else {\n                this._writing = false;\n                actualClose(this);\n            }\n        } else {\n            this._writing = false;\n            if (this.sync) {\n                if (!this._asyncDrainScheduled) {\n                    this._asyncDrainScheduled = true;\n                    process.nextTick(emitDrain, this);\n                }\n            } else {\n                this.emit(\"drain\");\n            }\n        }\n    };\n    this.on(\"newListener\", function(name) {\n        if (name === \"drain\") {\n            this._asyncDrainScheduled = false;\n        }\n    });\n}\nfunction emitDrain(sonic) {\n    const hasListeners = sonic.listenerCount(\"drain\") > 0;\n    if (!hasListeners) return;\n    sonic._asyncDrainScheduled = false;\n    sonic.emit(\"drain\");\n}\ninherits(SonicBoom, EventEmitter);\nSonicBoom.prototype.write = function(data) {\n    if (this.destroyed) {\n        throw new Error(\"SonicBoom destroyed\");\n    }\n    const len = this._len + data.length;\n    const bufs = this._bufs;\n    if (this.maxLength && len > this.maxLength) {\n        this.emit(\"drop\", data);\n        return this._len < this._hwm;\n    }\n    if (bufs.length === 0 || bufs[bufs.length - 1].length + data.length > this.maxWrite) {\n        bufs.push(\"\" + data);\n    } else {\n        bufs[bufs.length - 1] += data;\n    }\n    this._len = len;\n    if (!this._writing && this._len >= this.minLength) {\n        actualWrite(this);\n    }\n    return this._len < this._hwm;\n};\nSonicBoom.prototype.flush = function() {\n    if (this.destroyed) {\n        throw new Error(\"SonicBoom destroyed\");\n    }\n    if (this._writing || this.minLength <= 0) {\n        return;\n    }\n    if (this._bufs.length === 0) {\n        this._bufs.push(\"\");\n    }\n    actualWrite(this);\n};\nSonicBoom.prototype.reopen = function(file) {\n    if (this.destroyed) {\n        throw new Error(\"SonicBoom destroyed\");\n    }\n    if (this._opening) {\n        this.once(\"ready\", ()=>{\n            this.reopen(file);\n        });\n        return;\n    }\n    if (this._ending) {\n        return;\n    }\n    if (!this.file) {\n        throw new Error(\"Unable to reopen a file descriptor, you must pass a file to SonicBoom\");\n    }\n    this._reopening = true;\n    if (this._writing) {\n        return;\n    }\n    const fd = this.fd;\n    this.once(\"ready\", ()=>{\n        if (fd !== this.fd) {\n            fs.close(fd, (err)=>{\n                if (err) {\n                    return this.emit(\"error\", err);\n                }\n            });\n        }\n    });\n    openFile(file || this.file, this);\n};\nSonicBoom.prototype.end = function() {\n    if (this.destroyed) {\n        throw new Error(\"SonicBoom destroyed\");\n    }\n    if (this._opening) {\n        this.once(\"ready\", ()=>{\n            this.end();\n        });\n        return;\n    }\n    if (this._ending) {\n        return;\n    }\n    this._ending = true;\n    if (this._writing) {\n        return;\n    }\n    if (this._len > 0 && this.fd >= 0) {\n        actualWrite(this);\n    } else {\n        actualClose(this);\n    }\n};\nSonicBoom.prototype.flushSync = function() {\n    if (this.destroyed) {\n        throw new Error(\"SonicBoom destroyed\");\n    }\n    if (this.fd < 0) {\n        throw new Error(\"sonic boom is not ready yet\");\n    }\n    if (!this._writing && this._writingBuf.length > 0) {\n        this._bufs.unshift(this._writingBuf);\n        this._writingBuf = \"\";\n    }\n    while(this._bufs.length){\n        const buf = this._bufs[0];\n        try {\n            this._len -= fs.writeSync(this.fd, buf, \"utf8\");\n            this._bufs.shift();\n        } catch (err) {\n            if (err.code !== \"EAGAIN\" || !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {\n                throw err;\n            }\n            sleep(BUSY_WRITE_TIMEOUT);\n        }\n    }\n};\nSonicBoom.prototype.destroy = function() {\n    if (this.destroyed) {\n        return;\n    }\n    actualClose(this);\n};\nfunction actualWrite(sonic) {\n    const release = sonic.release;\n    sonic._writing = true;\n    sonic._writingBuf = sonic._writingBuf || sonic._bufs.shift() || \"\";\n    if (sonic.sync) {\n        try {\n            const written = fs.writeSync(sonic.fd, sonic._writingBuf, \"utf8\");\n            release(null, written);\n        } catch (err) {\n            release(err);\n        }\n    } else {\n        fs.write(sonic.fd, sonic._writingBuf, \"utf8\", release);\n    }\n}\nfunction actualClose(sonic) {\n    if (sonic.fd === -1) {\n        sonic.once(\"ready\", actualClose.bind(null, sonic));\n        return;\n    }\n    sonic.destroyed = true;\n    sonic._bufs = [];\n    if (sonic.fd !== 1 && sonic.fd !== 2) {\n        fs.close(sonic.fd, done);\n    } else {\n        setImmediate(done);\n    }\n    function done(err) {\n        if (err) {\n            sonic.emit(\"error\", err);\n            return;\n        }\n        if (sonic._ending && !sonic._writing) {\n            sonic.emit(\"finish\");\n        }\n        sonic.emit(\"close\");\n    }\n}\n/**\n * These export configurations enable JS and TS developers\n * to consumer SonicBoom in whatever way best suits their needs.\n * Some examples of supported import syntax includes:\n * - `const SonicBoom = require('SonicBoom')`\n * - `const { SonicBoom } = require('SonicBoom')`\n * - `import * as SonicBoom from 'SonicBoom'`\n * - `import { SonicBoom } from 'SonicBoom'`\n * - `import SonicBoom from 'SonicBoom'`\n */ SonicBoom.SonicBoom = SonicBoom;\nSonicBoom.default = SonicBoom;\nmodule.exports = SonicBoom;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sonic-boom/index.js\n");

/***/ })

};
;