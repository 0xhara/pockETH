"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-qrcode-logo";
exports.ids = ["vendor-chunks/react-qrcode-logo"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-qrcode-logo/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/react-qrcode-logo/dist/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __extends = this && this.__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.QRCode = void 0;\nvar isEqual = __webpack_require__(/*! lodash.isequal */ \"(ssr)/./node_modules/lodash.isequal/index.js\");\nvar qrGenerator = __webpack_require__(/*! qrcode-generator */ \"(ssr)/./node_modules/qrcode-generator/qrcode.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar ReactDOM = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar QRCode = /** @class */ function(_super) {\n    __extends(QRCode, _super);\n    function QRCode(props) {\n        var _this = _super.call(this, props) || this;\n        _this.canvas = React.createRef();\n        return _this;\n    }\n    QRCode.utf16to8 = function(str) {\n        var out = \"\", i, c;\n        var len = str.length;\n        for(i = 0; i < len; i++){\n            c = str.charCodeAt(i);\n            if (c >= 0x0001 && c <= 0x007F) {\n                out += str.charAt(i);\n            } else if (c > 0x07FF) {\n                out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n            } else {\n                out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n            }\n        }\n        return out;\n    };\n    /**\n     * Draw a rounded square in the canvas\n     */ QRCode.prototype.drawRoundedSquare = function(lineWidth, x, y, size, color, radii, fill, ctx) {\n        ctx.lineWidth = lineWidth;\n        ctx.fillStyle = color;\n        ctx.strokeStyle = color;\n        // Adjust coordinates so that the outside of the stroke is aligned to the edges\n        y += lineWidth / 2;\n        x += lineWidth / 2;\n        size -= lineWidth;\n        if (!Array.isArray(radii)) {\n            radii = [\n                radii,\n                radii,\n                radii,\n                radii\n            ];\n        }\n        // Radius should not be greater than half the size or less than zero\n        radii = radii.map(function(r) {\n            r = Math.min(r, size / 2);\n            return r < 0 ? 0 : r;\n        });\n        var rTopLeft = radii[0] || 0;\n        var rTopRight = radii[1] || 0;\n        var rBottomRight = radii[2] || 0;\n        var rBottomLeft = radii[3] || 0;\n        ctx.beginPath();\n        ctx.moveTo(x + rTopLeft, y);\n        ctx.lineTo(x + size - rTopRight, y);\n        if (rTopRight) ctx.quadraticCurveTo(x + size, y, x + size, y + rTopRight);\n        ctx.lineTo(x + size, y + size - rBottomRight);\n        if (rBottomRight) ctx.quadraticCurveTo(x + size, y + size, x + size - rBottomRight, y + size);\n        ctx.lineTo(x + rBottomLeft, y + size);\n        if (rBottomLeft) ctx.quadraticCurveTo(x, y + size, x, y + size - rBottomLeft);\n        ctx.lineTo(x, y + rTopLeft);\n        if (rTopLeft) ctx.quadraticCurveTo(x, y, x + rTopLeft, y);\n        ctx.closePath();\n        ctx.stroke();\n        if (fill) {\n            ctx.fill();\n        }\n    };\n    /**\n     * Draw a single positional pattern eye.\n     */ QRCode.prototype.drawPositioningPattern = function(ctx, cellSize, offset, row, col, color, radii) {\n        if (radii === void 0) {\n            radii = [\n                0,\n                0,\n                0,\n                0\n            ];\n        }\n        var lineWidth = Math.ceil(cellSize);\n        var radiiOuter;\n        var radiiInner;\n        if (typeof radii !== \"number\" && !Array.isArray(radii)) {\n            radiiOuter = radii.outer || 0;\n            radiiInner = radii.inner || 0;\n        } else {\n            radiiOuter = radii;\n            radiiInner = radiiOuter;\n        }\n        var colorOuter;\n        var colorInner;\n        if (typeof color !== \"string\") {\n            colorOuter = color.outer;\n            colorInner = color.inner;\n        } else {\n            colorOuter = color;\n            colorInner = color;\n        }\n        var y = row * cellSize + offset;\n        var x = col * cellSize + offset;\n        var size = cellSize * 7;\n        // Outer box\n        this.drawRoundedSquare(lineWidth, x, y, size, colorOuter, radiiOuter, false, ctx);\n        // Inner box\n        size = cellSize * 3;\n        y += cellSize * 2;\n        x += cellSize * 2;\n        this.drawRoundedSquare(lineWidth, x, y, size, colorInner, radiiInner, true, ctx);\n    };\n    ;\n    /**\n     * Is this dot inside a positional pattern zone.\n     */ QRCode.prototype.isInPositioninZone = function(col, row, zones) {\n        return zones.some(function(zone) {\n            return row >= zone.row && row <= zone.row + 7 && col >= zone.col && col <= zone.col + 7;\n        });\n    };\n    QRCode.prototype.transformPixelLengthIntoNumberOfCells = function(pixelLength, cellSize) {\n        return pixelLength / cellSize;\n    };\n    QRCode.prototype.isCoordinateInImage = function(col, row, dWidthLogo, dHeightLogo, dxLogo, dyLogo, cellSize, logoImage) {\n        if (logoImage) {\n            var numberOfCellsMargin = 2;\n            var firstRowOfLogo = this.transformPixelLengthIntoNumberOfCells(dxLogo, cellSize);\n            var firstColumnOfLogo = this.transformPixelLengthIntoNumberOfCells(dyLogo, cellSize);\n            var logoWidthInCells = this.transformPixelLengthIntoNumberOfCells(dWidthLogo, cellSize) - 1;\n            var logoHeightInCells = this.transformPixelLengthIntoNumberOfCells(dHeightLogo, cellSize) - 1;\n            return row >= firstRowOfLogo - numberOfCellsMargin && row <= firstRowOfLogo + logoWidthInCells + numberOfCellsMargin // check rows\n             && col >= firstColumnOfLogo - numberOfCellsMargin && col <= firstColumnOfLogo + logoHeightInCells + numberOfCellsMargin; // check cols\n        } else {\n            return false;\n        }\n    };\n    QRCode.prototype.shouldComponentUpdate = function(nextProps) {\n        return !isEqual(this.props, nextProps);\n    };\n    QRCode.prototype.componentDidMount = function() {\n        this.update();\n    };\n    QRCode.prototype.componentDidUpdate = function() {\n        this.update();\n    };\n    QRCode.prototype.update = function() {\n        var _a = this.props, value = _a.value, ecLevel = _a.ecLevel, enableCORS = _a.enableCORS, bgColor = _a.bgColor, fgColor = _a.fgColor, logoImage = _a.logoImage, logoOpacity = _a.logoOpacity, logoOnLoad = _a.logoOnLoad, removeQrCodeBehindLogo = _a.removeQrCodeBehindLogo, qrStyle = _a.qrStyle, eyeRadius = _a.eyeRadius, eyeColor = _a.eyeColor, logoPaddingStyle = _a.logoPaddingStyle;\n        // just make sure that these params are passed as numbers\n        var size = +this.props.size;\n        var quietZone = +this.props.quietZone;\n        var logoWidth = this.props.logoWidth ? +this.props.logoWidth : 0;\n        var logoHeight = this.props.logoHeight ? +this.props.logoHeight : 0;\n        var logoPadding = this.props.logoPadding ? +this.props.logoPadding : 0;\n        var qrCode = qrGenerator(0, ecLevel);\n        qrCode.addData(QRCode.utf16to8(value));\n        qrCode.make();\n        var canvas = ReactDOM.findDOMNode(this.canvas.current);\n        var ctx = canvas.getContext(\"2d\");\n        var canvasSize = size + 2 * quietZone;\n        var length = qrCode.getModuleCount();\n        var cellSize = size / length;\n        var scale = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = canvasSize * scale;\n        ctx.scale(scale, scale);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, canvasSize, canvasSize);\n        var offset = quietZone;\n        var positioningZones = [\n            {\n                row: 0,\n                col: 0\n            },\n            {\n                row: 0,\n                col: length - 7\n            },\n            {\n                row: length - 7,\n                col: 0\n            }\n        ];\n        ctx.strokeStyle = fgColor;\n        if (qrStyle === \"dots\") {\n            ctx.fillStyle = fgColor;\n            var radius = cellSize / 2;\n            for(var row = 0; row < length; row++){\n                for(var col = 0; col < length; col++){\n                    if (qrCode.isDark(row, col) && !this.isInPositioninZone(row, col, positioningZones)) {\n                        ctx.beginPath();\n                        ctx.arc(Math.round(col * cellSize) + radius + offset, Math.round(row * cellSize) + radius + offset, radius / 100 * 75, 0, 2 * Math.PI, false);\n                        ctx.closePath();\n                        ctx.fill();\n                    }\n                }\n            }\n        } else {\n            for(var row = 0; row < length; row++){\n                for(var col = 0; col < length; col++){\n                    if (qrCode.isDark(row, col) && !this.isInPositioninZone(row, col, positioningZones)) {\n                        ctx.fillStyle = fgColor;\n                        var w = Math.ceil((col + 1) * cellSize) - Math.floor(col * cellSize);\n                        var h = Math.ceil((row + 1) * cellSize) - Math.floor(row * cellSize);\n                        ctx.fillRect(Math.round(col * cellSize) + offset, Math.round(row * cellSize) + offset, w, h);\n                    }\n                }\n            }\n        }\n        // Draw positioning patterns\n        for(var i = 0; i < 3; i++){\n            var _b = positioningZones[i], row = _b.row, col = _b.col;\n            var radii = eyeRadius;\n            var color = void 0;\n            if (Array.isArray(radii)) {\n                radii = radii[i];\n            }\n            if (typeof radii == \"number\") {\n                radii = [\n                    radii,\n                    radii,\n                    radii,\n                    radii\n                ];\n            }\n            if (!eyeColor) {\n                color = fgColor;\n            } else {\n                if (Array.isArray(eyeColor)) {\n                    color = eyeColor[i];\n                } else {\n                    color = eyeColor;\n                }\n            }\n            this.drawPositioningPattern(ctx, cellSize, offset, row, col, color, radii);\n        }\n        if (logoImage) {\n            var image_1 = new Image();\n            if (enableCORS) {\n                image_1.crossOrigin = \"Anonymous\";\n            }\n            image_1.onload = function() {\n                ctx.save();\n                var dWidthLogo = logoWidth || size * 0.2;\n                var dHeightLogo = logoHeight || dWidthLogo;\n                var dxLogo = (size - dWidthLogo) / 2;\n                var dyLogo = (size - dHeightLogo) / 2;\n                if (removeQrCodeBehindLogo || logoPadding) {\n                    ctx.beginPath();\n                    ctx.strokeStyle = bgColor;\n                    ctx.fillStyle = bgColor;\n                    var dWidthLogoPadding = dWidthLogo + 2 * logoPadding;\n                    var dHeightLogoPadding = dHeightLogo + 2 * logoPadding;\n                    var dxLogoPadding = dxLogo + offset - logoPadding;\n                    var dyLogoPadding = dyLogo + offset - logoPadding;\n                    if (logoPaddingStyle === \"circle\") {\n                        var dxCenterLogoPadding = dxLogoPadding + dWidthLogoPadding / 2;\n                        var dyCenterLogoPadding = dyLogoPadding + dHeightLogoPadding / 2;\n                        ctx.ellipse(dxCenterLogoPadding, dyCenterLogoPadding, dWidthLogoPadding / 2, dHeightLogoPadding / 2, 0, 0, 2 * Math.PI);\n                        ctx.stroke();\n                        ctx.fill();\n                    } else {\n                        ctx.fillRect(dxLogoPadding, dyLogoPadding, dWidthLogoPadding, dHeightLogoPadding);\n                    }\n                }\n                ctx.globalAlpha = logoOpacity;\n                ctx.drawImage(image_1, dxLogo + offset, dyLogo + offset, dWidthLogo, dHeightLogo);\n                ctx.restore();\n                if (logoOnLoad) {\n                    logoOnLoad();\n                }\n            };\n            image_1.src = logoImage;\n        }\n    };\n    QRCode.prototype.render = function() {\n        var _a;\n        var qrSize = +this.props.size + 2 * +this.props.quietZone;\n        return React.createElement(\"canvas\", {\n            id: (_a = this.props.id) !== null && _a !== void 0 ? _a : \"react-qrcode-logo\",\n            height: qrSize,\n            width: qrSize,\n            style: {\n                height: qrSize + \"px\",\n                width: qrSize + \"px\"\n            },\n            ref: this.canvas\n        });\n    };\n    QRCode.defaultProps = {\n        value: \"https://reactjs.org/\",\n        ecLevel: \"M\",\n        enableCORS: false,\n        size: 150,\n        quietZone: 10,\n        bgColor: \"#FFFFFF\",\n        fgColor: \"#000000\",\n        logoOpacity: 1,\n        qrStyle: \"squares\",\n        eyeRadius: [\n            0,\n            0,\n            0\n        ],\n        logoPaddingStyle: \"square\"\n    };\n    return QRCode;\n}(React.Component);\nexports.QRCode = QRCode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-qrcode-logo/dist/index.js\n");

/***/ })

};
;