"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/alchemy-sdk";
exports.ids = ["vendor-chunks/alchemy-sdk"];
exports.modules = {

/***/ "(ssr)/./node_modules/alchemy-sdk/dist/cjs/alchemy-provider-e539e7d0.js":
/*!************************************************************************!*\
  !*** ./node_modules/alchemy-sdk/dist/cjs/alchemy-provider-e539e7d0.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar index = __webpack_require__(/*! ./index-b1f4a2d9.js */ \"(ssr)/./node_modules/alchemy-sdk/dist/cjs/index-b1f4a2d9.js\");\nvar networks = __webpack_require__(/*! @ethersproject/networks */ \"(ssr)/./node_modules/@ethersproject/networks/lib.esm/index.js\");\nvar providers = __webpack_require__(/*! @ethersproject/providers */ \"(ssr)/./node_modules/@ethersproject/providers/lib.esm/index.js\");\nvar web = __webpack_require__(/*! @ethersproject/web */ \"(ssr)/./node_modules/@ethersproject/web/lib.esm/index.js\");\n__webpack_require__(/*! ./api/utils */ \"(ssr)/./node_modules/alchemy-sdk/dist/cjs/api/utils.js\");\n__webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib.esm/index.js\");\n__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n__webpack_require__(/*! @ethersproject/abstract-provider */ \"(ssr)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\");\n__webpack_require__(/*! @ethersproject/wallet */ \"(ssr)/./node_modules/@ethersproject/wallet/lib.esm/index.js\");\n__webpack_require__(/*! @ethersproject/contracts */ \"(ssr)/./node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/** Maximum size of a batch on the rpc provider. */ const DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n/** Timeout interval before the pending batch is sent. */ const DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n/**\r\n * Internal class to enqueue requests and automatically send/process batches.\r\n *\r\n * The underlying batching mechanism is loosely based on ethers.js's\r\n * `JsonRpcBatchProvider`.\r\n *\r\n * @internal\r\n */ class RequestBatcher {\n    constructor(sendBatchFn, maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE){\n        this.sendBatchFn = sendBatchFn;\n        this.maxBatchSize = maxBatchSize;\n        /**\r\n         * Array of enqueued requests along with the constructed promise handlers for\r\n         * each request.\r\n         */ this.pendingBatch = [];\n    }\n    /**\r\n     * Enqueues the provided request. The batch is immediately sent if the maximum\r\n     * batch size is reached. Otherwise, the request is enqueued onto a batch that\r\n     * is sent after 10ms.\r\n     *\r\n     * Returns a promise that resolves with the result of the request.\r\n     */ enqueueRequest(request) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            const inflightRequest = {\n                request,\n                resolve: undefined,\n                reject: undefined\n            };\n            const promise = new Promise((resolve, reject)=>{\n                inflightRequest.resolve = resolve;\n                inflightRequest.reject = reject;\n            });\n            this.pendingBatch.push(inflightRequest);\n            if (this.pendingBatch.length === this.maxBatchSize) {\n                // Send batch immediately if we are at the maximum batch size.\n                void this.sendBatchRequest();\n            } else if (!this.pendingBatchTimer) {\n                // Schedule batch for next event loop + short duration\n                this.pendingBatchTimer = setTimeout(()=>this.sendBatchRequest(), DEFAULT_REQUEST_BATCH_DELAY_MS);\n            }\n            return promise;\n        });\n    }\n    /**\r\n     * Sends the currently queued batches and resets the batch and timer. Processes\r\n     * the batched response results back to the original promises.\r\n     */ sendBatchRequest() {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            // Get the current batch and clear it, so new requests\n            // go into the next batch\n            const batch = this.pendingBatch;\n            this.pendingBatch = [];\n            if (this.pendingBatchTimer) {\n                clearTimeout(this.pendingBatchTimer);\n                this.pendingBatchTimer = undefined;\n            }\n            // Get the request as an array of requests\n            const request = batch.map((inflight)=>inflight.request);\n            return this.sendBatchFn(request).then((result)=>{\n                // For each result, feed it to the correct Promise, depending\n                // on whether it was a success or error\n                batch.forEach((inflightRequest, index)=>{\n                    const payload = result[index];\n                    if (payload.error) {\n                        const error = new Error(payload.error.message);\n                        error.code = payload.error.code;\n                        error.data = payload.error.data;\n                        inflightRequest.reject(error);\n                    } else {\n                        inflightRequest.resolve(payload.result);\n                    }\n                });\n            }, (error)=>{\n                batch.forEach((inflightRequest)=>{\n                    inflightRequest.reject(error);\n                });\n            });\n        });\n    }\n}\n/**\r\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an instance of\r\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\r\n *\r\n * @public\r\n */ class AlchemyProvider extends providers.JsonRpcProvider {\n    /** @internal */ constructor(config){\n        // Normalize the API Key to a string.\n        const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n        // Generate our own connection info with the correct endpoint URLs.\n        const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n        const connection = AlchemyProvider.getAlchemyConnectionInfo(alchemyNetwork, apiKey, \"http\");\n        // If a hardcoded url was specified in the config, use that instead of the\n        // provided apiKey or network.\n        if (config.url !== undefined) {\n            connection.url = config.url;\n        }\n        connection.throttleLimit = config.maxRetries;\n        // Normalize the Alchemy named network input to the network names used by\n        // ethers. This allows the parent super constructor in JsonRpcProvider to\n        // correctly set the network.\n        const ethersNetwork = index.EthersNetwork[alchemyNetwork];\n        super(connection, ethersNetwork);\n        this.apiKey = config.apiKey;\n        this.maxRetries = config.maxRetries;\n        this.batchRequests = config.batchRequests;\n        // TODO: support individual headers when calling batch\n        const batcherConnection = Object.assign(Object.assign({}, this.connection), {\n            headers: Object.assign(Object.assign({}, this.connection.headers), {\n                \"Alchemy-Ethers-Sdk-Method\": \"batchSend\"\n            })\n        });\n        const sendBatchFn = (requests)=>{\n            return web.fetchJson(batcherConnection, JSON.stringify(requests));\n        };\n        this.batcher = new RequestBatcher(sendBatchFn);\n        this.modifyFormatter();\n    }\n    /**\r\n     * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\r\n     * ethers.js. Returns the API key for an Alchemy provider.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */ static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return index.DEFAULT_ALCHEMY_API_KEY;\n        }\n        if (apiKey && typeof apiKey !== \"string\") {\n            throw new Error(`Invalid apiKey '${apiKey}' provided. apiKey must be a string.`);\n        }\n        return apiKey;\n    }\n    /**\r\n     * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\r\n     *\r\n     * This override allows the SDK to set the provider's network to values not\r\n     * yet supported by ethers.js.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */ static getNetwork(network) {\n        if (typeof network === \"string\" && network in index.CustomNetworks) {\n            return index.CustomNetworks[network];\n        }\n        // Call the standard ethers.js getNetwork method for other networks.\n        return networks.getNetwork(network);\n    }\n    /**\r\n     * Converts the `Networkish` input to the network enum used by Alchemy.\r\n     *\r\n     * @internal\r\n     */ static getAlchemyNetwork(network) {\n        if (network === undefined) {\n            return index.DEFAULT_NETWORK;\n        }\n        if (typeof network === \"number\") {\n            throw new Error(`Invalid network '${network}' provided. Network must be a string.`);\n        }\n        // Guaranteed that `typeof network === 'string`.\n        const isValidNetwork = Object.values(index.Network).includes(network);\n        if (!isValidNetwork) {\n            throw new Error(`Invalid network '${network}' provided. Network must be one of: ` + `${Object.values(index.Network).join(\", \")}.`);\n        }\n        return network;\n    }\n    /**\r\n     * Returns a {@link ConnectionInfo} object compatible with ethers that contains\r\n     * the correct URLs for Alchemy.\r\n     *\r\n     * @internal\r\n     */ static getAlchemyConnectionInfo(network, apiKey, type) {\n        const url = type === \"http\" ? index.getAlchemyHttpUrl(network, apiKey) : index.getAlchemyWsUrl(network, apiKey);\n        return {\n            headers: index.IS_BROWSER ? {\n                \"Alchemy-Ethers-Sdk-Version\": index.VERSION\n            } : {\n                \"Alchemy-Ethers-Sdk-Version\": index.VERSION,\n                \"Accept-Encoding\": \"gzip\"\n            },\n            allowGzip: true,\n            url\n        };\n    }\n    /**\r\n     * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\r\n     * method is called when calling methods on the parent class `BaseProvider`.\r\n     *\r\n     * @override\r\n     */ detectNetwork() {\n        const _super = Object.create(null, {\n            detectNetwork: {\n                get: ()=>super.detectNetwork\n            }\n        });\n        return index.__awaiter(this, void 0, void 0, function*() {\n            let network = this.network;\n            if (network == null) {\n                network = yield _super.detectNetwork.call(this);\n                if (!network) {\n                    throw new Error(\"No network detected\");\n                }\n            }\n            return network;\n        });\n    }\n    _startPending() {\n        index.logWarn(\"WARNING: Alchemy Provider does not support pending filters\");\n    }\n    /**\r\n     * Overrides the ether's `isCommunityResource()` method. Returns true if the\r\n     * current api key is the default key.\r\n     *\r\n     * @override\r\n     */ isCommunityResource() {\n        return this.apiKey === index.DEFAULT_ALCHEMY_API_KEY;\n    }\n    /**\r\n     * Overrides the base {@link JsonRpcProvider.send} method to implement custom\r\n     * logic for sending requests to Alchemy.\r\n     *\r\n     * @param method The method name to use for the request.\r\n     * @param params The parameters to use for the request.\r\n     * @override\r\n     * @public\r\n     */ // TODO: Add headers for `perform()` override.\n    send(method, params) {\n        return this._send(method, params, \"send\");\n    }\n    /**\r\n     * DO NOT MODIFY.\r\n     *\r\n     * Original code copied over from ether.js's `JsonRpcProvider.send()`.\r\n     *\r\n     * This method is copied over directly in order to implement custom headers\r\n     *\r\n     * @internal\r\n     */ _send(method, params, methodName, forceBatch = false) {\n        const request = {\n            method,\n            params,\n            id: this._nextId++,\n            jsonrpc: \"2.0\"\n        };\n        // START MODIFIED CODE\n        const connection = Object.assign({}, this.connection);\n        connection.headers[\"Alchemy-Ethers-Sdk-Method\"] = methodName;\n        if (this.batchRequests || forceBatch) {\n            return this.batcher.enqueueRequest(request);\n        }\n        // END MODIFIED CODE\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: index.deepCopy(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = [\n            \"eth_chainId\",\n            \"eth_blockNumber\"\n        ].indexOf(method) >= 0;\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n        const result = web.fetchJson(this.connection, JSON.stringify(request), getResult).then((result)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                error,\n                request,\n                provider: this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(()=>{\n                // @ts-ignore - This is done by ethers.\n                this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    }\n    /**\r\n     * Overrides the base `Formatter` class inherited from ethers to support\r\n     * returning custom fields in Ethers response types.\r\n     *\r\n     * For context, ethers has a `Formatter` class that is used to format the\r\n     * response from a JSON-RPC request. Any fields that are not defined in the\r\n     * `Formatter` class are removed from the returned response. By modifying the\r\n     * `Formatter` class in this method, we can add support for fields that are\r\n     * not defined in ethers.\r\n     */ modifyFormatter() {\n        this.formatter.formats[\"receiptLog\"][\"removed\"] = (val)=>{\n            if (typeof val === \"boolean\") {\n                return val;\n            }\n            return undefined;\n        };\n    }\n}\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * Original code copied over from ether.js's\r\n * `@ethersproject/web/src.ts/index.ts`. Used to support\r\n * {@link AlchemyProvider._send}, which is also copied over.\r\n */ function getResult(payload) {\n    if (payload.error) {\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nexports.AlchemyProvider = AlchemyProvider; //# sourceMappingURL=alchemy-provider-e539e7d0.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/alchemy-sdk/dist/cjs/alchemy-provider-e539e7d0.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/alchemy-sdk/dist/cjs/alchemy-websocket-provider-d921db84.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/alchemy-sdk/dist/cjs/alchemy-websocket-provider-d921db84.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar index = __webpack_require__(/*! ./index-b1f4a2d9.js */ \"(ssr)/./node_modules/alchemy-sdk/dist/cjs/index-b1f4a2d9.js\");\nvar SturdyWebSocket = __webpack_require__(/*! sturdy-websocket */ \"(ssr)/./node_modules/sturdy-websocket/dist/index.js\");\nvar bignumber = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib.esm/index.js\");\nvar networks = __webpack_require__(/*! @ethersproject/networks */ \"(ssr)/./node_modules/@ethersproject/networks/lib.esm/index.js\");\nvar providers = __webpack_require__(/*! @ethersproject/providers */ \"(ssr)/./node_modules/@ethersproject/providers/lib.esm/index.js\");\nvar alchemyProvider = __webpack_require__(/*! ./alchemy-provider-e539e7d0.js */ \"(ssr)/./node_modules/alchemy-sdk/dist/cjs/alchemy-provider-e539e7d0.js\");\n__webpack_require__(/*! ./api/utils */ \"(ssr)/./node_modules/alchemy-sdk/dist/cjs/api/utils.js\");\n__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n__webpack_require__(/*! @ethersproject/abstract-provider */ \"(ssr)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\");\n__webpack_require__(/*! @ethersproject/wallet */ \"(ssr)/./node_modules/@ethersproject/wallet/lib.esm/index.js\");\n__webpack_require__(/*! @ethersproject/contracts */ \"(ssr)/./node_modules/@ethersproject/contracts/lib.esm/index.js\");\n__webpack_require__(/*! @ethersproject/web */ \"(ssr)/./node_modules/@ethersproject/web/lib.esm/index.js\");\nfunction _interopDefaultLegacy(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        \"default\": e\n    };\n}\nvar SturdyWebSocket__default = /*#__PURE__*/ _interopDefaultLegacy(SturdyWebSocket);\n/**\r\n * The maximum number of blocks to backfill. If more than this many blocks have\r\n * been missed, then we'll sadly miss data, but we want to make sure we don't\r\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\r\n */ const MAX_BACKFILL_BLOCKS = 120;\n/**\r\n * The WebsocketBackfiller fetches events that were sent since a provided block\r\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\r\n * events that were transmitted while the websocket connection was down.\r\n *\r\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\r\n *\r\n * @internal\r\n */ class WebsocketBackfiller {\n    constructor(provider){\n        this.provider = provider;\n        // TODO: Use HTTP provider to do backfill.\n        this.maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n    }\n    /**\r\n     * Runs backfill for `newHeads` events.\r\n     *\r\n     * @param isCancelled Whether the backfill request is cancelled.\r\n     * @param previousHeads Previous head requests that were sent.\r\n     * @param fromBlockNumber The block number to start backfilling from.\r\n     * @returns A list of `newHeads` events that were sent since the last backfill.\r\n     */ getNewHeadsBackfill(isCancelled, previousHeads, fromBlockNumber) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            throwIfCancelled(isCancelled);\n            const toBlockNumber = yield this.getBlockNumber();\n            throwIfCancelled(isCancelled);\n            // If there are no previous heads to fetch, return new heads since\n            // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n            if (previousHeads.length === 0) {\n                return this.getHeadEventsInRange(Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1, toBlockNumber + 1);\n            }\n            // If the last emitted event is too far back in the past, there's no need\n            // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n            // new heads.\n            const lastSeenBlockNumber = index.fromHex(previousHeads[previousHeads.length - 1].number);\n            const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n            if (lastSeenBlockNumber <= minBlockNumber) {\n                return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n            }\n            // To capture all `newHeads` events, return all head events from the last\n            // seen block number to current + any of the previous heads that were re-orged.\n            const reorgHeads = yield this.getReorgHeads(isCancelled, previousHeads);\n            throwIfCancelled(isCancelled);\n            const intermediateHeads = yield this.getHeadEventsInRange(lastSeenBlockNumber + 1, toBlockNumber + 1);\n            throwIfCancelled(isCancelled);\n            return [\n                ...reorgHeads,\n                ...intermediateHeads\n            ];\n        });\n    }\n    /**\r\n     * Runs backfill for `logs` events.\r\n     *\r\n     * @param isCancelled Whether the backfill request is cancelled.\r\n     * @param filter The filter object that accompanies a logs subscription.\r\n     * @param previousLogs Previous log requests that were sent.\r\n     * @param fromBlockNumber The block number to start backfilling from.\r\n     */ getLogsBackfill(isCancelled, filter, previousLogs, fromBlockNumber) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            throwIfCancelled(isCancelled);\n            const toBlockNumber = yield this.getBlockNumber();\n            throwIfCancelled(isCancelled);\n            // If there are no previous logs to fetch, return new logs since\n            // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n            if (previousLogs.length === 0) {\n                return this.getLogsInRange(filter, Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1, toBlockNumber + 1);\n            }\n            // If the last emitted log is too far back in the past, there's no need\n            // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n            // worth of logs.\n            const lastSeenBlockNumber = index.fromHex(previousLogs[previousLogs.length - 1].blockNumber);\n            const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n            if (lastSeenBlockNumber < minBlockNumber) {\n                return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n            }\n            // Return all log events that have happened along with log events that have\n            // been removed due to a chain reorg.\n            const commonAncestor = yield this.getCommonAncestor(isCancelled, previousLogs);\n            throwIfCancelled(isCancelled);\n            // All previous logs with a block number greater than the common ancestor\n            // were part of a re-org, so mark them as such.\n            const removedLogs = previousLogs.filter((log)=>index.fromHex(log.blockNumber) > commonAncestor.blockNumber).map((log)=>Object.assign(Object.assign({}, log), {\n                    removed: true\n                }));\n            // If no common ancestor was found, start backfill from the oldest log's\n            // block number.\n            const fromBlockInclusive = commonAncestor.blockNumber === Number.NEGATIVE_INFINITY ? index.fromHex(previousLogs[0].blockNumber) : commonAncestor.blockNumber;\n            let addedLogs = yield this.getLogsInRange(filter, fromBlockInclusive, toBlockNumber + 1);\n            // De-dupe any logs that were already emitted.\n            addedLogs = addedLogs.filter((log)=>log && (index.fromHex(log.blockNumber) > commonAncestor.blockNumber || index.fromHex(log.logIndex) > commonAncestor.logIndex));\n            throwIfCancelled(isCancelled);\n            return [\n                ...removedLogs,\n                ...addedLogs\n            ];\n        });\n    }\n    /**\r\n     * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\r\n     *\r\n     * @internal\r\n     */ setMaxBackfillBlock(newMax) {\n        this.maxBackfillBlocks = newMax;\n    }\n    /**\r\n     * Gets the current block number as a number.\r\n     *\r\n     * @private\r\n     */ getBlockNumber() {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            const blockNumberHex = yield this.provider.send(\"eth_blockNumber\");\n            return index.fromHex(blockNumberHex);\n        });\n    }\n    /**\r\n     * Gets all `newHead` events in the provided range. Note that the returned\r\n     * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\r\n     * that were part of a re-org.\r\n     *\r\n     * @private\r\n     */ getHeadEventsInRange(fromBlockInclusive, toBlockExclusive) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            if (fromBlockInclusive >= toBlockExclusive) {\n                return [];\n            }\n            const batchParts = [];\n            for(let i = fromBlockInclusive; i < toBlockExclusive; i++){\n                batchParts.push({\n                    method: \"eth_getBlockByNumber\",\n                    params: [\n                        index.toHex(i),\n                        false\n                    ]\n                });\n            }\n            // TODO: handle errors\n            const blockHeads = yield this.provider.sendBatch(batchParts);\n            return blockHeads.map(toNewHeadsEvent);\n        });\n    }\n    /**\r\n     * Returns all heads that were part of a reorg event.\r\n     *\r\n     * @private\r\n     */ getReorgHeads(isCancelled, previousHeads) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            const result = [];\n            // Iterate from the most recent head backwards in order to find the first\n            // block that was part of a re-org.\n            for(let i = previousHeads.length - 1; i >= 0; i--){\n                const oldEvent = previousHeads[i];\n                const blockHead = yield this.getBlockByNumber(index.fromHex(oldEvent.number));\n                throwIfCancelled(isCancelled);\n                // If the hashes match, then current head in the iteration was not re-orged.\n                if (oldEvent.hash === blockHead.hash) {\n                    break;\n                }\n                result.push(toNewHeadsEvent(blockHead));\n            }\n            return result.reverse();\n        });\n    }\n    /**\r\n     * Simple wrapper around `eth_getBlockByNumber` that returns the complete\r\n     * block information for the provided block number.\r\n     *\r\n     * @private\r\n     */ getBlockByNumber(blockNumber) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            return this.provider.send(\"eth_getBlockByNumber\", [\n                index.toHex(blockNumber),\n                false\n            ]);\n        });\n    }\n    /**\r\n     * Given a list of previous log events, finds the common block number from the\r\n     * logs that matches the block head.\r\n     *\r\n     * This can be used to identify which logs are part of a re-org.\r\n     *\r\n     * Returns 1 less than the oldest log's block number if no common ancestor was found.\r\n     *\r\n     * @private\r\n     */ getCommonAncestor(isCancelled, previousLogs) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            // Iterate from the most recent head backwards in order to find the first\n            // block that was part of a re-org.\n            let blockHead = yield this.getBlockByNumber(index.fromHex(previousLogs[previousLogs.length - 1].blockNumber));\n            throwIfCancelled(isCancelled);\n            for(let i = previousLogs.length - 1; i >= 0; i--){\n                const oldLog = previousLogs[i];\n                // Ensure that updated blocks are fetched every time the log's block number\n                // changes.\n                if (oldLog.blockNumber !== blockHead.number) {\n                    blockHead = yield this.getBlockByNumber(index.fromHex(oldLog.blockNumber));\n                }\n                // Since logs are ordered in ascending order, the first log that matches\n                // the hash should be the largest logIndex.\n                if (oldLog.blockHash === blockHead.hash) {\n                    return {\n                        blockNumber: index.fromHex(oldLog.blockNumber),\n                        logIndex: index.fromHex(oldLog.logIndex)\n                    };\n                }\n            }\n            return {\n                blockNumber: Number.NEGATIVE_INFINITY,\n                logIndex: Number.NEGATIVE_INFINITY\n            };\n        });\n    }\n    /**\r\n     * Gets all `logs` events in the provided range. Note that the returned logs\r\n     * do not include removed logs.\r\n     *\r\n     * @private\r\n     */ getLogsInRange(filter, fromBlockInclusive, toBlockExclusive) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            if (fromBlockInclusive >= toBlockExclusive) {\n                return [];\n            }\n            const rangeFilter = Object.assign(Object.assign({}, filter), {\n                fromBlock: index.toHex(fromBlockInclusive),\n                toBlock: index.toHex(toBlockExclusive - 1)\n            });\n            return this.provider.send(\"eth_getLogs\", [\n                rangeFilter\n            ]);\n        });\n    }\n}\nfunction toNewHeadsEvent(head) {\n    const result = Object.assign({}, head);\n    delete result.totalDifficulty;\n    delete result.transactions;\n    delete result.uncles;\n    return result;\n}\nfunction dedupeNewHeads(events) {\n    return dedupe(events, (event)=>event.hash);\n}\nfunction dedupeLogs(events) {\n    return dedupe(events, (event)=>`${event.blockHash}/${event.logIndex}`);\n}\nfunction dedupe(items, getKey) {\n    const keysSeen = new Set();\n    const result = [];\n    items.forEach((item)=>{\n        const key = getKey(item);\n        if (!keysSeen.has(key)) {\n            keysSeen.add(key);\n            result.push(item);\n        }\n    });\n    return result;\n}\nconst CANCELLED = new Error(\"Cancelled\");\nfunction throwIfCancelled(isCancelled) {\n    if (isCancelled()) {\n        throw CANCELLED;\n    }\n}\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\r\n * Subscriptions have a memory of recent events they have sent so that in the\r\n * event that they disconnect and need to backfill, they can detect re-orgs.\r\n * Keep a buffer that goes back at least these many blocks, the maximum amount\r\n * at which we might conceivably see a re-org.\r\n *\r\n * Note that while our buffer goes back this many blocks, it may contain more\r\n * than this many elements, since in the case of logs subscriptions more than\r\n * one event may be emitted for a block.\r\n */ const RETAINED_EVENT_BLOCK_COUNT = 10;\n/**\r\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an instance of\r\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\r\n *\r\n * @public\r\n */ class AlchemyWebSocketProvider extends providers.WebSocketProvider {\n    /** @internal */ constructor(config, wsConstructor){\n        var _a;\n        // Normalize the API Key to a string.\n        const apiKey = alchemyProvider.AlchemyProvider.getApiKey(config.apiKey);\n        // Generate our own connection info with the correct endpoint URLs.\n        const alchemyNetwork = alchemyProvider.AlchemyProvider.getAlchemyNetwork(config.network);\n        const connection = alchemyProvider.AlchemyProvider.getAlchemyConnectionInfo(alchemyNetwork, apiKey, \"wss\");\n        const protocol = `alchemy-sdk-${index.VERSION}`;\n        // Use the provided config URL override if it exists, otherwise use the created one.\n        const ws = new SturdyWebSocket__default[\"default\"]((_a = config.url) !== null && _a !== void 0 ? _a : connection.url, protocol, {\n            wsConstructor: wsConstructor !== null && wsConstructor !== void 0 ? wsConstructor : getWebsocketConstructor()\n        });\n        // Normalize the Alchemy named network input to the network names used by\n        // ethers. This allows the parent super constructor in JsonRpcProvider to\n        // correctly set the network.\n        const ethersNetwork = index.EthersNetwork[alchemyNetwork];\n        super(ws, ethersNetwork);\n        this._events = [];\n        // In the case of a WebSocket reconnection, all subscriptions are lost and we\n        // create new ones to replace them, but we want to create the illusion that\n        // the original subscriptions persist. Thus, maintain a mapping from the\n        // \"virtual\" subscription ids which are visible to the consumer to the\n        // \"physical\" subscription ids of the actual connections. This terminology is\n        // borrowed from virtual and physical memory, which has a similar mapping.\n        /** @internal */ this.virtualSubscriptionsById = new Map();\n        /** @internal */ this.virtualIdsByPhysicalId = new Map();\n        /**\r\n         * The underlying ethers {@link WebSocketProvider} already handles and emits\r\n         * messages. To allow backfilling, track all messages that are emitted.\r\n         *\r\n         * This is a field arrow function in order to preserve `this` context when\r\n         * passing the method as an event listener.\r\n         *\r\n         * @internal\r\n         */ this.handleMessage = (event)=>{\n            const message = JSON.parse(event.data);\n            if (!isSubscriptionEvent(message)) {\n                return;\n            }\n            const physicalId = message.params.subscription;\n            const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n            if (!virtualId) {\n                return;\n            }\n            const subscription = this.virtualSubscriptionsById.get(virtualId);\n            if (subscription.method !== \"eth_subscribe\") {\n                return;\n            }\n            switch(subscription.params[0]){\n                case \"newHeads\":\n                    {\n                        const newHeadsSubscription = subscription;\n                        const newHeadsMessage = message;\n                        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n                        const { result } = newHeadsMessage.params;\n                        if (isBackfilling) {\n                            addToNewHeadsEventsBuffer(backfillBuffer, result);\n                        } else if (physicalId !== virtualId) {\n                            // In the case of a re-opened subscription, ethers will not emit the\n                            // event, so the SDK has to.\n                            this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n                        } else {\n                            // Ethers subscription mapping will emit the event, just store it.\n                            this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n                        }\n                        break;\n                    }\n                case \"logs\":\n                    {\n                        const logsSubscription = subscription;\n                        const logsMessage = message;\n                        const { isBackfilling, backfillBuffer } = logsSubscription;\n                        const { result } = logsMessage.params;\n                        if (isBackfilling) {\n                            addToLogsEventsBuffer(backfillBuffer, result);\n                        } else if (virtualId !== physicalId) {\n                            this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n                        } else {\n                            this.rememberEvent(virtualId, result, getLogsBlockNumber);\n                        }\n                        break;\n                    }\n                default:\n                    if (physicalId !== virtualId) {\n                        // In the case of a re-opened subscription, ethers will not emit the\n                        // event, so the SDK has to.\n                        const { result } = message.params;\n                        this.emitEvent(virtualId, result);\n                    }\n            }\n        };\n        /**\r\n         * When the websocket connection reopens:\r\n         *\r\n         * 1. Resubscribe to all existing subscriptions and start backfilling\r\n         * 2. Restart heart beat.\r\n         *\r\n         * This is a field arrow function in order to preserve `this` context when\r\n         * passing the method as an event listener.\r\n         *\r\n         * @internal\r\n         */ this.handleReopen = ()=>{\n            this.virtualIdsByPhysicalId.clear();\n            const { cancel, isCancelled } = makeCancelToken();\n            this.cancelBackfill = cancel;\n            for (const subscription of this.virtualSubscriptionsById.values()){\n                void (()=>index.__awaiter(this, void 0, void 0, function*() {\n                        try {\n                            yield this.resubscribeAndBackfill(isCancelled, subscription);\n                        } catch (error) {\n                            if (!isCancelled()) {\n                                console.error(`Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`, error);\n                            }\n                        }\n                    }))();\n            }\n            this.startHeartbeat();\n        };\n        /**\r\n         * Cancels the heartbeat and any pending backfills being performed. This is\r\n         * called when the websocket connection goes down or is disconnected.\r\n         *\r\n         * This is a field arrow function in order to preserve `this` context when\r\n         * passing the method as an event listener.\r\n         *\r\n         * @internal\r\n         */ this.stopHeartbeatAndBackfill = ()=>{\n            if (this.heartbeatIntervalId != null) {\n                clearInterval(this.heartbeatIntervalId);\n                this.heartbeatIntervalId = undefined;\n            }\n            this.cancelBackfill();\n        };\n        this.apiKey = apiKey;\n        // Start heartbeat and backfiller for the websocket connection.\n        this.backfiller = new WebsocketBackfiller(this);\n        this.addSocketListeners();\n        this.startHeartbeat();\n        this.cancelBackfill = index.noop;\n    }\n    /**\r\n     * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\r\n     *\r\n     * This override allows the SDK to set the provider's network to values not\r\n     * yet supported by ethers.js.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */ static getNetwork(network) {\n        if (typeof network === \"string\" && network in index.CustomNetworks) {\n            return index.CustomNetworks[network];\n        }\n        // Call the standard ethers.js getNetwork method for other networks.\n        return networks.getNetwork(network);\n    }\n    /**\r\n     * Overridden implementation of ethers that includes Alchemy based subscriptions.\r\n     *\r\n     * @param eventName Event to subscribe to\r\n     * @param listener The listener function to call when the event is triggered.\r\n     * @override\r\n     * @public\r\n     */ // TODO: Override `Listener` type to get type autocompletions.\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    /**\r\n     * Overridden implementation of ethers that includes Alchemy based\r\n     * subscriptions. Adds a listener to the triggered for only the next\r\n     * {@link eventName} event, after which it will be removed.\r\n     *\r\n     * @param eventName Event to subscribe to\r\n     * @param listener The listener function to call when the event is triggered.\r\n     * @override\r\n     * @public\r\n     */ // TODO: Override `Listener` type to get type autocompletions.\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    /**\r\n     * Removes the provided {@link listener} for the {@link eventName} event. If no\r\n     * listener is provided, all listeners for the event will be removed.\r\n     *\r\n     * @param eventName Event to unlisten to.\r\n     * @param listener The listener function to remove.\r\n     * @override\r\n     * @public\r\n     */ off(eventName, listener) {\n        if (index.isAlchemyEvent(eventName)) {\n            return this._off(eventName, listener);\n        } else {\n            return super.off(eventName, listener);\n        }\n    }\n    /**\r\n     * Remove all listeners for the provided {@link eventName} event. If no event\r\n     * is provided, all events and their listeners are removed.\r\n     *\r\n     * @param eventName The event to remove all listeners for.\r\n     * @override\r\n     * @public\r\n     */ removeAllListeners(eventName) {\n        if (eventName !== undefined && index.isAlchemyEvent(eventName)) {\n            return this._removeAllListeners(eventName);\n        } else {\n            return super.removeAllListeners(eventName);\n        }\n    }\n    /**\r\n     * Returns the number of listeners for the provided {@link eventName} event. If\r\n     * no event is provided, the total number of listeners for all events is returned.\r\n     *\r\n     * @param eventName The event to get the number of listeners for.\r\n     * @public\r\n     * @override\r\n     */ listenerCount(eventName) {\n        if (eventName !== undefined && index.isAlchemyEvent(eventName)) {\n            return this._listenerCount(eventName);\n        } else {\n            return super.listenerCount(eventName);\n        }\n    }\n    /**\r\n     * Returns an array of listeners for the provided {@link eventName} event. If\r\n     * no event is provided, all listeners will be included.\r\n     *\r\n     * @param eventName The event to get the listeners for.\r\n     * @public\r\n     * @override\r\n     */ listeners(eventName) {\n        if (eventName !== undefined && index.isAlchemyEvent(eventName)) {\n            return this._listeners(eventName);\n        } else {\n            return super.listeners(eventName);\n        }\n    }\n    /**\r\n     * Overrides the method in `BaseProvider` in order to properly format the\r\n     * Alchemy subscription events.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */ _addEventListener(eventName, listener, once) {\n        if (index.isAlchemyEvent(eventName)) {\n            index.verifyAlchemyEventName(eventName);\n            const event = new index.EthersEvent(index.getAlchemyEventTag(eventName), listener, once);\n            this._events.push(event);\n            this._startEvent(event);\n            return this;\n        } else {\n            return super._addEventListener(eventName, listener, once);\n        }\n    }\n    /**\r\n     * Overrides the `_startEvent()` method in ethers.js's\r\n     * {@link WebSocketProvider} to include additional alchemy methods.\r\n     *\r\n     * @param event\r\n     * @override\r\n     * @internal\r\n     */ _startEvent(event) {\n        // Check if the event type is a custom Alchemy subscription.\n        const customLogicTypes = [\n            ...index.ALCHEMY_EVENT_TYPES,\n            \"block\",\n            \"filter\"\n        ];\n        if (customLogicTypes.includes(event.type)) {\n            this.customStartEvent(event);\n        } else {\n            super._startEvent(event);\n        }\n    }\n    /**\r\n     * Overridden from ethers.js's {@link WebSocketProvider}\r\n     *\r\n     * Modified in order to add mappings for backfilling.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */ _subscribe(tag, param, processFunc, event) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            let subIdPromise = this._subIds[tag];\n            // BEGIN MODIFIED CODE\n            const startingBlockNumber = yield this.getBlockNumber();\n            // END MODIFIED CODE\n            if (subIdPromise == null) {\n                subIdPromise = Promise.all(param).then((param)=>{\n                    return this.send(\"eth_subscribe\", param);\n                });\n                this._subIds[tag] = subIdPromise;\n            }\n            const subId = yield subIdPromise;\n            // BEGIN MODIFIED CODE\n            const resolvedParams = yield Promise.all(param);\n            this.virtualSubscriptionsById.set(subId, {\n                event: event,\n                method: \"eth_subscribe\",\n                params: resolvedParams,\n                startingBlockNumber,\n                virtualId: subId,\n                physicalId: subId,\n                sentEvents: [],\n                isBackfilling: false,\n                backfillBuffer: []\n            });\n            this.virtualIdsByPhysicalId.set(subId, subId);\n            // END MODIFIED CODE\n            this._subs[subId] = {\n                tag,\n                processFunc\n            };\n        });\n    }\n    /**\r\n     * DO NOT MODIFY.\r\n     *\r\n     * Original code copied over from ether.js's `BaseProvider`.\r\n     *\r\n     * This method is copied over directly in order to implement Alchemy's unique\r\n     * subscription types. The only difference is that this method calls\r\n     * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\r\n     * order to parse the Alchemy subscription event.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */ emit(eventName, ...args) {\n        if (index.isAlchemyEvent(eventName)) {\n            let result = false;\n            const stopped = [];\n            // This line is the only modified line from the original method.\n            const eventTag = index.getAlchemyEventTag(eventName);\n            this._events = this._events.filter((event)=>{\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                setTimeout(()=>{\n                    event.listener.apply(this, args);\n                }, 0);\n                result = true;\n                if (event.once) {\n                    stopped.push(event);\n                    return false;\n                }\n                return true;\n            });\n            stopped.forEach((event)=>{\n                this._stopEvent(event);\n            });\n            return result;\n        } else {\n            return super.emit(eventName, ...args);\n        }\n    }\n    /** @internal */ sendBatch(parts) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            let nextId = 0;\n            const payload = parts.map(({ method, params })=>{\n                return {\n                    method,\n                    params,\n                    jsonrpc: \"2.0\",\n                    id: `alchemy-sdk:${nextId++}`\n                };\n            });\n            return this.sendBatchConcurrently(payload);\n        });\n    }\n    /** @override */ destroy() {\n        this.removeSocketListeners();\n        this.stopHeartbeatAndBackfill();\n        return super.destroy();\n    }\n    /**\r\n     * Overrides the ether's `isCommunityResource()` method. Returns true if the\r\n     * current api key is the default key.\r\n     *\r\n     * @override\r\n     */ isCommunityResource() {\n        return this.apiKey === index.DEFAULT_ALCHEMY_API_KEY;\n    }\n    /**\r\n     * DO NOT MODIFY.\r\n     *\r\n     * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\r\n     *\r\n     * This method is copied over directly in order to support Alchemy's\r\n     * subscription type by allowing the provider to properly stop Alchemy's\r\n     * subscription events.\r\n     *\r\n     * @internal\r\n     */ _stopEvent(event) {\n        let tag = event.tag;\n        // START MODIFIED CODE\n        if (index.ALCHEMY_EVENT_TYPES.includes(event.type)) {\n            // There are remaining pending transaction listeners.\n            if (this._events.filter((e)=>index.ALCHEMY_EVENT_TYPES.includes(e.type)).length) {\n                return;\n            }\n        // END MODIFIED CODE\n        } else if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e)=>e.type === \"tx\").length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n        const subId = this._subIds[tag];\n        if (!subId) {\n            return;\n        }\n        delete this._subIds[tag];\n        void subId.then((subId)=>{\n            if (!this._subs[subId]) {\n                return;\n            }\n            delete this._subs[subId];\n            void this.send(\"eth_unsubscribe\", [\n                subId\n            ]);\n        });\n    }\n    /** @internal */ addSocketListeners() {\n        this._websocket.addEventListener(\"message\", this.handleMessage);\n        this._websocket.addEventListener(\"reopen\", this.handleReopen);\n        this._websocket.addEventListener(\"down\", this.stopHeartbeatAndBackfill);\n    }\n    /** @internal */ removeSocketListeners() {\n        this._websocket.removeEventListener(\"message\", this.handleMessage);\n        this._websocket.removeEventListener(\"reopen\", this.handleReopen);\n        this._websocket.removeEventListener(\"down\", this.stopHeartbeatAndBackfill);\n    }\n    /**\r\n     * Reopens the backfill based on\r\n     *\r\n     * @param isCancelled\r\n     * @param subscription\r\n     * @internal\r\n     */ resubscribeAndBackfill(isCancelled, subscription) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            const { virtualId, method, params, sentEvents, backfillBuffer, startingBlockNumber } = subscription;\n            subscription.isBackfilling = true;\n            backfillBuffer.length = 0;\n            try {\n                const physicalId = yield this.send(method, params);\n                throwIfCancelled(isCancelled);\n                subscription.physicalId = physicalId;\n                this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n                switch(params[0]){\n                    case \"newHeads\":\n                        {\n                            const backfillEvents = yield withBackoffRetries(()=>withTimeout(this.backfiller.getNewHeadsBackfill(isCancelled, sentEvents, startingBlockNumber), BACKFILL_TIMEOUT), BACKFILL_RETRIES, ()=>!isCancelled());\n                            throwIfCancelled(isCancelled);\n                            const events = dedupeNewHeads([\n                                ...backfillEvents,\n                                ...backfillBuffer\n                            ]);\n                            events.forEach((event)=>this.emitNewHeadsEvent(virtualId, event));\n                            break;\n                        }\n                    case \"logs\":\n                        {\n                            const filter = params[1] || {};\n                            const backfillEvents = yield withBackoffRetries(()=>withTimeout(this.backfiller.getLogsBackfill(isCancelled, filter, sentEvents, startingBlockNumber), BACKFILL_TIMEOUT), BACKFILL_RETRIES, ()=>!isCancelled());\n                            throwIfCancelled(isCancelled);\n                            const events = dedupeLogs([\n                                ...backfillEvents,\n                                ...backfillBuffer\n                            ]);\n                            events.forEach((event)=>this.emitLogsEvent(virtualId, event));\n                            break;\n                        }\n                    default:\n                        break;\n                }\n            } finally{\n                subscription.isBackfilling = false;\n                backfillBuffer.length = 0;\n            }\n        });\n    }\n    /** @internal */ emitNewHeadsEvent(virtualId, result) {\n        this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n    }\n    /** @internal */ emitLogsEvent(virtualId, result) {\n        this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n    }\n    /**\r\n     * Emits an event to consumers, but also remembers it in its subscriptions's\r\n     * `sentEvents` buffer so that we can detect re-orgs if the connection drops\r\n     * and needs to be reconnected.\r\n     *\r\n     * @internal\r\n     */ emitAndRememberEvent(virtualId, result, getBlockNumber) {\n        this.rememberEvent(virtualId, result, getBlockNumber);\n        this.emitEvent(virtualId, result);\n    }\n    emitEvent(virtualId, result) {\n        const subscription = this.virtualSubscriptionsById.get(virtualId);\n        if (!subscription) {\n            return;\n        }\n        this.emitGenericEvent(subscription, result);\n    }\n    /** @internal */ rememberEvent(virtualId, result, getBlockNumber) {\n        const subscription = this.virtualSubscriptionsById.get(virtualId);\n        if (!subscription) {\n            return;\n        }\n        // Web3 modifies these event objects once we pass them on (changing hex\n        // numbers to numbers). We want the original event, so make a defensive\n        // copy.\n        addToPastEventsBuffer(subscription.sentEvents, Object.assign({}, result), getBlockNumber);\n    }\n    /** @internal */ emitGenericEvent(subscription, result) {\n        const emitFunction = this.emitProcessFn(subscription.event);\n        emitFunction(result);\n    }\n    /**\r\n     * Starts a heartbeat that pings the websocket server periodically to ensure\r\n     * that the connection stays open.\r\n     *\r\n     * @internal\r\n     */ startHeartbeat() {\n        if (this.heartbeatIntervalId != null) {\n            return;\n        }\n        this.heartbeatIntervalId = setInterval(()=>index.__awaiter(this, void 0, void 0, function*() {\n                try {\n                    yield withTimeout(this.send(\"net_version\"), HEARTBEAT_WAIT_TIME);\n                } catch (_a) {\n                    this._websocket.reconnect();\n                }\n            }), HEARTBEAT_INTERVAL);\n    }\n    /**\r\n     * This method sends the batch concurrently as individual requests rather than\r\n     * as a batch, which was the original implementation. The original batch logic\r\n     * is preserved in this implementation in order for faster porting.\r\n     *\r\n     * @param payload\r\n     * @internal\r\n     */ // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n    // TODO(errors): Use allSettled() once we have more error handling.\n    sendBatchConcurrently(payload) {\n        return index.__awaiter(this, void 0, void 0, function*() {\n            return Promise.all(payload.map((req)=>this.send(req.method, req.params)));\n        });\n    }\n    /** @internal */ customStartEvent(event) {\n        if (event.type === index.ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n            const { fromAddress, toAddress, hashesOnly } = event;\n            void this._subscribe(event.tag, [\n                index.AlchemySubscription.PENDING_TRANSACTIONS,\n                {\n                    fromAddress,\n                    toAddress,\n                    hashesOnly\n                }\n            ], this.emitProcessFn(event), event);\n        } else if (event.type === index.ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n            const { addresses, includeRemoved, hashesOnly } = event;\n            void this._subscribe(event.tag, [\n                index.AlchemySubscription.MINED_TRANSACTIONS,\n                {\n                    addresses,\n                    includeRemoved,\n                    hashesOnly\n                }\n            ], this.emitProcessFn(event), event);\n        } else if (event.type === \"block\") {\n            void this._subscribe(\"block\", [\n                \"newHeads\"\n            ], this.emitProcessFn(event), event);\n        } else if (event.type === \"filter\") {\n            void this._subscribe(event.tag, [\n                \"logs\",\n                this._getFilter(event.filter)\n            ], this.emitProcessFn(event), event);\n        }\n    }\n    /** @internal */ emitProcessFn(event) {\n        switch(event.type){\n            case index.ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n                return (result)=>this.emit({\n                        method: index.AlchemySubscription.PENDING_TRANSACTIONS,\n                        fromAddress: event.fromAddress,\n                        toAddress: event.toAddress,\n                        hashesOnly: event.hashesOnly\n                    }, result);\n            case index.ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE:\n                return (result)=>this.emit({\n                        method: index.AlchemySubscription.MINED_TRANSACTIONS,\n                        addresses: event.addresses,\n                        includeRemoved: event.includeRemoved,\n                        hashesOnly: event.hashesOnly\n                    }, result);\n            case \"block\":\n                return (result)=>{\n                    const blockNumber = bignumber.BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                };\n            case \"filter\":\n                return (result)=>{\n                    if (result.removed == null) {\n                        result.removed = false;\n                    }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                };\n            default:\n                throw new Error(\"Invalid event type to `emitProcessFn()`\");\n        }\n    }\n    /**\r\n     * DO NOT MODIFY.\r\n     *\r\n     * Original code copied over from ether.js's `BaseProvider.off()`.\r\n     *\r\n     * This method is copied over directly in order to implement Alchemy's unique\r\n     * subscription types. The only difference is that this method calls\r\n     * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\r\n     * order to parse the Alchemy subscription event.\r\n     *\r\n     * @private\r\n     */ _off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        const eventTag = index.getAlchemyEventTag(eventName);\n        this._events = this._events.filter((event)=>{\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event)=>{\n            this._stopEvent(event);\n        });\n        return this;\n    }\n    /**\r\n     * DO NOT MODIFY.\r\n     *\r\n     * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\r\n     *\r\n     * This method is copied over directly in order to implement Alchemy's unique\r\n     * subscription types. The only difference is that this method calls\r\n     * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\r\n     * order to parse the Alchemy subscription event.\r\n     *\r\n     * @private\r\n     */ _removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        } else {\n            const eventTag = index.getAlchemyEventTag(eventName);\n            this._events = this._events.filter((event)=>{\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event)=>{\n            this._stopEvent(event);\n        });\n        return this;\n    }\n    /**\r\n     * DO NOT MODIFY.\r\n     *\r\n     * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\r\n     *\r\n     * This method is copied over directly in order to implement Alchemy's unique\r\n     * subscription types. The only difference is that this method calls\r\n     * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\r\n     * order to parse the Alchemy subscription event.\r\n     *\r\n     * @private\r\n     */ _listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        const eventTag = index.getAlchemyEventTag(eventName);\n        return this._events.filter((event)=>{\n            return event.tag === eventTag;\n        }).length;\n    }\n    /**\r\n     * DO NOT MODIFY.\r\n     *\r\n     * Original code copied over from ether.js's `BaseProvider.listeners()`.\r\n     *\r\n     * This method is copied over directly in order to implement Alchemy's unique\r\n     * subscription types. The only difference is that this method calls\r\n     * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\r\n     * order to parse the Alchemy subscription event.\r\n     *\r\n     * @private\r\n     */ _listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event)=>event.listener);\n        }\n        const eventTag = index.getAlchemyEventTag(eventName);\n        return this._events.filter((event)=>event.tag === eventTag).map((event)=>event.listener);\n    }\n}\nfunction getWebsocketConstructor() {\n    return isNodeEnvironment() ? (__webpack_require__(/*! websocket */ \"(ssr)/./node_modules/websocket/index.js\").w3cwebsocket) : WebSocket;\n}\nfunction isNodeEnvironment() {\n    return typeof process !== \"undefined\" && process != null && process.versions != null && process.versions.node != null;\n}\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken() {\n    let cancelled = false;\n    return {\n        cancel: ()=>cancelled = true,\n        isCancelled: ()=>cancelled\n    };\n}\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\nfunction withBackoffRetries(f, retryCount, shouldRetry = ()=>true) {\n    return index.__awaiter(this, void 0, void 0, function*() {\n        let nextWaitTime = 0;\n        let i = 0;\n        while(true){\n            try {\n                return yield f();\n            } catch (error) {\n                i++;\n                if (i >= retryCount || !shouldRetry(error)) {\n                    throw error;\n                }\n                yield delay(nextWaitTime);\n                if (!shouldRetry(error)) {\n                    throw error;\n                }\n                nextWaitTime = nextWaitTime === 0 ? MIN_RETRY_DELAY : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n            }\n        }\n    });\n}\nfunction delay(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\nfunction withTimeout(promise, ms) {\n    return Promise.race([\n        promise,\n        new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Timeout\")), ms))\n    ]);\n}\nfunction getNewHeadsBlockNumber(event) {\n    return index.fromHex(event.number);\n}\nfunction getLogsBlockNumber(event) {\n    return index.fromHex(event.blockNumber);\n}\nfunction isResponse(message) {\n    return Array.isArray(message) || message.jsonrpc === \"2.0\" && message.id !== undefined;\n}\nfunction isSubscriptionEvent(message) {\n    return !isResponse(message);\n}\nfunction addToNewHeadsEventsBuffer(pastEvents, event) {\n    addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\nfunction addToLogsEventsBuffer(pastEvents, event) {\n    addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n/**\r\n * Adds a new event to an array of events, evicting any events which are so old\r\n * that they will no longer feasibly be part of a reorg.\r\n */ function addToPastEventsBuffer(pastEvents, event, getBlockNumber) {\n    const currentBlockNumber = getBlockNumber(event);\n    // Find first index of an event recent enough to retain, then drop everything\n    // at a lower index.\n    const firstGoodIndex = pastEvents.findIndex((e)=>getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT);\n    if (firstGoodIndex === -1) {\n        pastEvents.length = 0;\n    } else {\n        pastEvents.splice(0, firstGoodIndex);\n    }\n    pastEvents.push(event);\n}\nexports.AlchemyWebSocketProvider = AlchemyWebSocketProvider; //# sourceMappingURL=alchemy-websocket-provider-d921db84.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/alchemy-sdk/dist/cjs/alchemy-websocket-provider-d921db84.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/alchemy-sdk/dist/cjs/api/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/alchemy-sdk/dist/cjs/api/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar hash = __webpack_require__(/*! @ethersproject/hash */ \"(ssr)/./node_modules/@ethersproject/hash/lib.esm/index.js\");\nvar bytes = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\nvar units = __webpack_require__(/*! @ethersproject/units */ \"(ssr)/./node_modules/@ethersproject/units/lib.esm/index.js\");\n__webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib.esm/index.js\");\nvar abi = __webpack_require__(/*! @ethersproject/abi */ \"(ssr)/./node_modules/@ethersproject/abi/lib.esm/index.js\");\nconst version$1 = \"logger/5.7.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n    debug: 1,\n    \"default\": 2,\n    info: 2,\n    warning: 3,\n    error: 4,\n    off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\n            \"NFD\",\n            \"NFC\",\n            \"NFKD\",\n            \"NFKC\"\n        ].forEach((form)=>{\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            } catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    } catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel;\n(function(LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nvar ErrorCode;\n(function(ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\nconst HEX = \"0123456789abcdef\";\nclass Logger {\n    constructor(version){\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key)=>{\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for(let i = 0; i < value.length; i++){\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                } else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch(code){\n            case ErrorCode.NUMERIC_FAULT:\n                {\n                    url = \"NUMERIC_FAULT\";\n                    const fault = message;\n                    switch(fault){\n                        case \"overflow\":\n                        case \"underflow\":\n                        case \"division-by-zero\":\n                            url += \"-\" + fault;\n                            break;\n                        case \"negative-power\":\n                        case \"negative-width\":\n                            url += \"-unsupported\";\n                            break;\n                        case \"unbound-bitwise-result\":\n                            url += \"-unbound-result\";\n                            break;\n                    }\n                    break;\n                }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https://links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\",\n                form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof value !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n                name: kind.name\n            });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n                name: target.name,\n                operation: \"new\"\n            });\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n                name: kind.name\n            });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version$1);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nconst version = \"strings/5.7.0\";\nconst logger = new Logger(version);\n///////////////////////////////\nvar UnicodeNormalizationForm;\n(function(UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\nvar Utf8ErrorReason;\n(function(Utf8ErrorReason) {\n    // A continuation byte was present where there was nothing to continue\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n    // The string is too short to process the expected codepoint\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n    // A missing continuation byte was expected but not found\n    // - offset = the index the continuation byte was expected at\n    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n    // The computed code point is outside the range for UTF-8\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n    // The string is an overlong representation\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; already bounds checked\n    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        let i = 0;\n        for(let o = offset + 1; o < bytes.length; o++){\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes);\n}\n// Common error handing strategies\nconst Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes$1, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    bytes$1 = bytes.arrayify(bytes$1);\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while(i < bytes$1.length){\n        const c = bytes$1[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n        // 1110 xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        } else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes$1, result);\n            } else {\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes$1, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes$1.length) {\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes$1, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & (1 << 8 - extraLength - 1) - 1;\n        for(let j = 0; j < extraLength; j++){\n            let nextChar = bytes$1[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes$1, result);\n                res = null;\n                break;\n            }\n            res = res << 6 | nextChar & 0x3f;\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes$1, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes$1, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes$1, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nfunction toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\n    if (form != UnicodeNormalizationForm.current) {\n        logger.checkNormalize();\n        str = str.normalize(form);\n    }\n    let result = [];\n    for(let i = 0; i < str.length; i++){\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        } else if (c < 0x800) {\n            result.push(c >> 6 | 0xc0);\n            result.push(c & 0x3f | 0x80);\n        } else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error(\"invalid utf-8 string\");\n            }\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push(pair >> 18 | 0xf0);\n            result.push(pair >> 12 & 0x3f | 0x80);\n            result.push(pair >> 6 & 0x3f | 0x80);\n            result.push(pair & 0x3f | 0x80);\n        } else {\n            result.push(c >> 12 | 0xe0);\n            result.push(c >> 6 & 0x3f | 0x80);\n            result.push(c & 0x3f | 0x80);\n        }\n    }\n    return bytes.arrayify(result);\n}\nfunction _toUtf8String(codePoints) {\n    return codePoints.map((codePoint)=>{\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\");\n}\nfunction toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nfunction bytes2(data) {\n    if (data.length % 4 !== 0) {\n        throw new Error(\"bad data\");\n    }\n    let result = [];\n    for(let i = 0; i < data.length; i += 4){\n        result.push(parseInt(data.substring(i, i + 4), 16));\n    }\n    return result;\n}\nfunction createTable(data, func) {\n    if (!func) {\n        func = function(value) {\n            return [\n                parseInt(value, 16)\n            ];\n        };\n    }\n    let lo = 0;\n    let result = {};\n    data.split(\",\").forEach((pair)=>{\n        let comps = pair.split(\":\");\n        lo += parseInt(comps[0], 16);\n        result[lo] = func(comps[1]);\n    });\n    return result;\n}\nfunction createRangeTable(data) {\n    let hi = 0;\n    return data.split(\",\").map((v)=>{\n        let comps = v.split(\"-\");\n        if (comps.length === 1) {\n            comps[1] = \"0\";\n        } else if (comps[1] === \"\") {\n            comps[1] = \"1\";\n        }\n        let lo = hi + parseInt(comps[0], 16);\n        hi = parseInt(comps[1], 16);\n        return {\n            l: lo,\n            h: hi\n        };\n    });\n}\ncreateRangeTable(\"221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d\");\n// @TODO: Make this relative...\n\"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map((v)=>parseInt(v, 16));\ncreateTable(\"b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3\");\ncreateTable(\"179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7\");\ncreateTable(\"df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D\", bytes2);\ncreateRangeTable(\"80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001\");\nObject.defineProperty(exports, \"dnsEncode\", ({\n    enumerable: true,\n    get: function() {\n        return hash.dnsEncode;\n    }\n}));\nObject.defineProperty(exports, \"hashMessage\", ({\n    enumerable: true,\n    get: function() {\n        return hash.hashMessage;\n    }\n}));\nObject.defineProperty(exports, \"id\", ({\n    enumerable: true,\n    get: function() {\n        return hash.id;\n    }\n}));\nObject.defineProperty(exports, \"isValidName\", ({\n    enumerable: true,\n    get: function() {\n        return hash.isValidName;\n    }\n}));\nObject.defineProperty(exports, \"namehash\", ({\n    enumerable: true,\n    get: function() {\n        return hash.namehash;\n    }\n}));\nObject.defineProperty(exports, \"arrayify\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.arrayify;\n    }\n}));\nObject.defineProperty(exports, \"concat\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.concat;\n    }\n}));\nObject.defineProperty(exports, \"hexConcat\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.hexConcat;\n    }\n}));\nObject.defineProperty(exports, \"hexDataLength\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.hexDataLength;\n    }\n}));\nObject.defineProperty(exports, \"hexDataSlice\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.hexDataSlice;\n    }\n}));\nObject.defineProperty(exports, \"hexStripZeros\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.hexStripZeros;\n    }\n}));\nObject.defineProperty(exports, \"hexValue\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.hexValue;\n    }\n}));\nObject.defineProperty(exports, \"hexZeroPad\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.hexZeroPad;\n    }\n}));\nObject.defineProperty(exports, \"hexlify\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.hexlify;\n    }\n}));\nObject.defineProperty(exports, \"isBytes\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.isBytes;\n    }\n}));\nObject.defineProperty(exports, \"isBytesLike\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.isBytesLike;\n    }\n}));\nObject.defineProperty(exports, \"isHexString\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.isHexString;\n    }\n}));\nObject.defineProperty(exports, \"joinSignature\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.joinSignature;\n    }\n}));\nObject.defineProperty(exports, \"splitSignature\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.splitSignature;\n    }\n}));\nObject.defineProperty(exports, \"stripZeros\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.stripZeros;\n    }\n}));\nObject.defineProperty(exports, \"zeroPad\", ({\n    enumerable: true,\n    get: function() {\n        return bytes.zeroPad;\n    }\n}));\nObject.defineProperty(exports, \"formatEther\", ({\n    enumerable: true,\n    get: function() {\n        return units.formatEther;\n    }\n}));\nObject.defineProperty(exports, \"formatUnits\", ({\n    enumerable: true,\n    get: function() {\n        return units.formatUnits;\n    }\n}));\nObject.defineProperty(exports, \"parseEther\", ({\n    enumerable: true,\n    get: function() {\n        return units.parseEther;\n    }\n}));\nObject.defineProperty(exports, \"parseUnits\", ({\n    enumerable: true,\n    get: function() {\n        return units.parseUnits;\n    }\n}));\nObject.defineProperty(exports, \"Interface\", ({\n    enumerable: true,\n    get: function() {\n        return abi.Interface;\n    }\n}));\nexports.toUtf8Bytes = toUtf8Bytes;\nexports.toUtf8String = toUtf8String; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/alchemy-sdk/dist/cjs/api/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/alchemy-sdk/dist/cjs/index-b1f4a2d9.js":
/*!*************************************************************!*\
  !*** ./node_modules/alchemy-sdk/dist/cjs/index-b1f4a2d9.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./api/utils */ \"(ssr)/./node_modules/alchemy-sdk/dist/cjs/api/utils.js\");\nvar bignumber = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib.esm/index.js\");\nvar axios = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\nvar abstractProvider = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(ssr)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\");\nvar wallet = __webpack_require__(/*! @ethersproject/wallet */ \"(ssr)/./node_modules/@ethersproject/wallet/lib.esm/index.js\");\nvar contracts = __webpack_require__(/*! @ethersproject/contracts */ \"(ssr)/./node_modules/@ethersproject/contracts/lib.esm/index.js\");\nfunction _interopDefaultLegacy(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        \"default\": e\n    };\n}\nvar axios__default = /*#__PURE__*/ _interopDefaultLegacy(axios);\n/**\r\n * The supported networks by Alchemy. Note that some functions are not available\r\n * on all networks. Please refer to the Alchemy documentation for which APIs are\r\n * available on which networks\r\n * {@link https://docs.alchemy.com/alchemy/apis/feature-support-by-chain}\r\n *\r\n * @public\r\n */ exports.Network = void 0;\n(function(Network) {\n    Network[\"ETH_MAINNET\"] = \"eth-mainnet\";\n    Network[\"ETH_GOERLI\"] = \"eth-goerli\";\n    Network[\"ETH_SEPOLIA\"] = \"eth-sepolia\";\n    Network[\"OPT_MAINNET\"] = \"opt-mainnet\";\n    Network[\"OPT_GOERLI\"] = \"opt-goerli\";\n    Network[\"OPT_SEPOLIA\"] = \"opt-sepolia\";\n    Network[\"ARB_MAINNET\"] = \"arb-mainnet\";\n    Network[\"ARB_GOERLI\"] = \"arb-goerli\";\n    Network[\"ARB_SEPOLIA\"] = \"arb-sepolia\";\n    Network[\"MATIC_MAINNET\"] = \"polygon-mainnet\";\n    Network[\"MATIC_MUMBAI\"] = \"polygon-mumbai\";\n    Network[\"ASTAR_MAINNET\"] = \"astar-mainnet\";\n    Network[\"POLYGONZKEVM_MAINNET\"] = \"polygonzkevm-mainnet\";\n    Network[\"POLYGONZKEVM_TESTNET\"] = \"polygonzkevm-testnet\";\n    Network[\"BASE_MAINNET\"] = \"base-mainnet\";\n    Network[\"BASE_GOERLI\"] = \"base-goerli\";\n    Network[\"BASE_SEPOLIA\"] = \"base-sepolia\";\n})(exports.Network || (exports.Network = {}));\n/** Token Types for the `getTokenBalances()` endpoint. */ exports.TokenBalanceType = void 0;\n(function(TokenBalanceType) {\n    /**\r\n     * Option to fetch the top 100 tokens by 24-hour volume. This option is only\r\n     * available on Mainnet in Ethereum, Polygon, and Arbitrum.\r\n     */ TokenBalanceType[\"DEFAULT_TOKENS\"] = \"DEFAULT_TOKENS\";\n    /**\r\n     * Option to fetch the set of ERC-20 tokens that the address as ever held. his\r\n     * list is produced by an address's historical transfer activity and includes\r\n     * all tokens that the address has ever received.\r\n     */ TokenBalanceType[\"ERC20\"] = \"erc20\";\n})(exports.TokenBalanceType || (exports.TokenBalanceType = {}));\n/**\r\n * Categories of transfers to use with the {@link AssetTransfersParams} request\r\n * object when using {@link CoreNamespace.getAssetTransfers}.\r\n *\r\n * @public\r\n */ exports.AssetTransfersCategory = void 0;\n(function(AssetTransfersCategory) {\n    /**\r\n     * Top level ETH transactions that occur where the `fromAddress` is an\r\n     * external user-created address. External addresses have private keys and are\r\n     * accessed by users.\r\n     */ AssetTransfersCategory[\"EXTERNAL\"] = \"external\";\n    /**\r\n     * Top level ETH transactions that occur where the `fromAddress` is an\r\n     * internal, smart contract address. For example, a smart contract calling\r\n     * another smart contract or sending\r\n     */ AssetTransfersCategory[\"INTERNAL\"] = \"internal\";\n    /** ERC20 transfers. */ AssetTransfersCategory[\"ERC20\"] = \"erc20\";\n    /** ERC721 transfers. */ AssetTransfersCategory[\"ERC721\"] = \"erc721\";\n    /** ERC1155 transfers. */ AssetTransfersCategory[\"ERC1155\"] = \"erc1155\";\n    /** Special contracts that don't follow ERC 721/1155, (ex: CryptoKitties). */ AssetTransfersCategory[\"SPECIALNFT\"] = \"specialnft\";\n})(exports.AssetTransfersCategory || (exports.AssetTransfersCategory = {}));\n/**\r\n * The type of transfer for the request. Note that using `TO` will also include\r\n * NFTs that were minted by the owner.\r\n */ exports.GetTransfersForOwnerTransferType = void 0;\n(function(GetTransfersForOwnerTransferType) {\n    GetTransfersForOwnerTransferType[\"TO\"] = \"TO\";\n    GetTransfersForOwnerTransferType[\"FROM\"] = \"FROM\";\n})(exports.GetTransfersForOwnerTransferType || (exports.GetTransfersForOwnerTransferType = {}));\n/**\r\n * Enum for representing the supported sorting orders of the API.\r\n *\r\n * @public\r\n */ exports.SortingOrder = void 0;\n(function(SortingOrder) {\n    SortingOrder[\"ASCENDING\"] = \"asc\";\n    SortingOrder[\"DESCENDING\"] = \"desc\";\n})(exports.SortingOrder || (exports.SortingOrder = {}));\n/** An OpenSea collection's approval status. */ exports.OpenSeaSafelistRequestStatus = void 0;\n(function(OpenSeaSafelistRequestStatus) {\n    /** Verified collection. */ OpenSeaSafelistRequestStatus[\"VERIFIED\"] = \"verified\";\n    /** Collections that are approved on open sea and can be found in search results. */ OpenSeaSafelistRequestStatus[\"APPROVED\"] = \"approved\";\n    /** Collections that requested safelisting on OpenSea. */ OpenSeaSafelistRequestStatus[\"REQUESTED\"] = \"requested\";\n    /** Brand new collections. */ OpenSeaSafelistRequestStatus[\"NOT_REQUESTED\"] = \"not_requested\";\n})(exports.OpenSeaSafelistRequestStatus || (exports.OpenSeaSafelistRequestStatus = {}));\n/**\r\n * Method names for Alchemy's custom Subscription API endpoints.\r\n *\r\n * This value is provided in the `method` field when creating an event filter on\r\n * the Websocket Namespace.\r\n */ exports.AlchemySubscription = void 0;\n(function(AlchemySubscription) {\n    AlchemySubscription[\"PENDING_TRANSACTIONS\"] = \"alchemy_pendingTransactions\";\n    AlchemySubscription[\"MINED_TRANSACTIONS\"] = \"alchemy_minedTransactions\";\n})(exports.AlchemySubscription || (exports.AlchemySubscription = {}));\n/**\r\n * Asset type returned when calling {@link TransactNamespace.simulateAssetChanges}.\r\n * Allows you to determine if the assets approved or / and transferred are\r\n * native, tokens or NFTs.\r\n */ exports.SimulateAssetType = void 0;\n(function(SimulateAssetType) {\n    /**\r\n     * Native transfers that involve the currency of the chain the simulation is\r\n     * run on (ex: ETH for Ethereum, MATIC for Polygon, ETH for Arbitrum).\r\n     */ SimulateAssetType[\"NATIVE\"] = \"NATIVE\";\n    /** ERC20 approval or transfers. */ SimulateAssetType[\"ERC20\"] = \"ERC20\";\n    /** ERC721 approval or transfers. */ SimulateAssetType[\"ERC721\"] = \"ERC721\";\n    /** ERC1155 approval or transfers. */ SimulateAssetType[\"ERC1155\"] = \"ERC1155\";\n    /**\r\n     * Special contracts that don't follow ERC 721/1155.Currently limited to\r\n     * CryptoKitties and CryptoPunks.\r\n     */ SimulateAssetType[\"SPECIAL_NFT\"] = \"SPECIAL_NFT\";\n})(exports.SimulateAssetType || (exports.SimulateAssetType = {}));\n/**\r\n * Change type returned when calling {@link TransactNamespace.simulateAssetChanges}.\r\n */ exports.SimulateChangeType = void 0;\n(function(SimulateChangeType) {\n    /**\r\n     * Represents a transaction that approved or disapproved permissions for a\r\n     * contract.\r\n     *\r\n     * APPROVE without token ID → approve all tokens\r\n     * APPROVE without amount → approve all amount\r\n     * APPROVE with zero amount → approval being cleared\r\n     */ SimulateChangeType[\"APPROVE\"] = \"APPROVE\";\n    /**\r\n     * Represents a transaction that transferred tokens from one address to another.\r\n     */ SimulateChangeType[\"TRANSFER\"] = \"TRANSFER\";\n})(exports.SimulateChangeType || (exports.SimulateChangeType = {}));\n/**\r\n * Authority used to decode calls and logs when using the\r\n * {@link TransactNamespace.simulateExecution} method.\r\n */ exports.DecodingAuthority = void 0;\n(function(DecodingAuthority) {\n    DecodingAuthority[\"ETHERSCAN\"] = \"ETHERSCAN\";\n})(exports.DecodingAuthority || (exports.DecodingAuthority = {}));\n/** The type of call in a debug call trace. */ exports.DebugCallType = void 0;\n(function(DebugCallType) {\n    DebugCallType[\"CREATE\"] = \"CREATE\";\n    DebugCallType[\"CALL\"] = \"CALL\";\n    DebugCallType[\"STATICCALL\"] = \"STATICCALL\";\n    DebugCallType[\"DELEGATECALL\"] = \"DELEGATECALL\";\n})(exports.DebugCallType || (exports.DebugCallType = {}));\n/**\r\n * Potential transaction job statuses for a {@link GasOptimizedTransactionResponse}\r\n *\r\n * @internal\r\n */ // TODO(txjob): Remove internal tag once this feature is released.\nexports.GasOptimizedTransactionStatus = void 0;\n(function(GasOptimizedTransactionStatus) {\n    GasOptimizedTransactionStatus[\"UNSPECIFIED\"] = \"TRANSACTION_JOB_STATUS_UNSPECIFIED\";\n    GasOptimizedTransactionStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    GasOptimizedTransactionStatus[\"COMPLETE\"] = \"COMPLETE\";\n    GasOptimizedTransactionStatus[\"ABANDONED\"] = \"ABANDONED\";\n})(exports.GasOptimizedTransactionStatus || (exports.GasOptimizedTransactionStatus = {}));\n/** The version of the webhook. All newly created webhooks default to V2. */ exports.WebhookVersion = void 0;\n(function(WebhookVersion) {\n    WebhookVersion[\"V1\"] = \"V1\";\n    WebhookVersion[\"V2\"] = \"V2\";\n})(exports.WebhookVersion || (exports.WebhookVersion = {}));\n/** The type of {@link Webhook}. */ exports.WebhookType = void 0;\n(function(WebhookType) {\n    WebhookType[\"MINED_TRANSACTION\"] = \"MINED_TRANSACTION\";\n    WebhookType[\"DROPPED_TRANSACTION\"] = \"DROPPED_TRANSACTION\";\n    WebhookType[\"ADDRESS_ACTIVITY\"] = \"ADDRESS_ACTIVITY\";\n    WebhookType[\"NFT_ACTIVITY\"] = \"NFT_ACTIVITY\";\n    WebhookType[\"NFT_METADATA_UPDATE\"] = \"NFT_METADATA_UPDATE\";\n    WebhookType[\"GRAPHQL\"] = \"GRAPHQL\";\n})(exports.WebhookType || (exports.WebhookType = {}));\n/**\r\n * Commitment level of the target block with using methods in the\r\n * {@link DebugNamespace}\r\n */ exports.CommitmentLevel = void 0;\n(function(CommitmentLevel) {\n    /**\r\n     * Sample next block inferred by Alchemy built on top of the latest block.\r\n     * This contains the set of transactions taken from the local mempool and\r\n     * is a proxy for blocks that have not been mined yet.\r\n     */ CommitmentLevel[\"PENDING\"] = \"pending\";\n    /**\r\n     * The most recent block in the canonical chain observed by Alchemy. Note that\r\n     * this block may be re-orged out of the canonical chain.\r\n     */ CommitmentLevel[\"LATEST\"] = \"latest\";\n    /**\r\n     * The most recent crypto-economically secure block that cannot be re-orged\r\n     * outside of manual intervention driven by community coordination. This is\r\n     * only available on {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\r\n     */ CommitmentLevel[\"SAFE\"] = \"safe\";\n    /**\r\n     * The most recent secure block that has been accepted by >2/3 of validators.\r\n     * This block is very unlikely to be re-orged. This is only available on\r\n     * {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\r\n     */ CommitmentLevel[\"FINALIZED\"] = \"finalized\";\n    /**\r\n     * The lowest numbered block available that is usually the first block created.\r\n     */ CommitmentLevel[\"EARLIEST\"] = \"earliest\";\n})(exports.CommitmentLevel || (exports.CommitmentLevel = {}));\n/**\r\n * The type of tracer to use when running debug methods in the\r\n * {@link DebugNamespace}.\r\n */ exports.DebugTracerType = void 0;\n(function(DebugTracerType) {\n    DebugTracerType[\"CALL_TRACER\"] = \"callTracer\";\n    DebugTracerType[\"PRESTATE_TRACER\"] = \"prestateTracer\";\n})(exports.DebugTracerType || (exports.DebugTracerType = {}));\n/**\r\n * An enum for specifying the token type on NFTs.\r\n *\r\n * @public\r\n */ exports.NftTokenType = void 0;\n(function(NftTokenType) {\n    NftTokenType[\"ERC721\"] = \"ERC721\";\n    NftTokenType[\"ERC1155\"] = \"ERC1155\";\n    NftTokenType[\"NO_SUPPORTED_NFT_STANDARD\"] = \"NO_SUPPORTED_NFT_STANDARD\";\n    NftTokenType[\"NOT_A_CONTRACT\"] = \"NOT_A_CONTRACT\";\n    NftTokenType[\"UNKNOWN\"] = \"UNKNOWN\";\n})(exports.NftTokenType || (exports.NftTokenType = {}));\n/** Potential reasons why an NFT contract was classified as spam. */ exports.NftSpamClassification = void 0;\n(function(NftSpamClassification) {\n    NftSpamClassification[\"Erc721TooManyOwners\"] = \"Erc721TooManyOwners\";\n    NftSpamClassification[\"Erc721TooManyTokens\"] = \"Erc721TooManyTokens\";\n    NftSpamClassification[\"Erc721DishonestTotalSupply\"] = \"Erc721DishonestTotalSupply\";\n    NftSpamClassification[\"MostlyHoneyPotOwners\"] = \"MostlyHoneyPotOwners\";\n    NftSpamClassification[\"OwnedByMostHoneyPots\"] = \"OwnedByMostHoneyPots\";\n    NftSpamClassification[\"LowDistinctOwnersPercent\"] = \"LowDistinctOwnersPercent\";\n    NftSpamClassification[\"HighHoneyPotOwnerPercent\"] = \"HighHoneyPotOwnerPercent\";\n    NftSpamClassification[\"HighHoneyPotPercent\"] = \"HighHoneyPotPercent\";\n    NftSpamClassification[\"HoneyPotsOwnMultipleTokens\"] = \"HoneyPotsOwnMultipleTokens\";\n    NftSpamClassification[\"NoSalesActivity\"] = \"NoSalesActivity\";\n    NftSpamClassification[\"HighAirdropPercent\"] = \"HighAirdropPercent\";\n    NftSpamClassification[\"Unknown\"] = \"Unknown\";\n})(exports.NftSpamClassification || (exports.NftSpamClassification = {}));\n/**\r\n * Enum of NFT filters that can be applied to a {@link getNftsForOwner} or a\r\n * {@link getContractsForOwner} request.\r\n *\r\n * @beta\r\n */ exports.NftFilters = void 0;\n(function(NftFilters) {\n    /** NFTs that have been classified as spam. */ NftFilters[\"SPAM\"] = \"SPAM\";\n    /** NFTs that have been airdropped to a user. */ NftFilters[\"AIRDROPS\"] = \"AIRDROPS\";\n})(exports.NftFilters || (exports.NftFilters = {}));\n/**\r\n * Enum of ordering that can be applied to a {@link getNftsForOwner} or a\r\n * {@link getContractsForOwner} response.\r\n *\r\n * @beta\r\n */ exports.NftOrdering = void 0;\n(function(NftOrdering) {\n    NftOrdering[\"TRANSFERTIME\"] = \"TRANSFERTIME\";\n})(exports.NftOrdering || (exports.NftOrdering = {}));\n/**\r\n * Enum representing the supported NFT marketplaces by the\r\n * {@link NftNamespace.getNftSales} method.\r\n *\r\n * @public\r\n */ exports.NftSaleMarketplace = void 0;\n(function(NftSaleMarketplace) {\n    NftSaleMarketplace[\"SEAPORT\"] = \"seaport\";\n    NftSaleMarketplace[\"LOOKSRARE\"] = \"looksrare\";\n    NftSaleMarketplace[\"X2Y2\"] = \"x2y2\";\n    NftSaleMarketplace[\"WYVERN\"] = \"wyvern\";\n    NftSaleMarketplace[\"CRYPTOPUNKS\"] = \"cryptopunks\";\n    NftSaleMarketplace[\"BLUR\"] = \"blur\";\n    NftSaleMarketplace[\"UNKNOWN\"] = \"unknown\";\n})(exports.NftSaleMarketplace || (exports.NftSaleMarketplace = {}));\n/**\r\n * Enum for specifying the taker type for the {@link NftNamespace.getNftSales}\r\n * method.\r\n *\r\n * @public\r\n */ exports.NftSaleTakerType = void 0;\n(function(NftSaleTakerType) {\n    NftSaleTakerType[\"BUYER\"] = \"buyer\";\n    NftSaleTakerType[\"SELLER\"] = \"seller\";\n})(exports.NftSaleTakerType || (exports.NftSaleTakerType = {}));\n/** The current state of the NFT contract refresh process. */ exports.NftRefreshState = void 0;\n(function(NftRefreshState) {\n    /** The provided contract is not an NFT or does not contain metadata. */ NftRefreshState[\"DOES_NOT_EXIST\"] = \"does_not_exist\";\n    /** The contract has already been queued for refresh. */ NftRefreshState[\"ALREADY_QUEUED\"] = \"already_queued\";\n    /** The contract is currently being refreshed. */ NftRefreshState[\"IN_PROGRESS\"] = \"in_progress\";\n    /** The contract refresh is complete. */ NftRefreshState[\"FINISHED\"] = \"finished\";\n    /** The contract refresh has been queued and await execution. */ NftRefreshState[\"QUEUED\"] = \"queued\";\n    /** The contract was unable to be queued due to an internal error. */ NftRefreshState[\"QUEUE_FAILED\"] = \"queue_failed\";\n})(exports.NftRefreshState || (exports.NftRefreshState = {}));\n/**\r\n * Enum representing the supported NFT marketplaces on a\r\n * {@link NftCollectionFloorPrice} object.\r\n */ exports.NftCollectionMarketplace = void 0;\n(function(NftCollectionMarketplace) {\n    NftCollectionMarketplace[\"OPENSEA\"] = \"OpenSea\";\n})(exports.NftCollectionMarketplace || (exports.NftCollectionMarketplace = {}));\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __awaiter$1(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nconst DEFAULT_ALCHEMY_API_KEY = \"demo\";\nconst DEFAULT_NETWORK = exports.Network.ETH_MAINNET;\nconst DEFAULT_MAX_RETRIES = 5;\nconst DEFAULT_REQUEST_TIMEOUT = 0; // 0 = no timeout\n/**\r\n * Returns the base URL for making Alchemy API requests. The `alchemy.com`\r\n * endpoints only work with non eth json-rpc requests.\r\n *\r\n * @internal\r\n */ function getAlchemyHttpUrl(network, apiKey) {\n    return `https://${network}.g.alchemy.com/v2/${apiKey}`;\n}\nfunction getAlchemyNftHttpUrl(network, apiKey) {\n    return `https://${network}.g.alchemy.com/nft/v3/${apiKey}`;\n}\nfunction getAlchemyWsUrl(network, apiKey) {\n    return `wss://${network}.g.alchemy.com/v2/${apiKey}`;\n}\nfunction getAlchemyWebhookHttpUrl() {\n    return \"https://dashboard.alchemy.com/api\";\n}\nvar AlchemyApiType;\n(function(AlchemyApiType) {\n    AlchemyApiType[AlchemyApiType[\"BASE\"] = 0] = \"BASE\";\n    AlchemyApiType[AlchemyApiType[\"NFT\"] = 1] = \"NFT\";\n    AlchemyApiType[AlchemyApiType[\"WEBHOOK\"] = 2] = \"WEBHOOK\";\n})(AlchemyApiType || (AlchemyApiType = {}));\n/**\r\n * Mapping of network names to their corresponding Network strings used to\r\n * create an Ethers.js Provider instance.\r\n */ const EthersNetwork = {\n    [exports.Network.ETH_MAINNET]: \"mainnet\",\n    [exports.Network.ETH_GOERLI]: \"goerli\",\n    [exports.Network.ETH_SEPOLIA]: \"sepolia\",\n    [exports.Network.OPT_MAINNET]: \"optimism\",\n    [exports.Network.OPT_GOERLI]: \"optimism-goerli\",\n    [exports.Network.OPT_SEPOLIA]: \"optimism-sepolia\",\n    [exports.Network.ARB_MAINNET]: \"arbitrum\",\n    [exports.Network.ARB_GOERLI]: \"arbitrum-goerli\",\n    [exports.Network.ARB_SEPOLIA]: \"arbitrum-sepolia\",\n    [exports.Network.MATIC_MAINNET]: \"matic\",\n    [exports.Network.MATIC_MUMBAI]: \"maticmum\",\n    [exports.Network.ASTAR_MAINNET]: \"astar-mainnet\",\n    [exports.Network.POLYGONZKEVM_MAINNET]: \"polygonzkevm-mainnet\",\n    [exports.Network.POLYGONZKEVM_TESTNET]: \"polygonzkevm-testnet\",\n    [exports.Network.BASE_MAINNET]: \"base-mainnet\",\n    [exports.Network.BASE_GOERLI]: \"base-goerli\",\n    [exports.Network.BASE_SEPOLIA]: \"base-sepolia\"\n};\n/**\r\n * Mapping of network names to their corresponding Ethers Network objects. These\r\n * networks are not yet supported by Ethers and are listed here to be overriden\r\n * in the provider.\r\n */ const CustomNetworks = {\n    \"arbitrum-goerli\": {\n        chainId: 421613,\n        name: \"arbitrum-goerli\"\n    },\n    \"arbitrum-sepolia\": {\n        chainId: 421614,\n        name: \"arbitrum-sepolia\"\n    },\n    \"astar-mainnet\": {\n        chainId: 592,\n        name: \"astar-mainnet\"\n    },\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\"\n    },\n    \"optimism-sepolia\": {\n        chainId: 11155420,\n        name: \"optimism-sepolia\"\n    },\n    \"polygonzkevm-mainnet\": {\n        chainId: 1101,\n        name: \"polygonzkevm-mainnet\"\n    },\n    \"polygonzkevm-testnet\": {\n        chainId: 1442,\n        name: \"polygonzkevm-testnet\"\n    },\n    \"base-mainnet\": {\n        chainId: 8453,\n        name: \"base-mainnet\"\n    },\n    \"base-goerli\": {\n        chainId: 84531,\n        name: \"base-goerli\"\n    },\n    \"base-sepolia\": {\n        chainId: 84532,\n        name: \"base-sepolia\"\n    }\n};\nfunction noop() {\n// It's a no-op\n}\nconst ETH_NULL_VALUE = \"0x\";\nconst ETH_NULL_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n/**\r\n * This class holds the config information for the SDK client instance and\r\n * exposes the underlying providers for more advanced use cases.\r\n *\r\n * @public\r\n */ class AlchemyConfig {\n    constructor(config){\n        this.apiKey = (config === null || config === void 0 ? void 0 : config.apiKey) || DEFAULT_ALCHEMY_API_KEY;\n        this.network = (config === null || config === void 0 ? void 0 : config.network) || DEFAULT_NETWORK;\n        this.maxRetries = (config === null || config === void 0 ? void 0 : config.maxRetries) || DEFAULT_MAX_RETRIES;\n        this.url = config === null || config === void 0 ? void 0 : config.url;\n        this.authToken = config === null || config === void 0 ? void 0 : config.authToken;\n        this.batchRequests = (config === null || config === void 0 ? void 0 : config.batchRequests) || false;\n        this.requestTimeout = (config === null || config === void 0 ? void 0 : config.requestTimeout) || DEFAULT_REQUEST_TIMEOUT;\n    }\n    /**\r\n     * Returns the URL endpoint to send the HTTP request to. If a custom URL was\r\n     * provided in the config, that URL is returned. Otherwise, the default URL is\r\n     * from the network and API key.\r\n     *\r\n     * @param apiType - The type of API to get the URL for.\r\n     * @internal\r\n     */ _getRequestUrl(apiType) {\n        if (this.url !== undefined) {\n            return this.url;\n        } else if (apiType === AlchemyApiType.NFT) {\n            return getAlchemyNftHttpUrl(this.network, this.apiKey);\n        } else if (apiType === AlchemyApiType.WEBHOOK) {\n            return getAlchemyWebhookHttpUrl();\n        } else {\n            return getAlchemyHttpUrl(this.network, this.apiKey);\n        }\n    }\n    /**\r\n     * Returns an AlchemyProvider instance. Only one provider is created per\r\n     * Alchemy instance.\r\n     *\r\n     * The AlchemyProvider is a wrapper around ether's `AlchemyProvider` class and\r\n     * has been expanded to support Alchemy's Enhanced APIs.\r\n     *\r\n     * Most common methods on the provider are available as top-level methods on\r\n     * the {@link Alchemy} instance, but the provider is exposed here to access\r\n     * other less-common methods.\r\n     *\r\n     * @public\r\n     */ getProvider() {\n        if (!this._baseAlchemyProvider) {\n            this._baseAlchemyProvider = (()=>__awaiter$1(this, void 0, void 0, function*() {\n                    const { AlchemyProvider } = yield Promise.resolve().then(function() {\n                        return __webpack_require__(/*! ./alchemy-provider-e539e7d0.js */ \"(ssr)/./node_modules/alchemy-sdk/dist/cjs/alchemy-provider-e539e7d0.js\");\n                    });\n                    return new AlchemyProvider(this);\n                }))();\n        }\n        return this._baseAlchemyProvider;\n    }\n    /**\r\n     * Returns an AlchemyWebsocketProvider instance. Only one provider is created\r\n     * per Alchemy instance.\r\n     *\r\n     * The AlchemyWebSocketProvider is a wrapper around ether's\r\n     * `AlchemyWebSocketProvider` class and has been expanded to support Alchemy's\r\n     * Subscription APIs, automatic backfilling, and other performance improvements.\r\n     *\r\n     * Most common methods on the provider are available as top-level methods on\r\n     * the {@link Alchemy} instance, but the provider is exposed here to access\r\n     * other less-common methods.\r\n     */ getWebSocketProvider() {\n        if (!this._baseAlchemyWssProvider) {\n            this._baseAlchemyWssProvider = (()=>__awaiter$1(this, void 0, void 0, function*() {\n                    const { AlchemyWebSocketProvider } = yield Promise.resolve().then(function() {\n                        return __webpack_require__(/*! ./alchemy-websocket-provider-d921db84.js */ \"(ssr)/./node_modules/alchemy-sdk/dist/cjs/alchemy-websocket-provider-d921db84.js\");\n                    });\n                    return new AlchemyWebSocketProvider(this);\n                }))();\n        }\n        return this._baseAlchemyWssProvider;\n    }\n}\nconst version$1 = \"logger/5.7.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n    debug: 1,\n    \"default\": 2,\n    info: 2,\n    warning: 3,\n    error: 4,\n    off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\n            \"NFD\",\n            \"NFC\",\n            \"NFKD\",\n            \"NFKC\"\n        ].forEach((form)=>{\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            } catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    } catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel$1;\n(function(LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel$1 || (LogLevel$1 = {}));\nvar ErrorCode;\n(function(ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\nconst HEX = \"0123456789abcdef\";\nclass Logger$1 {\n    constructor(version){\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger$1.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger$1.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger$1.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger$1.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key)=>{\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for(let i = 0; i < value.length; i++){\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                } else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch(code){\n            case ErrorCode.NUMERIC_FAULT:\n                {\n                    url = \"NUMERIC_FAULT\";\n                    const fault = message;\n                    switch(fault){\n                        case \"overflow\":\n                        case \"underflow\":\n                        case \"division-by-zero\":\n                            url += \"-\" + fault;\n                            break;\n                        case \"negative-power\":\n                        case \"negative-width\":\n                            url += \"-unsupported\";\n                            break;\n                        case \"unbound-bitwise-result\":\n                            url += \"-unbound-result\";\n                            break;\n                    }\n                    break;\n                }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https://links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger$1.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\",\n                form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof value !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger$1.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger$1.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger$1.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger$1.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger$1.errors.MISSING_NEW, {\n                name: kind.name\n            });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n                name: target.name,\n                operation: \"new\"\n            });\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger$1.errors.MISSING_NEW, {\n                name: kind.name\n            });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger$1(version$1);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger$1.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger$1(version);\n    }\n}\nLogger$1.errors = ErrorCode;\nLogger$1.levels = LogLevel$1;\nconst version = \"properties/5.7.0\";\nvar __awaiter =  false || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst logger = new Logger$1(version);\nfunction defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false\n    });\n}\nfunction resolveProperties(object) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const promises = Object.keys(object).map((key)=>{\n            const value = object[key];\n            return Promise.resolve(value).then((v)=>({\n                    key: key,\n                    value: v\n                }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result)=>{\n            accum[result.key] = result.value;\n            return accum;\n        }, {});\n    });\n}\nconst opaque = {\n    bigint: true,\n    boolean: true,\n    \"function\": true,\n    number: true,\n    string: true\n};\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof object]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof object === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for(let i = 0; i < keys.length; i++){\n            let value = null;\n            try {\n                value = object[keys[i]];\n            } catch (error) {\n                continue;\n            }\n            if (!_isFrozen(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item)=>deepCopy(item)));\n    }\n    if (typeof object === \"object\") {\n        const result = {};\n        for(const key in object){\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, \"object\", object);\n}\nfunction deepCopy(object) {\n    return _deepCopy(object);\n}\n/**\r\n * Converts a hex string to a decimal number.\r\n *\r\n * @param hexString - The hex string to convert.\r\n * @public\r\n */ function fromHex(hexString) {\n    return bignumber.BigNumber.from(hexString).toNumber();\n}\n/**\r\n * Converts a number to a hex string.\r\n *\r\n * @param num - The number to convert to hex.\r\n * @public\r\n */ function toHex(num) {\n    return bignumber.BigNumber.from(num).toHexString();\n}\n/**\r\n * Checks if a value is a hex string.\r\n *\r\n * @param possibleHexString - The value to check.\r\n * @public\r\n */ function isHex(possibleHexString) {\n    return /^0x[0-9a-fA-F]+$/.test(possibleHexString);\n}\nfunction formatBlock(block) {\n    if (typeof block === \"string\") {\n        return block;\n    } else if (Number.isInteger(block)) {\n        return toHex(block);\n    }\n    return block.toString();\n}\nfunction stringToEnum(x, enumb) {\n    return Object.values(enumb).includes(x) ? x : null;\n}\nfunction getNftContractForNftFromRaw(rawNftContract) {\n    return nullsToUndefined(Object.assign(Object.assign({}, getNftContractFromRaw(rawNftContract)), {\n        spamClassifications: rawNftContract.spamClassifications.map(parseNftSpamClassification)\n    }));\n}\nfunction getNftContractsForOwnerFromRaw(rawNftContract) {\n    return nullsToUndefined(Object.assign(Object.assign({}, getNftContractFromRaw(rawNftContract)), {\n        displayNft: rawNftContract.displayNft,\n        image: rawNftContract.image,\n        totalBalance: rawNftContract.totalBalance,\n        numDistinctTokensOwned: rawNftContract.numDistinctTokensOwned,\n        isSpam: rawNftContract.isSpam\n    }));\n}\nfunction getNftContractFromRaw(rawNftContract) {\n    return nullsToUndefined(Object.assign(Object.assign({}, rawNftContract), {\n        tokenType: parseNftTokenType(rawNftContract.tokenType),\n        openSeaMetadata: Object.assign(Object.assign({}, rawNftContract.openSeaMetadata), {\n            safelistRequestStatus: rawNftContract.openSeaMetadata.safelistRequestStatus !== null ? stringToEnum(rawNftContract.openSeaMetadata.safelistRequestStatus, exports.OpenSeaSafelistRequestStatus) : null\n        })\n    }));\n}\nfunction getNftCollectionFromRaw(rawNftCollection) {\n    return nullsToUndefined(Object.assign(Object.assign({}, rawNftCollection), {\n        floorPrice: Object.assign(Object.assign({}, rawNftCollection.floorPrice), {\n            marketplace: parseNftCollectionMarketplace(rawNftCollection.floorPrice.marketplace)\n        })\n    }));\n}\nfunction getBaseNftFromRaw(rawBaseNft, contractAddress) {\n    return {\n        contractAddress: contractAddress ? contractAddress : rawBaseNft.contractAddress,\n        tokenId: rawBaseNft.tokenId\n    };\n}\nfunction getNftFromRaw(rawNft) {\n    return nullsToUndefined(Object.assign(Object.assign({}, rawNft), {\n        contract: getNftContractForNftFromRaw(rawNft.contract),\n        tokenType: parseNftTokenType(rawNft.tokenType),\n        acquiredAt: rawNft.acquiredAt,\n        collection: rawNft.collection,\n        mint: rawNft.mint\n    }));\n}\nfunction getNftSalesFromRaw(rawNftSales) {\n    return nullsToUndefined({\n        nftSales: rawNftSales.nftSales.map((rawNftSale)=>Object.assign(Object.assign({}, rawNftSale), {\n                marketplace: parseNftSaleMarketplace(rawNftSale.marketplace),\n                taker: parseNftTaker(rawNftSale.taker)\n            })),\n        validAt: rawNftSales.validAt,\n        pageKey: rawNftSales.pageKey\n    });\n}\nfunction parseNftSaleMarketplace(marketplace) {\n    switch(marketplace){\n        case \"looksrare\":\n            return exports.NftSaleMarketplace.LOOKSRARE;\n        case \"seaport\":\n            return exports.NftSaleMarketplace.SEAPORT;\n        case \"x2y2\":\n            return exports.NftSaleMarketplace.X2Y2;\n        case \"wyvern\":\n            return exports.NftSaleMarketplace.WYVERN;\n        case \"cryptopunks\":\n            return exports.NftSaleMarketplace.CRYPTOPUNKS;\n        case \"blur\":\n            return exports.NftSaleMarketplace.BLUR;\n        default:\n            return exports.NftSaleMarketplace.UNKNOWN;\n    }\n}\nfunction parseNftCollectionMarketplace(marketplace) {\n    switch(marketplace){\n        case \"OpenSea\":\n            return exports.NftCollectionMarketplace.OPENSEA;\n        default:\n            return undefined;\n    }\n}\nfunction parseNftTaker(taker) {\n    // The `.toLowerCase()` call is needed because the API returns the capitalized values\n    switch(taker.toLowerCase()){\n        case \"buyer\":\n            return exports.NftSaleTakerType.BUYER;\n        case \"seller\":\n            return exports.NftSaleTakerType.SELLER;\n        default:\n            throw new Error(`Unsupported NftSaleTakerType ${taker}`);\n    }\n}\nfunction parseNftSpamClassification(s) {\n    const res = stringToEnum(s, exports.NftSpamClassification);\n    if (res == null) {\n        return exports.NftSpamClassification.Unknown;\n    }\n    return res;\n}\nfunction parseNftTokenType(tokenType) {\n    switch(tokenType){\n        case \"erc721\":\n        case \"ERC721\":\n            return exports.NftTokenType.ERC721;\n        case \"erc1155\":\n        case \"ERC1155\":\n            return exports.NftTokenType.ERC1155;\n        case \"no_supported_nft_standard\":\n        case \"NO_SUPPORTED_NFT_STANDARD\":\n            return exports.NftTokenType.NO_SUPPORTED_NFT_STANDARD;\n        case \"not_a_contract\":\n        case \"NOT_A_CONTRACT\":\n            return exports.NftTokenType.NOT_A_CONTRACT;\n        default:\n            return exports.NftTokenType.UNKNOWN;\n    }\n}\nconst IS_BROWSER =  false && 0;\nfunction nullsToUndefined(obj) {\n    if (obj === null || obj === undefined) {\n        return undefined;\n    }\n    if (obj.constructor.name === \"Object\" || Array.isArray(obj)) {\n        for(const key in obj){\n            obj[key] = nullsToUndefined(obj[key]);\n        }\n    }\n    return obj;\n}\n/**\r\n * This file contains the underlying implementations for exposed API surface in\r\n * the {@link CoreNamespace}. By moving the methods out into a separate file,\r\n * other namespaces can access these methods without depending on the entire\r\n * CoreNamespace, or override the `srcMethod` param used for logging.\r\n */ /**\r\n * Gets the asset transfers for the provided params.\r\n */ function getAssetTransfers(config, params, srcMethod = \"getAssetTransfers\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const provider = yield config.getProvider();\n        if (params.fromAddress) {\n            params.fromAddress = yield provider._getAddress(params.fromAddress);\n        }\n        if (params.toAddress) {\n            params.toAddress = yield provider._getAddress(params.toAddress);\n        }\n        return provider._send(\"alchemy_getAssetTransfers\", [\n            Object.assign(Object.assign({}, params), {\n                fromBlock: params.fromBlock != null ? formatBlock(params.fromBlock) : undefined,\n                toBlock: params.toBlock != null ? formatBlock(params.toBlock) : undefined,\n                maxCount: params.maxCount != null ? toHex(params.maxCount) : undefined\n            })\n        ], srcMethod);\n    });\n}\nfunction getTransactionReceipts(config, params, srcMethod = \"getTransactionReceipts\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const provider = yield config.getProvider();\n        return provider._send(\"alchemy_getTransactionReceipts\", [\n            params\n        ], srcMethod);\n    });\n}\n/**\r\n * This method is based on the ethers implementation of getLogs, but is expanded\r\n * to support specifying an address array in the filter.\r\n *\r\n * The main modifications made to support an address array are:\r\n * - Custom `getFilter()` method that supports an address array\r\n * - Use of `arrayOf()` formatter to format the logs to avoid the `Formatter` import.\r\n * - Use of `provider.send()` to avoid formatting logic in `provider.perform()`.\r\n */ function getLogs(config, filter) {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const provider = yield config.getProvider();\n        yield provider.getNetwork();\n        const params = yield resolveProperties({\n            filter: getFilter(config, filter)\n        });\n        const logs = yield provider.send(\"eth_getLogs\", [\n            params.filter\n        ]);\n        logs.forEach((log)=>{\n            if (log.removed == null) {\n                log.removed = false;\n            }\n        });\n        return arrayOf(provider.formatter.filterLog.bind(provider.formatter))(logs);\n    });\n}\n/**\r\n * This method is based on and copied from the ethers implementation of\r\n * `JsonRpcProvider._getFilter()`, but is extended to support an address array.\r\n *\r\n * This implementation is a hacky way to get around the ethers formatter. The\r\n * formatter is used to check the types of the `filter` params, but ethers does\r\n * not allow an array in the `address` field. To preserve the ethers formatter\r\n * on the other fields, we use the formatter to check the types of those other\r\n * fields, and then manually check the `address` field last.\r\n */ function getFilter(config, filter) {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        // START MODIFIED CODE\n        const provider = yield config.getProvider();\n        const resolvedFilter = yield filter;\n        let result = {};\n        // END MODIFIED CODE\n        [\n            \"blockHash\",\n            \"topics\"\n        ].forEach((key)=>{\n            if (resolvedFilter[key] == null) {\n                return;\n            }\n            result[key] = resolvedFilter[key];\n        });\n        [\n            \"fromBlock\",\n            \"toBlock\"\n        ].forEach((key)=>{\n            if (resolvedFilter[key] == null) {\n                return;\n            }\n            result[key] = provider._getBlockTag(resolvedFilter[key]);\n        });\n        // BEGIN MODIFIED CODE\n        // Format the `result` object using the ethers formatter without the `address`\n        // field.\n        result = provider.formatter.filter((yield resolveProperties(result)));\n        // After formatting the other fields, manually format the `address` field\n        // before adding it to the `result` object.\n        if (Array.isArray(resolvedFilter.address)) {\n            result.address = yield Promise.all(resolvedFilter.address.map((address)=>__awaiter$1(this, void 0, void 0, function*() {\n                    return provider._getAddress(address);\n                })));\n        } else if (resolvedFilter.address != null) {\n            result.address = yield provider._getAddress(resolvedFilter.address);\n        }\n        return result;\n    // END MODIFIED CODE\n    });\n}\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * This function is directly copied over from ethers implementation of\r\n * `Formatter.arrayOf()`. It is copied here to avoid having to import the\r\n * `Formatter` class or `FormatterFunc` type from ethers, that are not part of\r\n * the default export.\r\n *\r\n * This function returns a function that applies the formatter to an array of\r\n * values, and is used to format the logs returned by `getLogs()`.\r\n */ function arrayOf(format) {\n    return function(array) {\n        if (!Array.isArray(array)) {\n            throw new Error(\"not an array\");\n        }\n        const result = [];\n        array.forEach((value)=>{\n            result.push(format(value));\n        });\n        return result;\n    };\n}\n/**\r\n * The core namespace contains all commonly-used [Ethers.js\r\n * Provider](https://docs.ethers.io/v5/api/providers/api-providers/#AlchemyProvider)\r\n * methods. If you are already using Ethers.js, you should be simply able to\r\n * replace the Ethers.js Provider object with `alchemy.core` when accessing\r\n * provider methods and it should just work.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.core`.\r\n */ class CoreNamespace {\n    /** @internal */ constructor(config){\n        this.config = config;\n    }\n    /**\r\n     * Returns the balance of a given address as of the provided block.\r\n     *\r\n     * @param addressOrName The address or name of the account to get the balance for.\r\n     * @param blockTag The optional block number or hash to get the balance for.\r\n     *   Defaults to 'latest' if unspecified.\r\n     * @public\r\n     */ getBalance(addressOrName, blockTag) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getBalance(addressOrName, blockTag);\n        });\n    }\n    /**\r\n     * Checks if the provided address is a smart contract.\r\n     *\r\n     * @param address The address to check type for.\r\n     * @public\r\n     */ isContractAddress(address) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const code = yield provider.getCode(address);\n            return code !== \"0x\";\n        });\n    }\n    /**\r\n     * Returns the contract code of the provided address at the block. If there is\r\n     * no contract deployed, the result is `0x`.\r\n     *\r\n     * @param addressOrName The address or name of the account to get the code for.\r\n     * @param blockTag The optional block number or hash to get the code for.\r\n     *   Defaults to 'latest' if unspecified.\r\n     * @public\r\n     */ getCode(addressOrName, blockTag) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getCode(addressOrName, blockTag);\n        });\n    }\n    /**\r\n     * Return the value of the provided position at the provided address, at the\r\n     * provided block in `Bytes32` format.\r\n     *\r\n     * @param addressOrName The address or name of the account to get the code for.\r\n     * @param position The position of the storage slot to get.\r\n     * @param blockTag The optional block number or hash to get the code for.\r\n     *   Defaults to 'latest' if unspecified.\r\n     * @public\r\n     */ getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getStorageAt(addressOrName, position, blockTag);\n        });\n    }\n    /**\r\n     * Returns the number of transactions ever sent from the provided address, as\r\n     * of the provided block tag. This value is used as the nonce for the next\r\n     * transaction from the address sent to the network.\r\n     *\r\n     * @param addressOrName The address or name of the account to get the nonce for.\r\n     * @param blockTag The optional block number or hash to get the nonce for.\r\n     * @public\r\n     */ getTransactionCount(addressOrName, blockTag) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getTransactionCount(addressOrName, blockTag);\n        });\n    }\n    /**\r\n     * Returns the block from the network based on the provided block number or\r\n     * hash. Transactions on the block are represented as an array of transaction\r\n     * hashes. To get the full transaction details on the block, use\r\n     * {@link getBlockWithTransactions} instead.\r\n     *\r\n     * @param blockHashOrBlockTag The block number or hash to get the block for.\r\n     * @public\r\n     */ getBlock(blockHashOrBlockTag) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getBlock(blockHashOrBlockTag);\n        });\n    }\n    /**\r\n     * Returns the block from the network based on the provided block number or\r\n     * hash. Transactions on the block are represented as an array of\r\n     * {@link TransactionResponse} objects.\r\n     *\r\n     * @param blockHashOrBlockTag The block number or hash to get the block for.\r\n     * @public\r\n     */ getBlockWithTransactions(blockHashOrBlockTag) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getBlockWithTransactions(blockHashOrBlockTag);\n        });\n    }\n    /**\r\n     * Returns the {@link EthersNetworkAlias} Alchemy is connected to.\r\n     *\r\n     * @public\r\n     */ getNetwork() {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getNetwork();\n        });\n    }\n    /**\r\n     * Returns the block number of the most recently mined block.\r\n     *\r\n     * @public\r\n     */ getBlockNumber() {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getBlockNumber();\n        });\n    }\n    /**\r\n     * Returns the best guess of the current gas price to use in a transaction.\r\n     *\r\n     * @public\r\n     */ getGasPrice() {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getGasPrice();\n        });\n    }\n    /**\r\n     * Returns the recommended fee data to use in a transaction.\r\n     *\r\n     * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\r\n     * should be used.\r\n     *\r\n     * For legacy transactions and networks which do not support EIP-1559, the\r\n     * gasPrice should be used.\r\n     *\r\n     * @public\r\n     */ getFeeData() {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getFeeData();\n        });\n    }\n    /**\r\n     * Returns a Promise which will stall until the network has heen established,\r\n     * ignoring errors due to the target node not being active yet.\r\n     *\r\n     * This can be used for testing or attaching scripts to wait until the node is\r\n     * up and running smoothly.\r\n     *\r\n     * @public\r\n     */ ready() {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.ready;\n        });\n    }\n    /**\r\n     * Returns the result of executing the transaction, using call. A call does\r\n     * not require any ether, but cannot change any state. This is useful for\r\n     * calling getters on Contracts.\r\n     *\r\n     * @param transaction The transaction to execute.\r\n     * @param blockTag The optional block number or hash to get the call for.\r\n     * @public\r\n     */ call(transaction, blockTag) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.call(transaction, blockTag);\n        });\n    }\n    /**\r\n     * Returns an estimate of the amount of gas that would be required to submit\r\n     * transaction to the network.\r\n     *\r\n     * An estimate may not be accurate since there could be another transaction on\r\n     * the network that was not accounted for, but after being mined affects the\r\n     * relevant state.\r\n     *\r\n     * This is an alias for {@link TransactNamespace.estimateGas}.\r\n     *\r\n     * @param transaction The transaction to estimate gas for.\r\n     * @public\r\n     */ estimateGas(transaction) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.estimateGas(transaction);\n        });\n    }\n    /**\r\n     * Returns the transaction with hash or null if the transaction is unknown.\r\n     *\r\n     * If a transaction has not been mined, this method will search the\r\n     * transaction pool. Various backends may have more restrictive transaction\r\n     * pool access (e.g. if the gas price is too low or the transaction was only\r\n     * recently sent and not yet indexed) in which case this method may also return null.\r\n     *\r\n     * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n     *\r\n     * @param transactionHash The hash of the transaction to get.\r\n     * @public\r\n     */ getTransaction(transactionHash) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getTransaction(transactionHash);\n        });\n    }\n    /**\r\n     * Returns the transaction receipt for hash or null if the transaction has not\r\n     * been mined.\r\n     *\r\n     * To stall until the transaction has been mined, consider the\r\n     * waitForTransaction method below.\r\n     *\r\n     * @param transactionHash The hash of the transaction to get.\r\n     * @public\r\n     */ getTransactionReceipt(transactionHash) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getTransactionReceipt(transactionHash);\n        });\n    }\n    /**\r\n     * Submits transaction to the network to be mined. The transaction must be\r\n     * signed, and be valid (i.e. the nonce is correct and the account has\r\n     * sufficient balance to pay for the transaction).\r\n     *\r\n     * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n     *\r\n     * @param signedTransaction The signed transaction to send.\r\n     * @public\r\n     */ sendTransaction(signedTransaction) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.sendTransaction(signedTransaction);\n        });\n    }\n    /**\r\n     * Returns a promise which will not resolve until specified transaction hash is mined.\r\n     *\r\n     * If {@link confirmations} is 0, this method is non-blocking and if the\r\n     * transaction has not been mined returns null. Otherwise, this method will\r\n     * block until the transaction has confirmed blocks mined on top of the block\r\n     * in which it was mined.\r\n     *\r\n     * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n     *\r\n     * @param transactionHash The hash of the transaction to wait for.\r\n     * @param confirmations The number of blocks to wait for.\r\n     * @param timeout The maximum time to wait for the transaction to confirm.\r\n     * @public\r\n     */ waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.waitForTransaction(transactionHash, confirmations, timeout);\n        });\n    }\n    /**\r\n     * Returns an array of logs that match the provided filter.\r\n     *\r\n     * @param filter The filter object to use.\r\n     * @public\r\n     */ getLogs(filter) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            return getLogs(this.config, filter);\n        });\n    }\n    /**\r\n     * Allows sending a raw message to the Alchemy backend.\r\n     *\r\n     * @param method The method to call.\r\n     * @param params The parameters to pass to the method.\r\n     * @public\r\n     */ send(method, params) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.send(method, params);\n        });\n    }\n    /**\r\n     * Finds the address that deployed the provided contract and block number it\r\n     * was deployed in.\r\n     *\r\n     * NOTE: This method performs a binary search across all blocks since genesis\r\n     * and can take a long time to complete. This method is a convenience method\r\n     * that will eventually be replaced by a single call to an Alchemy endpoint\r\n     * with this information cached.\r\n     *\r\n     * @param contractAddress - The contract address to find the deployer for.\r\n     * @beta\r\n     */ findContractDeployer(contractAddress) {\n        var _a;\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const currentBlockNum = yield provider.getBlockNumber();\n            if ((yield provider.getCode(contractAddress, currentBlockNum)) === ETH_NULL_VALUE) {\n                throw new Error(`Contract '${contractAddress}' does not exist`);\n            }\n            // Binary search for the block number that the contract was deployed in.\n            const firstBlock = yield binarySearchFirstBlock(0, currentBlockNum + 1, contractAddress, this.config);\n            // Find the first transaction in the block that matches the provided address.\n            const txReceipts = yield getTransactionReceipts(this.config, {\n                blockNumber: toHex(firstBlock)\n            }, \"findContractDeployer\");\n            const matchingReceipt = (_a = txReceipts.receipts) === null || _a === void 0 ? void 0 : _a.find((receipt)=>receipt.contractAddress === contractAddress.toLowerCase());\n            return {\n                deployerAddress: matchingReceipt === null || matchingReceipt === void 0 ? void 0 : matchingReceipt.from,\n                blockNumber: firstBlock\n            };\n        });\n    }\n    getTokenBalances(addressOrName, contractAddressesOrOptions) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const address = yield provider._getAddress(addressOrName);\n            if (Array.isArray(contractAddressesOrOptions)) {\n                if (contractAddressesOrOptions.length > 1500) {\n                    throw new Error(\"You cannot pass in more than 1500 contract addresses to getTokenBalances()\");\n                }\n                if (contractAddressesOrOptions.length === 0) {\n                    throw new Error(\"getTokenBalances() requires at least one contractAddress when using an array\");\n                }\n                return provider._send(\"alchemy_getTokenBalances\", [\n                    address,\n                    contractAddressesOrOptions\n                ], \"getTokenBalances\");\n            } else {\n                const tokenType = contractAddressesOrOptions === undefined ? exports.TokenBalanceType.ERC20 : contractAddressesOrOptions.type;\n                const params = [\n                    address,\n                    tokenType\n                ];\n                if ((contractAddressesOrOptions === null || contractAddressesOrOptions === void 0 ? void 0 : contractAddressesOrOptions.type) === exports.TokenBalanceType.ERC20 && contractAddressesOrOptions.pageKey) {\n                    params.push({\n                        pageKey: contractAddressesOrOptions.pageKey\n                    });\n                }\n                return provider._send(\"alchemy_getTokenBalances\", params, \"getTokenBalances\");\n            }\n        });\n    }\n    /**\r\n     * Returns the tokens that the specified address owns, along with the amount\r\n     * of each token and the relevant metadata.\r\n     *\r\n     * @param addressOrName The owner address to get the tokens with balances for.\r\n     * @param options Additional options to pass to the request.\r\n     * @public\r\n     */ getTokensForOwner(addressOrName, options) {\n        var _a;\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const address = yield provider._getAddress(addressOrName);\n            const params = [\n                address,\n                (_a = options === null || options === void 0 ? void 0 : options.contractAddresses) !== null && _a !== void 0 ? _a : exports.TokenBalanceType.ERC20\n            ];\n            if (options === null || options === void 0 ? void 0 : options.pageKey) {\n                params.push({\n                    pageKey: options.pageKey\n                });\n            }\n            const response = yield provider._send(\"alchemy_getTokenBalances\", params, \"getTokensForOwner\");\n            const formattedBalances = response.tokenBalances.map((balance)=>({\n                    contractAddress: balance.contractAddress,\n                    rawBalance: bignumber.BigNumber.from(balance.tokenBalance).toString()\n                }));\n            const metadataPromises = yield Promise.allSettled(response.tokenBalances.map((token)=>provider._send(\"alchemy_getTokenMetadata\", [\n                    token.contractAddress\n                ], \"getTokensForOwner\", /* forceBatch= */ true)));\n            const metadata = metadataPromises.map((p)=>p.status === \"fulfilled\" ? p.value : {\n                    name: null,\n                    symbol: null,\n                    decimals: null,\n                    logo: null\n                });\n            const ownedTokens = formattedBalances.map((balance, index)=>Object.assign(Object.assign(Object.assign({}, balance), metadata[index]), {\n                    balance: metadata[index].decimals !== null ? utils.formatUnits(balance.rawBalance, metadata[index].decimals) : undefined\n                }));\n            return {\n                tokens: ownedTokens.map((t)=>nullsToUndefined(t)),\n                pageKey: response.pageKey\n            };\n        });\n    }\n    /**\r\n     * Returns metadata for a given token contract address.\r\n     *\r\n     * @param address The contract address to get metadata for.\r\n     * @public\r\n     */ getTokenMetadata(address) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider._send(\"alchemy_getTokenMetadata\", [\n                address\n            ], \"getTokenMetadata\");\n        });\n    }\n    getAssetTransfers(params) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            return getAssetTransfers(this.config, params);\n        });\n    }\n    /**\r\n     * Gets all transaction receipts for a given block by number or block hash.\r\n     *\r\n     * @param params An object containing fields for the transaction receipt query.\r\n     * @public\r\n     */ getTransactionReceipts(params) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            return getTransactionReceipts(this.config, params);\n        });\n    }\n    /**\r\n     * Returns the underlying owner address for the provided ENS address, or `null`\r\n     * if the ENS name does not have an underlying address.\r\n     *\r\n     * @param name The ENS address name to resolve.\r\n     */ resolveName(name) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.resolveName(name);\n        });\n    }\n    /**\r\n     * Performs a reverse lookup of the address in ENS using the Reverse Registrar. If the name does not exist, or the forward lookup does not match, null is returned.\r\n     *\r\n     * An ENS name requires additional configuration to setup a reverse record, so not all ENS addresses will map back to the original ENS domain.\r\n     *\r\n     * @param address The address to look up the ENS domain name for.\r\n     */ lookupAddress(address) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.lookupAddress(address);\n        });\n    }\n}\n/**\r\n * Perform a binary search between an integer range of block numbers to find the\r\n * block number where the contract was deployed.\r\n *\r\n * @internal\r\n */ function binarySearchFirstBlock(start, end, address, config) {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        if (start >= end) {\n            return end;\n        }\n        const mid = Math.floor((start + end) / 2);\n        const provider = yield config.getProvider();\n        const code = yield provider.getCode(address, mid);\n        if (code === ETH_NULL_VALUE) {\n            return binarySearchFirstBlock(mid + 1, end, address, config);\n        }\n        return binarySearchFirstBlock(start, mid, address, config);\n    });\n}\n/**\r\n * The Debug namespace contains methods to access the non-standard RPC methods\r\n * for inspecting and debugging transactions.\r\n *\r\n * For more information on the different methods and use cases please read our\r\n * [documentation](https://docs.alchemy.com/reference/debug-api-quickstart).\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the debug namespace\r\n * via `alchemy.debug`.\r\n */ class DebugNamespace {\n    /** @internal */ constructor(config){\n        this.config = config;\n    }\n    traceCall(transaction, blockIdentifier, tracer) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const params = [\n                transaction,\n                blockIdentifier,\n                parseTracerParams(tracer)\n            ];\n            return provider._send(\"debug_traceCall\", params, \"traceCall\");\n        });\n    }\n    traceTransaction(transactionHash, tracer, timeout) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const params = [\n                transactionHash,\n                parseTracerParams(tracer, timeout)\n            ];\n            return provider._send(\"debug_traceTransaction\", params, \"traceTransaction\");\n        });\n    }\n    traceBlock(blockIdentifier, tracer) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            let method;\n            let params;\n            if (utils.isHexString(blockIdentifier, 32)) {\n                method = \"debug_traceBlockByHash\";\n                params = [\n                    blockIdentifier,\n                    parseTracerParams(tracer)\n                ];\n            } else {\n                method = \"debug_traceBlockByNumber\";\n                const block = typeof blockIdentifier === \"number\" ? utils.hexStripZeros(utils.hexValue(blockIdentifier)) : blockIdentifier;\n                params = [\n                    block,\n                    parseTracerParams(tracer)\n                ];\n            }\n            return provider._send(method, params, \"traceBlock\");\n        });\n    }\n}\nfunction parseTracerParams(tracer, timeout) {\n    return Object.assign({\n        tracer: tracer.type\n    }, tracer.onlyTopCall !== undefined && {\n        tracerConfig: {\n            onlyTopCall: tracer.onlyTopCall,\n            timeout\n        }\n    });\n}\nfunction sanitizeTokenType(tokenType) {\n    if (tokenType === exports.NftTokenType.ERC1155 || tokenType === exports.NftTokenType.ERC721) {\n        return tokenType;\n    }\n    return undefined;\n}\n/**\r\n * The SDK has 4 log levels and a 5th option for disabling all logging. By\r\n * default, the log level is set to INFO.\r\n *\r\n * The order is a follows: DEBUG < INFO < WARN < ERROR\r\n *\r\n * All log types above the current log level will be outputted.\r\n */ var LogLevel;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 4] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nconst logLevelStringToEnum = {\n    debug: LogLevel.DEBUG,\n    info: LogLevel.INFO,\n    warn: LogLevel.WARN,\n    error: LogLevel.ERROR,\n    silent: LogLevel.SILENT\n};\n// HACKY: Use the console method as a string rather than the function itself\n// in order to allow for mocking in tests.\nconst logLevelToConsoleFn = {\n    [LogLevel.DEBUG]: \"log\",\n    [LogLevel.INFO]: \"info\",\n    [LogLevel.WARN]: \"warn\",\n    [LogLevel.ERROR]: \"error\"\n};\nconst DEFAULT_LOG_LEVEL = LogLevel.INFO;\n/**\r\n * Configures the verbosity of logging. The default log level is `info`.\r\n *\r\n * @param logLevel - The verbosity of logging. Can be any of the following values:\r\n *\r\n *   - `debug`: The most verbose logging level.\r\n *   - `info`: The default logging level.\r\n *   - `warn`: A logging level for non-critical issues.\r\n *   - `error`: A logging level for critical issues.\r\n *   - `silent`: Turn off all logging.\r\n *\r\n * @public\r\n */ function setLogLevel(logLevel) {\n    loggerClient.logLevel = logLevelStringToEnum[logLevel];\n}\nfunction logDebug(message, ...args) {\n    loggerClient.debug(message, args);\n}\nfunction logInfo(message, ...args) {\n    loggerClient.info(message, args);\n}\nfunction logWarn(message, ...args) {\n    loggerClient.warn(message, args);\n}\nclass Logger {\n    constructor(){\n        /** The log level of the given Logger instance. */ this._logLevel = DEFAULT_LOG_LEVEL;\n    }\n    get logLevel() {\n        return this._logLevel;\n    }\n    set logLevel(val) {\n        if (!(val in LogLevel)) {\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n        }\n        this._logLevel = val;\n    }\n    debug(...args) {\n        this._log(LogLevel.DEBUG, ...args);\n    }\n    info(...args) {\n        this._log(LogLevel.INFO, ...args);\n    }\n    warn(...args) {\n        this._log(LogLevel.WARN, ...args);\n    }\n    error(...args) {\n        this._log(LogLevel.ERROR, ...args);\n    }\n    /**\r\n     * Forwards log messages to their corresponding console counterparts if the\r\n     * log level allows it.\r\n     */ _log(logLevel, ...args) {\n        if (logLevel < this._logLevel) {\n            return;\n        }\n        const now = new Date().toISOString();\n        const method = logLevelToConsoleFn[logLevel];\n        if (method) {\n            console[method](`[${now}] Alchemy:`, ...args.map(stringify));\n        } else {\n            throw new Error(`Logger received an invalid logLevel (value: ${logLevel})`);\n        }\n    }\n}\nfunction stringify(obj) {\n    if (typeof obj === \"string\") {\n        return obj;\n    } else {\n        try {\n            return JSON.stringify(obj);\n        } catch (e) {\n            // Failed to convert to JSON, log the object directly.\n            return obj;\n        }\n    }\n}\n// Instantiate default logger for the SDK.\nconst loggerClient = new Logger();\n// This file is autogenerated by injectVersion.js. Any changes will be\n// overwritten on commit!\nconst VERSION = \"3.1.0\";\n/**\r\n * Given a REST endpoint, method, and params, sends the request with axios and\r\n * returns the response.\r\n */ /**\r\n * Helper function to send http requests using Axis.\r\n *\r\n * @private\r\n */ function sendAxiosRequest(baseUrl, restApiName, methodName, params, overrides) {\n    var _a;\n    const requestUrl = baseUrl + \"/\" + restApiName;\n    const config = Object.assign(Object.assign({}, overrides), {\n        headers: Object.assign(Object.assign(Object.assign({}, overrides === null || overrides === void 0 ? void 0 : overrides.headers), !IS_BROWSER && {\n            \"Accept-Encoding\": \"gzip\"\n        }), {\n            \"Alchemy-Ethers-Sdk-Version\": VERSION,\n            \"Alchemy-Ethers-Sdk-Method\": methodName\n        }),\n        method: (_a = overrides === null || overrides === void 0 ? void 0 : overrides.method) !== null && _a !== void 0 ? _a : \"GET\",\n        url: requestUrl,\n        params\n    });\n    return axios__default[\"default\"](config);\n}\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\nconst DEFAULT_BACKOFF_MULTIPLIER = 1.5;\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 30 * 1000;\nconst DEFAULT_BACKOFF_MAX_ATTEMPTS = 5;\n/**\r\n * Helper class for implementing exponential backoff and max retry attempts.\r\n *\r\n * @private\r\n * @internal\r\n */ class ExponentialBackoff {\n    constructor(maxAttempts = DEFAULT_BACKOFF_MAX_ATTEMPTS){\n        this.maxAttempts = maxAttempts;\n        this.initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n        this.backoffMultiplier = DEFAULT_BACKOFF_MULTIPLIER;\n        this.maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;\n        this.numAttempts = 0;\n        this.currentDelayMs = 0;\n        this.isInBackoff = false;\n    }\n    /**\r\n     * Returns a promise that resolves after the the backoff delay. The delay is\r\n     * increased for each attempt. The promise is rejected if the maximum number\r\n     * of attempts is exceeded.\r\n     */ // TODO: beautify this into an async iterator.\n    backoff() {\n        if (this.numAttempts >= this.maxAttempts) {\n            return Promise.reject(new Error(`Exceeded maximum number of attempts: ${this.maxAttempts}`));\n        }\n        if (this.isInBackoff) {\n            return Promise.reject(new Error(\"A backoff operation is already in progress\"));\n        }\n        const backoffDelayWithJitterMs = this.withJitterMs(this.currentDelayMs);\n        if (backoffDelayWithJitterMs > 0) {\n            logDebug(\"ExponentialBackoff.backoff\", `Backing off for ${backoffDelayWithJitterMs}ms`);\n        }\n        // Calculate the next delay.\n        this.currentDelayMs *= this.backoffMultiplier;\n        this.currentDelayMs = Math.max(this.currentDelayMs, this.initialDelayMs);\n        this.currentDelayMs = Math.min(this.currentDelayMs, this.maxDelayMs);\n        this.numAttempts += 1;\n        return new Promise((resolve)=>{\n            this.isInBackoff = true;\n            setTimeout(()=>{\n                this.isInBackoff = false;\n                resolve();\n            }, backoffDelayWithJitterMs);\n        });\n    }\n    /**\r\n     * Applies +/- 50% jitter to the backoff delay, up to the max delay cap.\r\n     *\r\n     * @private\r\n     * @param delayMs\r\n     */ withJitterMs(delayMs) {\n        return Math.min(delayMs + (Math.random() - 0.5) * delayMs, this.maxDelayMs);\n    }\n}\n/**\r\n * A wrapper function to make http requests and retry if the request fails.\r\n *\r\n * @internal\r\n */ // TODO: Wrap Axios error in AlchemyError.\nfunction requestHttpWithBackoff(config, apiType, restApiName, methodName, params, overrides) {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        let lastError = undefined;\n        const backoff = new ExponentialBackoff(config.maxRetries);\n        for(let attempt = 0; attempt < config.maxRetries + 1; attempt++){\n            try {\n                if (lastError !== undefined) {\n                    logInfo(\"requestHttp\", `Retrying after error: ${lastError.message}`);\n                }\n                try {\n                    yield backoff.backoff();\n                } catch (err) {\n                    break;\n                }\n                const response = yield sendAxiosRequest(config._getRequestUrl(apiType), restApiName, methodName, params, Object.assign(Object.assign({}, overrides), {\n                    timeout: config.requestTimeout\n                }));\n                if (response.status === 200) {\n                    logDebug(restApiName, `Successful request: ${restApiName}`);\n                    return response.data;\n                } else {\n                    logInfo(restApiName, `Request failed: ${restApiName}, ${response.status}, ${response.data}`);\n                    lastError = new Error(response.status + \": \" + response.data);\n                }\n            } catch (err) {\n                if (!axios__default[\"default\"].isAxiosError(err) || err.response === undefined) {\n                    throw err;\n                }\n                // TODO: Standardize all errors into AlchemyError\n                lastError = new Error(err.response.status + \": \" + err.response.data);\n                if (!isRetryableHttpError(err, apiType)) {\n                    break;\n                }\n            }\n        }\n        return Promise.reject(lastError);\n    });\n}\nfunction isRetryableHttpError(err, apiType) {\n    // TODO: remove 500s after webhooks are more stable.\n    const retryableCodes = apiType === AlchemyApiType.WEBHOOK ? [\n        429,\n        500\n    ] : [\n        429\n    ];\n    return err.response !== undefined && retryableCodes.includes(err.response.status);\n}\n/**\r\n * Fetches all pages in a paginated endpoint, given a `pageKey` field that\r\n * represents the property name containing the next page token.\r\n *\r\n * @internal\r\n */ function paginateEndpoint(config, apiType, restApiName, methodName, reqPageKey, resPageKey, params) {\n    return __asyncGenerator(this, arguments, function* paginateEndpoint_1() {\n        let hasNext = true;\n        const requestParams = Object.assign({}, params);\n        while(hasNext){\n            const response = yield __await(requestHttpWithBackoff(config, apiType, restApiName, methodName, requestParams));\n            yield yield __await(response);\n            if (response[resPageKey] !== null) {\n                requestParams[reqPageKey] = response[resPageKey];\n            } else {\n                hasNext = false;\n            }\n        }\n    });\n}\n/**\r\n * This file contains the underlying implementations for exposed API surface in\r\n * the {@link NftNamespace}. By moving the methods out into a separate file,\r\n * other namespaces can access these methods without depending on the entire\r\n * NftNamespace.\r\n */ /**\r\n * Get the NFT metadata for the provided contract address.\r\n */ function getNftMetadata(config, contractAddress, tokenId, options, srcMethod = \"getNftMetadata\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getNFTMetadata\", srcMethod, {\n            contractAddress,\n            tokenId: bignumber.BigNumber.from(tokenId).toString(),\n            tokenType: sanitizeTokenType(options === null || options === void 0 ? void 0 : options.tokenType),\n            tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\n            refreshCache: options === null || options === void 0 ? void 0 : options.refreshCache\n        });\n        return getNftFromRaw(response);\n    });\n}\nfunction getNftMetadataBatch(config, tokens, options) {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const data = {\n            tokens,\n            tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\n            refreshCache: options === null || options === void 0 ? void 0 : options.refreshCache\n        };\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getNFTMetadataBatch\", \"getNftMetadataBatch\", {}, {\n            method: \"POST\",\n            data\n        });\n        return {\n            nfts: response.nfts.map((nft)=>getNftFromRaw(nft))\n        };\n    });\n}\nfunction getContractMetadata(config, contractAddress, srcMethod = \"getContractMetadata\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getContractMetadata\", srcMethod, {\n            contractAddress\n        });\n        return getNftContractFromRaw(response);\n    });\n}\nfunction getContractMetadataBatch(config, contractAddresses) {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getContractMetadataBatch\", \"getContractMetadataBatch\", {}, {\n            method: \"POST\",\n            data: {\n                contractAddresses\n            }\n        });\n        return {\n            contracts: response.contracts.map(getNftContractFromRaw)\n        };\n    });\n}\nfunction getCollectionMetadata(config, collectionSlug, srcMethod = \"getCollectionMetadata\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getCollectionMetadata\", srcMethod, {\n            collectionSlug\n        });\n        return getNftCollectionFromRaw(response);\n    });\n}\nfunction getNftsForOwnerIterator(config, owner, options, srcMethod = \"getNftsForOwnerIterator\") {\n    return __asyncGenerator(this, arguments, function* getNftsForOwnerIterator_1() {\n        var e_1, _a;\n        const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n        try {\n            for(var _b = __asyncValues(paginateEndpoint(config, AlchemyApiType.NFT, \"getNFTsForOwner\", srcMethod, \"pageKey\", \"pageKey\", {\n                contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n                pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\n                excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,\n                includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,\n                owner,\n                withMetadata,\n                tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\n                orderBy: options === null || options === void 0 ? void 0 : options.orderBy\n            })), _c; _c = yield __await(_b.next()), !_c.done;){\n                const response = _c.value;\n                for (const ownedNft of response.ownedNfts){\n                    yield yield __await(Object.assign(Object.assign({}, nftFromGetNftResponse(ownedNft)), {\n                        balance: ownedNft.balance\n                    }));\n                }\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n    });\n}\nfunction getNftsForOwner(config, owner, options, srcMethod = \"getNftsForOwner\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getNFTsForOwner\", srcMethod, {\n            contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n            pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\n            excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,\n            includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,\n            owner,\n            pageSize: options === null || options === void 0 ? void 0 : options.pageSize,\n            withMetadata,\n            tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\n            orderBy: options === null || options === void 0 ? void 0 : options.orderBy\n        });\n        if (withMetadata) {\n            return nullsToUndefined({\n                ownedNfts: response.ownedNfts.map((res)=>Object.assign(Object.assign({}, getNftFromRaw(res)), {\n                        balance: res.balance\n                    })),\n                pageKey: response.pageKey,\n                totalCount: response.totalCount,\n                validAt: response.validAt\n            });\n        }\n        return nullsToUndefined({\n            ownedNfts: response.ownedNfts.map((res)=>Object.assign(Object.assign({}, getBaseNftFromRaw(res)), {\n                    balance: res.balance\n                })),\n            pageKey: response.pageKey,\n            totalCount: response.totalCount,\n            validAt: response.validAt\n        });\n    });\n}\nfunction getNftsForContract(config, contractAddress, options, srcMethod = \"getNftsForContract\") {\n    var _a;\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getNFTsForContract\", srcMethod, {\n            contractAddress,\n            pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\n            withMetadata,\n            limit: (_a = options === null || options === void 0 ? void 0 : options.pageSize) !== null && _a !== void 0 ? _a : undefined,\n            tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs\n        });\n        if (withMetadata) {\n            return nullsToUndefined({\n                nfts: response.nfts.map((res)=>getNftFromRaw(res)),\n                pageKey: response.pageKey\n            });\n        }\n        return nullsToUndefined({\n            nfts: response.nfts.map((res)=>getBaseNftFromRaw(res, contractAddress)),\n            pageKey: response.pageKey\n        });\n    });\n}\nfunction getNftsForContractIterator(config, contractAddress, options, srcMethod = \"getNftsForContractIterator\") {\n    return __asyncGenerator(this, arguments, function* getNftsForContractIterator_1() {\n        var e_2, _a;\n        const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n        try {\n            for(var _b = __asyncValues(paginateEndpoint(config, AlchemyApiType.NFT, \"getNFTsForContract\", srcMethod, \"pageKey\", \"pageKey\", {\n                contractAddress,\n                pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\n                withMetadata\n            })), _c; _c = yield __await(_b.next()), !_c.done;){\n                const response = _c.value;\n                for (const nft of response.nfts){\n                    yield yield __await(nftFromGetNftContractResponse(nft, contractAddress));\n                }\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n    });\n}\nfunction getOwnersForContract(config, contractAddress, options, srcMethod = \"getOwnersForContract\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        // Cast to `any` to avoid more type wrangling.\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getOwnersForContract\", srcMethod, Object.assign(Object.assign({}, options), {\n            contractAddress\n        }));\n        if (options === null || options === void 0 ? void 0 : options.withTokenBalances) {\n            return nullsToUndefined({\n                owners: response.owners,\n                pageKey: response.pageKey\n            });\n        }\n        return nullsToUndefined({\n            owners: response.owners,\n            pageKey: response.pageKey\n        });\n    });\n}\nfunction getContractsForOwner(config, owner, options, srcMethod = \"getContractsForOwner\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getContractsForOwner\", srcMethod, {\n            owner,\n            excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,\n            includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,\n            pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\n            pageSize: options === null || options === void 0 ? void 0 : options.pageSize,\n            orderBy: options === null || options === void 0 ? void 0 : options.orderBy\n        });\n        return nullsToUndefined({\n            contracts: response.contracts.map(getNftContractsForOwnerFromRaw),\n            pageKey: response.pageKey,\n            totalCount: response.totalCount\n        });\n    });\n}\nfunction getOwnersForNft(config, contractAddress, tokenId, options, srcMethod = \"getOwnersForNft\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        return requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getOwnersForNFT\", srcMethod, Object.assign({\n            contractAddress,\n            tokenId: bignumber.BigNumber.from(tokenId).toString()\n        }, options));\n    });\n}\nfunction getMintedNfts(config, owner, options) {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const provider = yield config.getProvider();\n        const ownerAddress = yield provider._getAddress(owner);\n        const category = nftTokenTypeToCategory(options === null || options === void 0 ? void 0 : options.tokenType);\n        const params = {\n            fromBlock: \"0x0\",\n            fromAddress: ETH_NULL_ADDRESS,\n            toAddress: ownerAddress,\n            excludeZeroValue: true,\n            contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n            category,\n            maxCount: 100,\n            pageKey: options === null || options === void 0 ? void 0 : options.pageKey\n        };\n        const response = yield getAssetTransfers(config, params, \"getMintedNfts\");\n        return getNftsForTransfers(config, response);\n    });\n}\nfunction getTransfersForOwner(config, owner, transferType, options) {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const provider = yield config.getProvider();\n        const ownerAddress = yield provider._getAddress(owner);\n        const category = nftTokenTypeToCategory(options === null || options === void 0 ? void 0 : options.tokenType);\n        const params = {\n            fromBlock: \"0x0\",\n            excludeZeroValue: true,\n            contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n            category,\n            maxCount: 100,\n            pageKey: options === null || options === void 0 ? void 0 : options.pageKey\n        };\n        if (transferType === exports.GetTransfersForOwnerTransferType.TO) {\n            params.toAddress = ownerAddress;\n        } else {\n            params.fromAddress = ownerAddress;\n        }\n        const transfersResponse = yield getAssetTransfers(config, params, \"getTransfersForOwner\");\n        return getNftsForTransfers(config, transfersResponse);\n    });\n}\nfunction getTransfersForContract(config, contract, options) {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const category = [\n            exports.AssetTransfersCategory.ERC721,\n            exports.AssetTransfersCategory.ERC1155,\n            exports.AssetTransfersCategory.SPECIALNFT\n        ];\n        const provider = yield config.getProvider();\n        const fromBlock = (options === null || options === void 0 ? void 0 : options.fromBlock) ? provider.formatter.blockTag((yield provider._getBlockTag(options.fromBlock))) : \"0x0\";\n        const toBlock = (options === null || options === void 0 ? void 0 : options.toBlock) ? provider.formatter.blockTag((yield provider._getBlockTag(options.toBlock))) : undefined;\n        const params = {\n            fromBlock,\n            toBlock,\n            excludeZeroValue: true,\n            contractAddresses: [\n                contract\n            ],\n            order: options === null || options === void 0 ? void 0 : options.order,\n            category,\n            maxCount: 100,\n            pageKey: options === null || options === void 0 ? void 0 : options.pageKey\n        };\n        const transfersResponse = yield getAssetTransfers(config, params, \"getTransfersForContract\");\n        return getNftsForTransfers(config, transfersResponse);\n    });\n}\nfunction nftTokenTypeToCategory(tokenType) {\n    switch(tokenType){\n        case exports.NftTokenType.ERC721:\n            return [\n                exports.AssetTransfersCategory.ERC721\n            ];\n        case exports.NftTokenType.ERC1155:\n            return [\n                exports.AssetTransfersCategory.ERC1155\n            ];\n        default:\n            return [\n                exports.AssetTransfersCategory.ERC721,\n                exports.AssetTransfersCategory.ERC1155,\n                exports.AssetTransfersCategory.SPECIALNFT\n            ];\n    }\n}\nfunction parse1155Transfer(transfer) {\n    return transfer.erc1155Metadata.map((metadata)=>({\n            contractAddress: transfer.rawContract.address,\n            tokenId: metadata.tokenId,\n            tokenType: exports.NftTokenType.ERC1155\n        }));\n}\nfunction verifyNftOwnership(config, owner, contractAddresses, srcMethod = \"verifyNftOwnership\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        if (typeof contractAddresses === \"string\") {\n            const response = yield getNftsForOwner(config, owner, {\n                contractAddresses: [\n                    contractAddresses\n                ],\n                omitMetadata: true\n            }, srcMethod);\n            return response.ownedNfts.length > 0;\n        } else {\n            if (contractAddresses.length === 0) {\n                throw new Error(\"Must provide at least one contract address\");\n            }\n            const response = yield getNftsForOwner(config, owner, {\n                contractAddresses,\n                omitMetadata: true\n            }, srcMethod);\n            // Create map where all input contract addresses are set to false, then flip\n            // owned nfts to true.\n            const result = contractAddresses.reduce((acc, curr)=>{\n                acc[curr] = false;\n                return acc;\n            }, {});\n            for (const nft of response.ownedNfts){\n                result[nft.contractAddress] = true;\n            }\n            return result;\n        }\n    });\n}\nfunction isSpamContract(config, contractAddress, srcMethod = \"isSpamContract\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        return requestHttpWithBackoff(config, AlchemyApiType.NFT, \"isSpamContract\", srcMethod, {\n            contractAddress\n        });\n    });\n}\nfunction getSpamContracts(config, srcMethod = \"getSpamContracts\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        return requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getSpamContracts\", srcMethod, undefined);\n    });\n}\nfunction getFloorPrice(config, contractAddress, srcMethod = \"getFloorPrice\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getFloorPrice\", srcMethod, {\n            contractAddress\n        });\n        return nullsToUndefined(response);\n    });\n}\nfunction getNftSales(config, options = {}, srcMethod = \"getNftSales\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        // Avoid ts compiler complaining about the contractAddress field.\n        const params = Object.assign({}, options);\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getNFTSales\", srcMethod, {\n            fromBlock: params === null || params === void 0 ? void 0 : params.fromBlock,\n            toBlock: params === null || params === void 0 ? void 0 : params.toBlock,\n            order: params === null || params === void 0 ? void 0 : params.order,\n            marketplace: params === null || params === void 0 ? void 0 : params.marketplace,\n            contractAddress: params === null || params === void 0 ? void 0 : params.contractAddress,\n            tokenId: (params === null || params === void 0 ? void 0 : params.tokenId) ? bignumber.BigNumber.from(params === null || params === void 0 ? void 0 : params.tokenId).toString() : undefined,\n            sellerAddress: params === null || params === void 0 ? void 0 : params.sellerAddress,\n            buyerAddress: params === null || params === void 0 ? void 0 : params.buyerAddress,\n            taker: params === null || params === void 0 ? void 0 : params.taker,\n            limit: params === null || params === void 0 ? void 0 : params.limit,\n            pageKey: params === null || params === void 0 ? void 0 : params.pageKey\n        });\n        return getNftSalesFromRaw(response);\n    });\n}\nfunction computeRarity(config, contractAddress, tokenId, srcMethod = \"computeRarity\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"computeRarity\", srcMethod, {\n            contractAddress,\n            tokenId: bignumber.BigNumber.from(tokenId).toString()\n        });\n        return nullsToUndefined(response);\n    });\n}\nfunction searchContractMetadata(config, query, srcMethod = \"searchContractMetadata\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"searchContractMetadata\", srcMethod, {\n            query\n        });\n        return {\n            contracts: response.contracts.map(getNftContractFromRaw)\n        };\n    });\n}\nfunction summarizeNftAttributes(config, contractAddress, srcMethod = \"summarizeNftAttributes\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        return requestHttpWithBackoff(config, AlchemyApiType.NFT, \"summarizeNFTAttributes\", srcMethod, {\n            contractAddress\n        });\n    });\n}\nfunction refreshNftMetadata(config, contractAddress, tokenId, srcMethod = \"refreshNftMetadata\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const tokenIdString = bignumber.BigNumber.from(tokenId).toString();\n        const first = yield getNftMetadata(config, contractAddress, tokenIdString, undefined, srcMethod);\n        const second = yield refresh(config, contractAddress, tokenIdString, srcMethod);\n        return first.timeLastUpdated !== second.timeLastUpdated;\n    });\n}\nfunction refreshContract(config, contractAddress, srcMethod = \"refreshContract\") {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"reingestContract\", srcMethod, {\n            contractAddress\n        });\n        return {\n            contractAddress: response.contractAddress,\n            refreshState: parseReingestionState(response.reingestionState),\n            progress: response.progress\n        };\n    });\n}\nfunction refresh(config, contractAddress, tokenId, srcMethod) {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, \"getNFTMetadata\", srcMethod, {\n            contractAddress,\n            tokenId: bignumber.BigNumber.from(tokenId).toString(),\n            refreshCache: true\n        });\n        return getNftFromRaw(response);\n    });\n}\n/**\r\n * Helper method to convert a NFT response received from Alchemy backend to an\r\n * SDK NFT type.\r\n *\r\n * @internal\r\n */ function nftFromGetNftResponse(ownedNft) {\n    if (isNftWithMetadata(ownedNft)) {\n        return getNftFromRaw(ownedNft);\n    } else {\n        return getBaseNftFromRaw(ownedNft);\n    }\n}\n/**\r\n * Helper method to convert a NFT response received from Alchemy backend to an\r\n * SDK NFT type.\r\n *\r\n * @internal\r\n */ function nftFromGetNftContractResponse(ownedNft, contractAddress) {\n    if (isNftWithMetadata(ownedNft)) {\n        return getNftFromRaw(ownedNft);\n    } else {\n        return getBaseNftFromRaw(ownedNft, contractAddress);\n    }\n}\n/** @internal */ // TODO: more comprehensive type check\nfunction isNftWithMetadata(response) {\n    return response.name !== undefined;\n}\n/**\r\n * Given an AssetTransfersResponse, fetches the NFTs associated with the\r\n * transfers and collates them with transfer metadata.\r\n *\r\n * VISIBLE FOR TESTING\r\n */ function getNftsForTransfers(config, response) {\n    return __awaiter$1(this, void 0, void 0, function*() {\n        const metadataTransfers = response.transfers.filter((transfer)=>transfer.rawContract.address !== null)// Use flatMap to flatten 1155 transfers that contain multiple NFTs.\n        .flatMap((transfer)=>{\n            var _a;\n            const tokens = getTokensFromTransfer(transfer);\n            const metadata = {\n                from: transfer.from,\n                to: (_a = transfer.to) !== null && _a !== void 0 ? _a : undefined,\n                transactionHash: transfer.hash,\n                blockNumber: transfer.blockNum\n            };\n            return tokens.map((token)=>({\n                    metadata,\n                    token\n                }));\n        });\n        if (metadataTransfers.length === 0) {\n            return {\n                nfts: []\n            };\n        }\n        // If we have more than 100 elements after unrolling 1155 transfers, split\n        // transfers into batches of 100 to stay under endpoint batch size limit.\n        const batchSize = 100;\n        const requestBatches = [];\n        for(let i = 0; i < metadataTransfers.length; i += batchSize){\n            requestBatches.push(metadataTransfers.slice(i, i + batchSize));\n        }\n        const responseBatches = yield Promise.all(requestBatches.map((batch)=>getNftMetadataBatch(config, batch.map((transfer)=>transfer.token))));\n        const nfts = responseBatches.map((r)=>r.nfts).flat();\n        // The same NFT can be transferred multiple times in the same transfers response.\n        // We want to return one NFT for each transfer, so we create a mapping for\n        // each NFT to pair with the transfer metadata.\n        const nftsByTokenId = new Map();\n        nfts.forEach((nft)=>{\n            const key = `${nft.contract.address.toLowerCase()}-${bignumber.BigNumber.from(nft.tokenId).toString()}`;\n            nftsByTokenId.set(key, nft);\n        });\n        const transferredNfts = metadataTransfers.map((t)=>{\n            const key = `${t.token.contractAddress.toLowerCase()}-${bignumber.BigNumber.from(t.token.tokenId).toString()}`;\n            return Object.assign(Object.assign({}, nftsByTokenId.get(key)), t.metadata);\n        });\n        return {\n            nfts: transferredNfts,\n            pageKey: response.pageKey\n        };\n    });\n}\n/**\r\n * Returns the underlying NFT tokens from a transfer as the params for a\r\n * `getNftMetadataBatch` call. Handles the 1155 case where multiple NFTs can be\r\n * transferred in a single transaction.\r\n */ function getTokensFromTransfer(transfer) {\n    // ERC1155 NFTs can contain multiple tokens in a single transfer, which\n    // requires special logic.\n    if (transfer.category === exports.AssetTransfersCategory.ERC1155) {\n        return parse1155Transfer(transfer);\n    } else {\n        return [\n            {\n                contractAddress: transfer.rawContract.address,\n                tokenId: transfer.tokenId,\n                tokenType: transfer.category === exports.AssetTransfersCategory.ERC721 ? exports.NftTokenType.ERC721 : undefined\n            }\n        ];\n    }\n}\n/**\r\n * Flips the `omitMetadata` SDK parameter type to the `withMetadata` parameter\r\n * required by the Alchemy API. If `omitMetadata` is undefined, the SDK defaults\r\n * to including metadata.\r\n *\r\n * @internal\r\n */ function omitMetadataToWithMetadata(omitMetadata) {\n    return omitMetadata === undefined ? true : !omitMetadata;\n}\nfunction parseReingestionState(reingestionState) {\n    switch(reingestionState){\n        case \"does_not_exist\":\n            return exports.NftRefreshState.DOES_NOT_EXIST;\n        case \"already_queued\":\n            return exports.NftRefreshState.ALREADY_QUEUED;\n        case \"in_progress\":\n            return exports.NftRefreshState.IN_PROGRESS;\n        case \"finished\":\n            return exports.NftRefreshState.FINISHED;\n        case \"queued\":\n            return exports.NftRefreshState.QUEUED;\n        case \"queue_failed\":\n            return exports.NftRefreshState.QUEUE_FAILED;\n        default:\n            throw new Error(\"Unknown reingestion state: \" + reingestionState);\n    }\n}\n/**\r\n * The NFT namespace contains all the functionality related to NFTs.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.nft`.\r\n */ class NftNamespace {\n    /** @internal */ constructor(config){\n        this.config = config;\n    }\n    getNftMetadata(contractAddress, tokenId, optionsOrTokenType, tokenUriTimeoutInMs) {\n        let options;\n        if (typeof optionsOrTokenType === \"object\") {\n            options = {\n                tokenType: optionsOrTokenType.tokenType,\n                tokenUriTimeoutInMs: optionsOrTokenType.tokenUriTimeoutInMs,\n                refreshCache: optionsOrTokenType.refreshCache\n            };\n        } else {\n            options = {\n                tokenType: optionsOrTokenType,\n                tokenUriTimeoutInMs\n            };\n        }\n        return getNftMetadata(this.config, contractAddress, tokenId, options);\n    }\n    /**\r\n     * Gets the NFT metadata for multiple NFT tokens.\r\n     *\r\n     * @param tokens An array of NFT tokens to fetch metadata for.\r\n     * @param options Configuration options for making the request.\r\n     */ getNftMetadataBatch(tokens, options) {\n        return getNftMetadataBatch(this.config, tokens, options);\n    }\n    /**\r\n     * Get the NFT contract metadata associated with the provided parameters.\r\n     *\r\n     * @param contractAddress - The contract address of the NFT.\r\n     * @public\r\n     */ getContractMetadata(contractAddress) {\n        return getContractMetadata(this.config, contractAddress);\n    }\n    /**\r\n     * Get the NFT contract metadata for multiple NFT contracts in a single request.\r\n     *\r\n     * @param contractAddresses - An array of contract addresses to fetch metadata for.\r\n     */ getContractMetadataBatch(contractAddresses) {\n        return getContractMetadataBatch(this.config, contractAddresses);\n    }\n    /**\r\n     * Get the NFT collection metadata associated with the provided parameters.\r\n     *\r\n     * @param collectionSlug - The OpenSea collection slug of the NFT.\r\n     * @beta\r\n     */ getCollectionMetadata(collectionSlug) {\n        return getCollectionMetadata(this.config, collectionSlug);\n    }\n    getNftsForOwnerIterator(owner, options) {\n        return getNftsForOwnerIterator(this.config, owner, options);\n    }\n    getNftsForOwner(owner, options) {\n        return getNftsForOwner(this.config, owner, options);\n    }\n    getNftsForContract(contractAddress, options) {\n        return getNftsForContract(this.config, contractAddress, options);\n    }\n    getNftsForContractIterator(contractAddress, options) {\n        return getNftsForContractIterator(this.config, contractAddress, options);\n    }\n    getOwnersForContract(contractAddress, options) {\n        return getOwnersForContract(this.config, contractAddress, options);\n    }\n    /**\r\n     * Gets all the owners for a given NFT contract address and token ID.\r\n     *\r\n     * @param contractAddress - The NFT contract address.\r\n     * @param tokenId - Token id of the NFT.\r\n     * @param options - Optional parameters to use for the request.\r\n     * @beta\r\n     */ getOwnersForNft(contractAddress, tokenId, options) {\n        return getOwnersForNft(this.config, contractAddress, tokenId, options);\n    }\n    /**\r\n     * Gets all NFT contracts held by the specified owner address.\r\n     *\r\n     * @param owner - Address for NFT owner (can be in ENS format!).\r\n     * @param options - The optional parameters to use for the request.\r\n     * @public\r\n     */ // TODO(v3): Add overload for withMetadata=false\n    getContractsForOwner(owner, options) {\n        return getContractsForOwner(this.config, owner, options);\n    }\n    /**\r\n     * Gets all NFT transfers for a given owner's address.\r\n     *\r\n     * @param owner The owner to get transfers for.\r\n     * @param category Whether to get transfers to or from the owner address.\r\n     * @param options Additional options for the request.\r\n     */ getTransfersForOwner(owner, category, options) {\n        return getTransfersForOwner(this.config, owner, category, options);\n    }\n    /**\r\n     * Gets all NFT transfers for a given NFT contract address.\r\n     *\r\n     * Defaults to all transfers for the contract. To get transfers for a specific\r\n     * block range, use {@link GetTransfersForContractOptions}.\r\n     *\r\n     * @param contract The NFT contract to get transfers for.\r\n     * @param options Additional options for the request.\r\n     */ getTransfersForContract(contract, options) {\n        return getTransfersForContract(this.config, contract, options);\n    }\n    /**\r\n     * Get all the NFTs minted by a specified owner address.\r\n     *\r\n     * @param owner - Address for the NFT owner (can be in ENS format).\r\n     * @param options - The optional parameters to use for the request.\r\n     */ getMintedNfts(owner, options) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            return getMintedNfts(this.config, owner, options);\n        });\n    }\n    verifyNftOwnership(owner, contractAddress) {\n        return verifyNftOwnership(this.config, owner, contractAddress);\n    }\n    /**\r\n     * Returns whether a contract is marked as spam or not by Alchemy. For more\r\n     * information on how we classify spam, go to our NFT API FAQ at\r\n     * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\r\n     *\r\n     * @param contractAddress - The contract address to check.\r\n     * @beta\r\n     */ isSpamContract(contractAddress) {\n        return isSpamContract(this.config, contractAddress);\n    }\n    /**\r\n     * Returns a list of all spam contracts marked by Alchemy. For details on how\r\n     * Alchemy marks spam contracts, go to\r\n     * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\r\n     *\r\n     * @beta\r\n     */ getSpamContracts() {\n        return getSpamContracts(this.config);\n    }\n    /**\r\n     * Returns the floor prices of a NFT contract by marketplace.\r\n     *\r\n     * @param contractAddress - The contract address for the NFT collection.\r\n     * @beta\r\n     */ getFloorPrice(contractAddress) {\n        return getFloorPrice(this.config, contractAddress);\n    }\n    getNftSales(options) {\n        return getNftSales(this.config, options);\n    }\n    /**\r\n     * Get the rarity of each attribute of an NFT.\r\n     *\r\n     * @param contractAddress - Contract address for the NFT collection.\r\n     * @param tokenId - Token id of the NFT.\r\n     */ computeRarity(contractAddress, tokenId) {\n        return computeRarity(this.config, contractAddress, tokenId);\n    }\n    /**\r\n     * Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts.\r\n     *\r\n     * @param query - The search string that you want to search for in contract metadata.\r\n     */ searchContractMetadata(query) {\n        return searchContractMetadata(this.config, query);\n    }\n    /**\r\n     * Get a summary of attribute prevalence for an NFT collection.\r\n     *\r\n     * @param contractAddress - Contract address for the NFT collection.\r\n     */ summarizeNftAttributes(contractAddress) {\n        return summarizeNftAttributes(this.config, contractAddress);\n    }\n    /**\r\n     * Refreshes the cached metadata for a provided NFT contract address and token\r\n     * id. Returns a boolean value indicating whether the metadata was refreshed.\r\n     *\r\n     * This method is useful when you want to refresh the metadata for a NFT that\r\n     * has been updated since the last time it was fetched. Note that the backend\r\n     * only allows one refresh per token every 15 minutes, globally for all users.\r\n     * The last refresh time for an NFT can be accessed on the\r\n     * {@link Nft.timeLastUpdated} field.\r\n     *\r\n     * To trigger a refresh for all NFTs in a contract, use {@link refreshContract} instead.\r\n     *\r\n     * @param contractAddress - The contract address of the NFT.\r\n     * @param tokenId - The token id of the NFT.\r\n     */ refreshNftMetadata(contractAddress, tokenId) {\n        return refreshNftMetadata(this.config, contractAddress, tokenId);\n    }\n    /**\r\n     * Triggers a metadata refresh all NFTs in the provided contract address. This\r\n     * method is useful after an NFT collection is revealed.\r\n     *\r\n     * Refreshes are queued on the Alchemy backend and may take time to fully\r\n     * process. To refresh the metadata for a specific token, use the\r\n     * {@link refreshNftMetadata} method instead.\r\n     *\r\n     * @param contractAddress - The contract address of the NFT collection.\r\n     * @beta\r\n     */ refreshContract(contractAddress) {\n        return refreshContract(this.config, contractAddress);\n    }\n}\n/**\r\n * The Notify namespace contains methods used for creating, reading, updating,\r\n * and deleting webhooks in the Notify API.\r\n *\r\n * To use the methods in the API, you must provide your team's auth token in the\r\n * {@link AlchemySettings.authToken} field when configuring\r\n * {@link AlchemySettings}. The auth token can be found in the Alchemy Dashboard\r\n * on the Notify tab.\r\n *\r\n * Note that not all networks are supported in the Notify API. Please consult\r\n * the documentation for which networks are supported.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the notify\r\n * namespace via `alchemy.notify`.\r\n */ class NotifyNamespace {\n    /** @internal */ constructor(config){\n        this.config = config;\n    }\n    /**\r\n     * Get all webhooks on your team.\r\n     *\r\n     * The team is determined by the `authToken` provided into the {@link AlchemySettings}\r\n     * object when creating a new {@link Alchemy} instance.\r\n     *\r\n     * This method returns a response object containing all the webhooks\r\n     */ getAllWebhooks() {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            this.verifyConfig();\n            const response = yield this.sendWebhookRequest(\"team-webhooks\", \"getAllWebhooks\", {});\n            return {\n                webhooks: parseRawWebhookResponse(response),\n                totalCount: response.data.length\n            };\n        });\n    }\n    getAddresses(webhookOrId, options) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            this.verifyConfig();\n            const webhookId = typeof webhookOrId === \"string\" ? webhookOrId : webhookOrId.id;\n            const response = yield this.sendWebhookRequest(\"webhook-addresses\", \"getAddresses\", {\n                webhook_id: webhookId,\n                limit: options === null || options === void 0 ? void 0 : options.limit,\n                after: options === null || options === void 0 ? void 0 : options.pageKey\n            });\n            return parseRawAddressActivityResponse(response);\n        });\n    }\n    getGraphqlQuery(webhookOrId) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            this.verifyConfig();\n            const webhookId = typeof webhookOrId === \"string\" ? webhookOrId : webhookOrId.id;\n            const response = yield this.sendWebhookRequest(\"dashboard-webhook-graphql-query\", \"getGraphqlQuery\", {\n                webhook_id: webhookId\n            });\n            return parseRawCustomGraphqlWebhookResponse(response);\n        });\n    }\n    getNftFilters(webhookOrId, options) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            this.verifyConfig();\n            const webhookId = typeof webhookOrId === \"string\" ? webhookOrId : webhookOrId.id;\n            const response = yield this.sendWebhookRequest(\"webhook-nft-filters\", \"getNftFilters\", {\n                webhook_id: webhookId,\n                limit: options === null || options === void 0 ? void 0 : options.limit,\n                after: options === null || options === void 0 ? void 0 : options.pageKey\n            });\n            return parseRawNftFiltersResponse(response);\n        });\n    }\n    updateWebhook(webhookOrId, update) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const webhookId = typeof webhookOrId === \"string\" ? webhookOrId : webhookOrId.id;\n            let restApiName;\n            let methodName;\n            let method;\n            let data;\n            if (\"isActive\" in update) {\n                restApiName = \"update-webhook\";\n                methodName = \"updateWebhook\";\n                method = \"PUT\";\n                data = {\n                    webhook_id: webhookId,\n                    is_active: update.isActive\n                };\n            } else if (\"addFilters\" in update || \"removeFilters\" in update) {\n                restApiName = \"update-webhook-nft-filters\";\n                methodName = \"updateWebhookNftFilters\";\n                method = \"PATCH\";\n                data = {\n                    webhook_id: webhookId,\n                    nft_filters_to_add: update.addFilters ? update.addFilters.map(nftFilterToParam) : [],\n                    nft_filters_to_remove: update.removeFilters ? update.removeFilters.map(nftFilterToParam) : []\n                };\n            } else if (\"addMetadataFilters\" in update || \"removeMetadataFilters\" in update) {\n                restApiName = \"update-webhook-nft-metadata-filters\";\n                methodName = \"updateWebhookNftMetadataFilters\";\n                method = \"PATCH\";\n                data = {\n                    webhook_id: webhookId,\n                    nft_metadata_filters_to_add: update.addMetadataFilters ? update.addMetadataFilters.map(nftFilterToParam) : [],\n                    nft_metadata_filters_to_remove: update.removeMetadataFilters ? update.removeMetadataFilters.map(nftFilterToParam) : []\n                };\n            } else if (\"addAddresses\" in update || \"removeAddresses\" in update) {\n                restApiName = \"update-webhook-addresses\";\n                methodName = \"webhook:updateWebhookAddresses\";\n                method = \"PATCH\";\n                data = {\n                    webhook_id: webhookId,\n                    addresses_to_add: yield this.resolveAddresses(update.addAddresses),\n                    addresses_to_remove: yield this.resolveAddresses(update.removeAddresses)\n                };\n            } else if (\"newAddresses\" in update) {\n                restApiName = \"update-webhook-addresses\";\n                methodName = \"webhook:updateWebhookAddress\";\n                method = \"PUT\";\n                data = {\n                    webhook_id: webhookId,\n                    addresses: yield this.resolveAddresses(update.newAddresses)\n                };\n            } else {\n                throw new Error(\"Invalid `update` param passed into `updateWebhook`\");\n            }\n            yield this.sendWebhookRequest(restApiName, methodName, {}, {\n                method,\n                data\n            });\n        });\n    }\n    createWebhook(url, type, params) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            let appId;\n            if (type === exports.WebhookType.MINED_TRANSACTION || type === exports.WebhookType.DROPPED_TRANSACTION) {\n                if (!(\"appId\" in params)) {\n                    throw new Error(\"Transaction Webhooks require an app id.\");\n                }\n                appId = params.appId;\n            }\n            let network = NETWORK_TO_WEBHOOK_NETWORK.get(this.config.network);\n            let nftFilterObj;\n            let addresses;\n            let graphqlQuery;\n            if (type === exports.WebhookType.NFT_ACTIVITY || type === exports.WebhookType.NFT_METADATA_UPDATE) {\n                if (!(\"filters\" in params) || params.filters.length === 0) {\n                    throw new Error(\"Nft Activity Webhooks require a non-empty array input.\");\n                }\n                network = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network;\n                const filters = params.filters.map((filter)=>filter.tokenId ? {\n                        contract_address: filter.contractAddress,\n                        token_id: bignumber.BigNumber.from(filter.tokenId).toString()\n                    } : {\n                        contract_address: filter.contractAddress\n                    });\n                nftFilterObj = type === exports.WebhookType.NFT_ACTIVITY ? {\n                    nft_filters: filters\n                } : {\n                    nft_metadata_filters: filters\n                };\n            } else if (type === exports.WebhookType.ADDRESS_ACTIVITY) {\n                if (params === undefined || !(\"addresses\" in params) || params.addresses.length === 0) {\n                    throw new Error(\"Address Activity Webhooks require a non-empty array input.\");\n                }\n                network = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network;\n                addresses = yield this.resolveAddresses(params.addresses);\n            } else if (type == exports.WebhookType.GRAPHQL) {\n                if (params === undefined || !(\"graphqlQuery\" in params) || params.graphqlQuery.length === 0) {\n                    throw new Error(\"Custom Webhooks require a non-empty graphql query.\");\n                }\n                network = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network;\n                graphqlQuery = params.graphqlQuery;\n            }\n            const data = Object.assign(Object.assign(Object.assign(Object.assign({\n                network,\n                webhook_type: type,\n                webhook_url: url\n            }, appId && {\n                app_id: appId\n            }), nftFilterObj), addresses && {\n                addresses\n            }), graphqlQuery && {\n                graphql_query: graphqlQuery\n            });\n            const response = yield this.sendWebhookRequest(\"create-webhook\", \"createWebhook\", {}, {\n                method: \"POST\",\n                data\n            });\n            return parseRawWebhook(response.data);\n        });\n    }\n    deleteWebhook(webhookOrId) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            this.verifyConfig();\n            const webhookId = typeof webhookOrId === \"string\" ? webhookOrId : webhookOrId.id;\n            const response = yield this.sendWebhookRequest(\"delete-webhook\", \"deleteWebhook\", {\n                webhook_id: webhookId\n            }, {\n                method: \"DELETE\"\n            });\n            if (\"message\" in response) {\n                throw new Error(`Webhook not found. Failed to delete webhook: ${webhookId}`);\n            }\n        });\n    }\n    verifyConfig() {\n        if (this.config.authToken === undefined) {\n            throw new Error(\"Using the Notify API requires setting the Alchemy Auth Token in \" + \"the settings object when initializing Alchemy.\");\n        }\n    }\n    sendWebhookRequest(restApiName, methodName, params, overrides) {\n        return requestHttpWithBackoff(this.config, AlchemyApiType.WEBHOOK, restApiName, methodName, params, Object.assign(Object.assign({}, overrides), {\n            headers: Object.assign({\n                \"X-Alchemy-Token\": this.config.authToken\n            }, overrides === null || overrides === void 0 ? void 0 : overrides.headers)\n        }));\n    }\n    /** Resolves ENS addresses to the raw address.\r\n     * @internal */ resolveAddresses(addresses) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            if (addresses === undefined) {\n                return [];\n            }\n            const resolvedAddresses = [];\n            const provider = yield this.config.getProvider();\n            for (const address of addresses){\n                const rawAddress = yield provider.resolveName(address);\n                if (rawAddress === null) {\n                    throw new Error(`Unable to resolve the ENS address: ${address}`);\n                }\n                resolvedAddresses.push(rawAddress);\n            }\n            return resolvedAddresses;\n        });\n    }\n}\n/**\r\n * Mapping of webhook network representations to the SDK's network representation.\r\n *\r\n * @internal\r\n */ const WEBHOOK_NETWORK_TO_NETWORK = {\n    ETH_MAINNET: exports.Network.ETH_MAINNET,\n    ETH_GOERLI: exports.Network.ETH_GOERLI,\n    ETH_SEPOLIA: exports.Network.ETH_SEPOLIA,\n    MATIC_MAINNET: exports.Network.MATIC_MAINNET,\n    MATIC_MUMBAI: exports.Network.MATIC_MUMBAI,\n    ARB_MAINNET: exports.Network.ARB_MAINNET,\n    ARB_GOERLI: exports.Network.ARB_GOERLI,\n    OPT_MAINNET: exports.Network.OPT_MAINNET,\n    OPT_GOERLI: exports.Network.OPT_GOERLI\n};\n/** Mapping of the SDK's network representation the webhook API's network representation. */ const NETWORK_TO_WEBHOOK_NETWORK = Object.keys(exports.Network).reduce((map, key)=>{\n    if (key in WEBHOOK_NETWORK_TO_NETWORK) {\n        map.set(WEBHOOK_NETWORK_TO_NETWORK[key], key);\n    }\n    return map;\n}, new Map());\nfunction parseRawWebhookResponse(response) {\n    return response.data.map(parseRawWebhook);\n}\nfunction parseRawWebhook(rawWebhook) {\n    return Object.assign({\n        id: rawWebhook.id,\n        network: WEBHOOK_NETWORK_TO_NETWORK[rawWebhook.network],\n        type: rawWebhook.webhook_type,\n        url: rawWebhook.webhook_url,\n        isActive: rawWebhook.is_active,\n        timeCreated: new Date(rawWebhook.time_created).toISOString(),\n        signingKey: rawWebhook.signing_key,\n        version: rawWebhook.version\n    }, rawWebhook.app_id !== undefined && {\n        appId: rawWebhook.app_id\n    });\n}\nfunction parseRawAddressActivityResponse(response) {\n    return {\n        addresses: response.data,\n        totalCount: response.pagination.total_count,\n        pageKey: response.pagination.cursors.after\n    };\n}\nfunction parseRawCustomGraphqlWebhookResponse(response) {\n    return {\n        graphqlQuery: response.data.graphql_query\n    };\n}\nfunction parseRawNftFiltersResponse(response) {\n    return {\n        filters: response.data.map((f)=>f.token_id ? {\n                contractAddress: f.contract_address,\n                tokenId: bignumber.BigNumber.from(f.token_id).toString()\n            } : {\n                contractAddress: f.contract_address\n            }),\n        totalCount: response.pagination.total_count,\n        pageKey: response.pagination.cursors.after\n    };\n}\nfunction nftFilterToParam(filter) {\n    return filter.tokenId ? {\n        contract_address: filter.contractAddress,\n        token_id: bignumber.BigNumber.from(filter.tokenId).toString()\n    } : {\n        contract_address: filter.contractAddress\n    };\n}\n/**\r\n * Multiples to increment fee per gas when using\r\n * {@link TransactNamespace.sendGasOptimizedTransaction}.\r\n *\r\n * @internal\r\n */ const GAS_OPTIMIZED_TX_FEE_MULTIPLES = [\n    0.9,\n    1,\n    1.1,\n    1.2,\n    1.3\n];\n/**\r\n * The Transact namespace contains methods used for sending transactions and\r\n * checking on the state of submitted transactions.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the transact\r\n * namespace via `alchemy.transact`.\r\n */ class TransactNamespace {\n    /** @internal */ constructor(config){\n        this.config = config;\n    }\n    /**\r\n     * Used to send a single transaction to Flashbots. Flashbots will attempt to\r\n     * send the transaction to miners for the next 25 blocks.\r\n     *\r\n     * Returns the transaction hash of the submitted transaction.\r\n     *\r\n     * @param signedTransaction The raw, signed transaction as a hash.\r\n     * @param maxBlockNumber Optional highest block number in which the\r\n     *   transaction should be included.\r\n     * @param options Options to configure the request.\r\n     */ sendPrivateTransaction(signedTransaction, maxBlockNumber, options) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const hexBlockNumber = maxBlockNumber ? toHex(maxBlockNumber) : undefined;\n            return provider._send(\"eth_sendPrivateTransaction\", [\n                {\n                    tx: signedTransaction,\n                    maxBlockNumber: hexBlockNumber,\n                    preferences: options\n                }\n            ], \"sendPrivateTransaction\");\n        });\n    }\n    /**\r\n     * Stops the provided private transaction from being submitted for future\r\n     * blocks. A transaction can only be cancelled if the request is signed by the\r\n     * same key as the {@link sendPrivateTransaction} call submitting the\r\n     * transaction in first place.\r\n     *\r\n     * Please note that fast mode transactions cannot be cancelled using this method.\r\n     *\r\n     * Returns a boolean indicating whether the cancellation was successful.\r\n     *\r\n     * @param transactionHash Transaction hash of private tx to be cancelled\r\n     */ cancelPrivateTransaction(transactionHash) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider._send(\"eth_cancelPrivateTransaction\", [\n                {\n                    txHash: transactionHash\n                }\n            ], \"cancelPrivateTransaction\");\n        });\n    }\n    /**\r\n     * Simulates the asset changes resulting from a list of transactions simulated\r\n     * in sequence.\r\n     *\r\n     * Returns a list of asset changes for each transaction during simulation.\r\n     *\r\n     * @param transactions Transactions list of max 3 transactions to simulate.\r\n     * @param blockIdentifier Optional block identifier to simulate the\r\n     * transaction in.\r\n     */ simulateAssetChangesBundle(transactions, blockIdentifier) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const params = blockIdentifier !== undefined ? [\n                transactions,\n                blockIdentifier\n            ] : [\n                transactions\n            ];\n            const res = yield provider._send(\"alchemy_simulateAssetChangesBundle\", params, \"simulateAssetChangesBundle\");\n            return nullsToUndefined(res);\n        });\n    }\n    /**\r\n     * Simulates the asset changes resulting from a single transaction.\r\n     *\r\n     * Returns list of asset changes that occurred during the transaction\r\n     * simulation. Note that this method does not run the transaction on the\r\n     * blockchain.\r\n     *\r\n     * @param transaction The transaction to simulate.\r\n     * @param blockIdentifier Optional block identifier to simulate the\r\n     * transaction in.\r\n     */ simulateAssetChanges(transaction, blockIdentifier) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const params = blockIdentifier !== undefined ? [\n                transaction,\n                blockIdentifier\n            ] : [\n                transaction\n            ];\n            const res = yield provider._send(\"alchemy_simulateAssetChanges\", params, \"simulateAssetChanges\");\n            return nullsToUndefined(res);\n        });\n    }\n    /**\r\n     * Simulates a list of transactions in sequence and returns list of decoded\r\n     * traces and logs that occurred for each transaction during simulation.\r\n     *\r\n     * Note that this method does not run any transactions on the blockchain.\r\n     *\r\n     * @param transactions Transactions list of max 3 transactions to simulate.\r\n     * @param blockIdentifier Optional block identifier to simulate the\r\n     * transaction in.\r\n     */ simulateExecutionBundle(transactions, blockIdentifier) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const params = blockIdentifier !== undefined ? [\n                transactions,\n                blockIdentifier\n            ] : [\n                transactions\n            ];\n            const res = provider._send(\"alchemy_simulateExecutionBundle\", params, \"simulateExecutionBundle\");\n            return nullsToUndefined(res);\n        });\n    }\n    /**\r\n     * Simulates a single transaction and the resulting and returns list of\r\n     * decoded traces and logs that occurred during the transaction simulation.\r\n     *\r\n     * Note that this method does not run the transaction on the blockchain.\r\n     *\r\n     * @param transaction The transaction to simulate.\r\n     * @param blockIdentifier Optional block identifier to simulate the\r\n     * transaction in.\r\n     */ simulateExecution(transaction, blockIdentifier) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const params = blockIdentifier !== undefined ? [\n                transaction,\n                blockIdentifier\n            ] : [\n                transaction\n            ];\n            const res = provider._send(\"alchemy_simulateExecution\", params, \"simulateExecution\");\n            return nullsToUndefined(res);\n        });\n    }\n    /**\r\n     * Returns the transaction with hash or null if the transaction is unknown.\r\n     *\r\n     * If a transaction has not been mined, this method will search the\r\n     * transaction pool. Various backends may have more restrictive transaction\r\n     * pool access (e.g. if the gas price is too low or the transaction was only\r\n     * recently sent and not yet indexed) in which case this method may also return null.\r\n     *\r\n     * NOTE: This is an alias for {@link CoreNamespace.getTransaction}.\r\n     *\r\n     * @param transactionHash The hash of the transaction to get.\r\n     * @public\r\n     */ getTransaction(transactionHash) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.getTransaction(transactionHash);\n        });\n    }\n    /**\r\n     * Submits transaction to the network to be mined. The transaction must be\r\n     * signed, and be valid (i.e. the nonce is correct and the account has\r\n     * sufficient balance to pay for the transaction).\r\n     *\r\n     * NOTE: This is an alias for {@link CoreNamespace.sendTransaction}.\r\n     *\r\n     * @param signedTransaction The signed transaction to send.\r\n     * @public\r\n     */ sendTransaction(signedTransaction) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.sendTransaction(signedTransaction);\n        });\n    }\n    /**\r\n     * Returns an estimate of the amount of gas that would be required to submit\r\n     * transaction to the network.\r\n     *\r\n     * An estimate may not be accurate since there could be another transaction on\r\n     * the network that was not accounted for, but after being mined affects the\r\n     * relevant state.\r\n     *\r\n     * This is an alias for {@link CoreNamespace.estimateGas}.\r\n     *\r\n     * @param transaction The transaction to estimate gas for.\r\n     * @public\r\n     */ estimateGas(transaction) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.estimateGas(transaction);\n        });\n    }\n    /**\r\n     * Returns a fee per gas (in wei) that is an estimate of how much you can pay\r\n     * as a priority fee, or \"tip\", to get a transaction included in the current block.\r\n     *\r\n     * This number is generally used to set the `maxPriorityFeePerGas` field in a\r\n     * transaction request.\r\n     *\r\n     * @public\r\n     */ getMaxPriorityFeePerGas() {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const feeHex = yield provider._send(\"eth_maxPriorityFeePerGas\", [], \"getMaxPriorityFeePerGas\");\n            return fromHex(feeHex);\n        });\n    }\n    /**\r\n     * Returns a promise which will not resolve until specified transaction hash is mined.\r\n     *\r\n     * If {@link confirmations} is 0, this method is non-blocking and if the\r\n     * transaction has not been mined returns null. Otherwise, this method will\r\n     * block until the transaction has confirmed blocks mined on top of the block\r\n     * in which it was mined.\r\n     *\r\n     * NOTE: This is an alias for {@link CoreNamespace.waitForTransaction}.\r\n     *\r\n     * @param transactionHash The hash of the transaction to wait for.\r\n     * @param confirmations The number of blocks to wait for.\r\n     * @param timeout The maximum time to wait for the transaction to confirm.\r\n     * @public\r\n     */ waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider.waitForTransaction(transactionHash, confirmations, timeout);\n        });\n    }\n    sendGasOptimizedTransaction(transactionOrSignedTxs, wallet) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            if (Array.isArray(transactionOrSignedTxs)) {\n                return this._sendGasOptimizedTransaction(transactionOrSignedTxs, \"sendGasOptimizedTransactionPreSigned\");\n            }\n            let gasLimit;\n            let priorityFee;\n            let baseFee;\n            const provider = yield this.config.getProvider();\n            try {\n                gasLimit = yield this.estimateGas(transactionOrSignedTxs);\n                priorityFee = yield this.getMaxPriorityFeePerGas();\n                const currentBlock = yield provider.getBlock(\"latest\");\n                baseFee = currentBlock.baseFeePerGas.toNumber();\n            } catch (e) {\n                throw new Error(`Failed to estimate gas for transaction: ${e}`);\n            }\n            const gasSpreadTransactions = generateGasSpreadTransactions(transactionOrSignedTxs, gasLimit.toNumber(), baseFee, priorityFee);\n            const signedTransactions = yield Promise.all(gasSpreadTransactions.map((tx)=>wallet.signTransaction(tx)));\n            return this._sendGasOptimizedTransaction(signedTransactions, \"sendGasOptimizedTransactionGenerated\");\n        });\n    }\n    /**\r\n     * Returns the state of the transaction job returned by the\r\n     * {@link sendGasOptimizedTransaction}.\r\n     *\r\n     * @param trackingId The tracking id from the response of the sent gas optimized transaction.\r\n     * @internal\r\n     */ // TODO(txjob): Remove internal tag once this feature is released.\n    getGasOptimizedTransactionStatus(trackingId) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider._send(\"alchemy_getGasOptimizedTransactionStatus\", [\n                trackingId\n            ], \"getGasOptimizedTransactionStatus\");\n        });\n    }\n    /** @internal */ _sendGasOptimizedTransaction(signedTransactions, methodName) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            return provider._send(\"alchemy_sendGasOptimizedTransaction\", [\n                {\n                    rawTransactions: signedTransactions\n                }\n            ], methodName);\n        });\n    }\n}\n/**\r\n * Helper method to generate the raw transaction with the given gas limit and\r\n * priority fee across a spread of different gas prices.\r\n *\r\n * @internal\r\n */ // Visible for testing\nfunction generateGasSpreadTransactions(transaction, gasLimit, baseFee, priorityFee) {\n    return GAS_OPTIMIZED_TX_FEE_MULTIPLES.map((feeMultiplier)=>{\n        return Object.assign(Object.assign({}, transaction), {\n            gasLimit,\n            maxFeePerGas: Math.round(baseFee * feeMultiplier + priorityFee * feeMultiplier),\n            maxPriorityFeePerGas: Math.round(feeMultiplier * priorityFee)\n        });\n    });\n}\n/** This file contains internal types used by the SDK and are not exposed to the end user. */ /**\r\n * Prefix for `alchemy_pendingTransactions` subscriptions when serializing to\r\n * ethers events.\r\n *\r\n * This tag is used internally by ethers to track different event filters.\r\n */ const ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE = \"alchemy-pending-transactions\";\n/**\r\n * Prefix for `alchemy_minedTransactions` subscriptions when serializing to ethers events.\r\n *\r\n * This tag is used internally by ethers to track different event filters.\r\n */ const ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE = \"alchemy-mined-transactions\";\n/**\r\n * Array containing all the custom event tags used internally by ethers to track\r\n * event filters.\r\n */ const ALCHEMY_EVENT_TYPES = [\n    ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n    ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE\n];\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * Event class copied directly over from ethers.js's `BaseProvider` class.\r\n *\r\n * This class is used to represent events and their corresponding listeners. The\r\n * SDK needs to extend this class in order to support Alchemy's custom\r\n * Subscription API types. The original class is not exported by ethers. Minimal\r\n * changes have been made in order to get TS to compile.\r\n */ class Event {\n    constructor(tag, listener, once){\n        this.listener = listener;\n        this.tag = tag;\n        this.once = once;\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n    get event() {\n        switch(this.type){\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n            default:\n                return this.tag;\n        }\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            throw new Error(\"Not a transaction event\");\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            throw new Error(\"Not a transaction event\");\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        const PollableEvents = [\n            \"block\",\n            \"network\",\n            \"pending\",\n            \"poll\"\n        ];\n        return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n    }\n}\n/**\r\n * Wrapper class around the ethers `Event` class in order to add support for\r\n * Alchemy's custom subscriptions types.\r\n *\r\n * The serialization and deserialization mechanism requires the order of the\r\n * fields to be the same across different {@link ALCHEMY_EVENT_TYPES}. Before\r\n * using a getter on a new event filter, make sure that the position of the\r\n * field in serialization is correct.\r\n *\r\n * The getters on this class deserialize the event tag generated by\r\n * {@link getAlchemyEventTag} into the original fields passed into the event.\r\n */ class EthersEvent extends Event {\n    /**\r\n     * Converts the event tag into the original `fromAddress` field in\r\n     * {@link AlchemyPendingTransactionsEventFilter}.\r\n     */ get fromAddress() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n            return undefined;\n        }\n        if (comps[1] && comps[1] !== \"*\") {\n            return deserializeAddressField(comps[1]);\n        } else {\n            return undefined;\n        }\n    }\n    /**\r\n     * Converts the event tag into the original `toAddress` field in\r\n     * {@link AlchemyPendingTransactionsEventFilter}.\r\n     */ get toAddress() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n            return undefined;\n        }\n        if (comps[2] && comps[2] !== \"*\") {\n            return deserializeAddressField(comps[2]);\n        } else {\n            return undefined;\n        }\n    }\n    /**\r\n     * Converts the event tag into the original `hashesOnly` field in\r\n     * {@link AlchemyPendingTransactionsEventFilter} and {@link AlchemyMinedTransactionsEventFilter}.\r\n     */ get hashesOnly() {\n        const comps = this.tag.split(\":\");\n        if (!ALCHEMY_EVENT_TYPES.includes(comps[0])) {\n            return undefined;\n        }\n        if (comps[3] && comps[3] !== \"*\") {\n            return comps[3] === \"true\";\n        } else {\n            return undefined;\n        }\n    }\n    get includeRemoved() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n            return undefined;\n        }\n        if (comps[2] && comps[2] !== \"*\") {\n            return comps[2] === \"true\";\n        } else {\n            return undefined;\n        }\n    }\n    get addresses() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n            return undefined;\n        }\n        if (comps[1] && comps[1] !== \"*\") {\n            return deserializeAddressesField(comps[1]);\n        } else {\n            return undefined;\n        }\n    }\n}\nfunction isAlchemyEvent(event) {\n    return typeof event === \"object\" && \"method\" in event;\n}\n/**\r\n * Creates a string representation of an `alchemy_pendingTransaction`\r\n * subscription filter that is compatible with the ethers implementation of\r\n * `getEventTag()`. The method is not an exported function in ethers, which is\r\n * why the SDK has its own implementation.\r\n *\r\n * The event tag is then deserialized by the SDK's {@link EthersEvent} getters.\r\n *\r\n * @example\r\n *   ```js\r\n *   // Returns 'alchemy-pending-transactions:0xABC:0xDEF|0xGHI:true'\r\n *   const eventTag =  getAlchemyEventTag(\r\n *   {\r\n *     \"method\": \"alchemy_pendingTransactions\",\r\n *     \"fromAddress\": \"0xABC\",\r\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\r\n *     \"hashesOnly: true\r\n *   });\r\n *   ```;\r\n *\r\n * @param event\r\n * @internal\r\n */ function getAlchemyEventTag(event) {\n    if (!isAlchemyEvent(event)) {\n        throw new Error(\"Event tag requires AlchemyEventType\");\n    }\n    if (event.method === exports.AlchemySubscription.PENDING_TRANSACTIONS) {\n        return serializePendingTransactionsEvent(event);\n    } else if (event.method === exports.AlchemySubscription.MINED_TRANSACTIONS) {\n        return serializeMinedTransactionsEvent(event);\n    } else {\n        throw new Error(`Unrecognized AlchemyFilterEvent: ${event}`);\n    }\n}\nfunction verifyAlchemyEventName(eventName) {\n    if (!Object.values(exports.AlchemySubscription).includes(eventName.method)) {\n        throw new Error(`Invalid method name ${eventName.method}. Accepted method names: ${Object.values(exports.AlchemySubscription)}`);\n    }\n}\n/**\r\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\r\n * compatible event tag.\r\n *\r\n * For the example event:\r\n * ```\r\n *  {\r\n *     \"method\": \"alchemy_pendingTransactions\",\r\n *     \"fromAddress\": \"0xABC\",\r\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\r\n *     \"hashesOnly: true\r\n *   }\r\n * ```\r\n *\r\n * The resulting serialization is:\r\n * `alchemy_pendingTransactions:0xABC:0xDEF|0xGHI:true`\r\n *\r\n * If a field is omitted, it is replaced with a `*`.\r\n */ function serializePendingTransactionsEvent(event) {\n    const fromAddress = serializeAddressField(event.fromAddress);\n    const toAddress = serializeAddressField(event.toAddress);\n    const hashesOnly = serializeBooleanField(event.hashesOnly);\n    return ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE + \":\" + fromAddress + \":\" + toAddress + \":\" + hashesOnly;\n}\n/**\r\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\r\n * compatible event tag.\r\n *\r\n * For the example event:\r\n * ```\r\n *  {\r\n *     \"method\": \"alchemy_minedTransactions\",\r\n *     \"addresses\": [\r\n *       {\r\n *         from: \"0xABC\"\r\n *       },\r\n *       {\r\n *         to: \"0xDEF\",\r\n *         from: \"0x123\"\r\n *       }\r\n *     ]\r\n *     \"includeRemoved\": false\r\n *     \"hashesOnly: true\r\n *   }\r\n * ```\r\n *\r\n * The resulting serialization is:\r\n * `alchemy_minedTransactions:*,0xABC|0xDEF,0x123:false:true`\r\n *\r\n * If a field is omitted, it is replaced with a `*`.\r\n *\r\n * The `addresses` array is split by the '|' character, and each to/from address\r\n * pair is separated by a ',' character.\r\n *\r\n */ function serializeMinedTransactionsEvent(event) {\n    const addresses = serializeAddressesField(event.addresses);\n    const includeRemoved = serializeBooleanField(event.includeRemoved);\n    const hashesOnly = serializeBooleanField(event.hashesOnly);\n    return ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE + \":\" + addresses + \":\" + includeRemoved + \":\" + hashesOnly;\n}\nfunction serializeAddressesField(addresses) {\n    if (addresses === undefined) {\n        return \"*\";\n    }\n    return addresses.map((filter)=>serializeAddressField(filter.to) + \",\" + serializeAddressField(filter.from)).join(\"|\");\n}\nfunction serializeAddressField(field) {\n    if (field === undefined) {\n        return \"*\";\n    } else if (Array.isArray(field)) {\n        return field.join(\"|\");\n    } else {\n        return field;\n    }\n}\nfunction serializeBooleanField(field) {\n    if (field === undefined) {\n        return \"*\";\n    } else {\n        return field.toString();\n    }\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic)=>{\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic)=>{\n            return topic === \"null\" ? null : topic;\n        });\n        return comps.length === 1 ? comps[0] : comps;\n    });\n}\nfunction deserializeAddressField(data) {\n    if (data === \"\") {\n        return undefined;\n    }\n    const addresses = data.split(\"|\");\n    return addresses.length === 1 ? addresses[0] : addresses;\n}\nfunction deserializeAddressesField(data) {\n    if (data === \"\") {\n        return undefined;\n    }\n    // Perform a cast here since TS doesn't know we're guaranteed a non-empty\n    // array from deserializing.\n    return data.split(\"|\").map((addressStr)=>addressStr.split(\",\")).map((addressPair)=>Object.assign(Object.assign({}, addressPair[0] !== \"*\" && {\n            to: addressPair[0]\n        }), addressPair[1] !== \"*\" && {\n            from: addressPair[1]\n        }));\n}\n/**\r\n * The Websocket namespace contains all subscription related functions that\r\n * allow you to subscribe to events and receive updates as they occur. The\r\n * underlying WebSocket provider has additional logic to handle reconnections\r\n * and automatically backfills missed events.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.ws`.\r\n */ class WebSocketNamespace {\n    /** @internal */ constructor(config){\n        this.config = config;\n    }\n    /**\r\n     * Adds a listener to be triggered for each {@link eventName} event. Also\r\n     * includes Alchemy's Subscription API events. See {@link AlchemyEventType} for\r\n     * how to use them.\r\n     *\r\n     * @param eventName The event to listen for.\r\n     * @param listener The listener to call when the event is triggered.\r\n     * @public\r\n     */ on(eventName, listener) {\n        void (()=>__awaiter$1(this, void 0, void 0, function*() {\n                const provider = yield this.config.getWebSocketProvider();\n                const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\n                provider.on(processedEvent, listener);\n            }))();\n        return this;\n    }\n    /**\r\n     * Adds a listener to be triggered for only the next {@link eventName} event,\r\n     * after which it will be removed. Also includes Alchemy's Subscription API\r\n     * events. See {@link AlchemyEventType} for how to use them.\r\n     *\r\n     * @param eventName The event to listen for.\r\n     * @param listener The listener to call when the event is triggered.\r\n     * @public\r\n     */ once(eventName, listener) {\n        void (()=>__awaiter$1(this, void 0, void 0, function*() {\n                const provider = yield this.config.getWebSocketProvider();\n                const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\n                provider.once(processedEvent, listener);\n            }))();\n        return this;\n    }\n    /**\r\n     * Removes the provided {@link listener} for the {@link eventName} event. If no\r\n     * listener is provided, all listeners for the event will be removed.\r\n     *\r\n     * @param eventName The event to unlisten to.\r\n     * @param listener The listener to remove.\r\n     * @public\r\n     */ off(eventName, listener) {\n        void (()=>__awaiter$1(this, void 0, void 0, function*() {\n                const provider = yield this.config.getWebSocketProvider();\n                const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\n                return provider.off(processedEvent, listener);\n            }))();\n        return this;\n    }\n    /**\r\n     * Remove all listeners for the provided {@link eventName} event. If no event\r\n     * is provided, all events and their listeners are removed.\r\n     *\r\n     * @param eventName The event to remove all listeners for.\r\n     * @public\r\n     */ removeAllListeners(eventName) {\n        void (()=>__awaiter$1(this, void 0, void 0, function*() {\n                const provider = yield this.config.getWebSocketProvider();\n                const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : undefined;\n                provider.removeAllListeners(processedEvent);\n            }))();\n        return this;\n    }\n    /**\r\n     * Returns the number of listeners for the provided {@link eventName} event. If\r\n     * no event is provided, the total number of listeners for all events is returned.\r\n     *\r\n     * @param eventName The event to get the number of listeners for.\r\n     * @public\r\n     */ listenerCount(eventName) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getWebSocketProvider();\n            const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : undefined;\n            return provider.listenerCount(processedEvent);\n        });\n    }\n    /**\r\n     * Returns an array of listeners for the provided {@link eventName} event. If\r\n     * no event is provided, all listeners will be included.\r\n     *\r\n     * @param eventName The event to get the listeners for.\r\n     */ listeners(eventName) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getWebSocketProvider();\n            const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : undefined;\n            return provider.listeners(processedEvent);\n        });\n    }\n    /**\r\n     * Converts ENS addresses in an Alchemy Event to the underlying resolved\r\n     * address.\r\n     *\r\n     * VISIBLE ONLY FOR TESTING.\r\n     *\r\n     * @internal\r\n     */ _resolveEnsAlchemyEvent(eventName) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            if (!isAlchemyEvent(eventName)) {\n                return eventName;\n            }\n            if (eventName.method === exports.AlchemySubscription.MINED_TRANSACTIONS && eventName.addresses) {\n                const processedAddresses = [];\n                for (const address of eventName.addresses){\n                    if (address.to) {\n                        address.to = yield this._resolveNameOrError(address.to);\n                    }\n                    if (address.from) {\n                        address.from = yield this._resolveNameOrError(address.from);\n                    }\n                    processedAddresses.push(address);\n                }\n                eventName.addresses = processedAddresses;\n            } else if (eventName.method === exports.AlchemySubscription.PENDING_TRANSACTIONS) {\n                if (eventName.fromAddress) {\n                    if (typeof eventName.fromAddress === \"string\") {\n                        eventName.fromAddress = yield this._resolveNameOrError(eventName.fromAddress);\n                    } else {\n                        eventName.fromAddress = yield Promise.all(eventName.fromAddress.map((address)=>this._resolveNameOrError(address)));\n                    }\n                }\n                if (eventName.toAddress) {\n                    if (typeof eventName.toAddress === \"string\") {\n                        eventName.toAddress = yield this._resolveNameOrError(eventName.toAddress);\n                    } else {\n                        eventName.toAddress = yield Promise.all(eventName.toAddress.map((address)=>this._resolveNameOrError(address)));\n                    }\n                }\n            }\n            return eventName;\n        });\n    }\n    /**\r\n     * Converts the provided ENS address or throws an error. This improves code\r\n     * readability and type safety in other methods.\r\n     *\r\n     * VISIBLE ONLY FOR TESTING.\r\n     *\r\n     * @internal\r\n     */ _resolveNameOrError(name) {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            const provider = yield this.config.getProvider();\n            const resolved = yield provider.resolveName(name);\n            if (resolved === null) {\n                throw new Error(`Unable to resolve the ENS address: ${name}`);\n            }\n            return resolved;\n        });\n    }\n}\n/**\r\n * The Alchemy SDK client. This class is the main entry point into Alchemy's\r\n * APIs and separates functionality into different namespaces.\r\n *\r\n * Each SDK instance is associated with a specific network and API key. To use a\r\n * different network or API key, create a new instance of {@link Alchemy}.\r\n *\r\n * @public\r\n */ class Alchemy {\n    /**\r\n     * @param {string} [settings.apiKey] - The API key to use for Alchemy\r\n     * @param {Network} [settings.network] - The network to use for Alchemy\r\n     * @param {number} [settings.maxRetries] - The maximum number of retries to attempt\r\n     * @param {number} [settings.requestTimeout] - The timeout after which request should fail\r\n     * @public\r\n     */ constructor(settings){\n        this.config = new AlchemyConfig(settings);\n        this.core = new CoreNamespace(this.config);\n        this.nft = new NftNamespace(this.config);\n        this.ws = new WebSocketNamespace(this.config);\n        this.transact = new TransactNamespace(this.config);\n        this.notify = new NotifyNamespace(this.config);\n        this.debug = new DebugNamespace(this.config);\n    }\n}\n/**\r\n * The Wallet class inherits Signer and can sign transactions and messages using\r\n * a private key as a standard Externally Owned Account (EOA).\r\n *\r\n * SDK's custom implementation of Ethers.js's 'Wallet'.\r\n *\r\n * Primary difference from Ethers.js 'Wallet' is that you can pass in either a\r\n * Provider or an Alchemy object. This implementation will intelligently detect\r\n * the format and set the provider accordingly.\r\n *\r\n * @public\r\n * @override\r\n */ class Wallet extends wallet.Wallet {\n    /**\r\n     * Overload permits users to pass in either a standard Provider or an Alchemy\r\n     * object. The constructor will detect the object type and handle appropriately.\r\n     *\r\n     * @override\r\n     */ constructor(privateKey, alchemyOrProvider){\n        // If object passed in is a provider, send to super\n        let superProvider;\n        if (alchemyOrProvider && abstractProvider.Provider.isProvider(alchemyOrProvider)) {\n            superProvider = alchemyOrProvider;\n        }\n        super(privateKey, superProvider);\n        // If object passed in is an Alchemy object, just set Alchemy\n        if (alchemyOrProvider && !abstractProvider.Provider.isProvider(alchemyOrProvider)) {\n            this.alchemyProviderPromise = alchemyOrProvider.config.getProvider();\n        }\n    }\n    //////////////////////////////////////////////////////////////////\n    // Set of overrides from Signer to handle async provider retrieval.\n    //////////////////////////////////////////////////////////////////\n    /**\r\n     * Returns the balance of this wallet at blockTag.\r\n     *\r\n     * @param blockTag The block to check the balance of\r\n     * @override\r\n     */ getBalance(blockTag) {\n        return this.getWallet().then((wallet)=>wallet.getBalance(blockTag));\n    }\n    /**\r\n     * Returns the number of transactions this account has ever sent. This is the\r\n     * value required to be included in transactions as the nonce.\r\n     *\r\n     * @param blockTag The block to check the transaction count on\r\n     * @override\r\n     */ getTransactionCount(blockTag) {\n        return this.getWallet().then((wallet)=>wallet.getTransactionCount(blockTag));\n    }\n    /**\r\n     * Returns the result of estimating the cost to send the transactionRequest,\r\n     * with this account address being used as the from field.\r\n     *\r\n     * @param transaction Transaction to estimate the gas on\r\n     * @override\r\n     */ estimateGas(transaction) {\n        return this.getWallet().then((wallet)=>wallet.estimateGas(transaction));\n    }\n    /**\r\n     * Returns the result of calling using the transactionRequest, with this\r\n     * account address being used as the from field.\r\n     *\r\n     * @param transaction To make a call on\r\n     * @param blockTag The block to make the call on\r\n     * @override\r\n     */ call(transaction, blockTag) {\n        return this.getWallet().then((wallet)=>wallet.call(transaction, blockTag));\n    }\n    /**\r\n     * Populates ALL keys for a transaction and checks that `from` matches this\r\n     * `Signer`. Resolves ENS names and populates fields like `gasPrice`, `gasLimit`,\r\n     * `nonce`, and `chainId` if they are not provided.\r\n     *\r\n     * @param transaction The transaction to populate.\r\n     * @override\r\n     */ populateTransaction(transaction) {\n        return this.getWallet().then((wallet)=>wallet.populateTransaction(transaction));\n    }\n    /**\r\n     * Populates all fields in a transaction, signs it and sends it to the network\r\n     *\r\n     * @param transaction The transaction to send.\r\n     * @override\r\n     */ sendTransaction(transaction) {\n        return this.getWallet().then((wallet)=>wallet.sendTransaction(transaction));\n    }\n    /**\r\n     * Returns the chain ID this wallet is connected to.\r\n     *\r\n     * @override\r\n     */ getChainId() {\n        return this.getWallet().then((wallet)=>wallet.getChainId());\n    }\n    /**\r\n     * Returns the current gas price.\r\n     *\r\n     * @override\r\n     */ getGasPrice() {\n        return this.getWallet().then((wallet)=>wallet.getGasPrice());\n    }\n    /**\r\n     * Returns the current recommended FeeData to use in a transaction.\r\n     *\r\n     * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\r\n     * should be used.\r\n     *\r\n     * For legacy transactions and networks which do not support EIP-1559, the\r\n     * gasPrice should be used.\r\n     *\r\n     * @override\r\n     */ getFeeData() {\n        return this.getWallet().then((wallet)=>wallet.getFeeData());\n    }\n    /**\r\n     * Looks up the address of name. If the name is not owned, or does not have a\r\n     * Resolver configured, or the Resolver does not have an address configured,\r\n     * null is returned.\r\n     *\r\n     * @param name Name of the ENS address\r\n     * @override\r\n     */ resolveName(name) {\n        return this.getWallet().then((wallet)=>wallet.resolveName(name));\n    }\n    getWallet() {\n        return __awaiter$1(this, void 0, void 0, function*() {\n            if (!this.alchemyProviderPromise) {\n                return this.connect(this.provider);\n            }\n            return this.connect((yield this.alchemyProviderPromise));\n        });\n    }\n}\n/**\r\n * The Contract class is a wrapper around the Contract class from ethers.js and\r\n * is exported here for convenience.\r\n *\r\n * @public\r\n */ // TODO: support passing in Alchemy instance into the contract.\nclass Contract extends contracts.Contract {\n}\n/**\r\n * The ContractFactory class is a wrapper around the ContractFactory class from\r\n * ethers.js and is exported here for convenience.\r\n *\r\n * @public\r\n */ class ContractFactory extends contracts.ContractFactory {\n}\nexports.ALCHEMY_EVENT_TYPES = ALCHEMY_EVENT_TYPES;\nexports.ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE = ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE;\nexports.ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE = ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE;\nexports.Alchemy = Alchemy;\nexports.Contract = Contract;\nexports.ContractFactory = ContractFactory;\nexports.CustomNetworks = CustomNetworks;\nexports.DEFAULT_ALCHEMY_API_KEY = DEFAULT_ALCHEMY_API_KEY;\nexports.DEFAULT_NETWORK = DEFAULT_NETWORK;\nexports.EthersEvent = EthersEvent;\nexports.EthersNetwork = EthersNetwork;\nexports.IS_BROWSER = IS_BROWSER;\nexports.VERSION = VERSION;\nexports.Wallet = Wallet;\nexports.__awaiter = __awaiter$1;\nexports.deepCopy = deepCopy;\nexports.fromHex = fromHex;\nexports.getAlchemyEventTag = getAlchemyEventTag;\nexports.getAlchemyHttpUrl = getAlchemyHttpUrl;\nexports.getAlchemyWsUrl = getAlchemyWsUrl;\nexports.isAlchemyEvent = isAlchemyEvent;\nexports.isHex = isHex;\nexports.logWarn = logWarn;\nexports.noop = noop;\nexports.setLogLevel = setLogLevel;\nexports.toHex = toHex;\nexports.verifyAlchemyEventName = verifyAlchemyEventName; //# sourceMappingURL=index-b1f4a2d9.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/alchemy-sdk/dist/cjs/index-b1f4a2d9.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/alchemy-sdk/dist/cjs/index.js":
/*!****************************************************!*\
  !*** ./node_modules/alchemy-sdk/dist/cjs/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar utils = __webpack_require__(/*! ./api/utils */ \"(ssr)/./node_modules/alchemy-sdk/dist/cjs/api/utils.js\");\nvar index = __webpack_require__(/*! ./index-b1f4a2d9.js */ \"(ssr)/./node_modules/alchemy-sdk/dist/cjs/index-b1f4a2d9.js\");\nvar bignumber = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib.esm/index.js\");\n__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n__webpack_require__(/*! @ethersproject/abstract-provider */ \"(ssr)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\");\n__webpack_require__(/*! @ethersproject/wallet */ \"(ssr)/./node_modules/@ethersproject/wallet/lib.esm/index.js\");\n__webpack_require__(/*! @ethersproject/contracts */ \"(ssr)/./node_modules/@ethersproject/contracts/lib.esm/index.js\");\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\nvar utils__namespace = /*#__PURE__*/ _interopNamespace(utils);\nexports.Utils = utils__namespace;\nexports.Alchemy = index.Alchemy;\nObject.defineProperty(exports, \"AlchemySubscription\", ({\n    enumerable: true,\n    get: function() {\n        return index.AlchemySubscription;\n    }\n}));\nObject.defineProperty(exports, \"AssetTransfersCategory\", ({\n    enumerable: true,\n    get: function() {\n        return index.AssetTransfersCategory;\n    }\n}));\nObject.defineProperty(exports, \"CommitmentLevel\", ({\n    enumerable: true,\n    get: function() {\n        return index.CommitmentLevel;\n    }\n}));\nexports.Contract = index.Contract;\nexports.ContractFactory = index.ContractFactory;\nObject.defineProperty(exports, \"DebugCallType\", ({\n    enumerable: true,\n    get: function() {\n        return index.DebugCallType;\n    }\n}));\nObject.defineProperty(exports, \"DebugTracerType\", ({\n    enumerable: true,\n    get: function() {\n        return index.DebugTracerType;\n    }\n}));\nObject.defineProperty(exports, \"DecodingAuthority\", ({\n    enumerable: true,\n    get: function() {\n        return index.DecodingAuthority;\n    }\n}));\nObject.defineProperty(exports, \"GasOptimizedTransactionStatus\", ({\n    enumerable: true,\n    get: function() {\n        return index.GasOptimizedTransactionStatus;\n    }\n}));\nObject.defineProperty(exports, \"GetTransfersForOwnerTransferType\", ({\n    enumerable: true,\n    get: function() {\n        return index.GetTransfersForOwnerTransferType;\n    }\n}));\nObject.defineProperty(exports, \"Network\", ({\n    enumerable: true,\n    get: function() {\n        return index.Network;\n    }\n}));\nObject.defineProperty(exports, \"NftCollectionMarketplace\", ({\n    enumerable: true,\n    get: function() {\n        return index.NftCollectionMarketplace;\n    }\n}));\nObject.defineProperty(exports, \"NftFilters\", ({\n    enumerable: true,\n    get: function() {\n        return index.NftFilters;\n    }\n}));\nObject.defineProperty(exports, \"NftOrdering\", ({\n    enumerable: true,\n    get: function() {\n        return index.NftOrdering;\n    }\n}));\nObject.defineProperty(exports, \"NftRefreshState\", ({\n    enumerable: true,\n    get: function() {\n        return index.NftRefreshState;\n    }\n}));\nObject.defineProperty(exports, \"NftSaleMarketplace\", ({\n    enumerable: true,\n    get: function() {\n        return index.NftSaleMarketplace;\n    }\n}));\nObject.defineProperty(exports, \"NftSaleTakerType\", ({\n    enumerable: true,\n    get: function() {\n        return index.NftSaleTakerType;\n    }\n}));\nObject.defineProperty(exports, \"NftSpamClassification\", ({\n    enumerable: true,\n    get: function() {\n        return index.NftSpamClassification;\n    }\n}));\nObject.defineProperty(exports, \"NftTokenType\", ({\n    enumerable: true,\n    get: function() {\n        return index.NftTokenType;\n    }\n}));\nObject.defineProperty(exports, \"OpenSeaSafelistRequestStatus\", ({\n    enumerable: true,\n    get: function() {\n        return index.OpenSeaSafelistRequestStatus;\n    }\n}));\nObject.defineProperty(exports, \"SimulateAssetType\", ({\n    enumerable: true,\n    get: function() {\n        return index.SimulateAssetType;\n    }\n}));\nObject.defineProperty(exports, \"SimulateChangeType\", ({\n    enumerable: true,\n    get: function() {\n        return index.SimulateChangeType;\n    }\n}));\nObject.defineProperty(exports, \"SortingOrder\", ({\n    enumerable: true,\n    get: function() {\n        return index.SortingOrder;\n    }\n}));\nObject.defineProperty(exports, \"TokenBalanceType\", ({\n    enumerable: true,\n    get: function() {\n        return index.TokenBalanceType;\n    }\n}));\nexports.Wallet = index.Wallet;\nObject.defineProperty(exports, \"WebhookType\", ({\n    enumerable: true,\n    get: function() {\n        return index.WebhookType;\n    }\n}));\nObject.defineProperty(exports, \"WebhookVersion\", ({\n    enumerable: true,\n    get: function() {\n        return index.WebhookVersion;\n    }\n}));\nexports.fromHex = index.fromHex;\nexports.isHex = index.isHex;\nexports.setLogLevel = index.setLogLevel;\nexports.toHex = index.toHex;\nObject.defineProperty(exports, \"BigNumber\", ({\n    enumerable: true,\n    get: function() {\n        return bignumber.BigNumber;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/alchemy-sdk/dist/cjs/index.js\n");

/***/ })

};
;