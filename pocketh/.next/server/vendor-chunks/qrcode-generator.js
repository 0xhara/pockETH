/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/qrcode-generator";
exports.ids = ["vendor-chunks/qrcode-generator"];
exports.modules = {

/***/ "(ssr)/./node_modules/qrcode-generator/qrcode.js":
/*!*************************************************!*\
  !*** ./node_modules/qrcode-generator/qrcode.js ***!
  \*************************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//  http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\nvar qrcode = function() {\n    //---------------------------------------------------------------------\n    // qrcode\n    //---------------------------------------------------------------------\n    /**\n   * qrcode\n   * @param typeNumber 1 to 40\n   * @param errorCorrectionLevel 'L','M','Q','H'\n   */ var qrcode = function(typeNumber, errorCorrectionLevel) {\n        var PAD0 = 0xEC;\n        var PAD1 = 0x11;\n        var _typeNumber = typeNumber;\n        var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];\n        var _modules = null;\n        var _moduleCount = 0;\n        var _dataCache = null;\n        var _dataList = [];\n        var _this = {};\n        var makeImpl = function(test, maskPattern) {\n            _moduleCount = _typeNumber * 4 + 17;\n            _modules = function(moduleCount) {\n                var modules = new Array(moduleCount);\n                for(var row = 0; row < moduleCount; row += 1){\n                    modules[row] = new Array(moduleCount);\n                    for(var col = 0; col < moduleCount; col += 1){\n                        modules[row][col] = null;\n                    }\n                }\n                return modules;\n            }(_moduleCount);\n            setupPositionProbePattern(0, 0);\n            setupPositionProbePattern(_moduleCount - 7, 0);\n            setupPositionProbePattern(0, _moduleCount - 7);\n            setupPositionAdjustPattern();\n            setupTimingPattern();\n            setupTypeInfo(test, maskPattern);\n            if (_typeNumber >= 7) {\n                setupTypeNumber(test);\n            }\n            if (_dataCache == null) {\n                _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);\n            }\n            mapData(_dataCache, maskPattern);\n        };\n        var setupPositionProbePattern = function(row, col) {\n            for(var r = -1; r <= 7; r += 1){\n                if (row + r <= -1 || _moduleCount <= row + r) continue;\n                for(var c = -1; c <= 7; c += 1){\n                    if (col + c <= -1 || _moduleCount <= col + c) continue;\n                    if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n                        _modules[row + r][col + c] = true;\n                    } else {\n                        _modules[row + r][col + c] = false;\n                    }\n                }\n            }\n        };\n        var getBestMaskPattern = function() {\n            var minLostPoint = 0;\n            var pattern = 0;\n            for(var i = 0; i < 8; i += 1){\n                makeImpl(true, i);\n                var lostPoint = QRUtil.getLostPoint(_this);\n                if (i == 0 || minLostPoint > lostPoint) {\n                    minLostPoint = lostPoint;\n                    pattern = i;\n                }\n            }\n            return pattern;\n        };\n        var setupTimingPattern = function() {\n            for(var r = 8; r < _moduleCount - 8; r += 1){\n                if (_modules[r][6] != null) {\n                    continue;\n                }\n                _modules[r][6] = r % 2 == 0;\n            }\n            for(var c = 8; c < _moduleCount - 8; c += 1){\n                if (_modules[6][c] != null) {\n                    continue;\n                }\n                _modules[6][c] = c % 2 == 0;\n            }\n        };\n        var setupPositionAdjustPattern = function() {\n            var pos = QRUtil.getPatternPosition(_typeNumber);\n            for(var i = 0; i < pos.length; i += 1){\n                for(var j = 0; j < pos.length; j += 1){\n                    var row = pos[i];\n                    var col = pos[j];\n                    if (_modules[row][col] != null) {\n                        continue;\n                    }\n                    for(var r = -2; r <= 2; r += 1){\n                        for(var c = -2; c <= 2; c += 1){\n                            if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n                                _modules[row + r][col + c] = true;\n                            } else {\n                                _modules[row + r][col + c] = false;\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        var setupTypeNumber = function(test) {\n            var bits = QRUtil.getBCHTypeNumber(_typeNumber);\n            for(var i = 0; i < 18; i += 1){\n                var mod = !test && (bits >> i & 1) == 1;\n                _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n            }\n            for(var i = 0; i < 18; i += 1){\n                var mod = !test && (bits >> i & 1) == 1;\n                _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n            }\n        };\n        var setupTypeInfo = function(test, maskPattern) {\n            var data = _errorCorrectionLevel << 3 | maskPattern;\n            var bits = QRUtil.getBCHTypeInfo(data);\n            // vertical\n            for(var i = 0; i < 15; i += 1){\n                var mod = !test && (bits >> i & 1) == 1;\n                if (i < 6) {\n                    _modules[i][8] = mod;\n                } else if (i < 8) {\n                    _modules[i + 1][8] = mod;\n                } else {\n                    _modules[_moduleCount - 15 + i][8] = mod;\n                }\n            }\n            // horizontal\n            for(var i = 0; i < 15; i += 1){\n                var mod = !test && (bits >> i & 1) == 1;\n                if (i < 8) {\n                    _modules[8][_moduleCount - i - 1] = mod;\n                } else if (i < 9) {\n                    _modules[8][15 - i - 1 + 1] = mod;\n                } else {\n                    _modules[8][15 - i - 1] = mod;\n                }\n            }\n            // fixed module\n            _modules[_moduleCount - 8][8] = !test;\n        };\n        var mapData = function(data, maskPattern) {\n            var inc = -1;\n            var row = _moduleCount - 1;\n            var bitIndex = 7;\n            var byteIndex = 0;\n            var maskFunc = QRUtil.getMaskFunction(maskPattern);\n            for(var col = _moduleCount - 1; col > 0; col -= 2){\n                if (col == 6) col -= 1;\n                while(true){\n                    for(var c = 0; c < 2; c += 1){\n                        if (_modules[row][col - c] == null) {\n                            var dark = false;\n                            if (byteIndex < data.length) {\n                                dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n                            }\n                            var mask = maskFunc(row, col - c);\n                            if (mask) {\n                                dark = !dark;\n                            }\n                            _modules[row][col - c] = dark;\n                            bitIndex -= 1;\n                            if (bitIndex == -1) {\n                                byteIndex += 1;\n                                bitIndex = 7;\n                            }\n                        }\n                    }\n                    row += inc;\n                    if (row < 0 || _moduleCount <= row) {\n                        row -= inc;\n                        inc = -inc;\n                        break;\n                    }\n                }\n            }\n        };\n        var createBytes = function(buffer, rsBlocks) {\n            var offset = 0;\n            var maxDcCount = 0;\n            var maxEcCount = 0;\n            var dcdata = new Array(rsBlocks.length);\n            var ecdata = new Array(rsBlocks.length);\n            for(var r = 0; r < rsBlocks.length; r += 1){\n                var dcCount = rsBlocks[r].dataCount;\n                var ecCount = rsBlocks[r].totalCount - dcCount;\n                maxDcCount = Math.max(maxDcCount, dcCount);\n                maxEcCount = Math.max(maxEcCount, ecCount);\n                dcdata[r] = new Array(dcCount);\n                for(var i = 0; i < dcdata[r].length; i += 1){\n                    dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n                }\n                offset += dcCount;\n                var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n                var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n                var modPoly = rawPoly.mod(rsPoly);\n                ecdata[r] = new Array(rsPoly.getLength() - 1);\n                for(var i = 0; i < ecdata[r].length; i += 1){\n                    var modIndex = i + modPoly.getLength() - ecdata[r].length;\n                    ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\n                }\n            }\n            var totalCodeCount = 0;\n            for(var i = 0; i < rsBlocks.length; i += 1){\n                totalCodeCount += rsBlocks[i].totalCount;\n            }\n            var data = new Array(totalCodeCount);\n            var index = 0;\n            for(var i = 0; i < maxDcCount; i += 1){\n                for(var r = 0; r < rsBlocks.length; r += 1){\n                    if (i < dcdata[r].length) {\n                        data[index] = dcdata[r][i];\n                        index += 1;\n                    }\n                }\n            }\n            for(var i = 0; i < maxEcCount; i += 1){\n                for(var r = 0; r < rsBlocks.length; r += 1){\n                    if (i < ecdata[r].length) {\n                        data[index] = ecdata[r][i];\n                        index += 1;\n                    }\n                }\n            }\n            return data;\n        };\n        var createData = function(typeNumber, errorCorrectionLevel, dataList) {\n            var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel);\n            var buffer = qrBitBuffer();\n            for(var i = 0; i < dataList.length; i += 1){\n                var data = dataList[i];\n                buffer.put(data.getMode(), 4);\n                buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n                data.write(buffer);\n            }\n            // calc num max data.\n            var totalDataCount = 0;\n            for(var i = 0; i < rsBlocks.length; i += 1){\n                totalDataCount += rsBlocks[i].dataCount;\n            }\n            if (buffer.getLengthInBits() > totalDataCount * 8) {\n                throw \"code length overflow. (\" + buffer.getLengthInBits() + \">\" + totalDataCount * 8 + \")\";\n            }\n            // end code\n            if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n                buffer.put(0, 4);\n            }\n            // padding\n            while(buffer.getLengthInBits() % 8 != 0){\n                buffer.putBit(false);\n            }\n            // padding\n            while(true){\n                if (buffer.getLengthInBits() >= totalDataCount * 8) {\n                    break;\n                }\n                buffer.put(PAD0, 8);\n                if (buffer.getLengthInBits() >= totalDataCount * 8) {\n                    break;\n                }\n                buffer.put(PAD1, 8);\n            }\n            return createBytes(buffer, rsBlocks);\n        };\n        _this.addData = function(data, mode) {\n            mode = mode || \"Byte\";\n            var newData = null;\n            switch(mode){\n                case \"Numeric\":\n                    newData = qrNumber(data);\n                    break;\n                case \"Alphanumeric\":\n                    newData = qrAlphaNum(data);\n                    break;\n                case \"Byte\":\n                    newData = qr8BitByte(data);\n                    break;\n                case \"Kanji\":\n                    newData = qrKanji(data);\n                    break;\n                default:\n                    throw \"mode:\" + mode;\n            }\n            _dataList.push(newData);\n            _dataCache = null;\n        };\n        _this.isDark = function(row, col) {\n            if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n                throw row + \",\" + col;\n            }\n            return _modules[row][col];\n        };\n        _this.getModuleCount = function() {\n            return _moduleCount;\n        };\n        _this.make = function() {\n            if (_typeNumber < 1) {\n                var typeNumber = 1;\n                for(; typeNumber < 40; typeNumber++){\n                    var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, _errorCorrectionLevel);\n                    var buffer = qrBitBuffer();\n                    for(var i = 0; i < _dataList.length; i++){\n                        var data = _dataList[i];\n                        buffer.put(data.getMode(), 4);\n                        buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n                        data.write(buffer);\n                    }\n                    var totalDataCount = 0;\n                    for(var i = 0; i < rsBlocks.length; i++){\n                        totalDataCount += rsBlocks[i].dataCount;\n                    }\n                    if (buffer.getLengthInBits() <= totalDataCount * 8) {\n                        break;\n                    }\n                }\n                _typeNumber = typeNumber;\n            }\n            makeImpl(false, getBestMaskPattern());\n        };\n        _this.createTableTag = function(cellSize, margin) {\n            cellSize = cellSize || 2;\n            margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n            var qrHtml = \"\";\n            qrHtml += '<table style=\"';\n            qrHtml += \" border-width: 0px; border-style: none;\";\n            qrHtml += \" border-collapse: collapse;\";\n            qrHtml += \" padding: 0px; margin: \" + margin + \"px;\";\n            qrHtml += '\">';\n            qrHtml += \"<tbody>\";\n            for(var r = 0; r < _this.getModuleCount(); r += 1){\n                qrHtml += \"<tr>\";\n                for(var c = 0; c < _this.getModuleCount(); c += 1){\n                    qrHtml += '<td style=\"';\n                    qrHtml += \" border-width: 0px; border-style: none;\";\n                    qrHtml += \" border-collapse: collapse;\";\n                    qrHtml += \" padding: 0px; margin: 0px;\";\n                    qrHtml += \" width: \" + cellSize + \"px;\";\n                    qrHtml += \" height: \" + cellSize + \"px;\";\n                    qrHtml += \" background-color: \";\n                    qrHtml += _this.isDark(r, c) ? \"#000000\" : \"#ffffff\";\n                    qrHtml += \";\";\n                    qrHtml += '\"/>';\n                }\n                qrHtml += \"</tr>\";\n            }\n            qrHtml += \"</tbody>\";\n            qrHtml += \"</table>\";\n            return qrHtml;\n        };\n        _this.createSvgTag = function(cellSize, margin, alt, title) {\n            var opts = {};\n            if (typeof arguments[0] == \"object\") {\n                // Called by options.\n                opts = arguments[0];\n                // overwrite cellSize and margin.\n                cellSize = opts.cellSize;\n                margin = opts.margin;\n                alt = opts.alt;\n                title = opts.title;\n            }\n            cellSize = cellSize || 2;\n            margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n            // Compose alt property surrogate\n            alt = typeof alt === \"string\" ? {\n                text: alt\n            } : alt || {};\n            alt.text = alt.text || null;\n            alt.id = alt.text ? alt.id || \"qrcode-description\" : null;\n            // Compose title property surrogate\n            title = typeof title === \"string\" ? {\n                text: title\n            } : title || {};\n            title.text = title.text || null;\n            title.id = title.text ? title.id || \"qrcode-title\" : null;\n            var size = _this.getModuleCount() * cellSize + margin * 2;\n            var c, mc, r, mr, qrSvg = \"\", rect;\n            rect = \"l\" + cellSize + \",0 0,\" + cellSize + \" -\" + cellSize + \",0 0,-\" + cellSize + \"z \";\n            qrSvg += '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"';\n            qrSvg += !opts.scalable ? ' width=\"' + size + 'px\" height=\"' + size + 'px\"' : \"\";\n            qrSvg += ' viewBox=\"0 0 ' + size + \" \" + size + '\" ';\n            qrSvg += ' preserveAspectRatio=\"xMinYMin meet\"';\n            qrSvg += title.text || alt.text ? ' role=\"img\" aria-labelledby=\"' + escapeXml([\n                title.id,\n                alt.id\n            ].join(\" \").trim()) + '\"' : \"\";\n            qrSvg += \">\";\n            qrSvg += title.text ? '<title id=\"' + escapeXml(title.id) + '\">' + escapeXml(title.text) + \"</title>\" : \"\";\n            qrSvg += alt.text ? '<description id=\"' + escapeXml(alt.id) + '\">' + escapeXml(alt.text) + \"</description>\" : \"\";\n            qrSvg += '<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>';\n            qrSvg += '<path d=\"';\n            for(r = 0; r < _this.getModuleCount(); r += 1){\n                mr = r * cellSize + margin;\n                for(c = 0; c < _this.getModuleCount(); c += 1){\n                    if (_this.isDark(r, c)) {\n                        mc = c * cellSize + margin;\n                        qrSvg += \"M\" + mc + \",\" + mr + rect;\n                    }\n                }\n            }\n            qrSvg += '\" stroke=\"transparent\" fill=\"black\"/>';\n            qrSvg += \"</svg>\";\n            return qrSvg;\n        };\n        _this.createDataURL = function(cellSize, margin) {\n            cellSize = cellSize || 2;\n            margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n            var size = _this.getModuleCount() * cellSize + margin * 2;\n            var min = margin;\n            var max = size - margin;\n            return createDataURL(size, size, function(x, y) {\n                if (min <= x && x < max && min <= y && y < max) {\n                    var c = Math.floor((x - min) / cellSize);\n                    var r = Math.floor((y - min) / cellSize);\n                    return _this.isDark(r, c) ? 0 : 1;\n                } else {\n                    return 1;\n                }\n            });\n        };\n        _this.createImgTag = function(cellSize, margin, alt) {\n            cellSize = cellSize || 2;\n            margin = typeof margin == \"undefined\" ? cellSize * 4 : margin;\n            var size = _this.getModuleCount() * cellSize + margin * 2;\n            var img = \"\";\n            img += \"<img\";\n            img += ' src=\"';\n            img += _this.createDataURL(cellSize, margin);\n            img += '\"';\n            img += ' width=\"';\n            img += size;\n            img += '\"';\n            img += ' height=\"';\n            img += size;\n            img += '\"';\n            if (alt) {\n                img += ' alt=\"';\n                img += escapeXml(alt);\n                img += '\"';\n            }\n            img += \"/>\";\n            return img;\n        };\n        var escapeXml = function(s) {\n            var escaped = \"\";\n            for(var i = 0; i < s.length; i += 1){\n                var c = s.charAt(i);\n                switch(c){\n                    case \"<\":\n                        escaped += \"&lt;\";\n                        break;\n                    case \">\":\n                        escaped += \"&gt;\";\n                        break;\n                    case \"&\":\n                        escaped += \"&amp;\";\n                        break;\n                    case '\"':\n                        escaped += \"&quot;\";\n                        break;\n                    default:\n                        escaped += c;\n                        break;\n                }\n            }\n            return escaped;\n        };\n        var _createHalfASCII = function(margin) {\n            var cellSize = 1;\n            margin = typeof margin == \"undefined\" ? cellSize * 2 : margin;\n            var size = _this.getModuleCount() * cellSize + margin * 2;\n            var min = margin;\n            var max = size - margin;\n            var y, x, r1, r2, p;\n            var blocks = {\n                \"██\": \"█\",\n                \"█ \": \"▀\",\n                \" █\": \"▄\",\n                \"  \": \" \"\n            };\n            var blocksLastLineNoMargin = {\n                \"██\": \"▀\",\n                \"█ \": \"▀\",\n                \" █\": \" \",\n                \"  \": \" \"\n            };\n            var ascii = \"\";\n            for(y = 0; y < size; y += 2){\n                r1 = Math.floor((y - min) / cellSize);\n                r2 = Math.floor((y + 1 - min) / cellSize);\n                for(x = 0; x < size; x += 1){\n                    p = \"█\";\n                    if (min <= x && x < max && min <= y && y < max && _this.isDark(r1, Math.floor((x - min) / cellSize))) {\n                        p = \" \";\n                    }\n                    if (min <= x && x < max && min <= y + 1 && y + 1 < max && _this.isDark(r2, Math.floor((x - min) / cellSize))) {\n                        p += \" \";\n                    } else {\n                        p += \"█\";\n                    }\n                    // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n                    ascii += margin < 1 && y + 1 >= max ? blocksLastLineNoMargin[p] : blocks[p];\n                }\n                ascii += \"\\n\";\n            }\n            if (size % 2 && margin > 0) {\n                return ascii.substring(0, ascii.length - size - 1) + Array(size + 1).join(\"▀\");\n            }\n            return ascii.substring(0, ascii.length - 1);\n        };\n        _this.createASCII = function(cellSize, margin) {\n            cellSize = cellSize || 1;\n            if (cellSize < 2) {\n                return _createHalfASCII(margin);\n            }\n            cellSize -= 1;\n            margin = typeof margin == \"undefined\" ? cellSize * 2 : margin;\n            var size = _this.getModuleCount() * cellSize + margin * 2;\n            var min = margin;\n            var max = size - margin;\n            var y, x, r, p;\n            var white = Array(cellSize + 1).join(\"██\");\n            var black = Array(cellSize + 1).join(\"  \");\n            var ascii = \"\";\n            var line = \"\";\n            for(y = 0; y < size; y += 1){\n                r = Math.floor((y - min) / cellSize);\n                line = \"\";\n                for(x = 0; x < size; x += 1){\n                    p = 1;\n                    if (min <= x && x < max && min <= y && y < max && _this.isDark(r, Math.floor((x - min) / cellSize))) {\n                        p = 0;\n                    }\n                    // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n                    line += p ? white : black;\n                }\n                for(r = 0; r < cellSize; r += 1){\n                    ascii += line + \"\\n\";\n                }\n            }\n            return ascii.substring(0, ascii.length - 1);\n        };\n        _this.renderTo2dContext = function(context, cellSize) {\n            cellSize = cellSize || 2;\n            var length = _this.getModuleCount();\n            for(var row = 0; row < length; row++){\n                for(var col = 0; col < length; col++){\n                    context.fillStyle = _this.isDark(row, col) ? \"black\" : \"white\";\n                    context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);\n                }\n            }\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // qrcode.stringToBytes\n    //---------------------------------------------------------------------\n    qrcode.stringToBytesFuncs = {\n        \"default\": function(s) {\n            var bytes = [];\n            for(var i = 0; i < s.length; i += 1){\n                var c = s.charCodeAt(i);\n                bytes.push(c & 0xff);\n            }\n            return bytes;\n        }\n    };\n    qrcode.stringToBytes = qrcode.stringToBytesFuncs[\"default\"];\n    //---------------------------------------------------------------------\n    // qrcode.createStringToBytes\n    //---------------------------------------------------------------------\n    /**\n   * @param unicodeData base64 string of byte array.\n   * [16bit Unicode],[16bit Bytes], ...\n   * @param numChars\n   */ qrcode.createStringToBytes = function(unicodeData, numChars) {\n        // create conversion map.\n        var unicodeMap = function() {\n            var bin = base64DecodeInputStream(unicodeData);\n            var read = function() {\n                var b = bin.read();\n                if (b == -1) throw \"eof\";\n                return b;\n            };\n            var count = 0;\n            var unicodeMap = {};\n            while(true){\n                var b0 = bin.read();\n                if (b0 == -1) break;\n                var b1 = read();\n                var b2 = read();\n                var b3 = read();\n                var k = String.fromCharCode(b0 << 8 | b1);\n                var v = b2 << 8 | b3;\n                unicodeMap[k] = v;\n                count += 1;\n            }\n            if (count != numChars) {\n                throw count + \" != \" + numChars;\n            }\n            return unicodeMap;\n        }();\n        var unknownChar = \"?\".charCodeAt(0);\n        return function(s) {\n            var bytes = [];\n            for(var i = 0; i < s.length; i += 1){\n                var c = s.charCodeAt(i);\n                if (c < 128) {\n                    bytes.push(c);\n                } else {\n                    var b = unicodeMap[s.charAt(i)];\n                    if (typeof b == \"number\") {\n                        if ((b & 0xff) == b) {\n                            // 1byte\n                            bytes.push(b);\n                        } else {\n                            // 2bytes\n                            bytes.push(b >>> 8);\n                            bytes.push(b & 0xff);\n                        }\n                    } else {\n                        bytes.push(unknownChar);\n                    }\n                }\n            }\n            return bytes;\n        };\n    };\n    //---------------------------------------------------------------------\n    // QRMode\n    //---------------------------------------------------------------------\n    var QRMode = {\n        MODE_NUMBER: 1 << 0,\n        MODE_ALPHA_NUM: 1 << 1,\n        MODE_8BIT_BYTE: 1 << 2,\n        MODE_KANJI: 1 << 3\n    };\n    //---------------------------------------------------------------------\n    // QRErrorCorrectionLevel\n    //---------------------------------------------------------------------\n    var QRErrorCorrectionLevel = {\n        L: 1,\n        M: 0,\n        Q: 3,\n        H: 2\n    };\n    //---------------------------------------------------------------------\n    // QRMaskPattern\n    //---------------------------------------------------------------------\n    var QRMaskPattern = {\n        PATTERN000: 0,\n        PATTERN001: 1,\n        PATTERN010: 2,\n        PATTERN011: 3,\n        PATTERN100: 4,\n        PATTERN101: 5,\n        PATTERN110: 6,\n        PATTERN111: 7\n    };\n    //---------------------------------------------------------------------\n    // QRUtil\n    //---------------------------------------------------------------------\n    var QRUtil = function() {\n        var PATTERN_POSITION_TABLE = [\n            [],\n            [\n                6,\n                18\n            ],\n            [\n                6,\n                22\n            ],\n            [\n                6,\n                26\n            ],\n            [\n                6,\n                30\n            ],\n            [\n                6,\n                34\n            ],\n            [\n                6,\n                22,\n                38\n            ],\n            [\n                6,\n                24,\n                42\n            ],\n            [\n                6,\n                26,\n                46\n            ],\n            [\n                6,\n                28,\n                50\n            ],\n            [\n                6,\n                30,\n                54\n            ],\n            [\n                6,\n                32,\n                58\n            ],\n            [\n                6,\n                34,\n                62\n            ],\n            [\n                6,\n                26,\n                46,\n                66\n            ],\n            [\n                6,\n                26,\n                48,\n                70\n            ],\n            [\n                6,\n                26,\n                50,\n                74\n            ],\n            [\n                6,\n                30,\n                54,\n                78\n            ],\n            [\n                6,\n                30,\n                56,\n                82\n            ],\n            [\n                6,\n                30,\n                58,\n                86\n            ],\n            [\n                6,\n                34,\n                62,\n                90\n            ],\n            [\n                6,\n                28,\n                50,\n                72,\n                94\n            ],\n            [\n                6,\n                26,\n                50,\n                74,\n                98\n            ],\n            [\n                6,\n                30,\n                54,\n                78,\n                102\n            ],\n            [\n                6,\n                28,\n                54,\n                80,\n                106\n            ],\n            [\n                6,\n                32,\n                58,\n                84,\n                110\n            ],\n            [\n                6,\n                30,\n                58,\n                86,\n                114\n            ],\n            [\n                6,\n                34,\n                62,\n                90,\n                118\n            ],\n            [\n                6,\n                26,\n                50,\n                74,\n                98,\n                122\n            ],\n            [\n                6,\n                30,\n                54,\n                78,\n                102,\n                126\n            ],\n            [\n                6,\n                26,\n                52,\n                78,\n                104,\n                130\n            ],\n            [\n                6,\n                30,\n                56,\n                82,\n                108,\n                134\n            ],\n            [\n                6,\n                34,\n                60,\n                86,\n                112,\n                138\n            ],\n            [\n                6,\n                30,\n                58,\n                86,\n                114,\n                142\n            ],\n            [\n                6,\n                34,\n                62,\n                90,\n                118,\n                146\n            ],\n            [\n                6,\n                30,\n                54,\n                78,\n                102,\n                126,\n                150\n            ],\n            [\n                6,\n                24,\n                50,\n                76,\n                102,\n                128,\n                154\n            ],\n            [\n                6,\n                28,\n                54,\n                80,\n                106,\n                132,\n                158\n            ],\n            [\n                6,\n                32,\n                58,\n                84,\n                110,\n                136,\n                162\n            ],\n            [\n                6,\n                26,\n                54,\n                82,\n                110,\n                138,\n                166\n            ],\n            [\n                6,\n                30,\n                58,\n                86,\n                114,\n                142,\n                170\n            ]\n        ];\n        var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\n        var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n        var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\n        var _this = {};\n        var getBCHDigit = function(data) {\n            var digit = 0;\n            while(data != 0){\n                digit += 1;\n                data >>>= 1;\n            }\n            return digit;\n        };\n        _this.getBCHTypeInfo = function(data) {\n            var d = data << 10;\n            while(getBCHDigit(d) - getBCHDigit(G15) >= 0){\n                d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);\n            }\n            return (data << 10 | d) ^ G15_MASK;\n        };\n        _this.getBCHTypeNumber = function(data) {\n            var d = data << 12;\n            while(getBCHDigit(d) - getBCHDigit(G18) >= 0){\n                d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);\n            }\n            return data << 12 | d;\n        };\n        _this.getPatternPosition = function(typeNumber) {\n            return PATTERN_POSITION_TABLE[typeNumber - 1];\n        };\n        _this.getMaskFunction = function(maskPattern) {\n            switch(maskPattern){\n                case QRMaskPattern.PATTERN000:\n                    return function(i, j) {\n                        return (i + j) % 2 == 0;\n                    };\n                case QRMaskPattern.PATTERN001:\n                    return function(i, j) {\n                        return i % 2 == 0;\n                    };\n                case QRMaskPattern.PATTERN010:\n                    return function(i, j) {\n                        return j % 3 == 0;\n                    };\n                case QRMaskPattern.PATTERN011:\n                    return function(i, j) {\n                        return (i + j) % 3 == 0;\n                    };\n                case QRMaskPattern.PATTERN100:\n                    return function(i, j) {\n                        return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n                    };\n                case QRMaskPattern.PATTERN101:\n                    return function(i, j) {\n                        return i * j % 2 + i * j % 3 == 0;\n                    };\n                case QRMaskPattern.PATTERN110:\n                    return function(i, j) {\n                        return (i * j % 2 + i * j % 3) % 2 == 0;\n                    };\n                case QRMaskPattern.PATTERN111:\n                    return function(i, j) {\n                        return (i * j % 3 + (i + j) % 2) % 2 == 0;\n                    };\n                default:\n                    throw \"bad maskPattern:\" + maskPattern;\n            }\n        };\n        _this.getErrorCorrectPolynomial = function(errorCorrectLength) {\n            var a = qrPolynomial([\n                1\n            ], 0);\n            for(var i = 0; i < errorCorrectLength; i += 1){\n                a = a.multiply(qrPolynomial([\n                    1,\n                    QRMath.gexp(i)\n                ], 0));\n            }\n            return a;\n        };\n        _this.getLengthInBits = function(mode, type) {\n            if (1 <= type && type < 10) {\n                // 1 - 9\n                switch(mode){\n                    case QRMode.MODE_NUMBER:\n                        return 10;\n                    case QRMode.MODE_ALPHA_NUM:\n                        return 9;\n                    case QRMode.MODE_8BIT_BYTE:\n                        return 8;\n                    case QRMode.MODE_KANJI:\n                        return 8;\n                    default:\n                        throw \"mode:\" + mode;\n                }\n            } else if (type < 27) {\n                // 10 - 26\n                switch(mode){\n                    case QRMode.MODE_NUMBER:\n                        return 12;\n                    case QRMode.MODE_ALPHA_NUM:\n                        return 11;\n                    case QRMode.MODE_8BIT_BYTE:\n                        return 16;\n                    case QRMode.MODE_KANJI:\n                        return 10;\n                    default:\n                        throw \"mode:\" + mode;\n                }\n            } else if (type < 41) {\n                // 27 - 40\n                switch(mode){\n                    case QRMode.MODE_NUMBER:\n                        return 14;\n                    case QRMode.MODE_ALPHA_NUM:\n                        return 13;\n                    case QRMode.MODE_8BIT_BYTE:\n                        return 16;\n                    case QRMode.MODE_KANJI:\n                        return 12;\n                    default:\n                        throw \"mode:\" + mode;\n                }\n            } else {\n                throw \"type:\" + type;\n            }\n        };\n        _this.getLostPoint = function(qrcode) {\n            var moduleCount = qrcode.getModuleCount();\n            var lostPoint = 0;\n            // LEVEL1\n            for(var row = 0; row < moduleCount; row += 1){\n                for(var col = 0; col < moduleCount; col += 1){\n                    var sameCount = 0;\n                    var dark = qrcode.isDark(row, col);\n                    for(var r = -1; r <= 1; r += 1){\n                        if (row + r < 0 || moduleCount <= row + r) {\n                            continue;\n                        }\n                        for(var c = -1; c <= 1; c += 1){\n                            if (col + c < 0 || moduleCount <= col + c) {\n                                continue;\n                            }\n                            if (r == 0 && c == 0) {\n                                continue;\n                            }\n                            if (dark == qrcode.isDark(row + r, col + c)) {\n                                sameCount += 1;\n                            }\n                        }\n                    }\n                    if (sameCount > 5) {\n                        lostPoint += 3 + sameCount - 5;\n                    }\n                }\n            }\n            ;\n            // LEVEL2\n            for(var row = 0; row < moduleCount - 1; row += 1){\n                for(var col = 0; col < moduleCount - 1; col += 1){\n                    var count = 0;\n                    if (qrcode.isDark(row, col)) count += 1;\n                    if (qrcode.isDark(row + 1, col)) count += 1;\n                    if (qrcode.isDark(row, col + 1)) count += 1;\n                    if (qrcode.isDark(row + 1, col + 1)) count += 1;\n                    if (count == 0 || count == 4) {\n                        lostPoint += 3;\n                    }\n                }\n            }\n            // LEVEL3\n            for(var row = 0; row < moduleCount; row += 1){\n                for(var col = 0; col < moduleCount - 6; col += 1){\n                    if (qrcode.isDark(row, col) && !qrcode.isDark(row, col + 1) && qrcode.isDark(row, col + 2) && qrcode.isDark(row, col + 3) && qrcode.isDark(row, col + 4) && !qrcode.isDark(row, col + 5) && qrcode.isDark(row, col + 6)) {\n                        lostPoint += 40;\n                    }\n                }\n            }\n            for(var col = 0; col < moduleCount; col += 1){\n                for(var row = 0; row < moduleCount - 6; row += 1){\n                    if (qrcode.isDark(row, col) && !qrcode.isDark(row + 1, col) && qrcode.isDark(row + 2, col) && qrcode.isDark(row + 3, col) && qrcode.isDark(row + 4, col) && !qrcode.isDark(row + 5, col) && qrcode.isDark(row + 6, col)) {\n                        lostPoint += 40;\n                    }\n                }\n            }\n            // LEVEL4\n            var darkCount = 0;\n            for(var col = 0; col < moduleCount; col += 1){\n                for(var row = 0; row < moduleCount; row += 1){\n                    if (qrcode.isDark(row, col)) {\n                        darkCount += 1;\n                    }\n                }\n            }\n            var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n            lostPoint += ratio * 10;\n            return lostPoint;\n        };\n        return _this;\n    }();\n    //---------------------------------------------------------------------\n    // QRMath\n    //---------------------------------------------------------------------\n    var QRMath = function() {\n        var EXP_TABLE = new Array(256);\n        var LOG_TABLE = new Array(256);\n        // initialize tables\n        for(var i = 0; i < 8; i += 1){\n            EXP_TABLE[i] = 1 << i;\n        }\n        for(var i = 8; i < 256; i += 1){\n            EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8];\n        }\n        for(var i = 0; i < 255; i += 1){\n            LOG_TABLE[EXP_TABLE[i]] = i;\n        }\n        var _this = {};\n        _this.glog = function(n) {\n            if (n < 1) {\n                throw \"glog(\" + n + \")\";\n            }\n            return LOG_TABLE[n];\n        };\n        _this.gexp = function(n) {\n            while(n < 0){\n                n += 255;\n            }\n            while(n >= 256){\n                n -= 255;\n            }\n            return EXP_TABLE[n];\n        };\n        return _this;\n    }();\n    //---------------------------------------------------------------------\n    // qrPolynomial\n    //---------------------------------------------------------------------\n    function qrPolynomial(num, shift) {\n        if (typeof num.length == \"undefined\") {\n            throw num.length + \"/\" + shift;\n        }\n        var _num = function() {\n            var offset = 0;\n            while(offset < num.length && num[offset] == 0){\n                offset += 1;\n            }\n            var _num = new Array(num.length - offset + shift);\n            for(var i = 0; i < num.length - offset; i += 1){\n                _num[i] = num[i + offset];\n            }\n            return _num;\n        }();\n        var _this = {};\n        _this.getAt = function(index) {\n            return _num[index];\n        };\n        _this.getLength = function() {\n            return _num.length;\n        };\n        _this.multiply = function(e) {\n            var num = new Array(_this.getLength() + e.getLength() - 1);\n            for(var i = 0; i < _this.getLength(); i += 1){\n                for(var j = 0; j < e.getLength(); j += 1){\n                    num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)));\n                }\n            }\n            return qrPolynomial(num, 0);\n        };\n        _this.mod = function(e) {\n            if (_this.getLength() - e.getLength() < 0) {\n                return _this;\n            }\n            var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0));\n            var num = new Array(_this.getLength());\n            for(var i = 0; i < _this.getLength(); i += 1){\n                num[i] = _this.getAt(i);\n            }\n            for(var i = 0; i < e.getLength(); i += 1){\n                num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio);\n            }\n            // recursive call\n            return qrPolynomial(num, 0).mod(e);\n        };\n        return _this;\n    }\n    ;\n    //---------------------------------------------------------------------\n    // QRRSBlock\n    //---------------------------------------------------------------------\n    var QRRSBlock = function() {\n        var RS_BLOCK_TABLE = [\n            // L\n            // M\n            // Q\n            // H\n            // 1\n            [\n                1,\n                26,\n                19\n            ],\n            [\n                1,\n                26,\n                16\n            ],\n            [\n                1,\n                26,\n                13\n            ],\n            [\n                1,\n                26,\n                9\n            ],\n            // 2\n            [\n                1,\n                44,\n                34\n            ],\n            [\n                1,\n                44,\n                28\n            ],\n            [\n                1,\n                44,\n                22\n            ],\n            [\n                1,\n                44,\n                16\n            ],\n            // 3\n            [\n                1,\n                70,\n                55\n            ],\n            [\n                1,\n                70,\n                44\n            ],\n            [\n                2,\n                35,\n                17\n            ],\n            [\n                2,\n                35,\n                13\n            ],\n            // 4\n            [\n                1,\n                100,\n                80\n            ],\n            [\n                2,\n                50,\n                32\n            ],\n            [\n                2,\n                50,\n                24\n            ],\n            [\n                4,\n                25,\n                9\n            ],\n            // 5\n            [\n                1,\n                134,\n                108\n            ],\n            [\n                2,\n                67,\n                43\n            ],\n            [\n                2,\n                33,\n                15,\n                2,\n                34,\n                16\n            ],\n            [\n                2,\n                33,\n                11,\n                2,\n                34,\n                12\n            ],\n            // 6\n            [\n                2,\n                86,\n                68\n            ],\n            [\n                4,\n                43,\n                27\n            ],\n            [\n                4,\n                43,\n                19\n            ],\n            [\n                4,\n                43,\n                15\n            ],\n            // 7\n            [\n                2,\n                98,\n                78\n            ],\n            [\n                4,\n                49,\n                31\n            ],\n            [\n                2,\n                32,\n                14,\n                4,\n                33,\n                15\n            ],\n            [\n                4,\n                39,\n                13,\n                1,\n                40,\n                14\n            ],\n            // 8\n            [\n                2,\n                121,\n                97\n            ],\n            [\n                2,\n                60,\n                38,\n                2,\n                61,\n                39\n            ],\n            [\n                4,\n                40,\n                18,\n                2,\n                41,\n                19\n            ],\n            [\n                4,\n                40,\n                14,\n                2,\n                41,\n                15\n            ],\n            // 9\n            [\n                2,\n                146,\n                116\n            ],\n            [\n                3,\n                58,\n                36,\n                2,\n                59,\n                37\n            ],\n            [\n                4,\n                36,\n                16,\n                4,\n                37,\n                17\n            ],\n            [\n                4,\n                36,\n                12,\n                4,\n                37,\n                13\n            ],\n            // 10\n            [\n                2,\n                86,\n                68,\n                2,\n                87,\n                69\n            ],\n            [\n                4,\n                69,\n                43,\n                1,\n                70,\n                44\n            ],\n            [\n                6,\n                43,\n                19,\n                2,\n                44,\n                20\n            ],\n            [\n                6,\n                43,\n                15,\n                2,\n                44,\n                16\n            ],\n            // 11\n            [\n                4,\n                101,\n                81\n            ],\n            [\n                1,\n                80,\n                50,\n                4,\n                81,\n                51\n            ],\n            [\n                4,\n                50,\n                22,\n                4,\n                51,\n                23\n            ],\n            [\n                3,\n                36,\n                12,\n                8,\n                37,\n                13\n            ],\n            // 12\n            [\n                2,\n                116,\n                92,\n                2,\n                117,\n                93\n            ],\n            [\n                6,\n                58,\n                36,\n                2,\n                59,\n                37\n            ],\n            [\n                4,\n                46,\n                20,\n                6,\n                47,\n                21\n            ],\n            [\n                7,\n                42,\n                14,\n                4,\n                43,\n                15\n            ],\n            // 13\n            [\n                4,\n                133,\n                107\n            ],\n            [\n                8,\n                59,\n                37,\n                1,\n                60,\n                38\n            ],\n            [\n                8,\n                44,\n                20,\n                4,\n                45,\n                21\n            ],\n            [\n                12,\n                33,\n                11,\n                4,\n                34,\n                12\n            ],\n            // 14\n            [\n                3,\n                145,\n                115,\n                1,\n                146,\n                116\n            ],\n            [\n                4,\n                64,\n                40,\n                5,\n                65,\n                41\n            ],\n            [\n                11,\n                36,\n                16,\n                5,\n                37,\n                17\n            ],\n            [\n                11,\n                36,\n                12,\n                5,\n                37,\n                13\n            ],\n            // 15\n            [\n                5,\n                109,\n                87,\n                1,\n                110,\n                88\n            ],\n            [\n                5,\n                65,\n                41,\n                5,\n                66,\n                42\n            ],\n            [\n                5,\n                54,\n                24,\n                7,\n                55,\n                25\n            ],\n            [\n                11,\n                36,\n                12,\n                7,\n                37,\n                13\n            ],\n            // 16\n            [\n                5,\n                122,\n                98,\n                1,\n                123,\n                99\n            ],\n            [\n                7,\n                73,\n                45,\n                3,\n                74,\n                46\n            ],\n            [\n                15,\n                43,\n                19,\n                2,\n                44,\n                20\n            ],\n            [\n                3,\n                45,\n                15,\n                13,\n                46,\n                16\n            ],\n            // 17\n            [\n                1,\n                135,\n                107,\n                5,\n                136,\n                108\n            ],\n            [\n                10,\n                74,\n                46,\n                1,\n                75,\n                47\n            ],\n            [\n                1,\n                50,\n                22,\n                15,\n                51,\n                23\n            ],\n            [\n                2,\n                42,\n                14,\n                17,\n                43,\n                15\n            ],\n            // 18\n            [\n                5,\n                150,\n                120,\n                1,\n                151,\n                121\n            ],\n            [\n                9,\n                69,\n                43,\n                4,\n                70,\n                44\n            ],\n            [\n                17,\n                50,\n                22,\n                1,\n                51,\n                23\n            ],\n            [\n                2,\n                42,\n                14,\n                19,\n                43,\n                15\n            ],\n            // 19\n            [\n                3,\n                141,\n                113,\n                4,\n                142,\n                114\n            ],\n            [\n                3,\n                70,\n                44,\n                11,\n                71,\n                45\n            ],\n            [\n                17,\n                47,\n                21,\n                4,\n                48,\n                22\n            ],\n            [\n                9,\n                39,\n                13,\n                16,\n                40,\n                14\n            ],\n            // 20\n            [\n                3,\n                135,\n                107,\n                5,\n                136,\n                108\n            ],\n            [\n                3,\n                67,\n                41,\n                13,\n                68,\n                42\n            ],\n            [\n                15,\n                54,\n                24,\n                5,\n                55,\n                25\n            ],\n            [\n                15,\n                43,\n                15,\n                10,\n                44,\n                16\n            ],\n            // 21\n            [\n                4,\n                144,\n                116,\n                4,\n                145,\n                117\n            ],\n            [\n                17,\n                68,\n                42\n            ],\n            [\n                17,\n                50,\n                22,\n                6,\n                51,\n                23\n            ],\n            [\n                19,\n                46,\n                16,\n                6,\n                47,\n                17\n            ],\n            // 22\n            [\n                2,\n                139,\n                111,\n                7,\n                140,\n                112\n            ],\n            [\n                17,\n                74,\n                46\n            ],\n            [\n                7,\n                54,\n                24,\n                16,\n                55,\n                25\n            ],\n            [\n                34,\n                37,\n                13\n            ],\n            // 23\n            [\n                4,\n                151,\n                121,\n                5,\n                152,\n                122\n            ],\n            [\n                4,\n                75,\n                47,\n                14,\n                76,\n                48\n            ],\n            [\n                11,\n                54,\n                24,\n                14,\n                55,\n                25\n            ],\n            [\n                16,\n                45,\n                15,\n                14,\n                46,\n                16\n            ],\n            // 24\n            [\n                6,\n                147,\n                117,\n                4,\n                148,\n                118\n            ],\n            [\n                6,\n                73,\n                45,\n                14,\n                74,\n                46\n            ],\n            [\n                11,\n                54,\n                24,\n                16,\n                55,\n                25\n            ],\n            [\n                30,\n                46,\n                16,\n                2,\n                47,\n                17\n            ],\n            // 25\n            [\n                8,\n                132,\n                106,\n                4,\n                133,\n                107\n            ],\n            [\n                8,\n                75,\n                47,\n                13,\n                76,\n                48\n            ],\n            [\n                7,\n                54,\n                24,\n                22,\n                55,\n                25\n            ],\n            [\n                22,\n                45,\n                15,\n                13,\n                46,\n                16\n            ],\n            // 26\n            [\n                10,\n                142,\n                114,\n                2,\n                143,\n                115\n            ],\n            [\n                19,\n                74,\n                46,\n                4,\n                75,\n                47\n            ],\n            [\n                28,\n                50,\n                22,\n                6,\n                51,\n                23\n            ],\n            [\n                33,\n                46,\n                16,\n                4,\n                47,\n                17\n            ],\n            // 27\n            [\n                8,\n                152,\n                122,\n                4,\n                153,\n                123\n            ],\n            [\n                22,\n                73,\n                45,\n                3,\n                74,\n                46\n            ],\n            [\n                8,\n                53,\n                23,\n                26,\n                54,\n                24\n            ],\n            [\n                12,\n                45,\n                15,\n                28,\n                46,\n                16\n            ],\n            // 28\n            [\n                3,\n                147,\n                117,\n                10,\n                148,\n                118\n            ],\n            [\n                3,\n                73,\n                45,\n                23,\n                74,\n                46\n            ],\n            [\n                4,\n                54,\n                24,\n                31,\n                55,\n                25\n            ],\n            [\n                11,\n                45,\n                15,\n                31,\n                46,\n                16\n            ],\n            // 29\n            [\n                7,\n                146,\n                116,\n                7,\n                147,\n                117\n            ],\n            [\n                21,\n                73,\n                45,\n                7,\n                74,\n                46\n            ],\n            [\n                1,\n                53,\n                23,\n                37,\n                54,\n                24\n            ],\n            [\n                19,\n                45,\n                15,\n                26,\n                46,\n                16\n            ],\n            // 30\n            [\n                5,\n                145,\n                115,\n                10,\n                146,\n                116\n            ],\n            [\n                19,\n                75,\n                47,\n                10,\n                76,\n                48\n            ],\n            [\n                15,\n                54,\n                24,\n                25,\n                55,\n                25\n            ],\n            [\n                23,\n                45,\n                15,\n                25,\n                46,\n                16\n            ],\n            // 31\n            [\n                13,\n                145,\n                115,\n                3,\n                146,\n                116\n            ],\n            [\n                2,\n                74,\n                46,\n                29,\n                75,\n                47\n            ],\n            [\n                42,\n                54,\n                24,\n                1,\n                55,\n                25\n            ],\n            [\n                23,\n                45,\n                15,\n                28,\n                46,\n                16\n            ],\n            // 32\n            [\n                17,\n                145,\n                115\n            ],\n            [\n                10,\n                74,\n                46,\n                23,\n                75,\n                47\n            ],\n            [\n                10,\n                54,\n                24,\n                35,\n                55,\n                25\n            ],\n            [\n                19,\n                45,\n                15,\n                35,\n                46,\n                16\n            ],\n            // 33\n            [\n                17,\n                145,\n                115,\n                1,\n                146,\n                116\n            ],\n            [\n                14,\n                74,\n                46,\n                21,\n                75,\n                47\n            ],\n            [\n                29,\n                54,\n                24,\n                19,\n                55,\n                25\n            ],\n            [\n                11,\n                45,\n                15,\n                46,\n                46,\n                16\n            ],\n            // 34\n            [\n                13,\n                145,\n                115,\n                6,\n                146,\n                116\n            ],\n            [\n                14,\n                74,\n                46,\n                23,\n                75,\n                47\n            ],\n            [\n                44,\n                54,\n                24,\n                7,\n                55,\n                25\n            ],\n            [\n                59,\n                46,\n                16,\n                1,\n                47,\n                17\n            ],\n            // 35\n            [\n                12,\n                151,\n                121,\n                7,\n                152,\n                122\n            ],\n            [\n                12,\n                75,\n                47,\n                26,\n                76,\n                48\n            ],\n            [\n                39,\n                54,\n                24,\n                14,\n                55,\n                25\n            ],\n            [\n                22,\n                45,\n                15,\n                41,\n                46,\n                16\n            ],\n            // 36\n            [\n                6,\n                151,\n                121,\n                14,\n                152,\n                122\n            ],\n            [\n                6,\n                75,\n                47,\n                34,\n                76,\n                48\n            ],\n            [\n                46,\n                54,\n                24,\n                10,\n                55,\n                25\n            ],\n            [\n                2,\n                45,\n                15,\n                64,\n                46,\n                16\n            ],\n            // 37\n            [\n                17,\n                152,\n                122,\n                4,\n                153,\n                123\n            ],\n            [\n                29,\n                74,\n                46,\n                14,\n                75,\n                47\n            ],\n            [\n                49,\n                54,\n                24,\n                10,\n                55,\n                25\n            ],\n            [\n                24,\n                45,\n                15,\n                46,\n                46,\n                16\n            ],\n            // 38\n            [\n                4,\n                152,\n                122,\n                18,\n                153,\n                123\n            ],\n            [\n                13,\n                74,\n                46,\n                32,\n                75,\n                47\n            ],\n            [\n                48,\n                54,\n                24,\n                14,\n                55,\n                25\n            ],\n            [\n                42,\n                45,\n                15,\n                32,\n                46,\n                16\n            ],\n            // 39\n            [\n                20,\n                147,\n                117,\n                4,\n                148,\n                118\n            ],\n            [\n                40,\n                75,\n                47,\n                7,\n                76,\n                48\n            ],\n            [\n                43,\n                54,\n                24,\n                22,\n                55,\n                25\n            ],\n            [\n                10,\n                45,\n                15,\n                67,\n                46,\n                16\n            ],\n            // 40\n            [\n                19,\n                148,\n                118,\n                6,\n                149,\n                119\n            ],\n            [\n                18,\n                75,\n                47,\n                31,\n                76,\n                48\n            ],\n            [\n                34,\n                54,\n                24,\n                34,\n                55,\n                25\n            ],\n            [\n                20,\n                45,\n                15,\n                61,\n                46,\n                16\n            ]\n        ];\n        var qrRSBlock = function(totalCount, dataCount) {\n            var _this = {};\n            _this.totalCount = totalCount;\n            _this.dataCount = dataCount;\n            return _this;\n        };\n        var _this = {};\n        var getRsBlockTable = function(typeNumber, errorCorrectionLevel) {\n            switch(errorCorrectionLevel){\n                case QRErrorCorrectionLevel.L:\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n                case QRErrorCorrectionLevel.M:\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n                case QRErrorCorrectionLevel.Q:\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n                case QRErrorCorrectionLevel.H:\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n                default:\n                    return undefined;\n            }\n        };\n        _this.getRSBlocks = function(typeNumber, errorCorrectionLevel) {\n            var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);\n            if (typeof rsBlock == \"undefined\") {\n                throw \"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectionLevel:\" + errorCorrectionLevel;\n            }\n            var length = rsBlock.length / 3;\n            var list = [];\n            for(var i = 0; i < length; i += 1){\n                var count = rsBlock[i * 3 + 0];\n                var totalCount = rsBlock[i * 3 + 1];\n                var dataCount = rsBlock[i * 3 + 2];\n                for(var j = 0; j < count; j += 1){\n                    list.push(qrRSBlock(totalCount, dataCount));\n                }\n            }\n            return list;\n        };\n        return _this;\n    }();\n    //---------------------------------------------------------------------\n    // qrBitBuffer\n    //---------------------------------------------------------------------\n    var qrBitBuffer = function() {\n        var _buffer = [];\n        var _length = 0;\n        var _this = {};\n        _this.getBuffer = function() {\n            return _buffer;\n        };\n        _this.getAt = function(index) {\n            var bufIndex = Math.floor(index / 8);\n            return (_buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n        };\n        _this.put = function(num, length) {\n            for(var i = 0; i < length; i += 1){\n                _this.putBit((num >>> length - i - 1 & 1) == 1);\n            }\n        };\n        _this.getLengthInBits = function() {\n            return _length;\n        };\n        _this.putBit = function(bit) {\n            var bufIndex = Math.floor(_length / 8);\n            if (_buffer.length <= bufIndex) {\n                _buffer.push(0);\n            }\n            if (bit) {\n                _buffer[bufIndex] |= 0x80 >>> _length % 8;\n            }\n            _length += 1;\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // qrNumber\n    //---------------------------------------------------------------------\n    var qrNumber = function(data) {\n        var _mode = QRMode.MODE_NUMBER;\n        var _data = data;\n        var _this = {};\n        _this.getMode = function() {\n            return _mode;\n        };\n        _this.getLength = function(buffer) {\n            return _data.length;\n        };\n        _this.write = function(buffer) {\n            var data = _data;\n            var i = 0;\n            while(i + 2 < data.length){\n                buffer.put(strToNum(data.substring(i, i + 3)), 10);\n                i += 3;\n            }\n            if (i < data.length) {\n                if (data.length - i == 1) {\n                    buffer.put(strToNum(data.substring(i, i + 1)), 4);\n                } else if (data.length - i == 2) {\n                    buffer.put(strToNum(data.substring(i, i + 2)), 7);\n                }\n            }\n        };\n        var strToNum = function(s) {\n            var num = 0;\n            for(var i = 0; i < s.length; i += 1){\n                num = num * 10 + chatToNum(s.charAt(i));\n            }\n            return num;\n        };\n        var chatToNum = function(c) {\n            if (\"0\" <= c && c <= \"9\") {\n                return c.charCodeAt(0) - \"0\".charCodeAt(0);\n            }\n            throw \"illegal char :\" + c;\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // qrAlphaNum\n    //---------------------------------------------------------------------\n    var qrAlphaNum = function(data) {\n        var _mode = QRMode.MODE_ALPHA_NUM;\n        var _data = data;\n        var _this = {};\n        _this.getMode = function() {\n            return _mode;\n        };\n        _this.getLength = function(buffer) {\n            return _data.length;\n        };\n        _this.write = function(buffer) {\n            var s = _data;\n            var i = 0;\n            while(i + 1 < s.length){\n                buffer.put(getCode(s.charAt(i)) * 45 + getCode(s.charAt(i + 1)), 11);\n                i += 2;\n            }\n            if (i < s.length) {\n                buffer.put(getCode(s.charAt(i)), 6);\n            }\n        };\n        var getCode = function(c) {\n            if (\"0\" <= c && c <= \"9\") {\n                return c.charCodeAt(0) - \"0\".charCodeAt(0);\n            } else if (\"A\" <= c && c <= \"Z\") {\n                return c.charCodeAt(0) - \"A\".charCodeAt(0) + 10;\n            } else {\n                switch(c){\n                    case \" \":\n                        return 36;\n                    case \"$\":\n                        return 37;\n                    case \"%\":\n                        return 38;\n                    case \"*\":\n                        return 39;\n                    case \"+\":\n                        return 40;\n                    case \"-\":\n                        return 41;\n                    case \".\":\n                        return 42;\n                    case \"/\":\n                        return 43;\n                    case \":\":\n                        return 44;\n                    default:\n                        throw \"illegal char :\" + c;\n                }\n            }\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // qr8BitByte\n    //---------------------------------------------------------------------\n    var qr8BitByte = function(data) {\n        var _mode = QRMode.MODE_8BIT_BYTE;\n        var _data = data;\n        var _bytes = qrcode.stringToBytes(data);\n        var _this = {};\n        _this.getMode = function() {\n            return _mode;\n        };\n        _this.getLength = function(buffer) {\n            return _bytes.length;\n        };\n        _this.write = function(buffer) {\n            for(var i = 0; i < _bytes.length; i += 1){\n                buffer.put(_bytes[i], 8);\n            }\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // qrKanji\n    //---------------------------------------------------------------------\n    var qrKanji = function(data) {\n        var _mode = QRMode.MODE_KANJI;\n        var _data = data;\n        var stringToBytes = qrcode.stringToBytesFuncs[\"SJIS\"];\n        if (!stringToBytes) {\n            throw \"sjis not supported.\";\n        }\n        !function(c, code) {\n            // self test for sjis support.\n            var test = stringToBytes(c);\n            if (test.length != 2 || (test[0] << 8 | test[1]) != code) {\n                throw \"sjis not supported.\";\n            }\n        }(\"友\", 0x9746);\n        var _bytes = stringToBytes(data);\n        var _this = {};\n        _this.getMode = function() {\n            return _mode;\n        };\n        _this.getLength = function(buffer) {\n            return ~~(_bytes.length / 2);\n        };\n        _this.write = function(buffer) {\n            var data = _bytes;\n            var i = 0;\n            while(i + 1 < data.length){\n                var c = (0xff & data[i]) << 8 | 0xff & data[i + 1];\n                if (0x8140 <= c && c <= 0x9FFC) {\n                    c -= 0x8140;\n                } else if (0xE040 <= c && c <= 0xEBBF) {\n                    c -= 0xC140;\n                } else {\n                    throw \"illegal char at \" + (i + 1) + \"/\" + c;\n                }\n                c = (c >>> 8 & 0xff) * 0xC0 + (c & 0xff);\n                buffer.put(c, 13);\n                i += 2;\n            }\n            if (i < data.length) {\n                throw \"illegal char at \" + (i + 1);\n            }\n        };\n        return _this;\n    };\n    //=====================================================================\n    // GIF Support etc.\n    //\n    //---------------------------------------------------------------------\n    // byteArrayOutputStream\n    //---------------------------------------------------------------------\n    var byteArrayOutputStream = function() {\n        var _bytes = [];\n        var _this = {};\n        _this.writeByte = function(b) {\n            _bytes.push(b & 0xff);\n        };\n        _this.writeShort = function(i) {\n            _this.writeByte(i);\n            _this.writeByte(i >>> 8);\n        };\n        _this.writeBytes = function(b, off, len) {\n            off = off || 0;\n            len = len || b.length;\n            for(var i = 0; i < len; i += 1){\n                _this.writeByte(b[i + off]);\n            }\n        };\n        _this.writeString = function(s) {\n            for(var i = 0; i < s.length; i += 1){\n                _this.writeByte(s.charCodeAt(i));\n            }\n        };\n        _this.toByteArray = function() {\n            return _bytes;\n        };\n        _this.toString = function() {\n            var s = \"\";\n            s += \"[\";\n            for(var i = 0; i < _bytes.length; i += 1){\n                if (i > 0) {\n                    s += \",\";\n                }\n                s += _bytes[i];\n            }\n            s += \"]\";\n            return s;\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // base64EncodeOutputStream\n    //---------------------------------------------------------------------\n    var base64EncodeOutputStream = function() {\n        var _buffer = 0;\n        var _buflen = 0;\n        var _length = 0;\n        var _base64 = \"\";\n        var _this = {};\n        var writeEncoded = function(b) {\n            _base64 += String.fromCharCode(encode(b & 0x3f));\n        };\n        var encode = function(n) {\n            if (n < 0) {\n            // error.\n            } else if (n < 26) {\n                return 0x41 + n;\n            } else if (n < 52) {\n                return 0x61 + (n - 26);\n            } else if (n < 62) {\n                return 0x30 + (n - 52);\n            } else if (n == 62) {\n                return 0x2b;\n            } else if (n == 63) {\n                return 0x2f;\n            }\n            throw \"n:\" + n;\n        };\n        _this.writeByte = function(n) {\n            _buffer = _buffer << 8 | n & 0xff;\n            _buflen += 8;\n            _length += 1;\n            while(_buflen >= 6){\n                writeEncoded(_buffer >>> _buflen - 6);\n                _buflen -= 6;\n            }\n        };\n        _this.flush = function() {\n            if (_buflen > 0) {\n                writeEncoded(_buffer << 6 - _buflen);\n                _buffer = 0;\n                _buflen = 0;\n            }\n            if (_length % 3 != 0) {\n                // padding\n                var padlen = 3 - _length % 3;\n                for(var i = 0; i < padlen; i += 1){\n                    _base64 += \"=\";\n                }\n            }\n        };\n        _this.toString = function() {\n            return _base64;\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // base64DecodeInputStream\n    //---------------------------------------------------------------------\n    var base64DecodeInputStream = function(str) {\n        var _str = str;\n        var _pos = 0;\n        var _buffer = 0;\n        var _buflen = 0;\n        var _this = {};\n        _this.read = function() {\n            while(_buflen < 8){\n                if (_pos >= _str.length) {\n                    if (_buflen == 0) {\n                        return -1;\n                    }\n                    throw \"unexpected end of file./\" + _buflen;\n                }\n                var c = _str.charAt(_pos);\n                _pos += 1;\n                if (c == \"=\") {\n                    _buflen = 0;\n                    return -1;\n                } else if (c.match(/^\\s$/)) {\n                    continue;\n                }\n                _buffer = _buffer << 6 | decode(c.charCodeAt(0));\n                _buflen += 6;\n            }\n            var n = _buffer >>> _buflen - 8 & 0xff;\n            _buflen -= 8;\n            return n;\n        };\n        var decode = function(c) {\n            if (0x41 <= c && c <= 0x5a) {\n                return c - 0x41;\n            } else if (0x61 <= c && c <= 0x7a) {\n                return c - 0x61 + 26;\n            } else if (0x30 <= c && c <= 0x39) {\n                return c - 0x30 + 52;\n            } else if (c == 0x2b) {\n                return 62;\n            } else if (c == 0x2f) {\n                return 63;\n            } else {\n                throw \"c:\" + c;\n            }\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // gifImage (B/W)\n    //---------------------------------------------------------------------\n    var gifImage = function(width, height) {\n        var _width = width;\n        var _height = height;\n        var _data = new Array(width * height);\n        var _this = {};\n        _this.setPixel = function(x, y, pixel) {\n            _data[y * _width + x] = pixel;\n        };\n        _this.write = function(out) {\n            //---------------------------------\n            // GIF Signature\n            out.writeString(\"GIF87a\");\n            //---------------------------------\n            // Screen Descriptor\n            out.writeShort(_width);\n            out.writeShort(_height);\n            out.writeByte(0x80); // 2bit\n            out.writeByte(0);\n            out.writeByte(0);\n            //---------------------------------\n            // Global Color Map\n            // black\n            out.writeByte(0x00);\n            out.writeByte(0x00);\n            out.writeByte(0x00);\n            // white\n            out.writeByte(0xff);\n            out.writeByte(0xff);\n            out.writeByte(0xff);\n            //---------------------------------\n            // Image Descriptor\n            out.writeString(\",\");\n            out.writeShort(0);\n            out.writeShort(0);\n            out.writeShort(_width);\n            out.writeShort(_height);\n            out.writeByte(0);\n            //---------------------------------\n            // Local Color Map\n            //---------------------------------\n            // Raster Data\n            var lzwMinCodeSize = 2;\n            var raster = getLZWRaster(lzwMinCodeSize);\n            out.writeByte(lzwMinCodeSize);\n            var offset = 0;\n            while(raster.length - offset > 255){\n                out.writeByte(255);\n                out.writeBytes(raster, offset, 255);\n                offset += 255;\n            }\n            out.writeByte(raster.length - offset);\n            out.writeBytes(raster, offset, raster.length - offset);\n            out.writeByte(0x00);\n            //---------------------------------\n            // GIF Terminator\n            out.writeString(\";\");\n        };\n        var bitOutputStream = function(out) {\n            var _out = out;\n            var _bitLength = 0;\n            var _bitBuffer = 0;\n            var _this = {};\n            _this.write = function(data, length) {\n                if (data >>> length != 0) {\n                    throw \"length over\";\n                }\n                while(_bitLength + length >= 8){\n                    _out.writeByte(0xff & (data << _bitLength | _bitBuffer));\n                    length -= 8 - _bitLength;\n                    data >>>= 8 - _bitLength;\n                    _bitBuffer = 0;\n                    _bitLength = 0;\n                }\n                _bitBuffer = data << _bitLength | _bitBuffer;\n                _bitLength = _bitLength + length;\n            };\n            _this.flush = function() {\n                if (_bitLength > 0) {\n                    _out.writeByte(_bitBuffer);\n                }\n            };\n            return _this;\n        };\n        var getLZWRaster = function(lzwMinCodeSize) {\n            var clearCode = 1 << lzwMinCodeSize;\n            var endCode = (1 << lzwMinCodeSize) + 1;\n            var bitLength = lzwMinCodeSize + 1;\n            // Setup LZWTable\n            var table = lzwTable();\n            for(var i = 0; i < clearCode; i += 1){\n                table.add(String.fromCharCode(i));\n            }\n            table.add(String.fromCharCode(clearCode));\n            table.add(String.fromCharCode(endCode));\n            var byteOut = byteArrayOutputStream();\n            var bitOut = bitOutputStream(byteOut);\n            // clear code\n            bitOut.write(clearCode, bitLength);\n            var dataIndex = 0;\n            var s = String.fromCharCode(_data[dataIndex]);\n            dataIndex += 1;\n            while(dataIndex < _data.length){\n                var c = String.fromCharCode(_data[dataIndex]);\n                dataIndex += 1;\n                if (table.contains(s + c)) {\n                    s = s + c;\n                } else {\n                    bitOut.write(table.indexOf(s), bitLength);\n                    if (table.size() < 0xfff) {\n                        if (table.size() == 1 << bitLength) {\n                            bitLength += 1;\n                        }\n                        table.add(s + c);\n                    }\n                    s = c;\n                }\n            }\n            bitOut.write(table.indexOf(s), bitLength);\n            // end code\n            bitOut.write(endCode, bitLength);\n            bitOut.flush();\n            return byteOut.toByteArray();\n        };\n        var lzwTable = function() {\n            var _map = {};\n            var _size = 0;\n            var _this = {};\n            _this.add = function(key) {\n                if (_this.contains(key)) {\n                    throw \"dup key:\" + key;\n                }\n                _map[key] = _size;\n                _size += 1;\n            };\n            _this.size = function() {\n                return _size;\n            };\n            _this.indexOf = function(key) {\n                return _map[key];\n            };\n            _this.contains = function(key) {\n                return typeof _map[key] != \"undefined\";\n            };\n            return _this;\n        };\n        return _this;\n    };\n    var createDataURL = function(width, height, getPixel) {\n        var gif = gifImage(width, height);\n        for(var y = 0; y < height; y += 1){\n            for(var x = 0; x < width; x += 1){\n                gif.setPixel(x, y, getPixel(x, y));\n            }\n        }\n        var b = byteArrayOutputStream();\n        gif.write(b);\n        var base64 = base64EncodeOutputStream();\n        var bytes = b.toByteArray();\n        for(var i = 0; i < bytes.length; i += 1){\n            base64.writeByte(bytes[i]);\n        }\n        base64.flush();\n        return \"data:image/gif;base64,\" + base64;\n    };\n    //---------------------------------------------------------------------\n    // returns qrcode function.\n    return qrcode;\n}();\n// multibyte support\n!function() {\n    qrcode.stringToBytesFuncs[\"UTF-8\"] = function(s) {\n        // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n        function toUTF8Array(str) {\n            var utf8 = [];\n            for(var i = 0; i < str.length; i++){\n                var charcode = str.charCodeAt(i);\n                if (charcode < 0x80) utf8.push(charcode);\n                else if (charcode < 0x800) {\n                    utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);\n                } else if (charcode < 0xd800 || charcode >= 0xe000) {\n                    utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n                } else {\n                    i++;\n                    // UTF-16 encodes 0x10000-0x10FFFF by\n                    // subtracting 0x10000 and splitting the\n                    // 20 bits of 0x0-0xFFFFF into two halves\n                    charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n                    utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n                }\n            }\n            return utf8;\n        }\n        return toUTF8Array(s);\n    };\n}();\n(function(factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(function() {\n    return qrcode;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode-generator/qrcode.js\n");

/***/ })

};
;