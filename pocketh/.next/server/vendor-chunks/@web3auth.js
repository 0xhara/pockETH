/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@web3auth";
exports.ids = ["vendor-chunks/@web3auth"];
exports.modules = {

/***/ "(ssr)/./node_modules/@web3auth/base-evm-adapter/dist/baseEvmAdapter.esm.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@web3auth/base-evm-adapter/dist/baseEvmAdapter.esm.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseEvmAdapter: () => (/* binding */ BaseEvmAdapter)\n/* harmony export */ });\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n\nclass BaseEvmAdapter extends _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.BaseAdapter {\n    async init(_) {\n        if (!this.chainConfig) this.chainConfig = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.getChainConfig)(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155, 1);\n    }\n    async authenticateUser() {\n        if (!this.provider || this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletLoginError.notConnectedError();\n        const { chainNamespace, chainId } = this.chainConfig;\n        const accounts = await this.provider.request({\n            method: \"eth_accounts\"\n        });\n        if (accounts && accounts.length > 0) {\n            const existingToken = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.getSavedToken)(accounts[0], this.name);\n            if (existingToken) {\n                const isExpired = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.checkIfTokenIsExpired)(existingToken);\n                if (!isExpired) {\n                    return {\n                        idToken: existingToken\n                    };\n                }\n            }\n            const payload = {\n                domain: window.location.origin,\n                uri: window.location.href,\n                address: accounts[0],\n                chainId: parseInt(chainId, 16),\n                version: \"1\",\n                nonce: Math.random().toString(36).slice(2),\n                issuedAt: new Date().toISOString()\n            };\n            const challenge = await (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.signChallenge)(payload, chainNamespace);\n            const signedMessage = await this.provider.request({\n                method: \"personal_sign\",\n                params: [\n                    challenge,\n                    accounts[0]\n                ]\n            });\n            const idToken = await (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.verifySignedChallenge)(chainNamespace, signedMessage, challenge, this.name, this.sessionTime, this.clientId, this.web3AuthNetwork);\n            (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.saveToken)(accounts[0], this.name, idToken);\n            return {\n                idToken\n            };\n        }\n        throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    }\n    async disconnectSession() {\n        super.checkDisconnectionRequirements();\n        const accounts = await this.provider.request({\n            method: \"eth_accounts\"\n        });\n        if (accounts && accounts.length > 0) {\n            (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.clearToken)(accounts[0], this.name);\n        }\n    }\n    async disconnect() {\n        this.rehydrated = false;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.DISCONNECTED);\n    }\n}\n //# sourceMappingURL=baseEvmAdapter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2Jhc2UtZXZtLWFkYXB0ZXIvZGlzdC9iYXNlRXZtQWRhcHRlci5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb087QUFFcE8sTUFBTVksdUJBQXVCWix1REFBV0E7SUFDdEMsTUFBTWEsS0FBS0MsQ0FBQyxFQUFFO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ0MsV0FBVyxFQUFFLElBQUksQ0FBQ0EsV0FBVyxHQUFHZCw4REFBY0EsQ0FBQ0MsNERBQWdCQSxDQUFDYyxNQUFNLEVBQUU7SUFDcEY7SUFDQSxNQUFNQyxtQkFBbUI7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQ0MsUUFBUSxJQUFJLElBQUksQ0FBQ0MsTUFBTSxLQUFLaEIsMERBQWNBLENBQUNpQixTQUFTLEVBQUUsTUFBTWhCLDREQUFnQkEsQ0FBQ2lCLGlCQUFpQjtRQUN4RyxNQUFNLEVBQ0pDLGNBQWMsRUFDZEMsT0FBTyxFQUNSLEdBQUcsSUFBSSxDQUFDUixXQUFXO1FBQ3BCLE1BQU1TLFdBQVcsTUFBTSxJQUFJLENBQUNOLFFBQVEsQ0FBQ08sT0FBTyxDQUFDO1lBQzNDQyxRQUFRO1FBQ1Y7UUFDQSxJQUFJRixZQUFZQSxTQUFTRyxNQUFNLEdBQUcsR0FBRztZQUNuQyxNQUFNQyxnQkFBZ0J2Qiw2REFBYUEsQ0FBQ21CLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDSyxJQUFJO1lBQzFELElBQUlELGVBQWU7Z0JBQ2pCLE1BQU1FLFlBQVl4QixxRUFBcUJBLENBQUNzQjtnQkFDeEMsSUFBSSxDQUFDRSxXQUFXO29CQUNkLE9BQU87d0JBQ0xDLFNBQVNIO29CQUNYO2dCQUNGO1lBQ0Y7WUFDQSxNQUFNSSxVQUFVO2dCQUNkQyxRQUFRQyxPQUFPQyxRQUFRLENBQUNDLE1BQU07Z0JBQzlCQyxLQUFLSCxPQUFPQyxRQUFRLENBQUNHLElBQUk7Z0JBQ3pCQyxTQUFTZixRQUFRLENBQUMsRUFBRTtnQkFDcEJELFNBQVNpQixTQUFTakIsU0FBUztnQkFDM0JrQixTQUFTO2dCQUNUQyxPQUFPQyxLQUFLQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQyxJQUFJQyxLQUFLLENBQUM7Z0JBQ3hDQyxVQUFVLElBQUlDLE9BQU9DLFdBQVc7WUFDbEM7WUFDQSxNQUFNQyxZQUFZLE1BQU0zQyw2REFBYUEsQ0FBQ3lCLFNBQVNWO1lBQy9DLE1BQU02QixnQkFBZ0IsTUFBTSxJQUFJLENBQUNqQyxRQUFRLENBQUNPLE9BQU8sQ0FBQztnQkFDaERDLFFBQVE7Z0JBQ1IwQixRQUFRO29CQUFDRjtvQkFBVzFCLFFBQVEsQ0FBQyxFQUFFO2lCQUFDO1lBQ2xDO1lBQ0EsTUFBTU8sVUFBVSxNQUFNdkIscUVBQXFCQSxDQUFDYyxnQkFBZ0I2QixlQUFlRCxXQUFXLElBQUksQ0FBQ3JCLElBQUksRUFBRSxJQUFJLENBQUN3QixXQUFXLEVBQUUsSUFBSSxDQUFDQyxRQUFRLEVBQUUsSUFBSSxDQUFDQyxlQUFlO1lBQ3RKOUMseURBQVNBLENBQUNlLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDSyxJQUFJLEVBQUVFO1lBQ2xDLE9BQU87Z0JBQ0xBO1lBQ0Y7UUFDRjtRQUNBLE1BQU0zQiw0REFBZ0JBLENBQUNpQixpQkFBaUIsQ0FBQztJQUMzQztJQUNBLE1BQU1tQyxvQkFBb0I7UUFDeEIsS0FBSyxDQUFDQztRQUNOLE1BQU1qQyxXQUFXLE1BQU0sSUFBSSxDQUFDTixRQUFRLENBQUNPLE9BQU8sQ0FBQztZQUMzQ0MsUUFBUTtRQUNWO1FBQ0EsSUFBSUYsWUFBWUEsU0FBU0csTUFBTSxHQUFHLEdBQUc7WUFDbkNqQiwwREFBVUEsQ0FBQ2MsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUNLLElBQUk7UUFDbkM7SUFDRjtJQUNBLE1BQU02QixhQUFhO1FBQ2pCLElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsSUFBSSxDQUFDakQsMERBQWNBLENBQUNrRCxZQUFZO0lBQ3ZDO0FBQ0Y7QUFFMEIsQ0FDMUIsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvYmFzZS1ldm0tYWRhcHRlci9kaXN0L2Jhc2VFdm1BZGFwdGVyLmVzbS5qcz9mMmY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VBZGFwdGVyLCBnZXRDaGFpbkNvbmZpZywgQ0hBSU5fTkFNRVNQQUNFUywgQURBUFRFUl9TVEFUVVMsIFdhbGxldExvZ2luRXJyb3IsIGdldFNhdmVkVG9rZW4sIGNoZWNrSWZUb2tlbklzRXhwaXJlZCwgc2lnbkNoYWxsZW5nZSwgdmVyaWZ5U2lnbmVkQ2hhbGxlbmdlLCBzYXZlVG9rZW4sIGNsZWFyVG9rZW4sIEFEQVBURVJfRVZFTlRTIH0gZnJvbSAnQHdlYjNhdXRoL2Jhc2UnO1xuXG5jbGFzcyBCYXNlRXZtQWRhcHRlciBleHRlbmRzIEJhc2VBZGFwdGVyIHtcbiAgYXN5bmMgaW5pdChfKSB7XG4gICAgaWYgKCF0aGlzLmNoYWluQ29uZmlnKSB0aGlzLmNoYWluQ29uZmlnID0gZ2V0Q2hhaW5Db25maWcoQ0hBSU5fTkFNRVNQQUNFUy5FSVAxNTUsIDEpO1xuICB9XG4gIGFzeW5jIGF1dGhlbnRpY2F0ZVVzZXIoKSB7XG4gICAgaWYgKCF0aGlzLnByb3ZpZGVyIHx8IHRoaXMuc3RhdHVzICE9PSBBREFQVEVSX1NUQVRVUy5DT05ORUNURUQpIHRocm93IFdhbGxldExvZ2luRXJyb3Iubm90Q29ubmVjdGVkRXJyb3IoKTtcbiAgICBjb25zdCB7XG4gICAgICBjaGFpbk5hbWVzcGFjZSxcbiAgICAgIGNoYWluSWRcbiAgICB9ID0gdGhpcy5jaGFpbkNvbmZpZztcbiAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IHRoaXMucHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6IFwiZXRoX2FjY291bnRzXCJcbiAgICB9KTtcbiAgICBpZiAoYWNjb3VudHMgJiYgYWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZXhpc3RpbmdUb2tlbiA9IGdldFNhdmVkVG9rZW4oYWNjb3VudHNbMF0sIHRoaXMubmFtZSk7XG4gICAgICBpZiAoZXhpc3RpbmdUb2tlbikge1xuICAgICAgICBjb25zdCBpc0V4cGlyZWQgPSBjaGVja0lmVG9rZW5Jc0V4cGlyZWQoZXhpc3RpbmdUb2tlbik7XG4gICAgICAgIGlmICghaXNFeHBpcmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkVG9rZW46IGV4aXN0aW5nVG9rZW5cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICBkb21haW46IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sXG4gICAgICAgIHVyaTogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICAgIGFkZHJlc3M6IGFjY291bnRzWzBdLFxuICAgICAgICBjaGFpbklkOiBwYXJzZUludChjaGFpbklkLCAxNiksXG4gICAgICAgIHZlcnNpb246IFwiMVwiLFxuICAgICAgICBub25jZTogTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksXG4gICAgICAgIGlzc3VlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH07XG4gICAgICBjb25zdCBjaGFsbGVuZ2UgPSBhd2FpdCBzaWduQ2hhbGxlbmdlKHBheWxvYWQsIGNoYWluTmFtZXNwYWNlKTtcbiAgICAgIGNvbnN0IHNpZ25lZE1lc3NhZ2UgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgICBtZXRob2Q6IFwicGVyc29uYWxfc2lnblwiLFxuICAgICAgICBwYXJhbXM6IFtjaGFsbGVuZ2UsIGFjY291bnRzWzBdXVxuICAgICAgfSk7XG4gICAgICBjb25zdCBpZFRva2VuID0gYXdhaXQgdmVyaWZ5U2lnbmVkQ2hhbGxlbmdlKGNoYWluTmFtZXNwYWNlLCBzaWduZWRNZXNzYWdlLCBjaGFsbGVuZ2UsIHRoaXMubmFtZSwgdGhpcy5zZXNzaW9uVGltZSwgdGhpcy5jbGllbnRJZCwgdGhpcy53ZWIzQXV0aE5ldHdvcmspO1xuICAgICAgc2F2ZVRva2VuKGFjY291bnRzWzBdLCB0aGlzLm5hbWUsIGlkVG9rZW4pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWRUb2tlblxuICAgICAgfTtcbiAgICB9XG4gICAgdGhyb3cgV2FsbGV0TG9naW5FcnJvci5ub3RDb25uZWN0ZWRFcnJvcihcIk5vdCBjb25uZWN0ZWQgd2l0aCB3YWxsZXQsIFBsZWFzZSBsb2dpbi9jb25uZWN0IGZpcnN0XCIpO1xuICB9XG4gIGFzeW5jIGRpc2Nvbm5lY3RTZXNzaW9uKCkge1xuICAgIHN1cGVyLmNoZWNrRGlzY29ubmVjdGlvblJlcXVpcmVtZW50cygpO1xuICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgdGhpcy5wcm92aWRlci5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJldGhfYWNjb3VudHNcIlxuICAgIH0pO1xuICAgIGlmIChhY2NvdW50cyAmJiBhY2NvdW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBjbGVhclRva2VuKGFjY291bnRzWzBdLCB0aGlzLm5hbWUpO1xuICAgIH1cbiAgfVxuICBhc3luYyBkaXNjb25uZWN0KCkge1xuICAgIHRoaXMucmVoeWRyYXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdChBREFQVEVSX0VWRU5UUy5ESVNDT05ORUNURUQpO1xuICB9XG59XG5cbmV4cG9ydCB7IEJhc2VFdm1BZGFwdGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlRXZtQWRhcHRlci5lc20uanMubWFwXG4iXSwibmFtZXMiOlsiQmFzZUFkYXB0ZXIiLCJnZXRDaGFpbkNvbmZpZyIsIkNIQUlOX05BTUVTUEFDRVMiLCJBREFQVEVSX1NUQVRVUyIsIldhbGxldExvZ2luRXJyb3IiLCJnZXRTYXZlZFRva2VuIiwiY2hlY2tJZlRva2VuSXNFeHBpcmVkIiwic2lnbkNoYWxsZW5nZSIsInZlcmlmeVNpZ25lZENoYWxsZW5nZSIsInNhdmVUb2tlbiIsImNsZWFyVG9rZW4iLCJBREFQVEVSX0VWRU5UUyIsIkJhc2VFdm1BZGFwdGVyIiwiaW5pdCIsIl8iLCJjaGFpbkNvbmZpZyIsIkVJUDE1NSIsImF1dGhlbnRpY2F0ZVVzZXIiLCJwcm92aWRlciIsInN0YXR1cyIsIkNPTk5FQ1RFRCIsIm5vdENvbm5lY3RlZEVycm9yIiwiY2hhaW5OYW1lc3BhY2UiLCJjaGFpbklkIiwiYWNjb3VudHMiLCJyZXF1ZXN0IiwibWV0aG9kIiwibGVuZ3RoIiwiZXhpc3RpbmdUb2tlbiIsIm5hbWUiLCJpc0V4cGlyZWQiLCJpZFRva2VuIiwicGF5bG9hZCIsImRvbWFpbiIsIndpbmRvdyIsImxvY2F0aW9uIiwib3JpZ2luIiwidXJpIiwiaHJlZiIsImFkZHJlc3MiLCJwYXJzZUludCIsInZlcnNpb24iLCJub25jZSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInNsaWNlIiwiaXNzdWVkQXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJjaGFsbGVuZ2UiLCJzaWduZWRNZXNzYWdlIiwicGFyYW1zIiwic2Vzc2lvblRpbWUiLCJjbGllbnRJZCIsIndlYjNBdXRoTmV0d29yayIsImRpc2Nvbm5lY3RTZXNzaW9uIiwiY2hlY2tEaXNjb25uZWN0aW9uUmVxdWlyZW1lbnRzIiwiZGlzY29ubmVjdCIsInJlaHlkcmF0ZWQiLCJlbWl0IiwiRElTQ09OTkVDVEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/base-evm-adapter/dist/baseEvmAdapter.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/base-plugin/dist/basePlugin.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@web3auth/base-plugin/dist/basePlugin.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PLUGIN_NAMESPACES: () => (/* binding */ PLUGIN_NAMESPACES)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n\n\nconst PLUGIN_NAMESPACES = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES), {}, {\n    MULTICHAIN: \"multichain\"\n});\n //# sourceMappingURL=basePlugin.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2Jhc2UtcGx1Z2luL2Rpc3QvYmFzZVBsdWdpbi5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpRTtBQUNmO0FBRWxELE1BQU1FLG9CQUFvQkYsMkVBQWFBLENBQUNBLDJFQUFhQSxDQUFDLENBQUMsR0FBR0MsNERBQWdCQSxHQUFHLENBQUMsR0FBRztJQUMvRUUsWUFBWTtBQUNkO0FBRTZCLENBQzdCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2Jhc2UtcGx1Z2luL2Rpc3QvYmFzZVBsdWdpbi5lc20uanM/NmI3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDInO1xuaW1wb3J0IHsgQ0hBSU5fTkFNRVNQQUNFUyB9IGZyb20gJ0B3ZWIzYXV0aC9iYXNlJztcblxuY29uc3QgUExVR0lOX05BTUVTUEFDRVMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIENIQUlOX05BTUVTUEFDRVMpLCB7fSwge1xuICBNVUxUSUNIQUlOOiBcIm11bHRpY2hhaW5cIlxufSk7XG5cbmV4cG9ydCB7IFBMVUdJTl9OQU1FU1BBQ0VTIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlUGx1Z2luLmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfb2JqZWN0U3ByZWFkIiwiQ0hBSU5fTkFNRVNQQUNFUyIsIlBMVUdJTl9OQU1FU1BBQ0VTIiwiTVVMVElDSEFJTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/base-plugin/dist/basePlugin.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/base-provider/dist/baseProvider.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@web3auth/base-provider/dist/baseProvider.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseProvider: () => (/* binding */ BaseProvider),\n/* harmony export */   CommonJRPCProvider: () => (/* binding */ CommonJRPCProvider),\n/* harmony export */   CommonPrivateKeyProvider: () => (/* binding */ CommonPrivateKeyProvider),\n/* harmony export */   createRandomId: () => (/* binding */ createRandomId)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @metamask/rpc-errors */ \"(ssr)/./node_modules/@metamask/rpc-errors/dist/index.js\");\n/* harmony import */ var _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/base-controllers */ \"(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\");\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var json_rpc_random_id__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! json-rpc-random-id */ \"(ssr)/./node_modules/json-rpc-random-id/index.js\");\n/* harmony import */ var json_rpc_random_id__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(json_rpc_random_id__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\nclass BaseProvider extends _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.BaseController {\n    constructor(_ref){\n        let { config, state } = _ref;\n        super({\n            config,\n            state\n        });\n        // should be Assigned in setupProvider\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_providerEngineProxy\", null);\n        if (!config.chainConfig) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletInitializationError.invalidProviderConfigError(\"Please provide chainConfig\");\n        if (!config.chainConfig.chainId) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletInitializationError.invalidProviderConfigError(\"Please provide chainId inside chainConfig\");\n        if (!config.chainConfig.rpcTarget) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletInitializationError.invalidProviderConfigError(\"Please provide rpcTarget inside chainConfig\");\n        this.defaultState = {\n            chainId: \"loading\"\n        };\n        this.defaultConfig = {\n            chainConfig: config.chainConfig,\n            networks: {\n                [config.chainConfig.chainId]: config.chainConfig\n            }\n        };\n        super.initialize();\n    }\n    get currentChainConfig() {\n        return this.config.chainConfig;\n    }\n    get provider() {\n        return this._providerEngineProxy;\n    }\n    get chainId() {\n        return this.state.chainId;\n    }\n    set provider(_) {\n        throw new Error(\"Method not implemented.\");\n    }\n    async request(args) {\n        var _this$provider;\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidRequest({\n                message: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletProviderError.invalidRequestArgs().message,\n                data: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, args || {}), {}, {\n                    cause: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletProviderError.invalidRequestArgs().message\n                })\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidRequest({\n                message: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletProviderError.invalidRequestMethod().message,\n                data: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, args || {}), {}, {\n                    cause: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletProviderError.invalidRequestMethod().message\n                })\n            });\n        }\n        if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidRequest({\n                message: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletProviderError.invalidRequestParams().message,\n                data: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, args || {}), {}, {\n                    cause: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletProviderError.invalidRequestParams().message\n                })\n            });\n        }\n        return (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.request(args);\n    }\n    sendAsync(req, callback) {\n        if (callback) return this.send(req, callback);\n        return this.request(req);\n    }\n    send(req, callback) {\n        this.request(req).then((res)=>callback(null, {\n                result: res\n            })).catch((err)=>callback(err, null));\n    }\n    addChain(chainConfig) {\n        if (!chainConfig.chainId) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"chainId is required\");\n        if (!chainConfig.rpcTarget) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"chainId is required\");\n        this.configure({\n            networks: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.config.networks), {}, {\n                [chainConfig.chainId]: chainConfig\n            })\n        });\n    }\n    getChainConfig(chainId) {\n        var _this$config$networks;\n        const chainConfig = (_this$config$networks = this.config.networks) === null || _this$config$networks === void 0 ? void 0 : _this$config$networks[chainId];\n        if (!chainConfig) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidRequest(`Chain ${chainId} is not supported, please add chainConfig for it`);\n        return chainConfig;\n    }\n    updateProviderEngineProxy(provider) {\n        if (this._providerEngineProxy) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this._providerEngineProxy.setTarget(provider);\n        } else {\n            this._providerEngineProxy = (0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.createEventEmitterProxy)(provider);\n        }\n    }\n    getProviderEngineProxy() {\n        return this._providerEngineProxy;\n    }\n}\nfunction createChainIdMiddleware(chainId) {\n    return (req, res, next, end)=>{\n        if (req.method === \"chainId\") {\n            res.result = chainId;\n            return end();\n        }\n        return next();\n    };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n    return (req, res, next, end)=>{\n        if (req.method === \"provider_config\") {\n            res.result = providerConfig;\n            return end();\n        }\n        return next();\n    };\n}\nfunction createJsonRpcClient(providerConfig) {\n    const { chainId, rpcTarget } = providerConfig;\n    const fetchMiddleware = (0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.createFetchMiddleware)({\n        rpcTarget\n    });\n    const networkMiddleware = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.mergeMiddleware)([\n        createChainIdMiddleware(chainId),\n        createProviderConfigMiddleware(providerConfig),\n        fetchMiddleware\n    ]);\n    return {\n        networkMiddleware,\n        fetchMiddleware\n    };\n}\nvar _class$1;\nclass CommonJRPCProvider extends BaseProvider {\n    constructor(_ref){\n        let { config, state } = _ref;\n        super({\n            config,\n            state\n        });\n    }\n    async setupProvider() {\n        const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig);\n        const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.JRPCEngine();\n        engine.push(networkMiddleware);\n        const provider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.providerFromEngine)(engine);\n        this.updateProviderEngineProxy(provider);\n        const newChainId = this.config.chainConfig.chainId;\n        if (this.state.chainId !== newChainId) {\n            this.emit(\"chainChanged\", newChainId);\n            this.emit(\"connect\", {\n                chainId: newChainId\n            });\n        }\n        this.update({\n            chainId: this.config.chainConfig.chainId\n        });\n    }\n    async switchChain(params) {\n        if (!this._providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n            message: \"Provider is not initialized\",\n            code: 4902\n        });\n        const chainConfig = this.getChainConfig(params.chainId);\n        this.update({\n            chainId: \"loading\"\n        });\n        this.configure({\n            chainConfig\n        });\n        await this.setupProvider();\n    }\n    updateProviderEngineProxy(provider) {\n        if (this._providerEngineProxy) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this._providerEngineProxy.setTarget(provider);\n        } else {\n            this._providerEngineProxy = (0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.createEventEmitterProxy)(provider);\n        }\n    }\n    getProviderEngineProxy() {\n        return this._providerEngineProxy;\n    }\n    lookupNetwork() {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n_class$1 = CommonJRPCProvider;\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(CommonJRPCProvider, \"getProviderInstance\", async (params)=>{\n    const providerFactory = new _class$1({\n        config: {\n            chainConfig: params.chainConfig\n        }\n    });\n    await providerFactory.setupProvider();\n    return providerFactory;\n});\nvar _class;\nclass CommonPrivateKeyProvider extends BaseProvider {\n    constructor(_ref){\n        let { config, state } = _ref;\n        super({\n            config: {\n                chainConfig: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, config.chainConfig), {}, {\n                    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.OTHER\n                })\n            },\n            state\n        });\n        // should be Assigned in setupProvider\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_providerEngineProxy\", null);\n    }\n    get provider() {\n        return this._providerEngineProxy;\n    }\n    set provider(_) {\n        throw new Error(\"Method not implemented.\");\n    }\n    addChain(_) {\n        throw new Error(\"Method not implemented.\");\n    }\n    async setupProvider(privKey) {\n        const privKeyMiddleware = this.getPrivKeyMiddleware(privKey);\n        const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.JRPCEngine();\n        engine.push(privKeyMiddleware);\n        const provider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.providerFromEngine)(engine);\n        this.updateProviderEngineProxy(provider);\n    }\n    updateProviderEngineProxy(provider) {\n        if (this._providerEngineProxy) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this._providerEngineProxy.setTarget(provider);\n        } else {\n            this._providerEngineProxy = (0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_3__.createEventEmitterProxy)(provider);\n        }\n    }\n    async switchChain(_) {\n        return Promise.resolve();\n    }\n    getProviderEngineProxy() {\n        return this._providerEngineProxy;\n    }\n    async lookupNetwork() {\n        return Promise.resolve(\"\");\n    }\n    getPrivKeyMiddleware(privKey) {\n        const middleware = {\n            getPrivatekey: async ()=>{\n                return privKey;\n            }\n        };\n        return this.createPrivKeyMiddleware(middleware);\n    }\n    createPrivKeyMiddleware(_ref2) {\n        let { getPrivatekey } = _ref2;\n        async function getPrivatekeyHandler(_, res) {\n            res.result = await getPrivatekey();\n        }\n        return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.createScaffoldMiddleware)({\n            private_key: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_5__.createAsyncMiddleware)(getPrivatekeyHandler)\n        });\n    }\n}\n_class = CommonPrivateKeyProvider;\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(CommonPrivateKeyProvider, \"getProviderInstance\", async (params)=>{\n    const providerFactory = new _class({\n        config: {\n            chainConfig: params.chainConfig\n        }\n    });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n});\nconst createRandomId = json_rpc_random_id__WEBPACK_IMPORTED_MODULE_6___default()();\n //# sourceMappingURL=baseProvider.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/base-provider/dist/baseProvider.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/base-solana-adapter/dist/baseSolanaAdapter.esm.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@web3auth/base-solana-adapter/dist/baseSolanaAdapter.esm.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseSolanaAdapter: () => (/* binding */ BaseSolanaAdapter)\n/* harmony export */ });\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_1__);\n\n\nclass BaseSolanaAdapter extends _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.BaseAdapter {\n    async init(_) {\n        if (!this.chainConfig) this.chainConfig = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.getChainConfig)(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.SOLANA, 1);\n    }\n    async authenticateUser() {\n        if (!this.provider || this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletLoginError.notConnectedError();\n        const { chainNamespace, chainId } = this.chainConfig;\n        const accounts = await this.provider.request({\n            method: \"getAccounts\"\n        });\n        if (accounts && accounts.length > 0) {\n            const existingToken = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.getSavedToken)(accounts[0], this.name);\n            if (existingToken) {\n                const isExpired = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.checkIfTokenIsExpired)(existingToken);\n                if (!isExpired) {\n                    return {\n                        idToken: existingToken\n                    };\n                }\n            }\n            const payload = {\n                domain: window.location.origin,\n                uri: window.location.href,\n                address: accounts[0],\n                chainId: parseInt(chainId, 16),\n                version: \"1\",\n                nonce: Math.random().toString(36).slice(2),\n                issuedAt: new Date().toISOString()\n            };\n            const challenge = await (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.signChallenge)(payload, chainNamespace);\n            const encodedMessage = new TextEncoder().encode(challenge);\n            const signedMessage = await this.provider.request({\n                method: \"signMessage\",\n                params: {\n                    message: encodedMessage,\n                    display: \"utf8\"\n                }\n            });\n            const idToken = await (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.verifySignedChallenge)(chainNamespace, bs58__WEBPACK_IMPORTED_MODULE_1___default().encode(signedMessage), challenge, this.name, this.sessionTime, this.clientId, this.web3AuthNetwork);\n            (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.saveToken)(accounts[0], this.name, idToken);\n            return {\n                idToken\n            };\n        }\n        throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    }\n    async disconnectSession() {\n        super.checkDisconnectionRequirements();\n        const accounts = await this.provider.request({\n            method: \"getAccounts\"\n        });\n        if (accounts && accounts.length > 0) {\n            (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.clearToken)(accounts[0], this.name);\n        }\n    }\n    async disconnect() {\n        this.rehydrated = false;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.DISCONNECTED);\n    }\n}\n //# sourceMappingURL=baseSolanaAdapter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2Jhc2Utc29sYW5hLWFkYXB0ZXIvZGlzdC9iYXNlU29sYW5hQWRhcHRlci5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvTztBQUM1TTtBQUV4QixNQUFNYSwwQkFBMEJiLHVEQUFXQTtJQUN6QyxNQUFNYyxLQUFLQyxDQUFDLEVBQUU7UUFDWixJQUFJLENBQUMsSUFBSSxDQUFDQyxXQUFXLEVBQUUsSUFBSSxDQUFDQSxXQUFXLEdBQUdmLDhEQUFjQSxDQUFDQyw0REFBZ0JBLENBQUNlLE1BQU0sRUFBRTtJQUNwRjtJQUNBLE1BQU1DLG1CQUFtQjtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDQyxRQUFRLElBQUksSUFBSSxDQUFDQyxNQUFNLEtBQUtqQiwwREFBY0EsQ0FBQ2tCLFNBQVMsRUFBRSxNQUFNakIsNERBQWdCQSxDQUFDa0IsaUJBQWlCO1FBQ3hHLE1BQU0sRUFDSkMsY0FBYyxFQUNkQyxPQUFPLEVBQ1IsR0FBRyxJQUFJLENBQUNSLFdBQVc7UUFDcEIsTUFBTVMsV0FBVyxNQUFNLElBQUksQ0FBQ04sUUFBUSxDQUFDTyxPQUFPLENBQUM7WUFDM0NDLFFBQVE7UUFDVjtRQUNBLElBQUlGLFlBQVlBLFNBQVNHLE1BQU0sR0FBRyxHQUFHO1lBQ25DLE1BQU1DLGdCQUFnQnhCLDZEQUFhQSxDQUFDb0IsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUNLLElBQUk7WUFDMUQsSUFBSUQsZUFBZTtnQkFDakIsTUFBTUUsWUFBWXpCLHFFQUFxQkEsQ0FBQ3VCO2dCQUN4QyxJQUFJLENBQUNFLFdBQVc7b0JBQ2QsT0FBTzt3QkFDTEMsU0FBU0g7b0JBQ1g7Z0JBQ0Y7WUFDRjtZQUNBLE1BQU1JLFVBQVU7Z0JBQ2RDLFFBQVFDLE9BQU9DLFFBQVEsQ0FBQ0MsTUFBTTtnQkFDOUJDLEtBQUtILE9BQU9DLFFBQVEsQ0FBQ0csSUFBSTtnQkFDekJDLFNBQVNmLFFBQVEsQ0FBQyxFQUFFO2dCQUNwQkQsU0FBU2lCLFNBQVNqQixTQUFTO2dCQUMzQmtCLFNBQVM7Z0JBQ1RDLE9BQU9DLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQztnQkFDeENDLFVBQVUsSUFBSUMsT0FBT0MsV0FBVztZQUNsQztZQUNBLE1BQU1DLFlBQVksTUFBTTVDLDZEQUFhQSxDQUFDMEIsU0FBU1Y7WUFDL0MsTUFBTTZCLGlCQUFpQixJQUFJQyxjQUFjQyxNQUFNLENBQUNIO1lBQ2hELE1BQU1JLGdCQUFnQixNQUFNLElBQUksQ0FBQ3BDLFFBQVEsQ0FBQ08sT0FBTyxDQUFDO2dCQUNoREMsUUFBUTtnQkFDUjZCLFFBQVE7b0JBQ05DLFNBQVNMO29CQUNUTSxTQUFTO2dCQUNYO1lBQ0Y7WUFDQSxNQUFNMUIsVUFBVSxNQUFNeEIscUVBQXFCQSxDQUFDZSxnQkFBZ0JYLGtEQUFXLENBQUMyQyxnQkFBZ0JKLFdBQVcsSUFBSSxDQUFDckIsSUFBSSxFQUFFLElBQUksQ0FBQzZCLFdBQVcsRUFBRSxJQUFJLENBQUNDLFFBQVEsRUFBRSxJQUFJLENBQUNDLGVBQWU7WUFDbktwRCx5REFBU0EsQ0FBQ2dCLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDSyxJQUFJLEVBQUVFO1lBQ2xDLE9BQU87Z0JBQ0xBO1lBQ0Y7UUFDRjtRQUNBLE1BQU01Qiw0REFBZ0JBLENBQUNrQixpQkFBaUIsQ0FBQztJQUMzQztJQUNBLE1BQU13QyxvQkFBb0I7UUFDeEIsS0FBSyxDQUFDQztRQUNOLE1BQU10QyxXQUFXLE1BQU0sSUFBSSxDQUFDTixRQUFRLENBQUNPLE9BQU8sQ0FBQztZQUMzQ0MsUUFBUTtRQUNWO1FBQ0EsSUFBSUYsWUFBWUEsU0FBU0csTUFBTSxHQUFHLEdBQUc7WUFDbkNsQiwwREFBVUEsQ0FBQ2UsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUNLLElBQUk7UUFDbkM7SUFDRjtJQUNBLE1BQU1rQyxhQUFhO1FBQ2pCLElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsSUFBSSxDQUFDdkQsMERBQWNBLENBQUN3RCxZQUFZO0lBQ3ZDO0FBQ0Y7QUFFNkIsQ0FDN0IsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvYmFzZS1zb2xhbmEtYWRhcHRlci9kaXN0L2Jhc2VTb2xhbmFBZGFwdGVyLmVzbS5qcz9mMDc2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VBZGFwdGVyLCBnZXRDaGFpbkNvbmZpZywgQ0hBSU5fTkFNRVNQQUNFUywgQURBUFRFUl9TVEFUVVMsIFdhbGxldExvZ2luRXJyb3IsIGdldFNhdmVkVG9rZW4sIGNoZWNrSWZUb2tlbklzRXhwaXJlZCwgc2lnbkNoYWxsZW5nZSwgdmVyaWZ5U2lnbmVkQ2hhbGxlbmdlLCBzYXZlVG9rZW4sIGNsZWFyVG9rZW4sIEFEQVBURVJfRVZFTlRTIH0gZnJvbSAnQHdlYjNhdXRoL2Jhc2UnO1xuaW1wb3J0IGJzNTggZnJvbSAnYnM1OCc7XG5cbmNsYXNzIEJhc2VTb2xhbmFBZGFwdGVyIGV4dGVuZHMgQmFzZUFkYXB0ZXIge1xuICBhc3luYyBpbml0KF8pIHtcbiAgICBpZiAoIXRoaXMuY2hhaW5Db25maWcpIHRoaXMuY2hhaW5Db25maWcgPSBnZXRDaGFpbkNvbmZpZyhDSEFJTl9OQU1FU1BBQ0VTLlNPTEFOQSwgMSk7XG4gIH1cbiAgYXN5bmMgYXV0aGVudGljYXRlVXNlcigpIHtcbiAgICBpZiAoIXRoaXMucHJvdmlkZXIgfHwgdGhpcy5zdGF0dXMgIT09IEFEQVBURVJfU1RBVFVTLkNPTk5FQ1RFRCkgdGhyb3cgV2FsbGV0TG9naW5FcnJvci5ub3RDb25uZWN0ZWRFcnJvcigpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNoYWluTmFtZXNwYWNlLFxuICAgICAgY2hhaW5JZFxuICAgIH0gPSB0aGlzLmNoYWluQ29uZmlnO1xuICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgdGhpcy5wcm92aWRlci5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJnZXRBY2NvdW50c1wiXG4gICAgfSk7XG4gICAgaWYgKGFjY291bnRzICYmIGFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nVG9rZW4gPSBnZXRTYXZlZFRva2VuKGFjY291bnRzWzBdLCB0aGlzLm5hbWUpO1xuICAgICAgaWYgKGV4aXN0aW5nVG9rZW4pIHtcbiAgICAgICAgY29uc3QgaXNFeHBpcmVkID0gY2hlY2tJZlRva2VuSXNFeHBpcmVkKGV4aXN0aW5nVG9rZW4pO1xuICAgICAgICBpZiAoIWlzRXhwaXJlZCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZFRva2VuOiBleGlzdGluZ1Rva2VuXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgZG9tYWluOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICB1cmk6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICBhZGRyZXNzOiBhY2NvdW50c1swXSxcbiAgICAgICAgY2hhaW5JZDogcGFyc2VJbnQoY2hhaW5JZCwgMTYpLFxuICAgICAgICB2ZXJzaW9uOiBcIjFcIixcbiAgICAgICAgbm9uY2U6IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLFxuICAgICAgICBpc3N1ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9O1xuICAgICAgY29uc3QgY2hhbGxlbmdlID0gYXdhaXQgc2lnbkNoYWxsZW5nZShwYXlsb2FkLCBjaGFpbk5hbWVzcGFjZSk7XG4gICAgICBjb25zdCBlbmNvZGVkTWVzc2FnZSA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShjaGFsbGVuZ2UpO1xuICAgICAgY29uc3Qgc2lnbmVkTWVzc2FnZSA9IGF3YWl0IHRoaXMucHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZDogXCJzaWduTWVzc2FnZVwiLFxuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBtZXNzYWdlOiBlbmNvZGVkTWVzc2FnZSxcbiAgICAgICAgICBkaXNwbGF5OiBcInV0ZjhcIlxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB2ZXJpZnlTaWduZWRDaGFsbGVuZ2UoY2hhaW5OYW1lc3BhY2UsIGJzNTguZW5jb2RlKHNpZ25lZE1lc3NhZ2UpLCBjaGFsbGVuZ2UsIHRoaXMubmFtZSwgdGhpcy5zZXNzaW9uVGltZSwgdGhpcy5jbGllbnRJZCwgdGhpcy53ZWIzQXV0aE5ldHdvcmspO1xuICAgICAgc2F2ZVRva2VuKGFjY291bnRzWzBdLCB0aGlzLm5hbWUsIGlkVG9rZW4pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWRUb2tlblxuICAgICAgfTtcbiAgICB9XG4gICAgdGhyb3cgV2FsbGV0TG9naW5FcnJvci5ub3RDb25uZWN0ZWRFcnJvcihcIk5vdCBjb25uZWN0ZWQgd2l0aCB3YWxsZXQsIFBsZWFzZSBsb2dpbi9jb25uZWN0IGZpcnN0XCIpO1xuICB9XG4gIGFzeW5jIGRpc2Nvbm5lY3RTZXNzaW9uKCkge1xuICAgIHN1cGVyLmNoZWNrRGlzY29ubmVjdGlvblJlcXVpcmVtZW50cygpO1xuICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgdGhpcy5wcm92aWRlci5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJnZXRBY2NvdW50c1wiXG4gICAgfSk7XG4gICAgaWYgKGFjY291bnRzICYmIGFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNsZWFyVG9rZW4oYWNjb3VudHNbMF0sIHRoaXMubmFtZSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGRpc2Nvbm5lY3QoKSB7XG4gICAgdGhpcy5yZWh5ZHJhdGVkID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KEFEQVBURVJfRVZFTlRTLkRJU0NPTk5FQ1RFRCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgQmFzZVNvbGFuYUFkYXB0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2VTb2xhbmFBZGFwdGVyLmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJCYXNlQWRhcHRlciIsImdldENoYWluQ29uZmlnIiwiQ0hBSU5fTkFNRVNQQUNFUyIsIkFEQVBURVJfU1RBVFVTIiwiV2FsbGV0TG9naW5FcnJvciIsImdldFNhdmVkVG9rZW4iLCJjaGVja0lmVG9rZW5Jc0V4cGlyZWQiLCJzaWduQ2hhbGxlbmdlIiwidmVyaWZ5U2lnbmVkQ2hhbGxlbmdlIiwic2F2ZVRva2VuIiwiY2xlYXJUb2tlbiIsIkFEQVBURVJfRVZFTlRTIiwiYnM1OCIsIkJhc2VTb2xhbmFBZGFwdGVyIiwiaW5pdCIsIl8iLCJjaGFpbkNvbmZpZyIsIlNPTEFOQSIsImF1dGhlbnRpY2F0ZVVzZXIiLCJwcm92aWRlciIsInN0YXR1cyIsIkNPTk5FQ1RFRCIsIm5vdENvbm5lY3RlZEVycm9yIiwiY2hhaW5OYW1lc3BhY2UiLCJjaGFpbklkIiwiYWNjb3VudHMiLCJyZXF1ZXN0IiwibWV0aG9kIiwibGVuZ3RoIiwiZXhpc3RpbmdUb2tlbiIsIm5hbWUiLCJpc0V4cGlyZWQiLCJpZFRva2VuIiwicGF5bG9hZCIsImRvbWFpbiIsIndpbmRvdyIsImxvY2F0aW9uIiwib3JpZ2luIiwidXJpIiwiaHJlZiIsImFkZHJlc3MiLCJwYXJzZUludCIsInZlcnNpb24iLCJub25jZSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInNsaWNlIiwiaXNzdWVkQXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJjaGFsbGVuZ2UiLCJlbmNvZGVkTWVzc2FnZSIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwic2lnbmVkTWVzc2FnZSIsInBhcmFtcyIsIm1lc3NhZ2UiLCJkaXNwbGF5Iiwic2Vzc2lvblRpbWUiLCJjbGllbnRJZCIsIndlYjNBdXRoTmV0d29yayIsImRpc2Nvbm5lY3RTZXNzaW9uIiwiY2hlY2tEaXNjb25uZWN0aW9uUmVxdWlyZW1lbnRzIiwiZGlzY29ubmVjdCIsInJlaHlkcmF0ZWQiLCJlbWl0IiwiRElTQ09OTkVDVEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/base-solana-adapter/dist/baseSolanaAdapter.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js ***!
  \*************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base(ALPHABET) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError(\"Alphabet too long\");\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for(var j = 0; j < BASE_MAP.length; j++){\n        BASE_MAP[j] = 255;\n    }\n    for(var i = 0; i < ALPHABET.length; i++){\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + \" is ambiguous\");\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n    ;\n    var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n    ;\n    function encode(source) {\n        if (source instanceof Uint8Array) {} else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        } else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError(\"Expected Uint8Array\");\n        }\n        if (source.length === 0) {\n            return \"\";\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while(pbegin !== pend && source[pbegin] === 0){\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while(pbegin !== pend){\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){\n                carry += 256 * b58[it1] >>> 0;\n                b58[it1] = carry % BASE >>> 0;\n                carry = carry / BASE >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error(\"Non-zero carry\");\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while(it2 !== size && b58[it2] === 0){\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for(; it2 < size; ++it2){\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    function decodeUnsafe(source) {\n        if (typeof source !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while(source[psz] === LEADER){\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (source.length - psz) * FACTOR + 1 >>> 0 // log(58) / log(256), rounded up.\n        ;\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while(source[psz]){\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){\n                carry += BASE * b256[it3] >>> 0;\n                b256[it3] = carry % 256 >>> 0;\n                carry = carry / 256 >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error(\"Non-zero carry\");\n            }\n            length = i;\n            psz++;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while(it4 !== size && b256[it4] === 0){\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while(it4 !== size){\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(\"Non-base\" + BASE + \" character\");\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nmodule.exports = base;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const basex = __webpack_require__(/*! base-x */ \"(ssr)/./node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js\");\nconst ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nmodule.exports = basex(ALPHABET);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2Jhc2Utc29sYW5hLWFkYXB0ZXIvbm9kZV9tb2R1bGVzL2JzNTgvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUMsV0FBVztBQUVqQkMsT0FBT0MsT0FBTyxHQUFHSixNQUFNRSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2Jhc2Utc29sYW5hLWFkYXB0ZXIvbm9kZV9tb2R1bGVzL2JzNTgvaW5kZXguanM/YWVlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBiYXNleCA9IHJlcXVpcmUoJ2Jhc2UteCcpXG5jb25zdCBBTFBIQUJFVCA9ICcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2V4KEFMUEhBQkVUKVxuIl0sIm5hbWVzIjpbImJhc2V4IiwicmVxdWlyZSIsIkFMUEhBQkVUIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/base/dist/base.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/@web3auth/base/dist/base.esm.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ADAPTER_CATEGORY: () => (/* binding */ ADAPTER_CATEGORY),\n/* harmony export */   ADAPTER_EVENTS: () => (/* binding */ ADAPTER_EVENTS),\n/* harmony export */   ADAPTER_NAMES: () => (/* binding */ ADAPTER_NAMES),\n/* harmony export */   ADAPTER_NAMESPACES: () => (/* binding */ ADAPTER_NAMESPACES),\n/* harmony export */   ADAPTER_STATUS: () => (/* binding */ ADAPTER_STATUS),\n/* harmony export */   BaseAdapter: () => (/* binding */ BaseAdapter),\n/* harmony export */   BaseNetworkSwitch: () => (/* binding */ BaseNetworkSwitch),\n/* harmony export */   CHAIN_NAMESPACES: () => (/* binding */ CHAIN_NAMESPACES),\n/* harmony export */   EVM_ADAPTERS: () => (/* binding */ EVM_ADAPTERS),\n/* harmony export */   MULTI_CHAIN_ADAPTERS: () => (/* binding */ MULTI_CHAIN_ADAPTERS),\n/* harmony export */   OPENLOGIN_NETWORK: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_3__.OPENLOGIN_NETWORK),\n/* harmony export */   PROVIDER_EVENTS: () => (/* binding */ PROVIDER_EVENTS),\n/* harmony export */   SOLANA_ADAPTERS: () => (/* binding */ SOLANA_ADAPTERS),\n/* harmony export */   WALLET_ADAPTERS: () => (/* binding */ WALLET_ADAPTERS),\n/* harmony export */   WEB3AUTH_NETWORK: () => (/* binding */ WEB3AUTH_NETWORK),\n/* harmony export */   WalletInitializationError: () => (/* binding */ WalletInitializationError),\n/* harmony export */   WalletLoginError: () => (/* binding */ WalletLoginError),\n/* harmony export */   WalletOperationsError: () => (/* binding */ WalletOperationsError),\n/* harmony export */   WalletProviderError: () => (/* binding */ WalletProviderError),\n/* harmony export */   Web3AuthError: () => (/* binding */ Web3AuthError),\n/* harmony export */   authServer: () => (/* binding */ authServer),\n/* harmony export */   checkIfTokenIsExpired: () => (/* binding */ checkIfTokenIsExpired),\n/* harmony export */   clearToken: () => (/* binding */ clearToken),\n/* harmony export */   getChainConfig: () => (/* binding */ getChainConfig),\n/* harmony export */   getEvmChainConfig: () => (/* binding */ getEvmChainConfig),\n/* harmony export */   getSavedToken: () => (/* binding */ getSavedToken),\n/* harmony export */   getSolanaChainConfig: () => (/* binding */ getSolanaChainConfig),\n/* harmony export */   isHexStrict: () => (/* binding */ isHexStrict),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   saveToken: () => (/* binding */ saveToken),\n/* harmony export */   signChallenge: () => (/* binding */ signChallenge),\n/* harmony export */   storageAvailable: () => (/* binding */ storageAvailable),\n/* harmony export */   verifySignedChallenge: () => (/* binding */ verifySignedChallenge)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/openlogin-utils */ \"(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\");\n/* harmony import */ var ts_custom_error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ts-custom-error */ \"(ssr)/./node_modules/ts-custom-error/dist/custom-error.mjs\");\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jwt-decode */ \"(ssr)/./node_modules/jwt-decode/build/esm/index.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\n\nconst CHAIN_NAMESPACES = {\n    EIP155: \"eip155\",\n    SOLANA: \"solana\",\n    OTHER: \"other\"\n};\n// eip155 for all evm chains\nconst ADAPTER_NAMESPACES = {\n    EIP155: \"eip155\",\n    SOLANA: \"solana\",\n    XRPL: \"xrpl\",\n    MULTICHAIN: \"multichain\"\n};\n// eip155 for all evm chains\nconst getDefaultNetworkId = (chainNamespace)=>{\n    if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n        return 1;\n    } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        return 1;\n    }\n    throw new Error(`Chain namespace ${chainNamespace} is not supported`);\n};\nconst getEvmChainConfig = (chainId)=>{\n    const chainNamespace = CHAIN_NAMESPACES.EIP155;\n    if (chainId === 1) {\n        return {\n            chainNamespace,\n            chainId: \"0x1\",\n            rpcTarget: `https://rpc.ankr.com/eth`,\n            displayName: \"Ethereum Mainnet\",\n            blockExplorer: \"https://etherscan.io/\",\n            ticker: \"ETH\",\n            tickerName: \"Ethereum\",\n            decimals: 18\n        };\n    }\n    if (chainId === 5) {\n        return {\n            chainNamespace,\n            chainId: \"0x5\",\n            rpcTarget: `https://rpc.ankr.com/eth_goerli`,\n            displayName: \"Goerli Testnet\",\n            blockExplorer: \"https://goerli.etherscan.io/\",\n            ticker: \"ETH\",\n            tickerName: \"Ethereum\",\n            decimals: 18\n        };\n    }\n    if (chainId === 11155111) {\n        return {\n            chainNamespace,\n            chainId: \"0xaa36a7\",\n            rpcTarget: `https://rpc.ankr.com/eth_sepolia`,\n            displayName: \"Sepolia Testnet\",\n            blockExplorer: \"https://sepolia.etherscan.io/\",\n            ticker: \"ETH\",\n            tickerName: \"Ethereum\",\n            decimals: 18\n        };\n    }\n    if (chainId === 137) {\n        return {\n            chainNamespace,\n            chainId: \"0x89\",\n            rpcTarget: \"https://rpc.ankr.com/polygon\",\n            displayName: \"Polygon Mainnet\",\n            blockExplorer: \"https://polygonscan.com\",\n            ticker: \"MATIC\",\n            tickerName: \"Polygon\"\n        };\n    }\n    if (chainId === 80001) {\n        return {\n            chainNamespace,\n            chainId: \"0x13881\",\n            rpcTarget: \"https://rpc.ankr.com/polygon_mumbai\",\n            displayName: \"Polygon Mumbai Testnet\",\n            blockExplorer: \"https://mumbai.polygonscan.com/\",\n            ticker: \"MATIC\",\n            tickerName: \"Polygon\",\n            decimals: 18\n        };\n    }\n    if (chainId === 56) {\n        return {\n            chainNamespace,\n            chainId: \"0x38\",\n            rpcTarget: \"https://rpc.ankr.com/bsc\",\n            displayName: \"Binance SmartChain Mainnet\",\n            blockExplorer: \"https://bscscan.com\",\n            ticker: \"BNB\",\n            tickerName: \"Binance SmartChain\",\n            decimals: 18\n        };\n    }\n    if (chainId === 97) {\n        return {\n            chainNamespace,\n            chainId: \"0x61\",\n            rpcTarget: \"https://rpc.ankr.com/bsc_testnet_chapel\",\n            displayName: \"Binance SmartChain Testnet\",\n            blockExplorer: \"https://testnet.bscscan.com\",\n            ticker: \"BNB\",\n            tickerName: \"Binance SmartChain\",\n            decimals: 18\n        };\n    }\n    if (chainId === 25) {\n        return {\n            chainNamespace,\n            chainId: \"0x19\",\n            rpcTarget: \"https://rpc.cronos.org\",\n            displayName: \"Cronos Mainnet\",\n            blockExplorer: \"https://cronoscan.com/\",\n            ticker: \"CRO\",\n            tickerName: \"Cronos\"\n        };\n    }\n    if (chainId === 338) {\n        return {\n            chainNamespace,\n            chainId: \"0x152\",\n            rpcTarget: \"https://rpc-t3.cronos.org/\",\n            displayName: \"Cronos Testnet\",\n            blockExplorer: \"https://cronoscan.com/\",\n            ticker: \"CRO\",\n            tickerName: \"Cronos\",\n            decimals: 18\n        };\n    }\n    if (chainId === 8217) {\n        return {\n            chainNamespace,\n            chainId: \"0x2019\",\n            rpcTarget: \"https://public-node-api.klaytnapi.com/v1/cypress\",\n            displayName: \"Klaytn Mainnet\",\n            blockExplorer: \"https://scope.klaytn.com\",\n            ticker: \"KLAY\",\n            tickerName: \"Klaytn\",\n            decimals: 18\n        };\n    }\n    return null;\n};\nconst getSolanaChainConfig = (chainId)=>{\n    const chainNamespace = CHAIN_NAMESPACES.SOLANA;\n    if (chainId === 1) {\n        return {\n            chainNamespace,\n            chainId: \"0x1\",\n            rpcTarget: \"https://rpc.ankr.com/solana\",\n            displayName: \"Solana Mainnet\",\n            blockExplorer: \"https://explorer.solana.com\",\n            ticker: \"SOL\",\n            tickerName: \"Solana\",\n            decimals: 9\n        };\n    } else if (chainId === 2) {\n        return {\n            chainNamespace,\n            chainId: \"0x2\",\n            rpcTarget: \"https://api.testnet.solana.com\",\n            displayName: \"Solana Testnet\",\n            blockExplorer: \"https://explorer.solana.com?cluster=testnet\",\n            ticker: \"SOL\",\n            tickerName: \"Solana\",\n            decimals: 9\n        };\n    } else if (chainId === 3) {\n        return {\n            chainNamespace,\n            chainId: \"0x3\",\n            rpcTarget: \"https://api.devnet.solana.com\",\n            displayName: \"Solana Devnet\",\n            blockExplorer: \"https://explorer.solana.com?cluster=devnet\",\n            ticker: \"SOL\",\n            tickerName: \"Solana\",\n            decimals: 9\n        };\n    }\n    return null;\n};\nconst getChainConfig = (chainNamespace, chainId)=>{\n    if (chainNamespace === CHAIN_NAMESPACES.OTHER) return null;\n    const finalChainId = chainId ? typeof chainId === \"number\" ? chainId : parseInt(chainId, 16) : getDefaultNetworkId(chainNamespace);\n    if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n        return getEvmChainConfig(finalChainId);\n    } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        return getSolanaChainConfig(finalChainId);\n    }\n    return null;\n};\n// @flow\nclass Web3AuthError extends ts_custom_error__WEBPACK_IMPORTED_MODULE_4__.CustomError {\n    constructor(code, message){\n        // takes care of stack and proto\n        super(message);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"code\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"message\", void 0);\n        this.code = code;\n        this.message = message || \"\";\n        // Set name explicitly as minification can mangle class names\n        Object.defineProperty(this, \"name\", {\n            value: \"Web3AuthError\"\n        });\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            code: this.code,\n            message: this.message\n        };\n    }\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n}\nclass WalletInitializationError extends Web3AuthError {\n    constructor(code, message){\n        // takes care of stack and proto\n        super(code, message);\n        // Set name explicitly as minification can mangle class names\n        Object.defineProperty(this, \"name\", {\n            value: \"WalletInitializationError\"\n        });\n    }\n    static fromCode(code) {\n        let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n        return new WalletInitializationError(code, `${WalletInitializationError.messages[code]}, ${extraMessage}`);\n    }\n    // Custom methods\n    static notFound() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5001, extraMessage);\n    }\n    static notInstalled() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5002, extraMessage);\n    }\n    static notReady() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5003, extraMessage);\n    }\n    static windowBlocked() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5004, extraMessage);\n    }\n    static windowClosed() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5005, extraMessage);\n    }\n    static incompatibleChainNameSpace() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5006, extraMessage);\n    }\n    static duplicateAdapterError() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5007, extraMessage);\n    }\n    static invalidProviderConfigError() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5008, extraMessage);\n    }\n    static providerNotReadyError() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5009, extraMessage);\n    }\n    static rpcConnectionError() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5010, extraMessage);\n    }\n    static invalidParams() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5011, extraMessage);\n    }\n    static invalidNetwork() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletInitializationError.fromCode(5013, extraMessage);\n    }\n}\n/**\n * wallet login errors\n */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(WalletInitializationError, \"messages\", {\n    5000: \"Custom\",\n    5001: \"Wallet is not found\",\n    5002: \"Wallet is not installed\",\n    5003: \"Wallet is not ready yet\",\n    5004: \"Wallet window is blocked\",\n    5005: \"Wallet window has been closed by the user\",\n    5006: \"Incompatible chain namespace provided\",\n    5007: \"Adapter has already been included\",\n    5008: \"Invalid provider Config\",\n    5009: \"Provider is not ready yet\",\n    5010: \"Failed to connect with rpc url\",\n    5011: \"Invalid params passed in\",\n    5013: \"Invalid network provided\"\n});\nclass WalletLoginError extends Web3AuthError {\n    constructor(code, message){\n        // takes care of stack and proto\n        super(code, message);\n        // Set name explicitly as minification can mangle class names\n        Object.defineProperty(this, \"name\", {\n            value: \"WalletLoginError\"\n        });\n    }\n    static fromCode(code) {\n        let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n        return new WalletLoginError(code, `${WalletLoginError.messages[code]}. ${extraMessage}`);\n    }\n    static connectionError() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletLoginError.fromCode(5111, extraMessage);\n    }\n    static disconnectionError() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletLoginError.fromCode(5112, extraMessage);\n    }\n    static notConnectedError() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletLoginError.fromCode(5113, extraMessage);\n    }\n    static popupClosed() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletLoginError.fromCode(5114, extraMessage);\n    }\n    static mfaEnabled() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletLoginError.fromCode(5115, extraMessage);\n    }\n    static chainConfigNotAdded() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletLoginError.fromCode(5116, extraMessage);\n    }\n    static unsupportedOperation() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletLoginError.fromCode(5117, extraMessage);\n    }\n    static coreKitKeyNotFound() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletLoginError.fromCode(5118, extraMessage);\n    }\n    static userNotLoggedIn() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletLoginError.fromCode(5119, extraMessage);\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(WalletLoginError, \"messages\", {\n    5000: \"Custom\",\n    5111: \"Failed to connect with wallet\",\n    5112: \"Failed to disconnect from wallet\",\n    5113: \"Wallet is not connected\",\n    5114: \"Wallet popup has been closed by the user\",\n    5115: \"User has already enabled mfa, please use the @web3auth/web3auth-web sdk for login with mfa\",\n    5116: \"Chain config has not been added. Please add the chain config before calling switchChain\",\n    5117: \"Unsupported operation\",\n    5118: \"useCoreKitKey flag is enabled but coreKitKey is not available\",\n    5119: \"User not logged in.\"\n});\nclass WalletOperationsError extends Web3AuthError {\n    constructor(code, message){\n        // takes care of stack and proto\n        super(code, message);\n        // Set name explicitly as minification can mangle class names\n        Object.defineProperty(this, \"name\", {\n            value: \"WalletOperationsError\"\n        });\n    }\n    static fromCode(code) {\n        let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n        return new WalletOperationsError(code, `${WalletOperationsError.messages[code]}, ${extraMessage}`);\n    }\n    // Custom methods\n    static chainIDNotAllowed() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletOperationsError.fromCode(5201, extraMessage);\n    }\n    static operationNotAllowed() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletOperationsError.fromCode(5202, extraMessage);\n    }\n    static chainNamespaceNotAllowed() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletOperationsError.fromCode(5203, extraMessage);\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(WalletOperationsError, \"messages\", {\n    5000: \"Custom\",\n    5201: \"Provided chainId is not allowed\",\n    5202: \"This operation is not allowed\"\n});\nclass WalletProviderError extends Web3AuthError {\n    constructor(code, message){\n        // takes care of stack and proto\n        super(code, message);\n        // Set name explicitly as minification can mangle class names\n        Object.defineProperty(this, \"name\", {\n            value: \"WalletProviderError\"\n        });\n    }\n    static fromCode(code) {\n        let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n        return new WalletOperationsError(code, `${WalletProviderError.messages[code]}, ${extraMessage}`);\n    }\n    // Custom methods\n    static invalidRequestArgs() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletOperationsError.fromCode(5301, extraMessage);\n    }\n    static invalidRequestMethod() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletOperationsError.fromCode(5302, extraMessage);\n    }\n    static invalidRequestParams() {\n        let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return WalletOperationsError.fromCode(5303, extraMessage);\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(WalletProviderError, \"messages\", {\n    5000: \"Custom\",\n    5301: \"Expected a single, non-array, object argument.\",\n    5302: \"'args.method' must be a non-empty string.\",\n    5303: \"'args.params' must be an object or array if provided.\"\n});\nconst MULTI_CHAIN_ADAPTERS = {\n    OPENLOGIN: \"openlogin\",\n    WALLET_CONNECT_V2: \"wallet-connect-v2\"\n};\nconst SOLANA_ADAPTERS = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({\n    TORUS_SOLANA: \"torus-solana\",\n    PHANTOM: \"phantom\",\n    SOLFLARE: \"solflare\",\n    SLOPE: \"slope\"\n}, MULTI_CHAIN_ADAPTERS);\nconst EVM_ADAPTERS = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({\n    TORUS_EVM: \"torus-evm\",\n    METAMASK: \"metamask\",\n    COINBASE: \"coinbase\"\n}, MULTI_CHAIN_ADAPTERS);\nconst WALLET_ADAPTERS = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, EVM_ADAPTERS), SOLANA_ADAPTERS);\nconst ADAPTER_NAMES = {\n    [MULTI_CHAIN_ADAPTERS.OPENLOGIN]: \"OpenLogin\",\n    [MULTI_CHAIN_ADAPTERS.WALLET_CONNECT_V2]: \"Wallet Connect v2\",\n    [SOLANA_ADAPTERS.TORUS_SOLANA]: \"Torus\",\n    [SOLANA_ADAPTERS.PHANTOM]: \"Phantom\",\n    [SOLANA_ADAPTERS.SOLFLARE]: \"Solflare\",\n    [SOLANA_ADAPTERS.SLOPE]: \"Slope\",\n    [EVM_ADAPTERS.TORUS_EVM]: \"Torus\",\n    [EVM_ADAPTERS.METAMASK]: \"Metamask\",\n    [EVM_ADAPTERS.COINBASE]: \"Coinbase\"\n};\nconst WEB3AUTH_NETWORK = _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_3__.OPENLOGIN_NETWORK;\nconst ADAPTER_CATEGORY = {\n    EXTERNAL: \"external\",\n    IN_APP: \"in_app\"\n};\nconst ADAPTER_STATUS = {\n    NOT_READY: \"not_ready\",\n    READY: \"ready\",\n    CONNECTING: \"connecting\",\n    CONNECTED: \"connected\",\n    DISCONNECTED: \"disconnected\",\n    ERRORED: \"errored\"\n};\nconst ADAPTER_EVENTS = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, ADAPTER_STATUS), {}, {\n    ADAPTER_DATA_UPDATED: \"adapter_data_updated\",\n    CACHE_CLEAR: \"cache_clear\"\n});\nclass BaseAdapter extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter {\n    constructor(){\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"adapterData\", {});\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"sessionTime\", 86400);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"clientId\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"web3AuthNetwork\", _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_3__.OPENLOGIN_NETWORK.MAINNET);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"rehydrated\", false);\n        // should be added in constructor or from setAdapterSettings function\n        // before calling init function.\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"chainConfig\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"knownChainConfigs\", {});\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"adapterNamespace\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"currentChainNamespace\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"type\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"name\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"status\", void 0);\n        this.setAdapterSettings(options);\n    }\n    get chainConfigProxy() {\n        return this.chainConfig ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, this.chainConfig) : null;\n    }\n    get connnected() {\n        return this.status === ADAPTER_STATUS.CONNECTED;\n    }\n    setAdapterSettings(options) {\n        if (this.status === ADAPTER_STATUS.READY) return;\n        if (options !== null && options !== void 0 && options.sessionTime) {\n            this.sessionTime = options.sessionTime;\n        }\n        if (options !== null && options !== void 0 && options.clientId) {\n            this.clientId = options.clientId;\n        }\n        if (options !== null && options !== void 0 && options.web3AuthNetwork) {\n            this.web3AuthNetwork = options.web3AuthNetwork;\n        }\n        const customChainConfig = options.chainConfig;\n        if (customChainConfig) {\n            if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n            this.currentChainNamespace = customChainConfig.chainNamespace;\n            // chainId is optional in this function.\n            // we go with mainnet chainId by default.\n            const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n            // NOTE: It is being forced casted to CustomChainConfig to handle OTHER Chainnamespace\n            // where chainConfig is not required.\n            const finalChainConfig = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, defaultChainConfig || {}), customChainConfig);\n            this.chainConfig = finalChainConfig;\n            this.addChainConfig(finalChainConfig);\n        }\n    }\n    checkConnectionRequirements() {\n        // we reconnect without killing existing wallet connect session on calling connect again.\n        if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V2 && this.status === ADAPTER_STATUS.CONNECTING) return;\n        else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n        if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n        if (this.status !== ADAPTER_STATUS.READY) throw WalletLoginError.connectionError(\"Wallet adapter is not ready yet, Please wait for init function to resolve before calling connect/connectTo function\");\n    }\n    checkInitializationRequirements() {\n        if (!this.clientId) throw WalletInitializationError.invalidParams(\"Please initialize Web3Auth with a valid clientId in constructor\");\n        if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n        if (!this.chainConfig.rpcTarget && this.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n            throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n        }\n        if (!this.chainConfig.chainId && this.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n            throw WalletInitializationError.invalidParams(\"chainID is required in chainConfig\");\n        }\n        if (this.status === ADAPTER_STATUS.NOT_READY) return;\n        if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n        if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n    }\n    checkDisconnectionRequirements() {\n        if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    }\n    checkAddChainRequirements(chainConfig) {\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (!init && !this.provider) throw WalletLoginError.notConnectedError(\"Not connected with wallet.\");\n        if (this.currentChainNamespace !== chainConfig.chainNamespace) {\n            throw WalletOperationsError.chainNamespaceNotAllowed(\"This adapter doesn't support this chainNamespace\");\n        }\n    }\n    checkSwitchChainRequirements(_ref) {\n        let { chainId } = _ref;\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (!init && !this.provider) throw WalletLoginError.notConnectedError(\"Not connected with wallet.\");\n        if (!this.knownChainConfigs[chainId]) throw WalletLoginError.chainConfigNotAdded(\"Invalid chainId\");\n    }\n    updateAdapterData(data) {\n        this.adapterData = data;\n        this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, {\n            adapterName: this.name,\n            data\n        });\n    }\n    addChainConfig(chainConfig) {\n        const currentConfig = this.knownChainConfigs[chainConfig.chainId];\n        this.knownChainConfigs[chainConfig.chainId] = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, currentConfig || {}), chainConfig);\n    }\n    getChainConfig(chainId) {\n        return this.knownChainConfigs[chainId] || null;\n    }\n}\nclass BaseNetworkSwitch {\n}\nconst authServer = \"https://authjs.web3auth.io\";\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_7___default().getLogger(\"web3auth-logger\");\nfunction storageAvailable(type) {\n    let storageExists = false;\n    let storageLength = 0;\n    let storage;\n    try {\n        storage = window[type];\n        storageExists = true;\n        storageLength = storage.length;\n        const x = \"__storage_test__\";\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    } catch (error) {\n        const _error = error;\n        return !!(_error && // everything except Firefox\n        (_error.code === 22 || // Firefox\n        _error.code === 1014 || // test name field too, because code might not be present\n        // everything except Firefox\n        _error.name === \"QuotaExceededError\" || // Firefox\n        _error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n        storageExists && storageLength !== 0);\n    }\n}\nconst isHexStrict = (hex)=>{\n    return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\nconst checkIfTokenIsExpired = (token)=>{\n    const decoded = (0,jwt_decode__WEBPACK_IMPORTED_MODULE_6__.jwtDecode)(token);\n    if (!decoded.exp) {\n        return true;\n    }\n    if (decoded.exp < Math.floor(Date.now() / 1000)) {\n        return true;\n    }\n    return false;\n};\nconst signChallenge = async (payload, chainNamespace)=>{\n    const t = chainNamespace === \"solana\" ? \"sip99\" : \"eip191\";\n    const header = {\n        t\n    };\n    const network = chainNamespace === \"solana\" ? \"solana\" : \"ethereum\";\n    const data = {\n        payload,\n        header,\n        network\n    };\n    const res = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_5__.post)(`${authServer}/siww/get`, data);\n    if (!res.success) {\n        throw new Error(\"Failed to authenticate user, Please reach out to Web3Auth Support team\");\n    }\n    return res.challenge;\n};\nconst verifySignedChallenge = async (chainNamespace, signedMessage, challenge, issuer, sessionTime, clientId, web3AuthNetwork)=>{\n    const t = chainNamespace === \"solana\" ? \"sip99\" : \"eip191\";\n    const sigData = {\n        signature: {\n            s: signedMessage,\n            t\n        },\n        message: challenge,\n        issuer,\n        audience: typeof window.location !== \"undefined\" ? window.location.hostname : \"com://reactnative\",\n        timeout: sessionTime\n    };\n    const idTokenRes = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_5__.post)(`${authServer}/siww/verify`, sigData, {\n        headers: {\n            client_id: clientId,\n            wallet_provider: issuer,\n            web3auth_network: web3AuthNetwork\n        }\n    });\n    if (!idTokenRes.success) {\n        log.error(\"Failed to authenticate user, ,message verification failed\", idTokenRes.error);\n        throw new Error(\"Failed to authenticate user, ,message verification failed\");\n    }\n    return idTokenRes.token;\n};\nconst getSavedToken = (userAddress, issuer)=>{\n    if (storageAvailable(\"localStorage\")) {\n        return localStorage.getItem(`${userAddress.toLowerCase()}_${issuer}`);\n    }\n    return null;\n};\nconst saveToken = (userAddress, issuer, token)=>{\n    if (storageAvailable(\"localStorage\")) {\n        return localStorage.setItem(`${userAddress.toLowerCase()}_${issuer}`, token);\n    }\n    return null;\n};\nconst clearToken = (userAddress, issuer)=>{\n    if (storageAvailable(\"localStorage\")) {\n        return localStorage.removeItem(`${userAddress.toLowerCase()}_${issuer}`);\n    }\n    return null;\n};\nconst PROVIDER_EVENTS = {\n    INITIALIZED: \"initialized\",\n    ERRORED: \"errored\"\n};\n //# sourceMappingURL=base.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/dist/ethereumProvider.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/dist/ethereumProvider.esm.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumPrivateKeyProvider: () => (/* binding */ EthereumPrivateKeyProvider),\n/* harmony export */   TransactionFormatter: () => (/* binding */ TransactionFormatter),\n/* harmony export */   WalletConnectV2Provider: () => (/* binding */ WalletConnectV2Provider),\n/* harmony export */   getProviderHandlers: () => (/* binding */ getProviderHandlers)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @metamask/rpc-errors */ \"(ssr)/./node_modules/@metamask/rpc-errors/dist/index.js\");\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @web3auth/base-provider */ \"(ssr)/./node_modules/@web3auth/base-provider/dist/baseProvider.esm.js\");\n/* harmony import */ var _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @toruslabs/base-controllers */ \"(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\");\n/* harmony import */ var _ethereumjs_tx__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethereumjs/tx */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @metamask/eth-sig-util */ \"(ssr)/./node_modules/@metamask/eth-sig-util/dist/index.js\");\n/* harmony import */ var _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! assert */ \"assert\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var jsonschema__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! jsonschema */ \"(ssr)/./node_modules/jsonschema/lib/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _ethereumjs_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ethereumjs/common */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/index.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_15__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction resemblesAddress(str) {\n    // hex prefix 2 + 20 bytes\n    return str.length === 2 + 20 * 2;\n}\nfunction createWalletMiddleware(_ref) {\n    let { getAccounts, getPrivateKey, processDecryptMessage, processEncryptionPublicKey, processEthSignMessage, processPersonalMessage, processTransaction, processSignTransaction, processTypedMessage, processTypedMessageV3, processTypedMessageV4 } = _ref;\n    if (!getAccounts) {\n        throw new Error(\"opts.getAccounts is required\");\n    }\n    //\n    // utility\n    //\n    /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */ async function validateAndNormalizeKeyholder(address, req) {\n        if (typeof address === \"string\" && address.length > 0) {\n            // ensure address is included in provided accounts\n            const accounts = await getAccounts(req);\n            const normalizedAccounts = accounts.map((_address)=>_address.toLowerCase());\n            const normalizedAddress = address.toLowerCase();\n            if (normalizedAccounts.includes(normalizedAddress)) {\n                return normalizedAddress;\n            }\n        }\n        throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams({\n            message: `Invalid parameters: must provide an Ethereum address.`\n        });\n    }\n    //\n    // account lookups\n    //\n    async function lookupAccounts(req, res) {\n        res.result = await getAccounts(req);\n    }\n    async function lookupDefaultAccount(req, res) {\n        const accounts = await getAccounts(req);\n        res.result = accounts[0] || null;\n    }\n    //\n    // transaction signatures\n    //\n    async function sendTransaction(req, res) {\n        if (!processTransaction) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        }\n        const txParams = req.params[0] || {\n            from: \"\"\n        };\n        txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n        res.result = await processTransaction(txParams, req);\n    }\n    async function signTransaction(req, res) {\n        if (!processSignTransaction) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        }\n        const txParams = req.params[0] || {\n            from: \"\"\n        };\n        txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n        res.result = await processSignTransaction(txParams, req);\n    }\n    //\n    // message signatures\n    //\n    async function ethSign(req, res) {\n        if (!processEthSignMessage) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        }\n        const address = await validateAndNormalizeKeyholder(req.params[0], req);\n        const message = req.params[1];\n        const extraParams = req.params[2] || {};\n        const msgParams = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, extraParams), {}, {\n            from: address,\n            data: message\n        });\n        res.result = await processEthSignMessage(msgParams, req);\n    }\n    async function signTypedData(req, res) {\n        if (!processTypedMessage) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        }\n        const message = req.params[0];\n        const address = await validateAndNormalizeKeyholder(req.params[1], req);\n        const version = \"V1\";\n        const extraParams = req.params[2] || {};\n        const msgParams = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, extraParams), {}, {\n            from: address,\n            data: message\n        });\n        res.result = await processTypedMessage(msgParams, req, version);\n    }\n    async function signTypedDataV3(req, res) {\n        if (!processTypedMessageV3) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        }\n        const address = await validateAndNormalizeKeyholder(req.params[0], req);\n        const message = req.params[1];\n        const version = \"V3\";\n        const msgParams = {\n            data: message,\n            from: address,\n            version\n        };\n        res.result = await processTypedMessageV3(msgParams, req, version);\n    }\n    async function signTypedDataV4(req, res) {\n        if (!processTypedMessageV4) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        }\n        const address = await validateAndNormalizeKeyholder(req.params[0], req);\n        const message = req.params[1];\n        const version = \"V4\";\n        const msgParams = {\n            data: message,\n            from: address,\n            version\n        };\n        res.result = await processTypedMessageV4(msgParams, req, version);\n    }\n    async function personalSign(req, res) {\n        if (!processPersonalMessage) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        }\n        // process normally\n        const firstParam = req.params[0];\n        const secondParam = req.params[1];\n        // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n        const extraParams = req.params[2] || {};\n        // We initially incorrectly ordered these parameters.\n        // To gracefully respect users who adopted this API early,\n        // we are currently gracefully recovering from the wrong param order\n        // when it is clearly identifiable.\n        //\n        // That means when the first param is definitely an address,\n        // and the second param is definitely not, but is hex.\n        let address, message;\n        if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n            let warning = `The eth_personalSign method requires params ordered `;\n            warning += `[message, address]. This was previously handled incorrectly, `;\n            warning += `and has been corrected automatically. `;\n            warning += `Please switch this param order for smooth behavior in the future.`;\n            res.warning = warning;\n            address = firstParam;\n            message = secondParam;\n        } else {\n            message = firstParam;\n            address = secondParam;\n        }\n        address = await validateAndNormalizeKeyholder(address, req);\n        const msgParams = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, extraParams), {}, {\n            from: address,\n            data: message\n        });\n        // eslint-disable-next-line require-atomic-updates\n        res.result = await processPersonalMessage(msgParams, req);\n    }\n    async function encryptionPublicKey(req, res) {\n        if (!processEncryptionPublicKey) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        }\n        const address = await validateAndNormalizeKeyholder(req.params[0], req);\n        res.result = await processEncryptionPublicKey(address, req);\n    }\n    async function decryptMessage(req, res) {\n        if (!processDecryptMessage) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        }\n        const ciphertext = req.params[0];\n        const address = await validateAndNormalizeKeyholder(req.params[1], req);\n        const extraParams = req.params[2] || {};\n        const msgParams = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, extraParams), {}, {\n            from: address,\n            data: ciphertext\n        });\n        res.result = processDecryptMessage(msgParams, req);\n    }\n    async function fetchPrivateKey(req, res) {\n        if (!getPrivateKey) {\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        }\n        res.result = getPrivateKey(req);\n    }\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createScaffoldMiddleware)({\n        // account lookups\n        eth_accounts: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(lookupAccounts),\n        eth_private_key: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(fetchPrivateKey),\n        private_key: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(fetchPrivateKey),\n        eth_coinbase: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(lookupDefaultAccount),\n        // tx signatures\n        eth_sendTransaction: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(sendTransaction),\n        eth_signTransaction: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(signTransaction),\n        // message signatures\n        eth_sign: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(ethSign),\n        eth_signTypedData: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(signTypedData),\n        eth_signTypedData_v3: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(signTypedDataV3),\n        eth_signTypedData_v4: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(signTypedDataV4),\n        personal_sign: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(personalSign),\n        eth_getEncryptionPublicKey: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(encryptionPublicKey),\n        eth_decrypt: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(decryptMessage)\n    });\n}\nfunction createEthMiddleware(providerHandlers) {\n    const { getAccounts, getPrivateKey, processTransaction, processSignTransaction, processEthSignMessage, processTypedMessage, processTypedMessageV3, processTypedMessageV4, processPersonalMessage, processEncryptionPublicKey, processDecryptMessage } = providerHandlers;\n    const ethMiddleware = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.mergeMiddleware)([\n        (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createScaffoldMiddleware)({\n            eth_syncing: false\n        }),\n        createWalletMiddleware({\n            getAccounts,\n            getPrivateKey,\n            processTransaction,\n            processEthSignMessage,\n            processSignTransaction,\n            processTypedMessage,\n            processTypedMessageV3,\n            processTypedMessageV4,\n            processPersonalMessage,\n            processEncryptionPublicKey,\n            processDecryptMessage\n        })\n    ]);\n    return ethMiddleware;\n}\nfunction createChainSwitchMiddleware(_ref) {\n    let { addChain, switchChain } = _ref;\n    async function addNewChain(req, res) {\n        var _req$params;\n        const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n        if (!chainParams) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing chain params\");\n        if (!chainParams.chainId) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing chainId in chainParams\");\n        if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!chainParams.nativeCurrency) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing nativeCurrency in chainParams\");\n        res.result = await addChain(chainParams);\n    }\n    async function updateChain(req, res) {\n        var _req$params2;\n        const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n        if (!chainParams) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing chainId\");\n        res.result = await switchChain(chainParams);\n    }\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createScaffoldMiddleware)({\n        wallet_addEthereumChain: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(addNewChain),\n        wallet_switchEthereumChain: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(updateChain)\n    });\n}\n// #region account middlewares\nfunction createAccountMiddleware(_ref2) {\n    let { updatePrivatekey } = _ref2;\n    async function updateAccount(req, res) {\n        var _req$params3;\n        const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n        if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing privateKey\");\n        res.result = await updatePrivatekey(accountParams);\n    }\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createScaffoldMiddleware)({\n        wallet_updateAccount: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(updateAccount)\n    });\n}\n// #endregion account middlewares\nfunction createChainIdMiddleware(chainId) {\n    return (req, res, next, end)=>{\n        if (req.method === \"eth_chainId\") {\n            res.result = chainId;\n            return end();\n        }\n        return next();\n    };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n    return (req, res, next, end)=>{\n        if (req.method === \"eth_provider_config\") {\n            res.result = providerConfig;\n            return end();\n        }\n        return next();\n    };\n}\nfunction createJsonRpcClient(providerConfig) {\n    const { chainId, rpcTarget } = providerConfig;\n    const fetchMiddleware = (0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_6__.createFetchMiddleware)({\n        rpcTarget\n    });\n    const networkMiddleware = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.mergeMiddleware)([\n        createChainIdMiddleware(chainId),\n        createProviderConfigMiddleware(providerConfig),\n        fetchMiddleware\n    ]);\n    return {\n        networkMiddleware,\n        fetchMiddleware\n    };\n}\nasync function getLastActiveSession(signClient) {\n    if (signClient.session.length) {\n        const lastKeyIndex = signClient.session.keys.length - 1;\n        return signClient.session.get(signClient.session.keys[lastKeyIndex]);\n    }\n    return null;\n}\nasync function sendJrpcRequest(signClient, chainId, method, params) {\n    const session = await getLastActiveSession(signClient);\n    if (!session) {\n        throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.disconnected();\n    }\n    return signClient.request({\n        topic: session.topic,\n        chainId: `eip155:${chainId}`,\n        request: {\n            method,\n            params\n        }\n    });\n}\nasync function getAccounts(signClient) {\n    const session = await getLastActiveSession(signClient);\n    if (!session) {\n        throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.disconnected();\n    }\n    const accounts = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.getAccountsFromNamespaces)(session.namespaces);\n    if (accounts && accounts.length) {\n        return [\n            ...new Set(accounts.map((add)=>{\n                return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.parseAccountId)(add).address;\n            }))\n        ];\n    }\n    throw new Error(\"Failed to get accounts\");\n}\nfunction getProviderHandlers$1(_ref) {\n    let { connector, chainId } = _ref;\n    return {\n        getPrivateKey: async ()=>{\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        },\n        getAccounts: async (_)=>{\n            return getAccounts(connector);\n        },\n        processTransaction: async (txParams, _)=>{\n            const methodRes = await sendJrpcRequest(connector, chainId, \"eth_sendTransaction\", [\n                txParams\n            ]);\n            return methodRes;\n        },\n        processSignTransaction: async (txParams, _)=>{\n            const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTransaction\", [\n                txParams\n            ]);\n            return methodRes;\n        },\n        processEthSignMessage: async (msgParams, _)=>{\n            const methodRes = await sendJrpcRequest(connector, chainId, \"eth_sign\", [\n                msgParams.from,\n                msgParams.data\n            ]);\n            return methodRes;\n        },\n        processPersonalMessage: async (msgParams, _)=>{\n            const methodRes = await sendJrpcRequest(connector, chainId, \"personal_sign\", [\n                msgParams.from,\n                msgParams.data\n            ]);\n            return methodRes;\n        },\n        processTypedMessage: async (msgParams, _)=>{\n            const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData\", [\n                msgParams.data,\n                msgParams.from\n            ]);\n            return methodRes;\n        },\n        processTypedMessageV3: async (msgParams)=>{\n            const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData_v3\", [\n                msgParams.from,\n                msgParams.data\n            ]);\n            return methodRes;\n        },\n        processTypedMessageV4: async (msgParams)=>{\n            const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData_v4\", [\n                msgParams.from,\n                msgParams.data\n            ]);\n            return methodRes;\n        },\n        processEncryptionPublicKey: async (_)=>{\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        },\n        processDecryptMessage: (_)=>{\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n        }\n    };\n}\nvar _class$1;\nclass WalletConnectV2Provider extends _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_5__.BaseProvider {\n    constructor(_ref){\n        let { config, state, connector } = _ref;\n        super({\n            config: {\n                chainConfig: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, config.chainConfig), {}, {\n                    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155\n                }),\n                skipLookupNetwork: !!config.skipLookupNetwork\n            },\n            state: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, state || {}), {}, {\n                chainId: \"loading\",\n                accounts: []\n            })\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"connector\", null);\n        this.connector = connector || null;\n    }\n    async enable() {\n        if (!this.connector) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n            message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n            code: 4902\n        });\n        await this.setupProvider(this.connector);\n        return this._providerEngineProxy.request({\n            method: \"eth_accounts\"\n        });\n    }\n    async setupProvider(connector) {\n        this.onConnectorStateUpdate(connector);\n        await this.setupEngine(connector);\n    }\n    async switchChain(_ref2) {\n        let { chainId } = _ref2;\n        if (!this.connector) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n            message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n            code: 4902\n        });\n        const currentChainConfig = this.getChainConfig(chainId);\n        this.configure({\n            chainConfig: currentChainConfig\n        });\n        await this.setupEngine(this.connector);\n        this.lookupNetwork(this.connector);\n    }\n    async addChain(chainConfig) {\n        super.addChain(chainConfig);\n    }\n    // no need to implement this method in wallet connect v2.\n    async lookupNetwork(_) {\n        const newChainId = this.config.chainConfig.chainId;\n        this.update({\n            chainId: newChainId\n        });\n        this.emit(\"chainChanged\", newChainId);\n        this.emit(\"connect\", {\n            chainId: newChainId\n        });\n        return this.config.chainConfig.chainId;\n    }\n    async setupEngine(connector) {\n        const { chainId } = this.config.chainConfig;\n        const numChainId = parseInt(chainId, 16);\n        const providerHandlers = getProviderHandlers$1({\n            connector,\n            chainId: numChainId\n        });\n        const jrpcRes = await getAccounts(connector);\n        this.update({\n            accounts: jrpcRes || []\n        });\n        const ethMiddleware = createEthMiddleware(providerHandlers);\n        const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n        const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.JRPCEngine();\n        const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig);\n        engine.push(ethMiddleware);\n        engine.push(chainSwitchMiddleware);\n        engine.push(networkMiddleware);\n        const provider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.providerFromEngine)(engine);\n        this.updateProviderEngineProxy(provider);\n    }\n    getChainSwitchMiddleware() {\n        const chainSwitchHandlers = {\n            addChain: async (params)=>{\n                const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n                this.addChain({\n                    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155,\n                    chainId,\n                    ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n                    tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n                    displayName: chainName,\n                    rpcTarget: rpcUrls[0],\n                    blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n                    decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 18\n                });\n            },\n            switchChain: async (params)=>{\n                const { chainId } = params;\n                await this.switchChain({\n                    chainId\n                });\n            }\n        };\n        const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n        return chainSwitchMiddleware;\n    }\n    connectedTopic() {\n        var _this$connector;\n        if (!this.connector) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n        if ((_this$connector = this.connector) !== null && _this$connector !== void 0 && (_this$connector = _this$connector.session) !== null && _this$connector !== void 0 && _this$connector.length) {\n            var _this$connector$sessi;\n            // currently we are supporting only 1 active session\n            const lastKeyIndex = this.connector.session.keys.length - 1;\n            return (_this$connector$sessi = this.connector.session.get(this.connector.session.keys[lastKeyIndex])) === null || _this$connector$sessi === void 0 ? void 0 : _this$connector$sessi.topic;\n        }\n        return undefined;\n    }\n    checkIfChainIdAllowed(chainId) {\n        if (!this.connector || !this.connectedTopic()) return false;\n        const sessionData = this.connector.session.get(this.connectedTopic());\n        const allChains = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.getChainsFromNamespaces)(sessionData.namespaces);\n        let chainAllowed = false;\n        for (const chain of allChains){\n            const parsedId = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.parseChainId)(chain);\n            if (Number.parseInt(parsedId.reference, 10) === Number.parseInt(chainId, 10)) {\n                chainAllowed = true;\n                break;\n            }\n        }\n        return chainAllowed;\n    }\n    checkIfAccountAllowed(address) {\n        if (!this.connector || !this.connectedTopic()) return false;\n        const sessionData = this.connector.session.get(this.connectedTopic());\n        const allAccounts = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.getAccountsFromNamespaces)(sessionData.namespaces);\n        let accountAllowed = false;\n        for (const account of allAccounts){\n            var _parsedAccount$addres;\n            const parsedAccount = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.parseAccountId)(account);\n            if (((_parsedAccount$addres = parsedAccount.address) === null || _parsedAccount$addres === void 0 ? void 0 : _parsedAccount$addres.toLowerCase()) === (address === null || address === void 0 ? void 0 : address.toLowerCase())) {\n                accountAllowed = true;\n                break;\n            }\n        }\n        return accountAllowed;\n    }\n    async onConnectorStateUpdate(connector) {\n        connector.events.on(\"session_event\", async (payload)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.debug(\"session_event data\", payload);\n            if (!this.provider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n            const { event } = payload.params;\n            const { name, data } = event || {};\n            // Check if accounts changed and trigger event\n            if (name === \"accountsChanged\" && data !== null && data !== void 0 && data.length && this.state.accounts[0] !== data[0] && this.checkIfAccountAllowed(data[0])) {\n                this.update({\n                    accounts: data\n                });\n                this.emit(\"accountsChanged\", data);\n            }\n            if (event.name === \"chainChanged\") {\n                const { chainId: connectedChainId, rpcUrl } = data;\n                const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n                if (!this.checkIfChainIdAllowed(connectedHexChainId)) return;\n                // Check if chainId changed and trigger event\n                if (connectedHexChainId && this.state.chainId !== connectedHexChainId) {\n                    const maybeConfig = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.getChainConfig)(_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155, connectedHexChainId) || {};\n                    // Handle rpcUrl update\n                    this.configure({\n                        chainConfig: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, maybeConfig), {}, {\n                            chainId: connectedHexChainId,\n                            rpcTarget: rpcUrl,\n                            chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155\n                        })\n                    });\n                    await this.setupEngine(connector);\n                }\n            }\n        });\n    }\n}\n_class$1 = WalletConnectV2Provider;\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(WalletConnectV2Provider, \"getProviderInstance\", async (params)=>{\n    const providerFactory = new _class$1({\n        config: {\n            chainConfig: params.chainConfig,\n            skipLookupNetwork: params.skipLookupNetwork\n        }\n    });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n});\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](\"1\");\n// Setter Maps\nconst toBigNumber = {\n    hex: (n)=>typeof n === \"string\" ? new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.stripHexPrefix)(n), 16) : new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](n, 16),\n    dec: (n)=>new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](n, 10)\n};\nconst toNormalizedDenomination = {\n    WEI: (bigNumber)=>bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n    GWEI: (bigNumber)=>bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n    ETH: (bigNumber)=>bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER)\n};\nconst toSpecifiedDenomination = {\n    WEI: (bigNumber)=>bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"].ROUND_HALF_UP),\n    GWEI: (bigNumber)=>bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"].ROUND_HALF_UP),\n    ETH: (bigNumber)=>bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"].ROUND_HALF_UP)\n};\nconst baseChange = {\n    hex: (n)=>n.toString(16),\n    dec: (n)=>new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](n).toString(10)\n};\nconst converter = (params)=>{\n    const { value, fromNumericBase, fromDenomination, toNumericBase, toDenomination, numberOfDecimals } = params;\n    let convertedValue = toBigNumber[fromNumericBase](value);\n    if (fromDenomination) {\n        convertedValue = toNormalizedDenomination[fromDenomination](convertedValue);\n    }\n    if (toDenomination) {\n        convertedValue = toSpecifiedDenomination[toDenomination](convertedValue);\n    }\n    if (numberOfDecimals) {\n        convertedValue = convertedValue.dp(numberOfDecimals, bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"].ROUND_HALF_DOWN);\n    }\n    if (toNumericBase) {\n        convertedValue = baseChange[toNumericBase](convertedValue);\n    }\n    return convertedValue;\n};\nconst conversionUtil = (value, _ref)=>{\n    let { fromNumericBase = \"hex\", toNumericBase, fromDenomination, toDenomination, numberOfDecimals } = _ref;\n    return converter({\n        fromNumericBase,\n        toNumericBase,\n        fromDenomination,\n        toDenomination,\n        numberOfDecimals,\n        value: value || \"0\"\n    });\n};\nfunction decGWEIToHexWEI(decGWEI) {\n    return conversionUtil(decGWEI, {\n        fromNumericBase: \"dec\",\n        toNumericBase: \"hex\",\n        fromDenomination: \"GWEI\",\n        toDenomination: \"WEI\"\n    });\n}\nfunction hexWEIToDecGWEI(decGWEI) {\n    return conversionUtil(decGWEI, {\n        fromNumericBase: \"hex\",\n        toNumericBase: \"dec\",\n        fromDenomination: \"WEI\",\n        toDenomination: \"GWEI\"\n    });\n}\nfunction normalizeGWEIDecimalNumbers(n) {\n    const numberAsWEIHex = decGWEIToHexWEI(n);\n    const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex).toString();\n    return numberAsGWEI;\n}\nasync function fetchEip1159GasEstimates(url) {\n    const estimates = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_10__.get)(url);\n    const normalizedEstimates = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, estimates), {}, {\n        estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n        low: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, estimates.low), {}, {\n            suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n            suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas)\n        }),\n        medium: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, estimates.medium), {}, {\n            suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n            suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas)\n        }),\n        high: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, estimates.high), {}, {\n            suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n            suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas)\n        })\n    });\n    return normalizedEstimates;\n}\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */ async function fetchLegacyGasPriceEstimates(url) {\n    const result = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_10__.get)(url, {\n        referrer: url,\n        referrerPolicy: \"no-referrer-when-downgrade\",\n        method: \"GET\",\n        mode: \"cors\"\n    });\n    return {\n        low: result.SafeGasPrice,\n        medium: result.ProposeGasPrice,\n        high: result.FastGasPrice\n    };\n}\nconst validateTypedMessageParams = (parameters, activeChainId)=>{\n    try {\n        assert__WEBPACK_IMPORTED_MODULE_11___default().ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n        assert__WEBPACK_IMPORTED_MODULE_11___default().ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n        assert__WEBPACK_IMPORTED_MODULE_11___default().ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n        assert__WEBPACK_IMPORTED_MODULE_11___default().ok(typeof parameters.from === \"string\" && (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.isValidAddress)(parameters.from), '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.');\n        let data = null;\n        let chainId = null;\n        switch(parameters.version){\n            case _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V1:\n                if (typeof parameters.data === \"string\") {\n                    assert__WEBPACK_IMPORTED_MODULE_11___default().doesNotThrow(()=>{\n                        data = JSON.parse(parameters.data);\n                    }, '\"data\" must be a valid JSON string.');\n                } else {\n                    // for backward compatiblity we validate for both string and object type.\n                    data = parameters.data;\n                }\n                assert__WEBPACK_IMPORTED_MODULE_11___default().ok(Array.isArray(data), \"params.data must be an array.\");\n                assert__WEBPACK_IMPORTED_MODULE_11___default().doesNotThrow(()=>{\n                    (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.typedSignatureHash)(data);\n                }, \"Signing data must be valid EIP-712 typed data.\");\n                break;\n            case _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V3:\n            case _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V4:\n                {\n                    var _typedData$domain;\n                    if (typeof parameters.data === \"string\") {\n                        assert__WEBPACK_IMPORTED_MODULE_11___default().doesNotThrow(()=>{\n                            data = JSON.parse(parameters.data);\n                        }, '\"data\" must be a valid JSON string.');\n                    } else {\n                        // for backward compatiblity we validate for both string and object type.\n                        data = parameters.data;\n                    }\n                    const typedData = data;\n                    assert__WEBPACK_IMPORTED_MODULE_11___default().ok(typedData.primaryType in typedData.types, `Primary type of \"${typedData.primaryType}\" has no type definition.`);\n                    const validation = jsonschema__WEBPACK_IMPORTED_MODULE_12__.validate(typedData, _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.TYPED_MESSAGE_SCHEMA.properties);\n                    assert__WEBPACK_IMPORTED_MODULE_11___default().strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n                    chainId = (_typedData$domain = typedData.domain) === null || _typedData$domain === void 0 ? void 0 : _typedData$domain.chainId;\n                    if (chainId) {\n                        assert__WEBPACK_IMPORTED_MODULE_11___default().ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n                        if (typeof chainId === \"string\") {\n                            chainId = Number.parseInt(chainId, (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.isHexStrict)(chainId) ? 16 : 10);\n                        }\n                        assert__WEBPACK_IMPORTED_MODULE_11___default().strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n                    }\n                    break;\n                }\n            default:\n                assert__WEBPACK_IMPORTED_MODULE_11___default().fail(`Unknown typed data version \"${parameters.version}\"`);\n        }\n    } catch (error) {\n        throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidInput({\n            message: error === null || error === void 0 ? void 0 : error.message\n        });\n    }\n};\nasync function signTx(txParams, privKey, txFormatter) {\n    const finalTxParams = await txFormatter.formatTransaction(txParams);\n    const common = await txFormatter.getCommonConfiguration();\n    const unsignedEthTx = _ethereumjs_tx__WEBPACK_IMPORTED_MODULE_7__.TransactionFactory.fromTxData(finalTxParams, {\n        common\n    });\n    const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n    return Buffer.from(signedTx);\n}\nfunction getProviderHandlers(_ref) {\n    let { txFormatter, privKey, getProviderEngineProxy } = _ref;\n    return {\n        getAccounts: async (_)=>[\n                `0x${Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.privateToAddress)(Buffer.from(privKey, \"hex\"))).toString(\"hex\")}`\n            ],\n        getPrivateKey: async (_)=>privKey,\n        processTransaction: async (txParams, _)=>{\n            const providerEngineProxy = getProviderEngineProxy();\n            if (!providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n                message: \"Provider is not initialized\",\n                code: 4902\n            });\n            if (txParams.input && !txParams.data) txParams.data = txParams.input;\n            const signedTx = await signTx(txParams, privKey, txFormatter);\n            const txHash = await providerEngineProxy.request({\n                method: \"eth_sendRawTransaction\",\n                params: [\n                    \"0x\".concat(signedTx.toString(\"hex\"))\n                ]\n            });\n            return txHash;\n        },\n        processSignTransaction: async (txParams, _)=>{\n            const providerEngineProxy = getProviderEngineProxy();\n            if (!providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n                message: \"Provider is not initialized\",\n                code: 4902\n            });\n            if (txParams.input && !txParams.data) txParams.data = txParams.input;\n            const signedTx = await signTx(txParams, privKey, txFormatter);\n            return `0x${signedTx.toString(\"hex\")}`;\n        },\n        processEthSignMessage: async (msgParams, _)=>{\n            const rawMessageSig = (0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_6__.signMessage)(privKey, msgParams.data);\n            return rawMessageSig;\n        },\n        processPersonalMessage: async (msgParams, _)=>{\n            const privKeyBuffer = Buffer.from(privKey, \"hex\");\n            const sig = (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.personalSign)({\n                privateKey: privKeyBuffer,\n                data: msgParams.data\n            });\n            return sig;\n        },\n        processTypedMessage: async (msgParams, _)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.debug(\"processTypedMessage\", msgParams);\n            const privKeyBuffer = Buffer.from(privKey, \"hex\");\n            const providerEngineProxy = getProviderEngineProxy();\n            if (!providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n                message: \"Provider is not initialized\",\n                code: 4902\n            });\n            const chainId = await providerEngineProxy.request({\n                method: \"eth_chainId\"\n            });\n            const finalChainId = Number.parseInt(chainId, (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.isHexStrict)(chainId) ? 16 : 10);\n            const params = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, msgParams), {}, {\n                version: _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V1\n            });\n            validateTypedMessageParams(params, finalChainId);\n            const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n            const sig = (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.signTypedData)({\n                privateKey: privKeyBuffer,\n                data,\n                version: _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V1\n            });\n            return sig;\n        },\n        processTypedMessageV3: async (msgParams, _)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.debug(\"processTypedMessageV3\", msgParams);\n            const privKeyBuffer = Buffer.from(privKey, \"hex\");\n            const providerEngineProxy = getProviderEngineProxy();\n            if (!providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n                message: \"Provider is not initialized\",\n                code: 4902\n            });\n            const chainId = await providerEngineProxy.request({\n                method: \"eth_chainId\"\n            });\n            const finalChainId = Number.parseInt(chainId, (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.isHexStrict)(chainId) ? 16 : 10);\n            validateTypedMessageParams(msgParams, finalChainId);\n            const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n            const sig = (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.signTypedData)({\n                privateKey: privKeyBuffer,\n                data,\n                version: _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V3\n            });\n            return sig;\n        },\n        processTypedMessageV4: async (msgParams, _)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.debug(\"processTypedMessageV4\", msgParams);\n            const privKeyBuffer = Buffer.from(privKey, \"hex\");\n            const providerEngineProxy = getProviderEngineProxy();\n            if (!providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n                message: \"Provider is not initialized\",\n                code: 4902\n            });\n            const chainId = await providerEngineProxy.request({\n                method: \"eth_chainId\"\n            });\n            const finalChainId = Number.parseInt(chainId, (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.isHexStrict)(chainId) ? 16 : 10);\n            validateTypedMessageParams(msgParams, finalChainId);\n            const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n            const sig = (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.signTypedData)({\n                privateKey: privKeyBuffer,\n                data,\n                version: _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V4\n            });\n            return sig;\n        },\n        processEncryptionPublicKey: async (address, _)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.info(\"processEncryptionPublicKey\", address);\n            return (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.getEncryptionPublicKey)(privKey);\n        },\n        processDecryptMessage: (msgParams, _)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.info(\"processDecryptMessage\", msgParams);\n            const stripped = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.stripHexPrefix)(msgParams.data);\n            const buff = Buffer.from(stripped, \"hex\");\n            const decrypted = (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.decrypt)({\n                encryptedData: JSON.parse(buff.toString(\"utf8\")),\n                privateKey: privKey\n            });\n            return decrypted;\n        }\n    };\n}\nfunction bnLessThan(a, b) {\n    if (a === null || a === undefined || b === null || b === undefined) {\n        return null;\n    }\n    return new bignumber_js__WEBPACK_IMPORTED_MODULE_13__.BigNumber(a, 10).lt(b, 10);\n}\nfunction bnToHex(inputBn) {\n    return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(inputBn.toString(16));\n}\nfunction hexToBn(inputHex) {\n    if (bn_js__WEBPACK_IMPORTED_MODULE_15___default().isBN(inputHex)) return inputHex;\n    return new (bn_js__WEBPACK_IMPORTED_MODULE_15___default())((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.stripHexPrefix)(inputHex), 16);\n}\nfunction BnMultiplyByFraction(targetBN, numerator, denominator) {\n    const numberBN = new (bn_js__WEBPACK_IMPORTED_MODULE_15___default())(numerator);\n    const denomBN = new (bn_js__WEBPACK_IMPORTED_MODULE_15___default())(denominator);\n    return targetBN.mul(numberBN).div(denomBN);\n}\nconst LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nconst EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nconst TRANSACTION_ENVELOPE_TYPES = {\n    LEGACY: \"0x0\",\n    ACCESS_LIST: \"0x1\",\n    FEE_MARKET: \"0x2\"\n};\nconst TRANSACTION_TYPES = {\n    SENT_ETHER: \"sentEther\",\n    CONTRACT_INTERACTION: \"contractInteraction\",\n    DEPLOY_CONTRACT: \"contractDeployment\",\n    STANDARD_TRANSACTION: \"transaction\"\n};\nconst GAS_ESTIMATE_TYPES = {\n    FEE_MARKET: \"fee-market\",\n    LEGACY: \"legacy\",\n    ETH_GASPRICE: \"eth_gasPrice\",\n    NONE: \"none\"\n};\nclass TransactionFormatter {\n    constructor(_ref){\n        let { getProviderEngineProxy } = _ref;\n        // https://0x.org/docs/introduction/0x-cheat-sheet#swap-api-endpoints\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"API_SUPPORTED_CHAINIDS\", new Set([\n            \"0x1\",\n            \"0x5\",\n            \"0x13881\",\n            \"0xa4b1\",\n            \"0xa86a\",\n            \"0x2105\",\n            \"0x38\",\n            \"0xfa\",\n            \"0xa\",\n            \"0x89\"\n        ]));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"chainConfig\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"getProviderEngineProxy\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"isEIP1559Compatible\", false);\n        this.getProviderEngineProxy = getProviderEngineProxy;\n    }\n    get providerProxy() {\n        return this.getProviderEngineProxy();\n    }\n    async init() {\n        this.chainConfig = await this.providerProxy.request({\n            method: \"eth_provider_config\"\n        });\n        this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n    }\n    async getCommonConfiguration() {\n        if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n        const { displayName: name, chainId } = this.chainConfig;\n        const hardfork = this.isEIP1559Compatible ? _ethereumjs_common__WEBPACK_IMPORTED_MODULE_14__.Hardfork.Paris : _ethereumjs_common__WEBPACK_IMPORTED_MODULE_14__.Hardfork.Berlin;\n        const customChainParams = {\n            name,\n            chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n            networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n            defaultHardfork: hardfork\n        };\n        return _ethereumjs_common__WEBPACK_IMPORTED_MODULE_14__.Common.custom(customChainParams);\n    }\n    async formatTransaction(txParams) {\n        if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n        const clonedTxParams = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, txParams);\n        if (clonedTxParams.nonce === undefined) clonedTxParams.nonce = await this.providerProxy.request({\n            method: \"eth_getTransactionCount\",\n            params: [\n                txParams.from,\n                \"latest\"\n            ]\n        });\n        if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n            if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n            if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n            // if user provides gas Limit, we should use it instead\n            // if gas is not provided explicitly, estimate it.\n            if (!clonedTxParams.gasLimit) {\n                if (!clonedTxParams.gas) {\n                    const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n                    if (defaultGasLimit) {\n                        clonedTxParams.gasLimit = defaultGasLimit;\n                    }\n                } else {\n                    clonedTxParams.gasLimit = clonedTxParams.gas;\n                }\n            }\n            return clonedTxParams;\n        }\n        if (!clonedTxParams.gasLimit) {\n            if (!clonedTxParams.gas) {\n                const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n                if (defaultGasLimit) {\n                    clonedTxParams.gasLimit = defaultGasLimit;\n                }\n            } else {\n                clonedTxParams.gasLimit = clonedTxParams.gas;\n            }\n        }\n        const { gasPrice: defaultGasPrice, maxFeePerGas: defaultMaxFeePerGas, maxPriorityFeePerGas: defaultMaxPriorityFeePerGas } = await this.getDefaultGasFees(clonedTxParams);\n        if (this.isEIP1559Compatible) {\n            // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n            //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n            if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n                clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n                clonedTxParams.maxPriorityFeePerGas = bnLessThan(typeof defaultMaxPriorityFeePerGas === \"string\" ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.stripHexPrefix)(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas, typeof clonedTxParams.gasPrice === \"string\" ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.stripHexPrefix)(clonedTxParams.gasPrice) : clonedTxParams.gasPrice) ? defaultMaxPriorityFeePerGas : clonedTxParams.gasPrice;\n            } else {\n                if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n                    // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n                    // with the one returned by the gasFeeController, if that is available.\n                    clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n                }\n                if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n                    // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n                    // with the one returned by the gasFeeController, if that is available.\n                    clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n                }\n                if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n                    // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n                    // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n                    // available.\n                    clonedTxParams.maxFeePerGas = defaultGasPrice;\n                }\n                if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n                    // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n                    // available  then we set maxPriorityFeePerGas to\n                    // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n                    // set by the dapp, or the maxFeePerGas from the controller.\n                    clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n                }\n            }\n            // We remove the gasPrice param entirely when on an eip1559 compatible network\n            delete clonedTxParams.gasPrice;\n        } else {\n            // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n            // when not on a EIP1559 compatible network\n            delete clonedTxParams.maxPriorityFeePerGas;\n            delete clonedTxParams.maxFeePerGas;\n        }\n        // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n        // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n        // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n        // were available from either the dapp or the network.\n        if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n            clonedTxParams.gasPrice = defaultGasPrice;\n        }\n        clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n        clonedTxParams.chainId = this.chainConfig.chainId;\n        return clonedTxParams;\n    }\n    async fetchEthGasPriceEstimate() {\n        const gasPrice = await this.providerProxy.request({\n            method: \"eth_gasPrice\",\n            params: []\n        });\n        return {\n            gasPrice: hexWEIToDecGWEI(gasPrice).toString()\n        };\n    }\n    async fetchGasEstimatesViaEthFeeHistory() {\n        const noOfBlocks = 10;\n        const newestBlock = \"latest\";\n        // get the 10, 50 and 95th percentile of the tip fees from the last 10 blocks\n        const percentileValues = [\n            10,\n            50,\n            95\n        ];\n        const feeHistory = await this.providerProxy.request({\n            method: \"eth_feeHistory\",\n            params: [\n                noOfBlocks,\n                newestBlock,\n                percentileValues\n            ]\n        });\n        // this is in hex wei\n        const finalBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];\n        // this is in hex wei\n        const priorityFeeCalcs = feeHistory.reward.reduce((acc, curr)=>{\n            return {\n                slow: acc.slow.plus(new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](curr[0], 16)),\n                average: acc.average.plus(new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](curr[1], 16)),\n                fast: acc.fast.plus(new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](curr[2], 16))\n            };\n        }, {\n            slow: new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](0),\n            average: new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](0),\n            fast: new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](0)\n        });\n        return {\n            estimatedBaseFee: hexWEIToDecGWEI(finalBaseFeePerGas).toString(),\n            high: {\n                maxWaitTimeEstimate: 30000,\n                minWaitTimeEstimate: 15000,\n                suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.plus(finalBaseFeePerGas).toString(16)).toString(),\n                suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.toString(16)).toString()\n            },\n            medium: {\n                maxWaitTimeEstimate: 45000,\n                minWaitTimeEstimate: 15000,\n                suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.plus(finalBaseFeePerGas).toString(16)).toString(),\n                suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.toString(16)).toString()\n            },\n            low: {\n                maxWaitTimeEstimate: 60000,\n                minWaitTimeEstimate: 15000,\n                suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.plus(finalBaseFeePerGas).toString(16)).toString(),\n                suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.toString(16)).toString()\n            }\n        };\n    }\n    async getEIP1559Compatibility() {\n        const latestBlock = await this.providerProxy.request({\n            method: \"eth_getBlockByNumber\",\n            params: [\n                \"latest\",\n                false\n            ]\n        });\n        const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n        return !!supportsEIP1559;\n    }\n    async fetchGasFeeEstimateData() {\n        if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n        const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n        const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n        let gasData;\n        try {\n            if (this.isEIP1559Compatible) {\n                let estimates;\n                try {\n                    if (this.API_SUPPORTED_CHAINIDS.has(this.chainConfig.chainId)) {\n                        estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n                    } else {\n                        throw new Error(\"Chain id not supported by api\");\n                    }\n                } catch (error) {\n                    estimates = await this.fetchGasEstimatesViaEthFeeHistory();\n                }\n                gasData = {\n                    gasFeeEstimates: estimates,\n                    gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET\n                };\n            } else if (isLegacyGasAPICompatible) {\n                const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n                gasData = {\n                    gasFeeEstimates: estimates,\n                    gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY\n                };\n            } else {\n                throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n            }\n        } catch (e) {\n            try {\n                const estimates = await this.fetchEthGasPriceEstimate();\n                gasData = {\n                    gasFeeEstimates: estimates,\n                    gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE\n                };\n            } catch (error) {\n                throw new Error(`Gas fee/price estimation failed. Message: ${error.message}`);\n            }\n        }\n        return gasData;\n    }\n    async getDefaultGasFees(txParams) {\n        if (!this.isEIP1559Compatible && txParams.gasPrice || this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas) {\n            return {};\n        }\n        try {\n            const { gasFeeEstimates, gasEstimateType } = await this.fetchGasFeeEstimateData();\n            if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n                const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = gasFeeEstimates;\n                if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n                    return {\n                        maxFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n                        maxPriorityFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas))\n                    };\n                }\n            } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n                // The LEGACY type includes low, medium and high estimates of\n                // gas price values.\n                return {\n                    gasPrice: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(decGWEIToHexWEI(gasFeeEstimates.medium))\n                };\n            } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n                // The ETH_GASPRICE type just includes a single gas price property,\n                // which we can assume was retrieved from eth_gasPrice\n                return {\n                    gasPrice: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(decGWEIToHexWEI(gasFeeEstimates.gasPrice))\n                };\n            }\n        } catch (error) {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.error(error);\n        }\n        const { gasPrice } = await this.fetchEthGasPriceEstimate();\n        return {\n            gasPrice: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(decGWEIToHexWEI(gasPrice))\n        };\n    }\n    async estimateTxGas(txMeta) {\n        const txParams = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, txMeta);\n        // `eth_estimateGas` can fail if the user has insufficient balance for the\n        // value being sent, or for the gas cost. We don't want to check their\n        // balance here, we just want the gas estimate. The gas price is removed\n        // to skip those balance checks. We check balance elsewhere. We also delete\n        // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n        delete txParams.gasPrice;\n        delete txParams.maxFeePerGas;\n        delete txParams.maxPriorityFeePerGas;\n        const gas = await this.providerProxy.request({\n            method: \"eth_estimateGas\",\n            params: [\n                txParams\n            ]\n        });\n        return gas;\n    }\n    async analyzeGasUsage(txMeta) {\n        const block = await this.providerProxy.request({\n            method: \"eth_getBlockByNumber\",\n            params: [\n                \"latest\",\n                false\n            ]\n        });\n        // fallback to block gasLimit\n        const blockGasLimitBN = hexToBn(block.gasLimit);\n        const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n        let estimatedGasHex = bnToHex(saferGasLimitBN);\n        try {\n            estimatedGasHex = await this.estimateTxGas(txMeta);\n        } catch (error) {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.warn(error);\n        }\n        return {\n            blockGasLimit: block.gasLimit,\n            estimatedGasHex\n        };\n    }\n    addGasBuffer(initialGasLimitHex, blockGasLimitHex) {\n        let multiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.5;\n        const initialGasLimitBn = hexToBn(initialGasLimitHex);\n        const blockGasLimitBn = hexToBn(blockGasLimitHex);\n        const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n        const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n        // if initialGasLimit is above blockGasLimit, dont modify it\n        if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n        // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n        if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n        // otherwise use blockGasLimit\n        return bnToHex(upperGasLimitBn);\n    }\n    async determineTransactionCategory(txParameters) {\n        const { data, to } = txParameters;\n        let code = \"\";\n        let txCategory;\n        if (data && !to) {\n            txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n        } else {\n            try {\n                code = await this.providerProxy.request({\n                    method: \"eth_getCode\",\n                    params: [\n                        to,\n                        \"latest\"\n                    ]\n                });\n            } catch (error) {\n                _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.warn(error);\n            }\n            const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n            txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n        }\n        return {\n            transactionCategory: txCategory,\n            code\n        };\n    }\n    async getDefaultGasLimit(txParams) {\n        const { transactionCategory } = await this.determineTransactionCategory(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, txParams));\n        if (txParams.gas) {\n            return txParams.gas;\n        }\n        if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n            // if there's data in the params, but there's no contract code, it's not a valid transaction\n            if (txParams.data) {\n                throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n            }\n            const TWENTY_ONE_THOUSAND = 21000;\n            // This is a standard ether simple send, gas requirement is exactly 21k\n            return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(TWENTY_ONE_THOUSAND.toString(16));\n        }\n        const { blockGasLimit, estimatedGasHex } = await this.analyzeGasUsage(txParams);\n        // add additional gas buffer to our estimation for safety\n        const gasLimit = this.addGasBuffer((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(estimatedGasHex), blockGasLimit);\n        return gasLimit;\n    }\n}\nvar _class;\nclass EthereumPrivateKeyProvider extends _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_5__.BaseProvider {\n    constructor(_ref){\n        let { config, state } = _ref;\n        super({\n            config: {\n                chainConfig: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, config.chainConfig), {}, {\n                    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155\n                })\n            },\n            state\n        });\n    }\n    async enable() {\n        if (!this.state.privateKey) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n            message: \"Private key is not found in state, plz pass it in constructor state param\",\n            code: 4902\n        });\n        await this.setupProvider(this.state.privateKey);\n        return this._providerEngineProxy.request({\n            method: \"eth_accounts\"\n        });\n    }\n    async setupProvider(privKey) {\n        const txFormatter = new TransactionFormatter({\n            getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n        });\n        const providerHandlers = getProviderHandlers({\n            txFormatter,\n            privKey,\n            getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n        });\n        const ethMiddleware = createEthMiddleware(providerHandlers);\n        const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n        const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.JRPCEngine();\n        // Not a partial anymore because of checks in ctor\n        const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig);\n        engine.push(ethMiddleware);\n        engine.push(chainSwitchMiddleware);\n        engine.push(this.getAccountMiddleware());\n        engine.push(networkMiddleware);\n        const provider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.providerFromEngine)(engine);\n        this.updateProviderEngineProxy(provider);\n        await txFormatter.init();\n        await this.lookupNetwork();\n    }\n    async updateAccount(params) {\n        if (!this._providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n            message: \"Provider is not initialized\",\n            code: 4902\n        });\n        const existingKey = await this._providerEngineProxy.request({\n            method: \"eth_private_key\"\n        });\n        if (existingKey !== params.privateKey) {\n            await this.setupProvider(params.privateKey);\n            this.emit(\"accountsChanged\", {\n                accounts: await this._providerEngineProxy.request({\n                    method: \"eth_accounts\"\n                })\n            });\n        }\n    }\n    async switchChain(params) {\n        if (!this._providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n            message: \"Provider is not initialized\",\n            code: 4902\n        });\n        const chainConfig = this.getChainConfig(params.chainId);\n        this.update({\n            chainId: \"loading\"\n        });\n        this.configure({\n            chainConfig\n        });\n        const privKey = await this._providerEngineProxy.request({\n            method: \"eth_private_key\"\n        });\n        await this.setupProvider(privKey);\n    }\n    async lookupNetwork() {\n        if (!this._providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n            message: \"Provider is not initialized\",\n            code: 4902\n        });\n        const { chainId } = this.config.chainConfig;\n        if (!chainId) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"chainId is required while lookupNetwork\");\n        const network = await this._providerEngineProxy.request({\n            method: \"net_version\",\n            params: []\n        });\n        if (parseInt(chainId, 16) !== parseInt(network, 10)) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.chainDisconnected(`Invalid network, net_version is: ${network}`);\n        if (this.state.chainId !== chainId) {\n            this.emit(\"chainChanged\", chainId);\n            this.emit(\"connect\", {\n                chainId\n            });\n        }\n        this.update({\n            chainId\n        });\n        return network;\n    }\n    getChainSwitchMiddleware() {\n        const chainSwitchHandlers = {\n            addChain: async (params)=>{\n                const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n                this.addChain({\n                    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155,\n                    chainId,\n                    ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n                    tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n                    displayName: chainName,\n                    rpcTarget: rpcUrls[0],\n                    blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n                    decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 18\n                });\n            },\n            switchChain: async (params)=>{\n                const { chainId } = params;\n                await this.switchChain({\n                    chainId\n                });\n            }\n        };\n        const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n        return chainSwitchMiddleware;\n    }\n    getAccountMiddleware() {\n        const accountHandlers = {\n            updatePrivatekey: async (params)=>{\n                const { privateKey } = params;\n                await this.updateAccount({\n                    privateKey\n                });\n            }\n        };\n        return createAccountMiddleware(accountHandlers);\n    }\n}\n_class = EthereumPrivateKeyProvider;\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(EthereumPrivateKeyProvider, \"getProviderInstance\", async (params)=>{\n    const providerFactory = new _class({\n        config: {\n            chainConfig: params.chainConfig\n        }\n    });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n});\n //# sourceMappingURL=ethereumProvider.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/dist/ethereumProvider.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/metamask-adapter/dist/metamaskAdapter.esm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@web3auth/metamask-adapter/dist/metamaskAdapter.esm.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MetamaskAdapter: () => (/* binding */ MetamaskAdapter)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @metamask/detect-provider */ \"(ssr)/./node_modules/@metamask/detect-provider/dist/index.js\");\n/* harmony import */ var _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_metamask_detect_provider__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _web3auth_base_evm_adapter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/base-evm-adapter */ \"(ssr)/./node_modules/@web3auth/base-evm-adapter/dist/baseEvmAdapter.esm.js\");\n\n\n\n\nclass MetamaskAdapter extends _web3auth_base_evm_adapter__WEBPACK_IMPORTED_MODULE_3__.BaseEvmAdapter {\n    constructor(){\n        super(...arguments);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"adapterNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_NAMESPACES.EIP155);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"currentChainNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.EIP155);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"type\", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_CATEGORY.EXTERNAL);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"name\", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.METAMASK);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"status\", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.NOT_READY);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"metamaskProvider\", null);\n    }\n    get provider() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.NOT_READY && this.metamaskProvider) {\n            return this.metamaskProvider;\n        }\n        return null;\n    }\n    set provider(_) {\n        throw new Error(\"Not implemented\");\n    }\n    async init() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        await super.init(options);\n        super.checkInitializationRequirements();\n        this.metamaskProvider = await _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_1___default()({\n            mustBeMetaMask: true,\n            silent: true,\n            timeout: 1000\n        });\n        if (!this.metamaskProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.READY;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.METAMASK);\n        try {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"initializing metamask adapter\");\n            if (options.autoConnect) {\n                this.rehydrated = true;\n                await this.connect();\n            }\n        } catch (error) {\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.ERRORED, error);\n        }\n    }\n    async connect() {\n        super.checkConnectionRequirements();\n        if (!this.metamaskProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n        const { ethereum } = window;\n        const isPhantom = Boolean(\"isPhantom\" in ethereum);\n        // check which is the active provider\n        if (ethereum && ethereum.isMetaMask && isPhantom) {\n            // this means phantom is the active provider.\n            if (ethereum.providers && ethereum.providers.length > 0) {\n                const provider = ethereum.providers.find((p)=>p.isMetaMask && !p.overrideIsMetaMask);\n                if (provider) {\n                    ethereum.setProvider(provider);\n                }\n            }\n        } else if (ethereum && (ethereum.providers || []).length > 0) {\n            // this means that there are another providers than metamask (like coinbase).\n            const provider = ethereum.providers.find((p)=>p.isMetaMask);\n            if (provider) {\n                ethereum.setSelectedProvider(provider);\n            }\n        }\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.CONNECTING;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.CONNECTING, {\n            adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.METAMASK\n        });\n        try {\n            await this.metamaskProvider.request({\n                method: \"eth_requestAccounts\"\n            });\n            const { chainId } = this.metamaskProvider;\n            if (chainId !== this.chainConfig.chainId) {\n                await this.addChain(this.chainConfig, true);\n                await this.switchChain(this.chainConfig, true);\n            }\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.CONNECTED;\n            if (!this.provider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n            const disconnectHandler = ()=>{\n                var _this$provider;\n                // ready to be connected again\n                this.disconnect();\n                (_this$provider = this.provider) === null || _this$provider === void 0 || _this$provider.removeListener(\"disconnect\", disconnectHandler);\n            };\n            this.provider.on(\"disconnect\", disconnectHandler);\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.CONNECTED, {\n                adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.METAMASK,\n                reconnected: this.rehydrated\n            });\n            return this.provider;\n        } catch (error) {\n            // ready again to be connected\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.READY;\n            this.rehydrated = false;\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.ERRORED, error);\n            if (error instanceof _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.Web3AuthError) throw error;\n            throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n        }\n    }\n    async disconnect() {\n        var _this$provider2;\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            cleanup: false\n        };\n        await super.disconnectSession();\n        (_this$provider2 = this.provider) === null || _this$provider2 === void 0 || _this$provider2.removeAllListeners();\n        if (options.cleanup) {\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.NOT_READY;\n            this.metamaskProvider = null;\n        } else {\n            // ready to be connected again\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.READY;\n        }\n        await super.disconnect();\n    }\n    async getUserInfo() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n        return {};\n    }\n    async addChain(chainConfig) {\n        var _this$metamaskProvide;\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkAddChainRequirements(chainConfig, init);\n        await ((_this$metamaskProvide = this.metamaskProvider) === null || _this$metamaskProvide === void 0 ? void 0 : _this$metamaskProvide.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n                {\n                    chainId: chainConfig.chainId,\n                    chainName: chainConfig.displayName,\n                    rpcUrls: [\n                        chainConfig.rpcTarget\n                    ],\n                    blockExplorerUrls: [\n                        chainConfig.blockExplorer\n                    ],\n                    nativeCurrency: {\n                        name: chainConfig.tickerName,\n                        symbol: chainConfig.ticker,\n                        decimals: chainConfig.decimals || 18\n                    }\n                }\n            ]\n        }));\n        this.addChainConfig(chainConfig);\n    }\n    async switchChain(params) {\n        var _this$metamaskProvide2;\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkSwitchChainRequirements(params, init);\n        await ((_this$metamaskProvide2 = this.metamaskProvider) === null || _this$metamaskProvide2 === void 0 ? void 0 : _this$metamaskProvide2.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [\n                {\n                    chainId: params.chainId\n                }\n            ]\n        }));\n        this.setAdapterSettings({\n            chainConfig: this.getChainConfig(params.chainId)\n        });\n    }\n}\n //# sourceMappingURL=metamaskAdapter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/metamask-adapter/dist/metamaskAdapter.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/modal/dist/modal.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@web3auth/modal/dist/modal.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Web3Auth: () => (/* binding */ Web3Auth),\n/* harmony export */   defaultEvmDappModalConfig: () => (/* binding */ defaultEvmDappModalConfig),\n/* harmony export */   defaultEvmWalletModalConfig: () => (/* binding */ defaultEvmWalletModalConfig),\n/* harmony export */   defaultOtherModalConfig: () => (/* binding */ defaultOtherModalConfig),\n/* harmony export */   defaultSolanaDappModalConfig: () => (/* binding */ defaultSolanaDappModalConfig),\n/* harmony export */   defaultSolanaWalletModalConfig: () => (/* binding */ defaultSolanaWalletModalConfig)\n/* harmony export */ });\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/base-provider */ \"(ssr)/./node_modules/@web3auth/base-provider/dist/baseProvider.esm.js\");\n/* harmony import */ var _web3auth_no_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @web3auth/no-modal */ \"(ssr)/./node_modules/@web3auth/no-modal/dist/noModal.esm.js\");\n/* harmony import */ var _web3auth_ui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @web3auth/ui */ \"(ssr)/./node_modules/@web3auth/ui/dist/index.js\");\n\n\n\n\n\n\nconst defaultSolanaDappModalConfig = {\n    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.SOLANA,\n    adapters: {\n        [_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ADAPTERS.TORUS_SOLANA]: {\n            label: \"Torus Wallet\",\n            showOnModal: true,\n            showOnMobile: true,\n            showOnDesktop: true\n        },\n        [_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ADAPTERS.OPENLOGIN]: {\n            label: \"OpenLogin\",\n            showOnModal: true,\n            showOnMobile: true,\n            showOnDesktop: true\n        },\n        [_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ADAPTERS.PHANTOM]: {\n            label: \"Phantom\",\n            showOnModal: true,\n            showOnMobile: true,\n            showOnDesktop: true\n        }\n    }\n};\nconst defaultEvmDappModalConfig = {\n    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155,\n    adapters: {\n        [_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.EVM_ADAPTERS.TORUS_EVM]: {\n            label: \"Torus Wallet\",\n            showOnModal: true,\n            showOnMobile: true,\n            showOnDesktop: true\n        },\n        [_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.EVM_ADAPTERS.METAMASK]: {\n            label: \"MetaMask\",\n            showOnModal: true,\n            showOnMobile: true,\n            showOnDesktop: true\n        },\n        [_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.EVM_ADAPTERS.OPENLOGIN]: {\n            label: \"OpenLogin\",\n            showOnModal: true,\n            showOnMobile: true,\n            showOnDesktop: true\n        },\n        [_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.EVM_ADAPTERS.WALLET_CONNECT_V2]: {\n            label: \"Wallet Connect\",\n            showOnModal: true,\n            showOnMobile: true,\n            showOnDesktop: true\n        }\n    }\n};\nconst defaultSolanaWalletModalConfig = {\n    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.SOLANA,\n    adapters: {\n        [_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ADAPTERS.OPENLOGIN]: {\n            label: \"OpenLogin\",\n            showOnModal: true,\n            showOnMobile: true,\n            showOnDesktop: true\n        }\n    }\n};\nconst defaultEvmWalletModalConfig = {\n    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155,\n    adapters: {\n        [_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.EVM_ADAPTERS.OPENLOGIN]: {\n            label: \"OpenLogin\",\n            showOnModal: true,\n            showOnMobile: true,\n            showOnDesktop: true\n        }\n    }\n};\nconst defaultOtherModalConfig = {\n    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.OTHER,\n    adapters: {\n        [_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.EVM_ADAPTERS.OPENLOGIN]: {\n            label: \"OpenLogin\",\n            showOnModal: true,\n            showOnMobile: true,\n            showOnDesktop: true\n        }\n    }\n};\nasync function getPrivateKeyProvider(chainConfig) {\n    if (chainConfig.chainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.SOLANA) {\n        const { SolanaPrivateKeyProvider } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@web3auth\"), __webpack_require__.e(\"vendor-chunks/@toruslabs\"), __webpack_require__.e(\"vendor-chunks/@babel\"), __webpack_require__.e(\"vendor-chunks/@solana\"), __webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/rpc-websockets\"), __webpack_require__.e(\"vendor-chunks/text-encoding-utf-8\"), __webpack_require__.e(\"vendor-chunks/jayson\"), __webpack_require__.e(\"vendor-chunks/borsh\"), __webpack_require__.e(\"vendor-chunks/bindings\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\"), __webpack_require__.e(\"vendor-chunks/base-x\"), __webpack_require__.e(\"vendor-chunks/bigint-buffer\"), __webpack_require__.e(\"vendor-chunks/safe-buffer\"), __webpack_require__.e(\"vendor-chunks/file-uri-to-path\"), __webpack_require__.e(\"vendor-chunks/bs58\")]).then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/solana-provider */ \"(ssr)/./node_modules/@web3auth/solana-provider/dist/solanaProvider.esm.js\"));\n        return new SolanaPrivateKeyProvider({\n            config: {\n                chainConfig\n            }\n        });\n    } else if (chainConfig.chainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155) {\n        const { EthereumPrivateKeyProvider } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@web3auth\"), __webpack_require__.e(\"vendor-chunks/@metamask\"), __webpack_require__.e(\"vendor-chunks/@noble\"), __webpack_require__.e(\"vendor-chunks/ethereum-cryptography\"), __webpack_require__.e(\"vendor-chunks/@walletconnect\"), __webpack_require__.e(\"vendor-chunks/@stablelib\"), __webpack_require__.e(\"vendor-chunks/tweetnacl\"), __webpack_require__.e(\"vendor-chunks/@ethereumjs\"), __webpack_require__.e(\"vendor-chunks/jsonschema\"), __webpack_require__.e(\"vendor-chunks/crc\"), __webpack_require__.e(\"vendor-chunks/multiformats\"), __webpack_require__.e(\"vendor-chunks/detect-browser\"), __webpack_require__.e(\"vendor-chunks/micro-ftch\"), __webpack_require__.e(\"vendor-chunks/uint8arrays\"), __webpack_require__.e(\"vendor-chunks/decode-uri-component\"), __webpack_require__.e(\"vendor-chunks/tweetnacl-util\"), __webpack_require__.e(\"vendor-chunks/split-on-first\"), __webpack_require__.e(\"vendor-chunks/filter-obj\")]).then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/ethereum-provider */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/dist/ethereumProvider.esm.js\"));\n        return new EthereumPrivateKeyProvider({\n            config: {\n                chainConfig\n            }\n        });\n    } else if (chainConfig.chainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.OTHER) {\n        // Modal doesn't support ripple provider\n        // Can always override this with a custom provider\n        return new _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_3__.CommonPrivateKeyProvider({\n            config: {\n                chainConfig\n            }\n        });\n    }\n    throw new Error(`Invalid chainNamespace: ${chainConfig.chainNamespace} found while connecting to wallet`);\n}\n// warning: this function is not compatible with \"OTHER\" chain namespace.\nconst getDefaultAdapterModule = async (params)=>{\n    const { name, customChainConfig, clientId, sessionTime, web3AuthNetwork, uiConfig } = params;\n    if (!Object.values(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace)) throw new Error(`Invalid chainNamespace: ${customChainConfig.chainNamespace}`);\n    const finalChainConfig = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.getChainConfig)(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId)), customChainConfig || {});\n    if (name === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.TORUS_EVM) {\n        const { TorusWalletAdapter } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@web3auth\"), __webpack_require__.e(\"vendor-chunks/@toruslabs\"), __webpack_require__.e(\"vendor-chunks/@babel\"), __webpack_require__.e(\"vendor-chunks/fast-deep-equal\")]).then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/torus-evm-adapter */ \"(ssr)/./node_modules/@web3auth/torus-evm-adapter/dist/torusEvmAdapter.esm.js\"));\n        const adapter = new TorusWalletAdapter({\n            chainConfig: finalChainConfig,\n            clientId,\n            sessionTime,\n            web3AuthNetwork\n        });\n        return adapter;\n    } else if (name === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.TORUS_SOLANA) {\n        const { SolanaWalletAdapter } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@web3auth\"), __webpack_require__.e(\"vendor-chunks/@toruslabs\"), __webpack_require__.e(\"vendor-chunks/@babel\"), __webpack_require__.e(\"vendor-chunks/@solana\"), __webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/rpc-websockets\"), __webpack_require__.e(\"vendor-chunks/text-encoding-utf-8\"), __webpack_require__.e(\"vendor-chunks/jayson\"), __webpack_require__.e(\"vendor-chunks/borsh\"), __webpack_require__.e(\"vendor-chunks/bindings\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\"), __webpack_require__.e(\"vendor-chunks/base-x\"), __webpack_require__.e(\"vendor-chunks/bigint-buffer\"), __webpack_require__.e(\"vendor-chunks/safe-buffer\"), __webpack_require__.e(\"vendor-chunks/file-uri-to-path\"), __webpack_require__.e(\"vendor-chunks/bs58\"), __webpack_require__.e(\"vendor-chunks/fast-deep-equal\"), __webpack_require__.e(\"vendor-chunks/eth-rpc-errors\")]).then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/torus-solana-adapter */ \"(ssr)/./node_modules/@web3auth/torus-solana-adapter/dist/torusSolanaAdapter.esm.js\"));\n        const adapter = new SolanaWalletAdapter({\n            chainConfig: finalChainConfig,\n            clientId,\n            sessionTime,\n            web3AuthNetwork\n        });\n        return adapter;\n    } else if (name === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.METAMASK) {\n        const { MetamaskAdapter } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@web3auth\"), __webpack_require__.e(\"vendor-chunks/@metamask\")]).then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/metamask-adapter */ \"(ssr)/./node_modules/@web3auth/metamask-adapter/dist/metamaskAdapter.esm.js\"));\n        const adapter = new MetamaskAdapter({\n            chainConfig: finalChainConfig,\n            clientId,\n            sessionTime,\n            web3AuthNetwork\n        });\n        return adapter;\n    } else if (name === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.PHANTOM) {\n        const { PhantomAdapter } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@web3auth\"), __webpack_require__.e(\"vendor-chunks/@toruslabs\"), __webpack_require__.e(\"vendor-chunks/@babel\"), __webpack_require__.e(\"vendor-chunks/@solana\"), __webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/rpc-websockets\"), __webpack_require__.e(\"vendor-chunks/text-encoding-utf-8\"), __webpack_require__.e(\"vendor-chunks/jayson\"), __webpack_require__.e(\"vendor-chunks/borsh\"), __webpack_require__.e(\"vendor-chunks/bindings\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\"), __webpack_require__.e(\"vendor-chunks/base-x\"), __webpack_require__.e(\"vendor-chunks/bigint-buffer\"), __webpack_require__.e(\"vendor-chunks/safe-buffer\"), __webpack_require__.e(\"vendor-chunks/file-uri-to-path\"), __webpack_require__.e(\"vendor-chunks/bs58\")]).then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/phantom-adapter */ \"(ssr)/./node_modules/@web3auth/phantom-adapter/dist/phantomAdapter.esm.js\"));\n        const adapter = new PhantomAdapter({\n            chainConfig: finalChainConfig,\n            clientId,\n            sessionTime,\n            web3AuthNetwork\n        });\n        return adapter;\n    } else if (name === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.WALLET_CONNECT_V2) {\n        const { WalletConnectV2Adapter } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@web3auth\"), __webpack_require__.e(\"vendor-chunks/@metamask\"), __webpack_require__.e(\"vendor-chunks/@noble\"), __webpack_require__.e(\"vendor-chunks/ethereum-cryptography\"), __webpack_require__.e(\"vendor-chunks/@walletconnect\"), __webpack_require__.e(\"vendor-chunks/@stablelib\"), __webpack_require__.e(\"vendor-chunks/tweetnacl\"), __webpack_require__.e(\"vendor-chunks/@ethereumjs\"), __webpack_require__.e(\"vendor-chunks/jsonschema\"), __webpack_require__.e(\"vendor-chunks/crc\"), __webpack_require__.e(\"vendor-chunks/multiformats\"), __webpack_require__.e(\"vendor-chunks/detect-browser\"), __webpack_require__.e(\"vendor-chunks/micro-ftch\"), __webpack_require__.e(\"vendor-chunks/uint8arrays\"), __webpack_require__.e(\"vendor-chunks/decode-uri-component\"), __webpack_require__.e(\"vendor-chunks/tweetnacl-util\"), __webpack_require__.e(\"vendor-chunks/split-on-first\"), __webpack_require__.e(\"vendor-chunks/filter-obj\"), __webpack_require__.e(\"vendor-chunks/pino\"), __webpack_require__.e(\"vendor-chunks/fast-redact\"), __webpack_require__.e(\"vendor-chunks/pino-std-serializers\"), __webpack_require__.e(\"vendor-chunks/thread-stream\"), __webpack_require__.e(\"vendor-chunks/unstorage\"), __webpack_require__.e(\"vendor-chunks/idb-keyval\"), __webpack_require__.e(\"vendor-chunks/destr\"), __webpack_require__.e(\"vendor-chunks/sonic-boom\"), __webpack_require__.e(\"vendor-chunks/safe-stable-stringify\"), __webpack_require__.e(\"vendor-chunks/quick-format-unescaped\"), __webpack_require__.e(\"vendor-chunks/process-warning\"), __webpack_require__.e(\"vendor-chunks/on-exit-leak-free\"), __webpack_require__.e(\"vendor-chunks/atomic-sleep\")]).then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/wallet-connect-v2-adapter */ \"(ssr)/./node_modules/@web3auth/wallet-connect-v2-adapter/dist/walletConnectV2Adapter.esm.js\"));\n        const adapter = new WalletConnectV2Adapter({\n            chainConfig: finalChainConfig,\n            clientId,\n            sessionTime,\n            web3AuthNetwork,\n            adapterSettings: {\n                walletConnectInitOptions: {\n                    // Using a default wallet connect project id for web3auth modal integration\n                    projectId: \"d3c63f19f9582f8ba48e982057eb096b\"\n                }\n            }\n        });\n        return adapter;\n    } else if (name === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.OPENLOGIN) {\n        const { OpenloginAdapter, getOpenloginDefaultOptions } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@web3auth\"), __webpack_require__.e(\"vendor-chunks/@toruslabs\")]).then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/openlogin-adapter */ \"(ssr)/./node_modules/@web3auth/openlogin-adapter/dist/openloginAdapter.esm.js\"));\n        const privateKeyProvider = await getPrivateKeyProvider(finalChainConfig);\n        const defaultOptions = getOpenloginDefaultOptions();\n        const adapter = new OpenloginAdapter(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, defaultOptions), {}, {\n            clientId,\n            chainConfig: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, finalChainConfig),\n            adapterSettings: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, defaultOptions.adapterSettings), {}, {\n                clientId,\n                network: web3AuthNetwork,\n                whiteLabel: uiConfig\n            }),\n            sessionTime,\n            web3AuthNetwork,\n            privateKeyProvider\n        }));\n        return adapter;\n    }\n    throw new Error(\"Invalid wallet adapter name\");\n};\nclass Web3Auth extends _web3auth_no_modal__WEBPACK_IMPORTED_MODULE_4__.Web3AuthNoModal {\n    constructor(options){\n        super(options);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"loginModal\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"options\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"modalConfig\", defaultEvmDappModalConfig);\n        this.options = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, options);\n        const providedChainConfig = this.options.chainConfig;\n        if (providedChainConfig.chainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.SOLANA) {\n            if (options.authMode === \"WALLET\") {\n                // default config for solana wallet modal\n                this.modalConfig = defaultSolanaWalletModalConfig;\n            } else {\n                // default config for solana dapp modal\n                this.modalConfig = defaultSolanaDappModalConfig;\n            }\n        } else if (providedChainConfig.chainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155) {\n            if (options.authMode === \"WALLET\") {\n                // default config for evm wallet modal\n                this.modalConfig = defaultEvmWalletModalConfig;\n            } else {\n                // default config for evm dapp modal\n                this.modalConfig = defaultEvmDappModalConfig;\n            }\n        } else if (providedChainConfig.chainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.OTHER) {\n            this.modalConfig = defaultOtherModalConfig;\n        } else {\n            throw new Error(`Invalid chainNamespace provided: ${providedChainConfig.chainNamespace}`);\n        }\n        if (!this.options.uiConfig) this.options.uiConfig = {};\n        if (!this.options.uiConfig.defaultLanguage) this.options.uiConfig.defaultLanguage = (0,_web3auth_ui__WEBPACK_IMPORTED_MODULE_5__.getUserLanguage)(this.options.uiConfig.defaultLanguage);\n        if (!this.options.uiConfig.mode) this.options.uiConfig.mode = \"auto\";\n        this.loginModal = new _web3auth_ui__WEBPACK_IMPORTED_MODULE_5__.LoginModal(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, this.options.uiConfig), {}, {\n            adapterListener: this\n        }));\n        this.subscribeToLoginModalEvents();\n    }\n    async initModal(params) {\n        super.checkInitRequirements();\n        await this.loginModal.initModal();\n        const providedChainConfig = this.options.chainConfig;\n        // merge default adapters with the custom configured adapters.\n        const allAdapters = [\n            ...new Set([\n                ...Object.keys(this.modalConfig.adapters || {}),\n                ...Object.keys(this.walletAdapters)\n            ])\n        ];\n        const adapterConfigurationPromises = allAdapters.map(async (adapterName)=>{\n            var _this$modalConfig$ada, _params$modalConfig, _this$modalConfig$ada2, _this$modalConfig$ada3;\n            // start with the default config of adapter.\n            let adapterConfig = ((_this$modalConfig$ada = this.modalConfig.adapters) === null || _this$modalConfig$ada === void 0 ? void 0 : _this$modalConfig$ada[adapterName]) || {\n                label: adapterName,\n                showOnModal: true,\n                showOnMobile: true,\n                showOnDesktop: true\n            };\n            // override the default config of adapter if some config is being provided by the user.\n            if (params !== null && params !== void 0 && (_params$modalConfig = params.modalConfig) !== null && _params$modalConfig !== void 0 && _params$modalConfig[adapterName]) {\n                adapterConfig = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, adapterConfig), params.modalConfig[adapterName]);\n            }\n            this.modalConfig.adapters[adapterName] = adapterConfig;\n            // check if adapter is configured/added by user and exist in walletAdapters map.\n            const adapter = this.walletAdapters[adapterName];\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.debug(\"adapter config\", adapterName, (_this$modalConfig$ada2 = this.modalConfig.adapters) === null || _this$modalConfig$ada2 === void 0 ? void 0 : _this$modalConfig$ada2[adapterName].showOnModal, adapter);\n            // if adapter is not custom configured then check if it is available in default adapters.\n            // and if adapter is not hidden by user\n            if (!adapter && (_this$modalConfig$ada3 = this.modalConfig.adapters) !== null && _this$modalConfig$ada3 !== void 0 && _this$modalConfig$ada3[adapterName].showOnModal) {\n                // if adapter is not configured and some default configuration is available, use it.\n                const ad = await getDefaultAdapterModule({\n                    name: adapterName,\n                    customChainConfig: this.options.chainConfig,\n                    clientId: this.options.clientId,\n                    sessionTime: this.options.sessionTime,\n                    web3AuthNetwork: this.options.web3AuthNetwork,\n                    uiConfig: this.options.uiConfig\n                });\n                this.walletAdapters[adapterName] = ad;\n                return adapterName;\n            } else if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_CATEGORY.IN_APP || (adapter === null || adapter === void 0 ? void 0 : adapter.type) === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {\n                var _this$modalConfig$ada4;\n                if (!((_this$modalConfig$ada4 = this.modalConfig.adapters) !== null && _this$modalConfig$ada4 !== void 0 && _this$modalConfig$ada4[adapterName].showOnModal)) return;\n                // add client id to adapter, same web3auth client id can be used in adapter.\n                // this id is being overridden if user is also passing client id in adapter's constructor.\n                this.walletAdapters[adapterName].setAdapterSettings({\n                    clientId: this.options.clientId,\n                    sessionTime: this.options.sessionTime,\n                    web3AuthNetwork: this.options.web3AuthNetwork\n                });\n                // if adapter doesn't have any chainConfig then we will set the chainConfig based of passed chainNamespace\n                // and chainNamespace.\n                if (!adapter.chainConfigProxy) {\n                    var _this$coreOptions$cha;\n                    const chainConfig = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.getChainConfig)(providedChainConfig.chainNamespace, (_this$coreOptions$cha = this.coreOptions.chainConfig) === null || _this$coreOptions$cha === void 0 ? void 0 : _this$coreOptions$cha.chainId)), this.coreOptions.chainConfig);\n                    this.walletAdapters[adapterName].setAdapterSettings({\n                        chainConfig\n                    });\n                }\n                if (adapterName === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.OPENLOGIN) {\n                    const openloginAdapter = this.walletAdapters[adapterName];\n                    if (!openloginAdapter.privateKeyProvider) {\n                        const currentPrivateKeyProvider = await getPrivateKeyProvider(openloginAdapter.chainConfigProxy);\n                        openloginAdapter.setAdapterSettings({\n                            privateKeyProvider: currentPrivateKeyProvider,\n                            whiteLabel: this.options.uiConfig\n                        });\n                    }\n                }\n                return adapterName;\n            }\n        });\n        const adapterNames = await Promise.all(adapterConfigurationPromises);\n        const hasInAppWallets = Object.values(this.walletAdapters).some((adapter)=>{\n            var _this$modalConfig$ada5, _this$modalConfig$ada6, _adapter$name;\n            if (adapter.type !== _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_CATEGORY.IN_APP) return false;\n            if (((_this$modalConfig$ada5 = this.modalConfig.adapters) === null || _this$modalConfig$ada5 === void 0 || (_this$modalConfig$ada5 = _this$modalConfig$ada5[adapter.name]) === null || _this$modalConfig$ada5 === void 0 ? void 0 : _this$modalConfig$ada5.showOnModal) !== true) return false;\n            if (!((_this$modalConfig$ada6 = this.modalConfig.adapters) !== null && _this$modalConfig$ada6 !== void 0 && (_this$modalConfig$ada6 = _this$modalConfig$ada6[adapter.name]) !== null && _this$modalConfig$ada6 !== void 0 && _this$modalConfig$ada6.loginMethods)) return true;\n            const mergedLoginMethods = (0,_web3auth_ui__WEBPACK_IMPORTED_MODULE_5__.getAdapterSocialLogins)(adapter.name, (_adapter$name = this.modalConfig.adapters[adapter.name]) === null || _adapter$name === void 0 ? void 0 : _adapter$name.loginMethods);\n            if (Object.values(mergedLoginMethods).some((method)=>method.showOnModal)) return true;\n            return false;\n        });\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.debug(hasInAppWallets, this.walletAdapters, adapterNames, \"hasInAppWallets\");\n        // Now, initialize the adapters.\n        const initPromises = adapterNames.map(async (adapterName)=>{\n            if (!adapterName) return;\n            try {\n                const adapter = this.walletAdapters[adapterName];\n                // only initialize a external adapter here if it is a cached adapter.\n                if (this.cachedAdapter !== adapterName && adapter.type === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_CATEGORY.EXTERNAL) {\n                    return;\n                }\n                // in-app wallets or cached wallet (being connected or already connected) are initialized first.\n                // if adapter is configured thn only initialize in app or cached adapter.\n                // external wallets are initialized on INIT_EXTERNAL_WALLET event.\n                this.subscribeToAdapterEvents(adapter);\n                if (adapter.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.NOT_READY) await adapter.init({\n                    autoConnect: this.cachedAdapter === adapterName\n                });\n                // note: not adding cachedWallet to modal if it is external wallet.\n                // adding it later if no in-app wallets are available.\n                if (adapter.type === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_CATEGORY.IN_APP) {\n                    this.initializeInAppWallet(adapterName);\n                }\n            } catch (error) {\n                _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.error(error, \"error while initializing adapter\");\n            }\n        });\n        this.commonJRPCProvider = await _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_3__.CommonJRPCProvider.getProviderInstance({\n            chainConfig: this.coreOptions.chainConfig\n        });\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.READY;\n        await Promise.all(initPromises);\n        const hasExternalWallets = allAdapters.some((adapterName)=>{\n            var _this$walletAdapters$, _this$modalConfig$ada7;\n            return ((_this$walletAdapters$ = this.walletAdapters[adapterName]) === null || _this$walletAdapters$ === void 0 ? void 0 : _this$walletAdapters$.type) === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_CATEGORY.EXTERNAL && ((_this$modalConfig$ada7 = this.modalConfig.adapters) === null || _this$modalConfig$ada7 === void 0 ? void 0 : _this$modalConfig$ada7[adapterName].showOnModal);\n        });\n        if (hasExternalWallets) {\n            this.loginModal.initExternalWalletContainer();\n        }\n        // variable to check if we have any in app wallets\n        // currently all default in app and external wallets can be hidden or shown based on config.\n        if (!hasInAppWallets && hasExternalWallets) {\n            // if no in app wallet is available then initialize external wallets in modal\n            await this.initExternalWalletAdapters(false, {\n                showExternalWalletsOnly: true\n            });\n        }\n    }\n    async connect() {\n        // if (!this.loginModal.initialized) throw new Error(\"Login modal is not initialized\");\n        // if already connected return provider\n        if (this.connectedAdapterName && this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.CONNECTED && this.provider) return this.provider;\n        this.loginModal.open();\n        return new Promise((resolve, reject)=>{\n            this.once(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.CONNECTED, ()=>{\n                return resolve(this.provider);\n            });\n            this.once(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.ERRORED, (err)=>{\n                return reject(err);\n            });\n        });\n    }\n    async initExternalWalletAdapters(externalWalletsInitialized, options) {\n        if (externalWalletsInitialized) return;\n        const adaptersConfig = {};\n        Object.keys(this.walletAdapters).forEach(async (adapterName)=>{\n            const adapter = this.walletAdapters[adapterName];\n            if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_CATEGORY.EXTERNAL) {\n                _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.debug(\"init external wallet\", this.cachedAdapter, adapterName);\n                this.subscribeToAdapterEvents(adapter);\n                // we are not initializing cached adapter here as it is already being initialized in initModal before.\n                if (this.cachedAdapter === adapterName) {\n                    return;\n                }\n                if (adapter.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.NOT_READY) {\n                    await adapter.init({\n                        autoConnect: this.cachedAdapter === adapterName\n                    }).then(()=>{\n                        adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];\n                        this.loginModal.addWalletLogins(adaptersConfig, {\n                            showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)\n                        });\n                        return undefined;\n                    }).catch((error)=>_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.error(error, \"error while initializing adapter\"));\n                } else if (adapter.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.READY) {\n                    adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];\n                    this.loginModal.addWalletLogins(adaptersConfig, {\n                        showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)\n                    });\n                }\n            }\n        });\n    }\n    initializeInAppWallet(adapterName) {\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.info(\"adapterInitResults\", adapterName);\n        if (this.walletAdapters[adapterName].type === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_CATEGORY.IN_APP) {\n            var _adapterName, _this$options$uiConfi, _this$options$uiConfi2, _this$options$uiConfi3;\n            this.loginModal.addSocialLogins(adapterName, (0,_web3auth_ui__WEBPACK_IMPORTED_MODULE_5__.getAdapterSocialLogins)(adapterName, (_adapterName = this.modalConfig.adapters[adapterName]) === null || _adapterName === void 0 ? void 0 : _adapterName.loginMethods), ((_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.loginMethodsOrder) || _web3auth_ui__WEBPACK_IMPORTED_MODULE_5__.OPENLOGIN_PROVIDERS, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, this.options.uiConfig), {}, {\n                loginGridCol: ((_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.loginGridCol) || 3,\n                primaryButton: ((_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.primaryButton) || \"socialLogin\"\n            }));\n        }\n    }\n    subscribeToLoginModalEvents() {\n        this.loginModal.on(_web3auth_ui__WEBPACK_IMPORTED_MODULE_5__.LOGIN_MODAL_EVENTS.LOGIN, async (params)=>{\n            try {\n                await this.connectTo(params.adapter, params.loginParams);\n            } catch (error) {\n                _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.error(`Error while connecting to adapter: ${params.adapter}`, error);\n            }\n        });\n        this.loginModal.on(_web3auth_ui__WEBPACK_IMPORTED_MODULE_5__.LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async (params)=>{\n            await this.initExternalWalletAdapters(params.externalWalletsInitialized);\n        });\n        this.loginModal.on(_web3auth_ui__WEBPACK_IMPORTED_MODULE_5__.LOGIN_MODAL_EVENTS.DISCONNECT, async ()=>{\n            try {\n                await this.logout();\n            } catch (error) {\n                _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.error(`Error while disconnecting`, error);\n            }\n        });\n        this.loginModal.on(_web3auth_ui__WEBPACK_IMPORTED_MODULE_5__.LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async (visibility)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.debug(\"is login modal visible\", visibility);\n            this.emit(_web3auth_ui__WEBPACK_IMPORTED_MODULE_5__.LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);\n            const adapter = this.walletAdapters[_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.WALLET_CONNECT_V2];\n            if (adapter) {\n                const walletConnectStatus = adapter === null || adapter === void 0 ? void 0 : adapter.status;\n                _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.debug(\"trying refreshing wc session\", visibility, walletConnectStatus);\n                if (visibility && (walletConnectStatus === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.READY || walletConnectStatus === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.CONNECTING)) {\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.debug(\"refreshing wc session\");\n                    // refreshing session for wallet connect whenever modal is opened.\n                    try {\n                        adapter.connect();\n                    } catch (error) {\n                        _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.error(`Error while disconnecting to wallet connect in core`, error);\n                    }\n                }\n            }\n        });\n    }\n}\n //# sourceMappingURL=modal.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/modal/dist/modal.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/no-modal/dist/noModal.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@web3auth/no-modal/dist/noModal.esm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Web3AuthNoModal: () => (/* binding */ Web3AuthNoModal)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _web3auth_base_plugin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @web3auth/base-plugin */ \"(ssr)/./node_modules/@web3auth/base-plugin/dist/basePlugin.esm.js\");\n/* harmony import */ var _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @web3auth/base-provider */ \"(ssr)/./node_modules/@web3auth/base-provider/dist/baseProvider.esm.js\");\n\n\n\n\n\n\nconst ADAPTER_CACHE_KEY = \"Web3Auth-cachedAdapter\";\nclass Web3AuthNoModal extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter {\n    constructor(options){\n        var _options$chainConfig, _options$chainConfig2, _options$chainConfig3, _options$chainConfig4;\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"coreOptions\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"connectedAdapterName\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"status\", _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.NOT_READY);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"cachedAdapter\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"walletAdapters\", {});\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"commonJRPCProvider\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"plugins\", {});\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"storage\", \"localStorage\");\n        if (!options.clientId) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.invalidParams(\"Please provide a valid clientId in constructor\");\n        if (options.enableLogging) _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.enableAll();\n        else _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.setLevel(\"error\");\n        if (!((_options$chainConfig = options.chainConfig) !== null && _options$chainConfig !== void 0 && _options$chainConfig.chainNamespace) || !Object.values(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.CHAIN_NAMESPACES).includes((_options$chainConfig2 = options.chainConfig) === null || _options$chainConfig2 === void 0 ? void 0 : _options$chainConfig2.chainNamespace)) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.invalidParams(\"Please provide a valid chainNamespace in chainConfig\");\n        if (options.storageKey === \"session\") this.storage = \"sessionStorage\";\n        this.cachedAdapter = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.storageAvailable)(this.storage) ? window[this.storage].getItem(ADAPTER_CACHE_KEY) : null;\n        this.coreOptions = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, options), {}, {\n            chainConfig: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.getChainConfig)((_options$chainConfig3 = options.chainConfig) === null || _options$chainConfig3 === void 0 ? void 0 : _options$chainConfig3.chainNamespace, (_options$chainConfig4 = options.chainConfig) === null || _options$chainConfig4 === void 0 ? void 0 : _options$chainConfig4.chainId) || {}), options.chainConfig)\n        });\n        this.subscribeToAdapterEvents = this.subscribeToAdapterEvents.bind(this);\n    }\n    get connected() {\n        return Boolean(this.connectedAdapterName);\n    }\n    get provider() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.NOT_READY && this.commonJRPCProvider) {\n            return this.commonJRPCProvider;\n        }\n        return null;\n    }\n    set provider(_) {\n        throw new Error(\"Not implemented\");\n    }\n    async init() {\n        this.commonJRPCProvider = await _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_5__.CommonJRPCProvider.getProviderInstance({\n            chainConfig: this.coreOptions.chainConfig\n        });\n        const initPromises = Object.keys(this.walletAdapters).map((adapterName)=>{\n            this.subscribeToAdapterEvents(this.walletAdapters[adapterName]);\n            // if adapter doesn't have any chain config yet thn set it based on provided namespace and chainId.\n            // if no chainNamespace or chainId is being provided, it will connect with mainnet.\n            if (!this.walletAdapters[adapterName].chainConfigProxy) {\n                const providedChainConfig = this.coreOptions.chainConfig;\n                if (!providedChainConfig.chainNamespace) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.invalidParams(\"Please provide chainNamespace in chainConfig\");\n                this.walletAdapters[adapterName].setAdapterSettings({\n                    chainConfig: providedChainConfig,\n                    sessionTime: this.coreOptions.sessionTime,\n                    clientId: this.coreOptions.clientId,\n                    web3AuthNetwork: this.coreOptions.web3AuthNetwork,\n                    useCoreKitKey: this.coreOptions.useCoreKitKey\n                });\n            } else {\n                this.walletAdapters[adapterName].setAdapterSettings({\n                    sessionTime: this.coreOptions.sessionTime,\n                    clientId: this.coreOptions.clientId,\n                    web3AuthNetwork: this.coreOptions.web3AuthNetwork,\n                    useCoreKitKey: this.coreOptions.useCoreKitKey\n                });\n            }\n            return this.walletAdapters[adapterName].init({\n                autoConnect: this.cachedAdapter === adapterName\n            }).catch((e)=>_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(e));\n        });\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.READY;\n        await Promise.all(initPromises);\n    }\n    configureAdapter(adapter) {\n        this.checkInitRequirements();\n        const providedChainConfig = this.coreOptions.chainConfig;\n        if (!providedChainConfig.chainNamespace) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.invalidParams(\"Please provide chainNamespace in chainConfig\");\n        const adapterAlreadyExists = this.walletAdapters[adapter.name];\n        if (adapterAlreadyExists) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.duplicateAdapterError(`Wallet adapter for ${adapter.name} already exists`);\n        if (adapter.adapterNamespace !== _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_NAMESPACES.MULTICHAIN && adapter.adapterNamespace !== providedChainConfig.chainNamespace) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.incompatibleChainNameSpace(`This wallet adapter belongs to ${adapter.adapterNamespace} which is incompatible with currently used namespace: ${providedChainConfig.chainNamespace}`);\n        if (adapter.adapterNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_NAMESPACES.MULTICHAIN && adapter.currentChainNamespace && providedChainConfig.chainNamespace !== adapter.currentChainNamespace) {\n            // chainConfig checks are already validated in constructor so using typecast is safe here.\n            adapter.setAdapterSettings({\n                chainConfig: providedChainConfig\n            });\n        }\n        this.walletAdapters[adapter.name] = adapter;\n        return this;\n    }\n    clearCache() {\n        if (!(0,_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.storageAvailable)(this.storage)) return;\n        window[this.storage].removeItem(ADAPTER_CACHE_KEY);\n        this.cachedAdapter = null;\n    }\n    async addChain(chainConfig) {\n        if (this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED && this.connectedAdapterName) return this.walletAdapters[this.connectedAdapterName].addChain(chainConfig);\n        if (this.commonJRPCProvider) {\n            return this.commonJRPCProvider.addChain(chainConfig);\n        }\n        throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(`No wallet is ready`);\n    }\n    async switchChain(params) {\n        if (this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED && this.connectedAdapterName) return this.walletAdapters[this.connectedAdapterName].switchChain(params);\n        if (this.commonJRPCProvider) {\n            return this.commonJRPCProvider.switchChain(params);\n        }\n        throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(`No wallet is ready`);\n    }\n    /**\n   * Connect to a specific wallet adapter\n   * @param walletName - Key of the walletAdapter to use.\n   */ async connectTo(walletName, loginParams) {\n        if (!this.walletAdapters[walletName] || !this.commonJRPCProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notFound(`Please add wallet adapter for ${walletName} wallet, before connecting`);\n        const provider = await this.walletAdapters[walletName].connect(loginParams);\n        this.commonJRPCProvider.updateProviderEngineProxy(provider.provider || provider);\n        return this.provider;\n    }\n    async logout() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            cleanup: false\n        };\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED || !this.connectedAdapterName) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletLoginError.notConnectedError(`No wallet is connected`);\n        await this.walletAdapters[this.connectedAdapterName].disconnect(options);\n    }\n    async getUserInfo() {\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"Getting user info\", this.status, this.connectedAdapterName);\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED || !this.connectedAdapterName) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletLoginError.notConnectedError(`No wallet is connected`);\n        return this.walletAdapters[this.connectedAdapterName].getUserInfo();\n    }\n    async authenticateUser() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED || !this.connectedAdapterName) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletLoginError.notConnectedError(`No wallet is connected`);\n        return this.walletAdapters[this.connectedAdapterName].authenticateUser();\n    }\n    async addPlugin(plugin) {\n        if (this.plugins[plugin.name]) throw new Error(`Plugin ${plugin.name} already exist`);\n        if (plugin.pluginNamespace !== _web3auth_base_plugin__WEBPACK_IMPORTED_MODULE_4__.PLUGIN_NAMESPACES.MULTICHAIN && plugin.pluginNamespace !== this.coreOptions.chainConfig.chainNamespace) throw new Error(`This plugin belongs to ${plugin.pluginNamespace} namespace which is incompatible with currently used namespace: ${this.coreOptions.chainConfig.chainNamespace}`);\n        this.plugins[plugin.name] = plugin;\n        return this;\n    }\n    subscribeToAdapterEvents(walletAdapter) {\n        walletAdapter.on(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.CONNECTED, async (data)=>{\n            if (!this.commonJRPCProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notFound(`CommonJrpcProvider not found`);\n            const { provider } = this.walletAdapters[data.adapter];\n            this.commonJRPCProvider.updateProviderEngineProxy(provider.provider || provider);\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED;\n            this.connectedAdapterName = data.adapter;\n            this.cacheWallet(data.adapter);\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"connected\", this.status, this.connectedAdapterName);\n            Object.values(this.plugins).map(async (plugin)=>{\n                try {\n                    if (!plugin.SUPPORTED_ADAPTERS.includes(data.adapter)) {\n                        return;\n                    }\n                    await plugin.initWithWeb3Auth(this);\n                    await plugin.connect();\n                } catch (error) {\n                    // swallow error if connector adapter doesn't supports this plugin.\n                    if (error.code === 5211) {\n                        return;\n                    }\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(error);\n                }\n            });\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.CONNECTED, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, data));\n        });\n        walletAdapter.on(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.DISCONNECTED, async (data)=>{\n            // get back to ready state for rehydrating.\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.READY;\n            if ((0,_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.storageAvailable)(this.storage)) {\n                const cachedAdapter = window[this.storage].getItem(ADAPTER_CACHE_KEY);\n                if (this.connectedAdapterName === cachedAdapter) {\n                    this.clearCache();\n                }\n            }\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"disconnected\", this.status, this.connectedAdapterName);\n            await Promise.all(Object.values(this.plugins).map((plugin)=>{\n                return plugin.disconnect().catch((error)=>{\n                    // swallow error if adapter doesn't supports this plugin.\n                    if (error.code === 5211) {\n                        return;\n                    }\n                    // throw error;\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(error);\n                });\n            }));\n            this.connectedAdapterName = null;\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.DISCONNECTED, data);\n        });\n        walletAdapter.on(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.CONNECTING, (data)=>{\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTING;\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.CONNECTING, data);\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"connecting\", this.status, this.connectedAdapterName);\n        });\n        walletAdapter.on(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.ERRORED, (data)=>{\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.ERRORED;\n            this.clearCache();\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.ERRORED, data);\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"errored\", this.status, this.connectedAdapterName);\n        });\n        walletAdapter.on(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, (data)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"adapter data updated\", data);\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, data);\n        });\n        walletAdapter.on(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.CACHE_CLEAR, (data)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"adapter cache clear\", data);\n            if ((0,_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.storageAvailable)(this.storage)) {\n                this.clearCache();\n            }\n        });\n    }\n    checkInitRequirements() {\n        if (this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTING) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(\"Already pending connection\");\n        if (this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(\"Already connected\");\n        if (this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.READY) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(\"Adapter is already initialized\");\n    }\n    cacheWallet(walletName) {\n        if (!(0,_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.storageAvailable)(this.storage)) return;\n        window[this.storage].setItem(ADAPTER_CACHE_KEY, walletName);\n        this.cachedAdapter = walletName;\n    }\n}\n //# sourceMappingURL=noModal.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/no-modal/dist/noModal.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/openlogin-adapter/dist/openloginAdapter.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@web3auth/openlogin-adapter/dist/openloginAdapter.esm.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUILD_ENV: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.BUILD_ENV),\n/* harmony export */   BrowserStorage: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.BrowserStorage),\n/* harmony export */   LANGUAGES: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LANGUAGES),\n/* harmony export */   LOGIN_PROVIDER: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER),\n/* harmony export */   MFA_FACTOR: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.MFA_FACTOR),\n/* harmony export */   MFA_LEVELS: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.MFA_LEVELS),\n/* harmony export */   MemoryStore: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.MemoryStore),\n/* harmony export */   OPENLOGIN_ACTIONS: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.OPENLOGIN_ACTIONS),\n/* harmony export */   OPENLOGIN_NETWORK: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.OPENLOGIN_NETWORK),\n/* harmony export */   OpenloginAdapter: () => (/* binding */ OpenloginAdapter),\n/* harmony export */   SUPPORTED_KEY_CURVES: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.SUPPORTED_KEY_CURVES),\n/* harmony export */   THEME_MODES: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.THEME_MODES),\n/* harmony export */   TORUS_LEGACY_NETWORK: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.TORUS_LEGACY_NETWORK),\n/* harmony export */   TORUS_SAPPHIRE_NETWORK: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.TORUS_SAPPHIRE_NETWORK),\n/* harmony export */   UX_MODE: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.UX_MODE),\n/* harmony export */   base64toJSON: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.base64toJSON),\n/* harmony export */   base64url: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.base64url),\n/* harmony export */   getOpenloginDefaultOptions: () => (/* binding */ getOpenloginDefaultOptions),\n/* harmony export */   jsonToBase64: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.jsonToBase64),\n/* harmony export */   safeatob: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.safeatob),\n/* harmony export */   safebtoa: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.safebtoa),\n/* harmony export */   storageAvailable: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.storageAvailable),\n/* harmony export */   storeKey: () => (/* reexport safe */ _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.storeKey)\n/* harmony export */ });\n/* harmony import */ var _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @toruslabs/openlogin-utils */ \"(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/openlogin */ \"(ssr)/./node_modules/@toruslabs/openlogin/dist/openlogin.esm.js\");\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash.merge */ \"(ssr)/./node_modules/lodash.merge/index.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\nconst getOpenloginDefaultOptions = ()=>{\n    return {\n        adapterSettings: {\n            network: _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.OPENLOGIN_NETWORK.SAPPHIRE_MAINNET,\n            clientId: \"\",\n            uxMode: _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.UX_MODE.POPUP\n        },\n        loginSettings: {},\n        privateKeyProvider: undefined\n    };\n};\nclass OpenloginAdapter extends _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.BaseAdapter {\n    constructor(){\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super(params);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"name\", _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WALLET_ADAPTERS.OPENLOGIN);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"adapterNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_NAMESPACES.MULTICHAIN);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"type\", _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_CATEGORY.IN_APP);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"openloginInstance\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"status\", _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_STATUS.NOT_READY);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"currentChainNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"privateKeyProvider\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"openloginOptions\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"loginSettings\", {\n            loginProvider: \"\"\n        });\n        this.setAdapterSettings(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, params.adapterSettings), {}, {\n            chainConfig: params.chainConfig,\n            clientId: params.clientId || \"\",\n            sessionTime: params.sessionTime,\n            web3AuthNetwork: params.web3AuthNetwork,\n            useCoreKitKey: params.useCoreKitKey,\n            privateKeyProvider: params.privateKeyProvider\n        }));\n        this.loginSettings = params.loginSettings || {\n            loginProvider: \"\"\n        };\n        this.privateKeyProvider = params.privateKeyProvider || null;\n    }\n    get chainConfigProxy() {\n        return this.chainConfig ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, this.chainConfig) : null;\n    }\n    get provider() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_STATUS.NOT_READY && this.privateKeyProvider) {\n            return this.privateKeyProvider;\n        }\n        return null;\n    }\n    set provider(_) {\n        throw new Error(\"Not implemented\");\n    }\n    async init(options) {\n        super.checkInitializationRequirements();\n        if (!this.clientId) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n        if (!this.openloginOptions) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletInitializationError.invalidParams(\"openloginOptions is required before openlogin's initialization\");\n        const isRedirectResult = this.openloginOptions.uxMode === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.UX_MODE.REDIRECT;\n        this.openloginOptions = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, this.openloginOptions), {}, {\n            replaceUrlOnRedirect: isRedirectResult\n        });\n        this.openloginInstance = new _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_3__[\"default\"](_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, this.openloginOptions), {}, {\n            clientId: this.clientId,\n            network: this.openloginOptions.network || this.web3AuthNetwork || _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.OPENLOGIN_NETWORK.SAPPHIRE_MAINNET\n        }));\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.debug(\"initializing openlogin adapter init\");\n        await this.openloginInstance.init();\n        if (!this.chainConfig) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_STATUS.READY;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WALLET_ADAPTERS.OPENLOGIN);\n        try {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.debug(\"initializing openlogin adapter\");\n            const finalPrivKey = this._getFinalPrivKey();\n            // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n            if (finalPrivKey && (options.autoConnect || isRedirectResult)) {\n                this.rehydrated = true;\n                await this.connect();\n            }\n        } catch (error) {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.error(\"Failed to connect with cached openlogin provider\", error);\n            this.emit(\"ERRORED\", error);\n        }\n    }\n    async connect() {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            loginProvider: \"\"\n        };\n        super.checkConnectionRequirements();\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_STATUS.CONNECTING;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_EVENTS.CONNECTING, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, params), {}, {\n            adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WALLET_ADAPTERS.OPENLOGIN\n        }));\n        try {\n            await this.connectWithProvider(params);\n            return this.provider;\n        } catch (error) {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.error(\"Failed to connect with openlogin provider\", error);\n            // ready again to be connected\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_STATUS.READY;\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_EVENTS.ERRORED, error);\n            if (error !== null && error !== void 0 && error.message.includes(\"user closed popup\")) {\n                throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletLoginError.popupClosed();\n            } else if (error instanceof _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.Web3AuthError) {\n                throw error;\n            }\n            throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletLoginError.connectionError(\"Failed to login with openlogin\");\n        }\n    }\n    async disconnect() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            cleanup: false\n        };\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletLoginError.notConnectedError(\"Not connected with wallet\");\n        if (!this.openloginInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletInitializationError.notReady(\"openloginInstance is not ready\");\n        await this.openloginInstance.logout();\n        if (options.cleanup) {\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_STATUS.NOT_READY;\n            this.openloginInstance = null;\n            this.privateKeyProvider = null;\n        } else {\n            // ready to be connected again\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_STATUS.READY;\n        }\n        this.rehydrated = false;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_EVENTS.DISCONNECTED);\n    }\n    async authenticateUser() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n        const userInfo = await this.getUserInfo();\n        return {\n            idToken: userInfo.idToken\n        };\n    }\n    async getUserInfo() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletLoginError.notConnectedError(\"Not connected with wallet\");\n        if (!this.openloginInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletInitializationError.notReady(\"openloginInstance is not ready\");\n        const userInfo = this.openloginInstance.getUserInfo();\n        return userInfo;\n    }\n    // should be called only before initialization.\n    setAdapterSettings(adapterSettings) {\n        super.setAdapterSettings(adapterSettings);\n        const defaultOptions = getOpenloginDefaultOptions();\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.info(\"setting adapter settings\", adapterSettings);\n        this.openloginOptions = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, defaultOptions.adapterSettings), this.openloginOptions), adapterSettings);\n        if (adapterSettings.web3AuthNetwork) {\n            this.openloginOptions.network = adapterSettings.web3AuthNetwork;\n        }\n        if (adapterSettings.useCoreKitKey !== undefined) {\n            this.openloginOptions.useCoreKitKey = adapterSettings.useCoreKitKey;\n        }\n        if (adapterSettings.privateKeyProvider) {\n            this.privateKeyProvider = adapterSettings.privateKeyProvider;\n        }\n    }\n    async addChain(chainConfig) {\n        var _this$privateKeyProvi;\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkAddChainRequirements(chainConfig, init);\n        (_this$privateKeyProvi = this.privateKeyProvider) === null || _this$privateKeyProvi === void 0 || _this$privateKeyProvi.addChain(chainConfig);\n        this.addChainConfig(chainConfig);\n    }\n    async switchChain(params) {\n        var _this$privateKeyProvi2;\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkSwitchChainRequirements(params, init);\n        await ((_this$privateKeyProvi2 = this.privateKeyProvider) === null || _this$privateKeyProvi2 === void 0 ? void 0 : _this$privateKeyProvi2.switchChain(params));\n        this.setAdapterSettings({\n            chainConfig: this.getChainConfig(params.chainId)\n        });\n    }\n    _getFinalPrivKey() {\n        var _this$openloginOption;\n        if (!this.openloginInstance) return \"\";\n        let finalPrivKey = this.openloginInstance.privKey;\n        // coreKitKey is available only for custom verifiers by default\n        if ((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.useCoreKitKey) {\n            // this is to check if the user has already logged in but coreKitKey is not available.\n            // when useCoreKitKey is set to true.\n            // This is to ensure that when there is no user session active, we don't throw an exception.\n            if (this.openloginInstance.privKey && !this.openloginInstance.coreKitKey) {\n                throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletLoginError.coreKitKeyNotFound();\n            }\n            finalPrivKey = this.openloginInstance.coreKitKey;\n        }\n        return finalPrivKey;\n    }\n    _getFinalEd25519PrivKey() {\n        var _this$openloginOption2;\n        if (!this.openloginInstance) return \"\";\n        let finalPrivKey = this.openloginInstance.ed25519PrivKey;\n        // coreKitKey is available only for custom verifiers by default\n        if ((_this$openloginOption2 = this.openloginOptions) !== null && _this$openloginOption2 !== void 0 && _this$openloginOption2.useCoreKitKey) {\n            // this is to check if the user has already logged in but coreKitKey is not available.\n            // when useCoreKitKey is set to true.\n            // This is to ensure that when there is no user session active, we don't throw an exception.\n            if (this.openloginInstance.ed25519PrivKey && !this.openloginInstance.coreKitEd25519Key) {\n                throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletLoginError.coreKitKeyNotFound();\n            }\n            finalPrivKey = this.openloginInstance.coreKitEd25519Key;\n        }\n        return finalPrivKey;\n    }\n    async connectWithProvider() {\n        var _params$extraLoginOpt;\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            loginProvider: \"\"\n        };\n        if (!this.privateKeyProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletInitializationError.invalidParams(\"PrivateKey Provider is required before initialization\");\n        if (!this.openloginInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletInitializationError.notReady(\"openloginInstance is not ready\");\n        const keyAvailable = this._getFinalPrivKey();\n        // if not logged in then login\n        if (!keyAvailable || (_params$extraLoginOpt = params.extraLoginOptions) !== null && _params$extraLoginOpt !== void 0 && _params$extraLoginOpt.id_token) {\n            var _params$extraLoginOpt2;\n            if (!this.loginSettings.curve) {\n                this.loginSettings.curve = this.currentChainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.SOLANA ? _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.SUPPORTED_KEY_CURVES.ED25519 : _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.SUPPORTED_KEY_CURVES.SECP256K1;\n            }\n            if (!params.loginProvider && !this.loginSettings.loginProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletInitializationError.invalidParams(\"loginProvider is required for login\");\n            await this.openloginInstance.login(lodash_merge__WEBPACK_IMPORTED_MODULE_5___default()(this.loginSettings, params, {\n                extraLoginOptions: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, params.extraLoginOptions || {}), {}, {\n                    login_hint: params.login_hint || ((_params$extraLoginOpt2 = params.extraLoginOptions) === null || _params$extraLoginOpt2 === void 0 ? void 0 : _params$extraLoginOpt2.login_hint)\n                })\n            }));\n        }\n        let finalPrivKey = this._getFinalPrivKey();\n        if (finalPrivKey) {\n            if (this.currentChainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.SOLANA) {\n                finalPrivKey = this._getFinalEd25519PrivKey();\n            }\n            await this.privateKeyProvider.setupProvider(finalPrivKey);\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_STATUS.CONNECTED;\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.ADAPTER_EVENTS.CONNECTED, {\n                adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WALLET_ADAPTERS.OPENLOGIN,\n                reconnected: this.rehydrated\n            });\n        }\n    }\n}\n //# sourceMappingURL=openloginAdapter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/openlogin-adapter/dist/openloginAdapter.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/phantom-adapter/dist/phantomAdapter.esm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@web3auth/phantom-adapter/dist/phantomAdapter.esm.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PhantomAdapter: () => (/* binding */ PhantomAdapter)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _web3auth_base_solana_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @web3auth/base-solana-adapter */ \"(ssr)/./node_modules/@web3auth/base-solana-adapter/dist/baseSolanaAdapter.esm.js\");\n/* harmony import */ var _web3auth_solana_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/solana-provider */ \"(ssr)/./node_modules/@web3auth/solana-provider/dist/solanaProvider.esm.js\");\n\n\n\n\nfunction poll(callback, interval, count) {\n    return new Promise((resolve, reject)=>{\n        if (count > 0) {\n            setTimeout(async ()=>{\n                const done = await callback();\n                if (done) resolve(done);\n                if (!done) poll(callback, interval, count - 1).then((res)=>{\n                    resolve(res);\n                    return res;\n                }).catch((err)=>reject(err));\n            }, interval);\n        } else {\n            resolve(false);\n        }\n    });\n}\nconst detectProvider = async function() {\n    var _window$solana;\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        interval: 1000,\n        count: 3\n    };\n    const isPhantomAvailable =  false && 0;\n    if (isPhantomAvailable) {\n        return window.solana;\n    }\n    const isAvailable = await poll(()=>{\n        var _window$solana2;\n        return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;\n    }, options.interval, options.count);\n    if (isAvailable) return window.solana;\n    return null;\n};\nclass PhantomAdapter extends _web3auth_base_solana_adapter__WEBPACK_IMPORTED_MODULE_2__.BaseSolanaAdapter {\n    constructor(){\n        super(...arguments);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"name\", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"adapterNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_NAMESPACES.SOLANA);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"currentChainNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.SOLANA);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"type\", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_CATEGORY.EXTERNAL);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"status\", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_wallet\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"phantomProvider\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_onDisconnect\", ()=>{\n            if (this._wallet) {\n                this._wallet.off(\"disconnect\", this._onDisconnect);\n                this.rehydrated = false;\n                // ready to be connected again only if it was previously connected and not cleaned up\n                this.status = this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED ? _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY : _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY;\n                this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.DISCONNECTED);\n            }\n        });\n    }\n    get isWalletConnected() {\n        var _this$_wallet;\n        return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED);\n    }\n    get provider() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY && this.phantomProvider) {\n            return this.phantomProvider;\n        }\n        return null;\n    }\n    set provider(_) {\n        throw new Error(\"Not implemented\");\n    }\n    async init() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        await super.init(options);\n        super.checkInitializationRequirements();\n        this._wallet = await detectProvider({\n            interval: 500,\n            count: 3\n        });\n        if (!this._wallet) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notInstalled();\n        this.phantomProvider = new _web3auth_solana_provider__WEBPACK_IMPORTED_MODULE_3__.PhantomInjectedProvider({\n            config: {\n                chainConfig: this.chainConfig\n            }\n        });\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM);\n        try {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"initializing phantom adapter\");\n            if (options.autoConnect) {\n                this.rehydrated = true;\n                await this.connect();\n            }\n        } catch (error) {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to connect with cached phantom provider\", error);\n            this.emit(\"ERRORED\", error);\n        }\n    }\n    async connect() {\n        var _this = this;\n        try {\n            super.checkConnectionRequirements();\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTING;\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.CONNECTING, {\n                adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM\n            });\n            if (!this._wallet) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notInstalled();\n            if (!this._wallet.isConnected) {\n                const handleDisconnect = this._wallet._handleDisconnect;\n                try {\n                    await new Promise((resolve, reject)=>{\n                        const connect = async ()=>{\n                            await this.connectWithProvider(this._wallet);\n                            resolve(this.provider);\n                        };\n                        if (!this._wallet) {\n                            reject(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notInstalled());\n                            return;\n                        }\n                        this._wallet.once(\"connect\", connect);\n                        // Raise an issue on phantom that if window is closed, disconnect event is not fired\n                        this._wallet._handleDisconnect = function() {\n                            reject(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.windowClosed());\n                            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                                args[_key] = arguments[_key];\n                            }\n                            return handleDisconnect.apply(_this._wallet, args);\n                        };\n                        this._wallet.connect().catch((reason)=>{\n                            reject(reason);\n                        });\n                    });\n                } catch (error) {\n                    if (error instanceof _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.Web3AuthError) throw error;\n                    throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);\n                } finally{\n                    this._wallet._handleDisconnect = handleDisconnect;\n                }\n            } else {\n                await this.connectWithProvider(this._wallet);\n            }\n            if (!this._wallet.publicKey) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.connectionError();\n            this._wallet.on(\"disconnect\", this._onDisconnect);\n            return this.provider;\n        } catch (error) {\n            // ready again to be connected\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;\n            this.rehydrated = false;\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.ERRORED, error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            cleanup: false\n        };\n        await super.disconnectSession();\n        try {\n            var _this$_wallet2;\n            await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());\n            if (options.cleanup) {\n                this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY;\n                this.phantomProvider = null;\n                this._wallet = null;\n            }\n            await super.disconnect();\n        } catch (error) {\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.ERRORED, _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));\n        }\n    }\n    async getUserInfo() {\n        if (!this.isWalletConnected) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n        return {};\n    }\n    async addChain(chainConfig) {\n        var _this$phantomProvider;\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkAddChainRequirements(chainConfig, init);\n        (_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 || _this$phantomProvider.addChain(chainConfig);\n        this.addChainConfig(chainConfig);\n    }\n    async switchChain(params) {\n        var _this$phantomProvider2;\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkSwitchChainRequirements(params, init);\n        await ((_this$phantomProvider2 = this.phantomProvider) === null || _this$phantomProvider2 === void 0 ? void 0 : _this$phantomProvider2.switchChain(params));\n        this.setAdapterSettings({\n            chainConfig: this.getChainConfig(params.chainId)\n        });\n    }\n    async connectWithProvider(injectedProvider) {\n        if (!this.phantomProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.connectionError(\"No phantom provider\");\n        await this.phantomProvider.setupProvider(injectedProvider);\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.CONNECTED, {\n            adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.PHANTOM,\n            reconnected: this.rehydrated\n        });\n        return this.provider;\n    }\n}\n //# sourceMappingURL=phantomAdapter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/phantom-adapter/dist/phantomAdapter.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/solana-provider/dist/solanaProvider.esm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@web3auth/solana-provider/dist/solanaProvider.esm.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PhantomInjectedProvider: () => (/* binding */ PhantomInjectedProvider),\n/* harmony export */   SlopeInjectedProxyProvider: () => (/* binding */ SlopeInjectedProxyProvider),\n/* harmony export */   SolanaPrivateKeyProvider: () => (/* binding */ SolanaPrivateKeyProvider),\n/* harmony export */   SolanaWallet: () => (/* binding */ SolanaWallet),\n/* harmony export */   SolflareInjectedProvider: () => (/* binding */ SolflareInjectedProvider),\n/* harmony export */   TorusInjectedProvider: () => (/* binding */ TorusInjectedProvider)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/base-provider */ \"(ssr)/./node_modules/@web3auth/base-provider/dist/baseProvider.esm.js\");\n/* harmony import */ var _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @toruslabs/base-controllers */ \"(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\");\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @metamask/rpc-errors */ \"(ssr)/./node_modules/@metamask/rpc-errors/dist/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/@web3auth/solana-provider/node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _toruslabs_openlogin_ed25519__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @toruslabs/openlogin-ed25519 */ \"(ssr)/./node_modules/@toruslabs/openlogin-ed25519/dist/openloginEd25519.esm.js\");\n/* harmony import */ var _toruslabs_tweetnacl_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @toruslabs/tweetnacl-js */ \"(ssr)/./node_modules/@toruslabs/tweetnacl-js/nacl-fast.js\");\n/* harmony import */ var _toruslabs_tweetnacl_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_toruslabs_tweetnacl_js__WEBPACK_IMPORTED_MODULE_10__);\n\n\n\n\n\n\n\n\n\n\n\nfunction createChainIdMiddleware(chainId) {\n    return (req, res, next, end)=>{\n        if (req.method === \"solana_chainId\") {\n            res.result = chainId;\n            return end();\n        }\n        return next();\n    };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n    return (req, res, next, end)=>{\n        if (req.method === \"solana_provider_config\") {\n            res.result = providerConfig;\n            return end();\n        }\n        return next();\n    };\n}\nfunction createConfigMiddleware(providerConfig) {\n    const { chainId } = providerConfig;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.mergeMiddleware)([\n        createChainIdMiddleware(chainId),\n        createProviderConfigMiddleware(providerConfig)\n    ]);\n}\nfunction createJsonRpcClient(providerConfig) {\n    const { rpcTarget } = providerConfig;\n    const fetchMiddleware = (0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_4__.createFetchMiddleware)({\n        rpcTarget\n    });\n    const networkMiddleware = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.mergeMiddleware)([\n        createConfigMiddleware(providerConfig),\n        fetchMiddleware\n    ]);\n    return {\n        networkMiddleware,\n        fetchMiddleware\n    };\n}\nfunction createGetAccountsMiddleware(_ref) {\n    let { getAccounts } = _ref;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== \"getAccounts\") return next();\n        if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n        // This calls from the prefs controller\n        const accounts = await getAccounts(request);\n        response.result = accounts;\n        return undefined;\n    });\n}\nfunction createRequestAccountsMiddleware(_ref2) {\n    let { requestAccounts } = _ref2;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== \"requestAccounts\") return next();\n        if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n        // This calls the UI login function\n        const accounts = await requestAccounts(request);\n        response.result = accounts;\n        return undefined;\n    });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== targetMethod) return next();\n        if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n        const result = await handler(request);\n        response.result = result;\n        return undefined;\n    });\n}\nfunction createSolanaMiddleware(providerHandlers) {\n    const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } = providerHandlers;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.mergeMiddleware)([\n        createRequestAccountsMiddleware({\n            requestAccounts\n        }),\n        createGetAccountsMiddleware({\n            getAccounts\n        }),\n        createGenericJRPCMiddleware(\"signTransaction\", signTransaction),\n        createGenericJRPCMiddleware(\"signAndSendTransaction\", signAndSendTransaction),\n        createGenericJRPCMiddleware(\"signAllTransactions\", signAllTransactions),\n        createGenericJRPCMiddleware(\"signMessage\", signMessage),\n        createGenericJRPCMiddleware(\"solanaPrivateKey\", getPrivateKey),\n        createGenericJRPCMiddleware(\"private_key\", getPrivateKey),\n        createGenericJRPCMiddleware(\"solanaSecretKey\", getSecretKey)\n    ]);\n}\nfunction createChainSwitchMiddleware(_ref3) {\n    let { addNewChainConfig, switchSolanaChain } = _ref3;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.mergeMiddleware)([\n        createGenericJRPCMiddleware(\"addSolanaChain\", addNewChainConfig),\n        createGenericJRPCMiddleware(\"switchSolanaChain\", switchSolanaChain)\n    ]);\n}\nfunction createAccountMiddleware(_ref4) {\n    let { updatePrivatekey } = _ref4;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.mergeMiddleware)([\n        createGenericJRPCMiddleware(\"updateAccount\", updatePrivatekey)\n    ]);\n}\nclass BaseInjectedProvider extends _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_3__.BaseProvider {\n    constructor(_ref){\n        let { config, state } = _ref;\n        super({\n            config: {\n                chainConfig: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, config.chainConfig), {}, {\n                    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.SOLANA\n                })\n            },\n            state\n        });\n    }\n    async switchChain(_) {\n        throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.unsupportedOperation(\"Chain switching is not supported by this adapter\");\n    }\n    async setupProvider(injectedProvider) {\n        const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.JRPCEngine();\n        const providerHandlers = this.getProviderHandlers(injectedProvider);\n        const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n        engine.push(solanaMiddleware);\n        const configMiddleware = createConfigMiddleware(this.config.chainConfig);\n        engine.push(configMiddleware);\n        const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n        if (injectedProviderProxy) {\n            engine.push(injectedProviderProxy);\n        }\n        const provider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.providerFromEngine)(engine);\n        this.updateProviderEngineProxy(provider);\n        await this.lookupNetwork();\n    }\n    async lookupNetwork() {\n        const { chainConfig } = this.config;\n        this.update({\n            chainId: chainConfig.chainId\n        });\n        return chainConfig.chainId || \"\";\n    }\n    getInjectedProviderProxy(_) {\n        return undefined;\n    }\n}\nconst getBaseProviderHandlers = (injectedProvider)=>{\n    const providerHandlers = {\n        requestAccounts: async ()=>{\n            return injectedProvider.publicKey ? [\n                bs58__WEBPACK_IMPORTED_MODULE_6___default().encode(injectedProvider.publicKey.toBytes())\n            ] : [];\n        },\n        getAccounts: async ()=>injectedProvider.publicKey ? [\n                bs58__WEBPACK_IMPORTED_MODULE_6___default().encode(injectedProvider.publicKey.toBytes())\n            ] : [],\n        getPrivateKey: async ()=>{\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.methodNotSupported();\n        },\n        getSecretKey: async ()=>{\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.methodNotSupported();\n        },\n        signTransaction: async (req)=>{\n            const transaction = await injectedProvider.signTransaction(req.params.message);\n            return transaction;\n        },\n        signMessage: async (req)=>{\n            const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n            return sigData.signature;\n        },\n        signAllTransactions: async (req)=>{\n            var _req$params, _req$params2;\n            if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length)) {\n                throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"message\");\n            }\n            const transaction = await injectedProvider.signAllTransactions(req.params.message);\n            return transaction;\n        },\n        signAndSendTransaction: async (req)=>{\n            const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n            return {\n                signature: txRes.signature\n            };\n        }\n    };\n    return providerHandlers;\n};\nfunction createInjectedProviderProxyMiddleware(provider) {\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.createAsyncMiddleware)(async (req, res, _next)=>{\n        const result = await provider.request(req);\n        res.result = result;\n    });\n}\nclass PhantomInjectedProvider extends BaseInjectedProvider {\n    getProviderHandlers(injectedProvider) {\n        return getBaseProviderHandlers(injectedProvider);\n    }\n    getInjectedProviderProxy(injectedProvider) {\n        return createInjectedProviderProxyMiddleware(injectedProvider);\n    }\n}\nconst isVersionTransction = (transaction)=>transaction.version !== undefined || transaction instanceof _solana_web3_js__WEBPACK_IMPORTED_MODULE_7__.VersionedTransaction;\nconst getSlopeHandlers = (injectedProvider, getProviderEngineProxy)=>{\n    const providerHandlers = {\n        requestAccounts: async ()=>{\n            const { data } = await injectedProvider.connect();\n            return [\n                data.publicKey\n            ];\n        },\n        getAccounts: async ()=>{\n            const { data } = await injectedProvider.connect();\n            return [\n                data.publicKey\n            ];\n        },\n        getPrivateKey: async ()=>{\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.methodNotSupported();\n        },\n        getSecretKey: async ()=>{\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.methodNotSupported();\n        },\n        signTransaction: async (req)=>{\n            const txMessage = req.params.message;\n            if (!txMessage) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidRequest({\n                message: \"Invalid transaction message\"\n            });\n            const message = isVersionTransction(txMessage) ? txMessage.message.serialize() : txMessage.serializeMessage();\n            const { data } = await injectedProvider.signTransaction(bs58__WEBPACK_IMPORTED_MODULE_6___default().encode(message));\n            if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n            const publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_7__.PublicKey(data.publicKey);\n            const signature = bs58__WEBPACK_IMPORTED_MODULE_6___default().decode(data.signature);\n            txMessage.addSignature(publicKey, Buffer.from(signature));\n            return txMessage;\n        },\n        signMessage: async (req)=>{\n            const response = await injectedProvider.signMessage(req.params.message);\n            return bs58__WEBPACK_IMPORTED_MODULE_6___default().decode(response.data.signature);\n        },\n        signAndSendTransaction: async (req)=>{\n            const provider = getProviderEngineProxy();\n            if (!provider) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.providerErrors.custom({\n                message: \"Provider is not initialized\",\n                code: 4902\n            });\n            const txMessage = req.params.message;\n            if (!txMessage) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidRequest({\n                message: \"Invalid transaction message\"\n            });\n            const message = isVersionTransction(txMessage) ? txMessage.message.serialize() : txMessage.serializeMessage();\n            const { data } = await injectedProvider.signTransaction(bs58__WEBPACK_IMPORTED_MODULE_6___default().encode(message));\n            if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n            const publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_7__.PublicKey(data.publicKey);\n            const signature = bs58__WEBPACK_IMPORTED_MODULE_6___default().decode(data.signature);\n            txMessage.addSignature(publicKey, Buffer.from(signature));\n            const chainConfig = await provider.request({\n                method: \"solana_provider_config\"\n            });\n            const conn = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_7__.Connection(chainConfig.rpcTarget);\n            const res = await conn.sendRawTransaction(txMessage.serialize());\n            return {\n                signature: res\n            };\n        },\n        signAllTransactions: async (req)=>{\n            var _req$params, _req$params2, _data$signatures;\n            if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length)) {\n                throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"message\");\n            }\n            const allTxns = req.params.message;\n            const { length } = allTxns;\n            const unsignedTx = [];\n            for(let i = 0; i < length; i++){\n                const item = allTxns[i];\n                const message = isVersionTransction(item) ? item.message.serialize() : item.serializeMessage();\n                unsignedTx.push(bs58__WEBPACK_IMPORTED_MODULE_6___default().encode(message));\n            }\n            const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n            if (!data.publicKey || ((_data$signatures = data.signatures) === null || _data$signatures === void 0 ? void 0 : _data$signatures.length) !== length) throw new Error(msg);\n            const publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_7__.PublicKey(data.publicKey);\n            for(let i = 0; i < length; i++){\n                const signature = bs58__WEBPACK_IMPORTED_MODULE_6___default().decode(data.signatures[i]);\n                allTxns[i].addSignature(publicKey, Buffer.from(signature));\n            }\n            return allTxns;\n        }\n    };\n    return providerHandlers;\n};\nclass SlopeInjectedProxyProvider extends BaseInjectedProvider {\n    getProviderHandlers(injectedProvider) {\n        return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n    }\n}\nconst getSolflareHandlers = (injectedProvider, getProviderEngineProxy)=>{\n    const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider);\n    solflareProviderHandlers.signAndSendTransaction = async (req)=>{\n        const provider = getProviderEngineProxy();\n        if (!provider) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.providerErrors.custom({\n            message: \"Provider is not initialized\",\n            code: 4902\n        });\n        const transaction = await injectedProvider.signTransaction(req.params.message);\n        const chainConfig = await provider.request({\n            method: \"solana_provider_config\"\n        });\n        const conn = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_7__.Connection(chainConfig.rpcTarget);\n        const res = await conn.sendRawTransaction(transaction.serialize());\n        return {\n            signature: res\n        };\n    };\n    solflareProviderHandlers.signMessage = async (req)=>{\n        const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n        return sigData;\n    };\n    return solflareProviderHandlers;\n};\nclass SolflareInjectedProvider extends BaseInjectedProvider {\n    getProviderHandlers(injectedProvider) {\n        return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n    }\n}\nconst getTorusHandlers = (injectedProvider)=>{\n    const providerHandlers = {\n        requestAccounts: async ()=>{\n            const accounts = await injectedProvider.request({\n                method: \"solana_requestAccounts\",\n                params: {}\n            });\n            return accounts;\n        },\n        getAccounts: async ()=>{\n            const accounts = await injectedProvider.request({\n                method: \"solana_requestAccounts\",\n                params: {}\n            });\n            return accounts;\n        },\n        getPrivateKey: async ()=>{\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.methodNotSupported();\n        },\n        getSecretKey: async ()=>{\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.methodNotSupported();\n        },\n        signMessage: async (req)=>{\n            var _req$params;\n            if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n                throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"message\");\n            }\n            const message = await injectedProvider.signMessage(req.params.message);\n            return message;\n        },\n        signTransaction: async (req)=>{\n            var _req$params2;\n            if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n                throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"message\");\n            }\n            const txMessage = req.params.message;\n            const response = await injectedProvider.signTransaction(txMessage);\n            return response;\n        },\n        signAndSendTransaction: async (req)=>{\n            var _req$params3;\n            if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n                throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"message\");\n            }\n            const txMessage = req.params.message;\n            const response = await injectedProvider.sendTransaction(txMessage);\n            return {\n                signature: response\n            };\n        },\n        signAllTransactions: async (req)=>{\n            var _req$params4, _req$params5;\n            if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n                throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"message\");\n            }\n            const transactions = req.params.message;\n            const response = await injectedProvider.signAllTransactions(transactions);\n            return response;\n        }\n    };\n    return providerHandlers;\n};\nclass TorusInjectedProvider extends _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_3__.BaseProvider {\n    constructor(_ref){\n        let { config, state } = _ref;\n        super({\n            config: {\n                chainConfig: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, config.chainConfig), {}, {\n                    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.SOLANA\n                })\n            },\n            state\n        });\n    }\n    async switchChain(params) {\n        // overrides the base provider implementation\n        await this.provider.request({\n            method: \"switchSolanaChain\",\n            params: [\n                {\n                    chainId: params.chainId\n                }\n            ]\n        });\n    }\n    async addChain(chainConfig) {\n        super.addChain(chainConfig);\n        await this.provider.request({\n            method: \"addNewChainConfig\",\n            params: [\n                {\n                    chainId: chainConfig.chainId,\n                    chainName: chainConfig.displayName,\n                    rpcUrls: [\n                        chainConfig.rpcTarget\n                    ],\n                    blockExplorerUrls: [\n                        chainConfig.blockExplorer\n                    ],\n                    nativeCurrency: {\n                        name: chainConfig.tickerName,\n                        symbol: chainConfig.ticker,\n                        decimals: chainConfig.decimals || 18\n                    }\n                }\n            ]\n        });\n    }\n    async setupProvider(injectedProvider) {\n        this.handleInjectedProviderUpdate(injectedProvider);\n        await this.setupEngine(injectedProvider);\n    }\n    async lookupNetwork() {\n        if (!this.provider) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.providerErrors.custom({\n            message: \"Torus solana provider is not initialized\",\n            code: 4902\n        });\n        const { chainId } = this.config.chainConfig;\n        const connectedChainId = await this.provider.request({\n            method: \"solana_chainId\"\n        });\n        const connectedHexChainId = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.isHexStrict)(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n        if (chainId !== connectedHexChainId) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n        this.update({\n            chainId: connectedHexChainId\n        });\n        this.emit(\"connect\", {\n            chainId: this.state.chainId\n        });\n        this.emit(\"chainChanged\", this.state.chainId);\n        return this.state.chainId;\n    }\n    async setupEngine(injectedProvider) {\n        const providerHandlers = getTorusHandlers(injectedProvider);\n        const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n        const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n        const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.JRPCEngine();\n        engine.push(solanaMiddleware);\n        engine.push(injectedProviderProxy);\n        const provider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.providerFromEngine)(engine);\n        this.updateProviderEngineProxy(provider);\n        await this.lookupNetwork();\n    }\n    async handleInjectedProviderUpdate(injectedProvider) {\n        injectedProvider.on(\"accountsChanged\", async (accounts)=>{\n            this.emit(\"accountsChanged\", accounts);\n        });\n        injectedProvider.on(\"chainChanged\", async (chainId)=>{\n            const connectedHexChainId = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.isHexStrict)(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n            // Check if chainId changed and trigger event\n            this.configure({\n                chainConfig: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.config.chainConfig), {}, {\n                    chainId: connectedHexChainId\n                })\n            });\n            await this.setupProvider(injectedProvider);\n        });\n    }\n}\nasync function getProviderHandlers(_ref) {\n    let { privKey, getProviderEngineProxy } = _ref;\n    const keyPairGenerator = ()=>{\n        return _solana_web3_js__WEBPACK_IMPORTED_MODULE_7__.Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n    };\n    if (typeof privKey !== \"string\") throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.invalidParams(\"privKey must be a string\");\n    const keyPair = keyPairGenerator();\n    const providerHandlers = {\n        requestAccounts: async ()=>{\n            return [\n                keyPair.publicKey.toBase58()\n            ];\n        },\n        getAccounts: async ()=>[\n                keyPair.publicKey.toBase58()\n            ],\n        getPrivateKey: async ()=>privKey,\n        getSecretKey: async ()=>bs58__WEBPACK_IMPORTED_MODULE_6___default().encode(keyPair.secretKey),\n        signTransaction: async (req)=>{\n            var _req$params;\n            if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n                throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"message\");\n            }\n            const transaction = req.params.message;\n            if (transaction.version !== undefined || transaction instanceof _solana_web3_js__WEBPACK_IMPORTED_MODULE_7__.VersionedTransaction) {\n                transaction.sign([\n                    keyPair\n                ]);\n            } else {\n                transaction.partialSign(keyPair);\n            }\n            return transaction;\n        },\n        signMessage: async (req)=>{\n            var _req$params2;\n            if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n                throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"message\");\n            }\n            const signedMsg = _toruslabs_tweetnacl_js__WEBPACK_IMPORTED_MODULE_10___default().sign.detached(req.params.message, keyPair.secretKey);\n            return signedMsg;\n        },\n        signAndSendTransaction: async (req)=>{\n            var _req$params3;\n            if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n                throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"message\");\n            }\n            const _providerEngineProxy = getProviderEngineProxy();\n            if (!_providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.providerErrors.custom({\n                message: \"Provider is not initialized\",\n                code: 4902\n            });\n            const transaction = req.params.message;\n            if (transaction.version !== undefined || transaction instanceof _solana_web3_js__WEBPACK_IMPORTED_MODULE_7__.VersionedTransaction) {\n                transaction.sign([\n                    keyPair\n                ]);\n            } else {\n                transaction.partialSign(keyPair);\n            }\n            const sig = await _providerEngineProxy.request({\n                method: \"sendTransaction\",\n                params: [\n                    Buffer.from(transaction.serialize()).toString(\"base64\"),\n                    {\n                        encoding: \"base64\",\n                        preflightCommitment: \"confirmed\"\n                    }\n                ]\n            });\n            return {\n                signature: sig\n            };\n        },\n        signAllTransactions: async (req)=>{\n            var _req$params4, _req$params5, _req$params6;\n            if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n                throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"message\");\n            }\n            const txns = (_req$params6 = req.params) === null || _req$params6 === void 0 ? void 0 : _req$params6.message;\n            for (const tx of txns || []){\n                const transaction = tx;\n                if (transaction.version !== undefined || transaction instanceof _solana_web3_js__WEBPACK_IMPORTED_MODULE_7__.VersionedTransaction) {\n                    transaction.sign([\n                        keyPair\n                    ]);\n                } else {\n                    transaction.partialSign(keyPair);\n                }\n            }\n            return txns;\n        }\n    };\n    return providerHandlers;\n}\nvar _class;\nclass SolanaPrivateKeyProvider extends _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_3__.BaseProvider {\n    constructor(_ref){\n        let { config, state } = _ref;\n        super({\n            config: {\n                chainConfig: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, config.chainConfig), {}, {\n                    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.SOLANA\n                })\n            },\n            state\n        });\n    }\n    async enable() {\n        if (!this.state.privateKey) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.providerErrors.custom({\n            message: \"Private key is not found in state, plz pass it in constructor state param\",\n            code: 4902\n        });\n        await this.setupProvider(this.state.privateKey);\n        return this._providerEngineProxy.request({\n            method: \"eth_accounts\"\n        });\n    }\n    getEd25519Key(privateKey) {\n        return (0,_toruslabs_openlogin_ed25519__WEBPACK_IMPORTED_MODULE_9__.getED25519Key)(privateKey).sk.toString(\"hex\").padStart(128, \"0\");\n    }\n    async setupProvider(privKey) {\n        const providerHandlers = await getProviderHandlers({\n            privKey,\n            getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n        });\n        const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n        const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.JRPCEngine();\n        const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig);\n        engine.push(this.getChainSwitchMiddleware());\n        engine.push(this.getAccountMiddleware());\n        engine.push(solanaMiddleware);\n        engine.push(networkMiddleware);\n        const provider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.providerFromEngine)(engine);\n        this.updateProviderEngineProxy(provider);\n        await this.lookupNetwork();\n    }\n    async updateAccount(params) {\n        if (!this._providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.providerErrors.custom({\n            message: \"Provider is not initialized\",\n            code: 4902\n        });\n        const existingKey = await this._providerEngineProxy.request({\n            method: \"solanaPrivateKey\"\n        });\n        if (existingKey !== params.privateKey) {\n            await this.setupProvider(params.privateKey);\n            this.emit(\"accountsChanged\", {\n                accounts: await this._providerEngineProxy.request({\n                    method: \"requestAccounts\"\n                })\n            });\n        }\n    }\n    async switchChain(params) {\n        if (!this._providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.providerErrors.custom({\n            message: \"Provider is not initialized\",\n            code: 4902\n        });\n        const chainConfig = this.getChainConfig(params.chainId);\n        this.update({\n            chainId: \"loading\"\n        });\n        this.configure({\n            chainConfig\n        });\n        const privKey = await this._providerEngineProxy.request({\n            method: \"solanaPrivateKey\"\n        });\n        await this.setupProvider(privKey);\n    }\n    async lookupNetwork() {\n        if (!this._providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.providerErrors.custom({\n            message: \"Provider is not initialized\",\n            code: 4902\n        });\n        const health = await this._providerEngineProxy.request({\n            method: \"getHealth\",\n            params: []\n        });\n        const { chainConfig } = this.config;\n        if (health !== \"ok\") throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n        this.update({\n            chainId: chainConfig.chainId\n        });\n        if (this.state.chainId !== chainConfig.chainId) {\n            this.emit(\"chainChanged\", this.state.chainId);\n            this.emit(\"connect\", {\n                chainId: this.state.chainId\n            });\n        }\n        return this.state.chainId;\n    }\n    getChainSwitchMiddleware() {\n        const chainSwitchHandlers = {\n            addNewChainConfig: async (req)=>{\n                if (!req.params) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"Missing request params\");\n                const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n                if (!chainId) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"Missing chainId in chainParams\");\n                if (!rpcUrls || rpcUrls.length === 0) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"Missing rpcUrls in chainParams\");\n                if (!nativeCurrency) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"Missing nativeCurrency in chainParams\");\n                this.addChain({\n                    chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.SOLANA,\n                    chainId,\n                    ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"SOL\",\n                    tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Solana\",\n                    displayName: chainName,\n                    rpcTarget: rpcUrls[0],\n                    blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n                    decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 9\n                });\n            },\n            switchSolanaChain: async (req)=>{\n                if (!req.params) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"Missing request params\");\n                if (!req.params.chainId) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"Missing chainId\");\n                await this.switchChain(req.params);\n            }\n        };\n        const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n        return chainSwitchMiddleware;\n    }\n    getAccountMiddleware() {\n        const accountHandlers = {\n            updatePrivatekey: async (req)=>{\n                if (!req.params) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"Missing request params\");\n                if (!req.params.privateKey) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.rpcErrors.invalidParams(\"Missing privateKey\");\n                const { privateKey } = req.params;\n                await this.updateAccount({\n                    privateKey\n                });\n            }\n        };\n        return createAccountMiddleware(accountHandlers);\n    }\n}\n_class = SolanaPrivateKeyProvider;\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(SolanaPrivateKeyProvider, \"getProviderInstance\", async (params)=>{\n    const providerFactory = new _class({\n        config: {\n            chainConfig: params.chainConfig\n        }\n    });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n});\nclass SolanaWallet {\n    constructor(provider){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"provider\", void 0);\n        this.provider = provider;\n    }\n    async requestAccounts() {\n        const accounts = await this.provider.request({\n            method: \"requestAccounts\"\n        });\n        return accounts;\n    }\n    async signAndSendTransaction(transaction) {\n        const { signature } = await this.provider.request({\n            method: \"signAndSendTransaction\",\n            params: {\n                message: transaction\n            }\n        });\n        return {\n            signature\n        };\n    }\n    async signTransaction(transaction) {\n        const signedTransaction = await this.provider.request({\n            method: \"signTransaction\",\n            params: {\n                message: transaction\n            }\n        });\n        return signedTransaction;\n    }\n    async signAllTransactions(transactions) {\n        const signedTransactions = await this.provider.request({\n            method: \"signAllTransactions\",\n            params: {\n                message: transactions\n            }\n        });\n        return signedTransactions;\n    }\n    async signMessage(data) {\n        const response = await this.provider.request({\n            method: \"signMessage\",\n            params: {\n                message: data\n            }\n        });\n        return response;\n    }\n    async request(args) {\n        const result = await this.provider.request(args);\n        return result;\n    }\n}\n //# sourceMappingURL=solanaProvider.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/solana-provider/dist/solanaProvider.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/solana-provider/node_modules/base-x/src/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@web3auth/solana-provider/node_modules/base-x/src/index.js ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base(ALPHABET) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError(\"Alphabet too long\");\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for(var j = 0; j < BASE_MAP.length; j++){\n        BASE_MAP[j] = 255;\n    }\n    for(var i = 0; i < ALPHABET.length; i++){\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + \" is ambiguous\");\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n    ;\n    var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n    ;\n    function encode(source) {\n        if (source instanceof Uint8Array) {} else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        } else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError(\"Expected Uint8Array\");\n        }\n        if (source.length === 0) {\n            return \"\";\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while(pbegin !== pend && source[pbegin] === 0){\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while(pbegin !== pend){\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){\n                carry += 256 * b58[it1] >>> 0;\n                b58[it1] = carry % BASE >>> 0;\n                carry = carry / BASE >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error(\"Non-zero carry\");\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while(it2 !== size && b58[it2] === 0){\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for(; it2 < size; ++it2){\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    function decodeUnsafe(source) {\n        if (typeof source !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while(source[psz] === LEADER){\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (source.length - psz) * FACTOR + 1 >>> 0 // log(58) / log(256), rounded up.\n        ;\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while(source[psz]){\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){\n                carry += BASE * b256[it3] >>> 0;\n                b256[it3] = carry % 256 >>> 0;\n                carry = carry / 256 >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error(\"Non-zero carry\");\n            }\n            length = i;\n            psz++;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while(it4 !== size && b256[it4] === 0){\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while(it4 !== size){\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(\"Non-base\" + BASE + \" character\");\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nmodule.exports = base;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/solana-provider/node_modules/base-x/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/solana-provider/node_modules/bs58/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@web3auth/solana-provider/node_modules/bs58/index.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const basex = __webpack_require__(/*! base-x */ \"(ssr)/./node_modules/@web3auth/solana-provider/node_modules/base-x/src/index.js\");\nconst ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nmodule.exports = basex(ALPHABET);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3NvbGFuYS1wcm92aWRlci9ub2RlX21vZHVsZXMvYnM1OC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUN0QixNQUFNQyxXQUFXO0FBRWpCQyxPQUFPQyxPQUFPLEdBQUdKLE1BQU1FIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvc29sYW5hLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9iczU4L2luZGV4LmpzP2VjODUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYmFzZXggPSByZXF1aXJlKCdiYXNlLXgnKVxuY29uc3QgQUxQSEFCRVQgPSAnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eidcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNleChBTFBIQUJFVClcbiJdLCJuYW1lcyI6WyJiYXNleCIsInJlcXVpcmUiLCJBTFBIQUJFVCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/solana-provider/node_modules/bs58/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/torus-evm-adapter/dist/torusEvmAdapter.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@web3auth/torus-evm-adapter/dist/torusEvmAdapter.esm.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TorusWalletAdapter: () => (/* binding */ TorusWalletAdapter)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_torus_embed__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/torus-embed */ \"(ssr)/./node_modules/@toruslabs/torus-embed/dist/torus.esm.js\");\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _web3auth_base_evm_adapter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @web3auth/base-evm-adapter */ \"(ssr)/./node_modules/@web3auth/base-evm-adapter/dist/baseEvmAdapter.esm.js\");\n\n\n\n\n\nclass TorusWalletAdapter extends _web3auth_base_evm_adapter__WEBPACK_IMPORTED_MODULE_4__.BaseEvmAdapter {\n    constructor(){\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super(params);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.TORUS_EVM);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"adapterNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_NAMESPACES.EIP155);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"currentChainNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.CHAIN_NAMESPACES.EIP155);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"type\", _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_CATEGORY.EXTERNAL);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"status\", _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.NOT_READY);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusInstance\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusWalletOptions\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initParams\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"loginSettings\", {});\n        this.torusWalletOptions = params.adapterSettings || {};\n        this.initParams = params.initParams || {};\n        this.loginSettings = params.loginSettings || {};\n    }\n    get provider() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.NOT_READY && this.torusInstance) {\n            return this.torusInstance.provider;\n        }\n        return null;\n    }\n    set provider(_) {\n        throw new Error(\"Not implemented\");\n    }\n    async init() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        await super.init(options);\n        super.checkInitializationRequirements();\n        const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig;\n        const network = {\n            chainId: Number.parseInt(chainId, 16),\n            host: rpcTarget,\n            blockExplorer,\n            networkName: displayName,\n            ticker,\n            tickerName\n        };\n        this.torusInstance = new _toruslabs_torus_embed__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.torusWalletOptions);\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"initializing torus evm adapter init\");\n        await this.torusInstance.init(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n            showTorusButton: false\n        }, this.initParams), {}, {\n            network\n        }));\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.READY;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.TORUS_EVM);\n        try {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"initializing torus evm adapter\");\n            if (options.autoConnect) {\n                this.rehydrated = true;\n                await this.connect();\n            }\n        } catch (error) {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(\"Failed to connect with torus evm provider\", error);\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.ERRORED, error);\n        }\n    }\n    async connect() {\n        super.checkConnectionRequirements();\n        if (!this.torusInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTING;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.CONNECTING, {\n            adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.TORUS_EVM\n        });\n        try {\n            await this.torusInstance.login(this.loginSettings);\n            const chainId = await this.torusInstance.provider.request({\n                method: \"eth_chainId\"\n            });\n            if (chainId && parseInt(chainId) !== parseInt(this.chainConfig.chainId, 16)) {\n                const { chainId: _chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig;\n                const network = {\n                    chainId: Number.parseInt(_chainId, 16),\n                    host: rpcTarget,\n                    blockExplorer,\n                    networkName: displayName,\n                    tickerName,\n                    ticker\n                };\n                // in some cases when user manually switches chain and relogin then adapter will not connect to initially passed\n                // chainConfig but will connect to the one that user switched to.\n                // So here trying to switch network to the one that was initially passed in chainConfig.\n                await this.torusInstance.setProvider(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, network));\n                const updatedChainID = await this.torusInstance.ethereum.request({\n                    method: \"eth_chainId\"\n                });\n                if (updatedChainID && parseInt(updatedChainID) !== parseInt(this.chainConfig.chainId, 16)) {\n                    throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.fromCode(5000, `Not connected to correct chainId. Expected: ${this.chainConfig.chainId}, Current: ${updatedChainID}`);\n                }\n            }\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED;\n            this.torusInstance.showTorusButton();\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED, {\n                adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.TORUS_EVM,\n                reconnected: this.rehydrated\n            });\n            return this.provider;\n        } catch (error) {\n            // ready again to be connected\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.READY;\n            this.rehydrated = false;\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.ERRORED, error);\n            throw error instanceof _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.Web3AuthError ? error : _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n        }\n    }\n    async disconnect() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            cleanup: false\n        };\n        await super.disconnectSession();\n        if (!this.torusInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n        await this.torusInstance.logout();\n        this.torusInstance.hideTorusButton();\n        if (options.cleanup) {\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.NOT_READY;\n            this.torusInstance = null;\n        } else {\n            // ready to be connected again\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.READY;\n        }\n        await super.disconnect();\n    }\n    async getUserInfo() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletLoginError.notConnectedError(\"Not connected with wallet\");\n        if (!this.torusInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n        const userInfo = await this.torusInstance.getUserInfo(\"\");\n        return userInfo;\n    }\n    async addChain(chainConfig) {\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkAddChainRequirements(chainConfig, init);\n        // TODO: add these in torus wallet.\n        // await this.torusInstance?.provider.request({\n        //   method: \"wallet_addEthereumChain\",\n        //   params: [\n        //     {\n        //       chainId: chainConfig.chainId,\n        //       chainName: chainConfig.displayName,\n        //       rpcUrls: [chainConfig.rpcTarget],\n        //       blockExplorerUrls: [chainConfig.blockExplorer],\n        //       nativeCurrency: {\n        //         name: chainConfig.tickerName,\n        //         symbol: chainConfig.ticker,\n        //         decimals: chainConfig.decimals || 18,\n        //       },\n        //     },\n        //   ],\n        // });\n        this.addChainConfig(chainConfig);\n    }\n    async switchChain(params) {\n        var _this$torusInstance;\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkSwitchChainRequirements(params, init);\n        // TODO: add these in torus wallet.\n        // await this.torusInstance?.provider.request({\n        //   method: \"wallet_switchEthereumChain\",\n        //   params: [{ chainId: params.chainId }],\n        // });\n        const chainConfig = this.getChainConfig(params.chainId);\n        await ((_this$torusInstance = this.torusInstance) === null || _this$torusInstance === void 0 ? void 0 : _this$torusInstance.setProvider({\n            host: chainConfig.rpcTarget,\n            chainId: parseInt(chainConfig.chainId, 16),\n            networkName: chainConfig.displayName,\n            blockExplorer: chainConfig.blockExplorer,\n            ticker: chainConfig.ticker,\n            tickerName: chainConfig.tickerName\n        }));\n        this.setAdapterSettings({\n            chainConfig: this.getChainConfig(params.chainId)\n        });\n    }\n}\n //# sourceMappingURL=torusEvmAdapter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/torus-evm-adapter/dist/torusEvmAdapter.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/torus-solana-adapter/dist/torusSolanaAdapter.esm.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@web3auth/torus-solana-adapter/dist/torusSolanaAdapter.esm.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SolanaWalletAdapter: () => (/* binding */ SolanaWalletAdapter)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_solana_embed__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/solana-embed */ \"(ssr)/./node_modules/@toruslabs/solana-embed/dist/solanaEmbed.esm.js\");\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _web3auth_base_solana_adapter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @web3auth/base-solana-adapter */ \"(ssr)/./node_modules/@web3auth/base-solana-adapter/dist/baseSolanaAdapter.esm.js\");\n/* harmony import */ var _web3auth_solana_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @web3auth/solana-provider */ \"(ssr)/./node_modules/@web3auth/solana-provider/dist/solanaProvider.esm.js\");\n\n\n\n\n\n\nclass SolanaWalletAdapter extends _web3auth_base_solana_adapter__WEBPACK_IMPORTED_MODULE_4__.BaseSolanaAdapter {\n    constructor(){\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super(params);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.TORUS_SOLANA);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"adapterNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_NAMESPACES.SOLANA);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"currentChainNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.CHAIN_NAMESPACES.SOLANA);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"type\", _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_CATEGORY.EXTERNAL);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"status\", _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.NOT_READY);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusInstance\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"torusWalletOptions\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initParams\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"loginSettings\", {});\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"solanaProvider\", null);\n        this.torusWalletOptions = params.adapterSettings || {};\n        this.initParams = params.initParams || {};\n        this.loginSettings = params.loginSettings || {};\n    }\n    get provider() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.NOT_READY && this.solanaProvider) {\n            return this.solanaProvider;\n        }\n        return null;\n    }\n    set provider(_) {\n        throw new Error(\"Not implemented\");\n    }\n    async init() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        await super.init(options);\n        super.checkInitializationRequirements();\n        const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig;\n        const network = {\n            chainId,\n            rpcTarget,\n            blockExplorerUrl: blockExplorer,\n            displayName,\n            tickerName,\n            ticker,\n            logo: \"\"\n        };\n        this.torusInstance = new _toruslabs_solana_embed__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.torusWalletOptions);\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"initializing torus solana adapter init\");\n        await this.torusInstance.init(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n            showTorusButton: false\n        }, this.initParams), {}, {\n            network\n        }));\n        this.solanaProvider = new _web3auth_solana_provider__WEBPACK_IMPORTED_MODULE_5__.TorusInjectedProvider({\n            config: {\n                chainConfig: this.chainConfig\n            }\n        });\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.READY;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.TORUS_SOLANA);\n        try {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"initializing torus solana adapter\");\n            if (options.autoConnect) {\n                this.rehydrated = true;\n                await this.connect();\n            }\n        } catch (error) {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(\"Failed to connect with cached torus solana provider\", error);\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.ERRORED, error);\n        }\n    }\n    async connect() {\n        super.checkConnectionRequirements();\n        if (!this.torusInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n        if (!this.solanaProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTING;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.CONNECTING, {\n            adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.TORUS_SOLANA\n        });\n        try {\n            await this.torusInstance.login(this.loginSettings);\n            try {\n                const torusInpageProvider = this.torusInstance.provider;\n                torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n                torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n                await this.solanaProvider.setupProvider(torusInpageProvider);\n            } catch (error) {\n                // some issue in solana wallet, always connecting to mainnet on init.\n                // fallback to change network if not connected to correct one on login.\n                if (error instanceof _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.Web3AuthError && error.code === 5010) {\n                    const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig;\n                    const network = {\n                        chainId,\n                        rpcTarget,\n                        blockExplorerUrl: blockExplorer,\n                        displayName,\n                        tickerName,\n                        ticker,\n                        logo: \"\"\n                    };\n                    await this.torusInstance.setProvider(network);\n                } else {\n                    throw error;\n                }\n            }\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED;\n            this.torusInstance.showTorusButton();\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED, {\n                adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.TORUS_SOLANA,\n                reconnected: this.rehydrated\n            });\n            return this.provider;\n        } catch (error) {\n            // ready again to be connected\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.READY;\n            this.rehydrated = false;\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.ERRORED, error);\n            if (error instanceof _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.Web3AuthError) throw error;\n            throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n        }\n    }\n    async disconnect() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            cleanup: false\n        };\n        await super.disconnectSession();\n        if (!this.torusInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n        await this.torusInstance.logout();\n        if (options.cleanup) {\n            // ready to connect again\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.NOT_READY;\n            this.torusInstance = null;\n            this.solanaProvider = null;\n        } else {\n            // ready to connect again\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.READY;\n        }\n        await super.disconnect();\n    }\n    async getUserInfo() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletLoginError.notConnectedError(\"Not connected with wallet\");\n        if (!this.torusInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n        const userInfo = await this.torusInstance.getUserInfo();\n        return userInfo;\n    }\n    async addChain(chainConfig) {\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkAddChainRequirements(chainConfig, init);\n        // await this.solanaProvider?.addChain(chainConfig);\n        this.addChainConfig(chainConfig);\n    }\n    async switchChain(params) {\n        var _this$torusInstance;\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkSwitchChainRequirements(params, init);\n        const chainConfig = this.getChainConfig(params.chainId);\n        await ((_this$torusInstance = this.torusInstance) === null || _this$torusInstance === void 0 ? void 0 : _this$torusInstance.setProvider({\n            rpcTarget: chainConfig.rpcTarget,\n            chainId: chainConfig.chainId,\n            displayName: chainConfig.displayName,\n            blockExplorerUrl: chainConfig.blockExplorer,\n            ticker: chainConfig.ticker,\n            tickerName: chainConfig.tickerName,\n            logo: \"https://images.web3auth.io/login-torus-solana.svg\"\n        }));\n        this.setAdapterSettings({\n            chainConfig: this.getChainConfig(params.chainId)\n        });\n    }\n}\n //# sourceMappingURL=torusSolanaAdapter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/torus-solana-adapter/dist/torusSolanaAdapter.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ui/dist/dutch-9a1ae5c2.js":
/*!**********************************************************!*\
  !*** ./node_modules/@web3auth/ui/dist/dutch-9a1ae5c2.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ dutch),\n/* harmony export */   modal: () => (/* binding */ modal)\n/* harmony export */ });\nvar modal = {\n    \"adapter-loader.message\": \"Verifieer uw {{adapter}}-account om door te gaan\",\n    \"adapter-loader.message1\": \"Verifieer uw {{adapter}}\",\n    \"adapter-loader.message2\": \"account om door te gaan\",\n    \"errors-invalid-number-email\": \"Ongeldig e-mailadres of telefoonnummer\",\n    \"errors-required\": \"Vereist\",\n    \"external.back\": \"Terug\",\n    \"external.connect\": \"Verbinden met portemonnee\",\n    \"external.title\": \"Externe portemonnee\",\n    \"external.walletconnect-connect\": \"Verbinden\",\n    \"external.walletconnect-copy\": \"Klik op de QR-code om te kopi\\xebren naar het klembord\",\n    \"external.walletconnect-subtitle\": \"Scan de QR-code met een WalletConnect-compatibele portemonnee\",\n    \"footer.message\": \"Zelfbeheerde login door\",\n    \"footer.message-new\": \"Zelf-custodial login via Web3Auth\",\n    \"footer.policy\": \"Privacybeleid\",\n    \"footer.terms\": \"Gebruiksvoorwaarden\",\n    \"footer.terms-service\": \"Gebruiksvoorwaarden\",\n    \"footer.version\": \"Versie\",\n    \"header-subtitle\": \"Selecteer een van de volgende opties om door te gaan\",\n    \"header-subtitle-name\": \"Uw {{appName}}-portemonnee met \\xe9\\xe9n klik\",\n    \"header-subtitle-new\": \"Uw blockchain-portemonnee met \\xe9\\xe9n klik\",\n    \"header-title\": \"Aanmelden\",\n    \"header-tooltip-desc\": \"De portemonnee dient als een account om uw digitale activa op de blockchain op te slaan en te beheren.\",\n    \"header-tooltip-title\": \"Portemonnee\",\n    \"network.add-request\": \"Deze site vraagt om een netwerk toe te voegen\",\n    \"network.cancel\": \"Annuleren\",\n    \"network.from\": \"Van\",\n    \"network.proceed\": \"Doorgaan\",\n    \"network.switch-request\": \"Deze site vraagt om over te schakelen naar een ander netwerk\",\n    \"network.to\": \"Naar\",\n    \"popup.phone-body\": \"Uw landcode wordt automatisch gedetecteerd, maar als u een telefoonnummer uit een ander land gebruikt, moet u handmatig de juiste landcode invoeren.\",\n    \"popup.phone-header\": \"Telefoonnummer en landcode\",\n    \"social.continue\": \"Doorgaan met\",\n    \"social.continueCustom\": \"Doorgaan met {{adapter}}\",\n    \"social.email\": \"E-mail\",\n    \"social.email-continue\": \"Doorgaan met e-mail\",\n    \"social.email-new\": \"naam@voorbeeld.com\",\n    \"social.passwordless-cta\": \"Doorgaan\",\n    \"social.passwordless-title\": \"E-mail of telefoon\",\n    \"social.phone\": \"Telefoon\",\n    \"social.policy\": \"We slaan geen gegevens op die verband houden met uw sociale logins.\",\n    \"social.sms\": \"Mobiel\",\n    \"social.sms-continue\": \"Doorgaan met mobiel\",\n    \"social.sms-invalid-number\": \"Ongeldig telefoonnummer\",\n    \"social.sms-placeholder-text\": \"Bijv.:\",\n    \"social.view-less\": \"Minder opties bekijken\",\n    \"social.view-less-new\": \"Minder bekijken\",\n    \"social.view-more\": \"Meer opties bekijken\",\n    \"social.view-more-new\": \"Meer bekijken\",\n    \"post-loading.connected\": \"U bent verbonden met uw account\",\n    \"post-loading.something-wrong\": \"Er is iets fout gegaan!\"\n};\nvar dutch = {\n    modal: modal\n};\n //# sourceMappingURL=dutch-9a1ae5c2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3VpL2Rpc3QvZHV0Y2gtOWExYWU1YzIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxRQUFRO0lBQ1YsMEJBQTBCO0lBQzFCLDJCQUEyQjtJQUMzQiwyQkFBMkI7SUFDM0IsK0JBQStCO0lBQy9CLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixrQ0FBa0M7SUFDbEMsK0JBQStCO0lBQy9CLG1DQUFtQztJQUNuQyxrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsd0JBQXdCO0lBQ3hCLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsd0JBQXdCO0lBQ3hCLHVCQUF1QjtJQUN2QixnQkFBZ0I7SUFDaEIsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4Qix1QkFBdUI7SUFDdkIsa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsMEJBQTBCO0lBQzFCLGNBQWM7SUFDZCxvQkFBb0I7SUFDcEIsc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQix5QkFBeUI7SUFDekIsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixvQkFBb0I7SUFDcEIsMkJBQTJCO0lBQzNCLDZCQUE2QjtJQUM3QixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCx1QkFBdUI7SUFDdkIsNkJBQTZCO0lBQzdCLCtCQUErQjtJQUMvQixvQkFBb0I7SUFDcEIsd0JBQXdCO0lBQ3hCLG9CQUFvQjtJQUNwQix3QkFBd0I7SUFDeEIsMEJBQTBCO0lBQzFCLGdDQUFnQztBQUNsQztBQUNBLElBQUlDLFFBQVE7SUFDVkQsT0FBT0E7QUFDVDtBQUVtQyxDQUNuQywwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC91aS9kaXN0L2R1dGNoLTlhMWFlNWMyLmpzPzA5ZDQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG1vZGFsID0ge1xuICBcImFkYXB0ZXItbG9hZGVyLm1lc3NhZ2VcIjogXCJWZXJpZmllZXIgdXcge3thZGFwdGVyfX0tYWNjb3VudCBvbSBkb29yIHRlIGdhYW5cIixcbiAgXCJhZGFwdGVyLWxvYWRlci5tZXNzYWdlMVwiOiBcIlZlcmlmaWVlciB1dyB7e2FkYXB0ZXJ9fVwiLFxuICBcImFkYXB0ZXItbG9hZGVyLm1lc3NhZ2UyXCI6IFwiYWNjb3VudCBvbSBkb29yIHRlIGdhYW5cIixcbiAgXCJlcnJvcnMtaW52YWxpZC1udW1iZXItZW1haWxcIjogXCJPbmdlbGRpZyBlLW1haWxhZHJlcyBvZiB0ZWxlZm9vbm51bW1lclwiLFxuICBcImVycm9ycy1yZXF1aXJlZFwiOiBcIlZlcmVpc3RcIixcbiAgXCJleHRlcm5hbC5iYWNrXCI6IFwiVGVydWdcIixcbiAgXCJleHRlcm5hbC5jb25uZWN0XCI6IFwiVmVyYmluZGVuIG1ldCBwb3J0ZW1vbm5lZVwiLFxuICBcImV4dGVybmFsLnRpdGxlXCI6IFwiRXh0ZXJuZSBwb3J0ZW1vbm5lZVwiLFxuICBcImV4dGVybmFsLndhbGxldGNvbm5lY3QtY29ubmVjdFwiOiBcIlZlcmJpbmRlblwiLFxuICBcImV4dGVybmFsLndhbGxldGNvbm5lY3QtY29weVwiOiBcIktsaWsgb3AgZGUgUVItY29kZSBvbSB0ZSBrb3Bpw6tyZW4gbmFhciBoZXQga2xlbWJvcmRcIixcbiAgXCJleHRlcm5hbC53YWxsZXRjb25uZWN0LXN1YnRpdGxlXCI6IFwiU2NhbiBkZSBRUi1jb2RlIG1ldCBlZW4gV2FsbGV0Q29ubmVjdC1jb21wYXRpYmVsZSBwb3J0ZW1vbm5lZVwiLFxuICBcImZvb3Rlci5tZXNzYWdlXCI6IFwiWmVsZmJlaGVlcmRlIGxvZ2luIGRvb3JcIixcbiAgXCJmb290ZXIubWVzc2FnZS1uZXdcIjogXCJaZWxmLWN1c3RvZGlhbCBsb2dpbiB2aWEgV2ViM0F1dGhcIixcbiAgXCJmb290ZXIucG9saWN5XCI6IFwiUHJpdmFjeWJlbGVpZFwiLFxuICBcImZvb3Rlci50ZXJtc1wiOiBcIkdlYnJ1aWtzdm9vcndhYXJkZW5cIixcbiAgXCJmb290ZXIudGVybXMtc2VydmljZVwiOiBcIkdlYnJ1aWtzdm9vcndhYXJkZW5cIixcbiAgXCJmb290ZXIudmVyc2lvblwiOiBcIlZlcnNpZVwiLFxuICBcImhlYWRlci1zdWJ0aXRsZVwiOiBcIlNlbGVjdGVlciBlZW4gdmFuIGRlIHZvbGdlbmRlIG9wdGllcyBvbSBkb29yIHRlIGdhYW5cIixcbiAgXCJoZWFkZXItc3VidGl0bGUtbmFtZVwiOiBcIlV3IHt7YXBwTmFtZX19LXBvcnRlbW9ubmVlIG1ldCDDqcOpbiBrbGlrXCIsXG4gIFwiaGVhZGVyLXN1YnRpdGxlLW5ld1wiOiBcIlV3IGJsb2NrY2hhaW4tcG9ydGVtb25uZWUgbWV0IMOpw6luIGtsaWtcIixcbiAgXCJoZWFkZXItdGl0bGVcIjogXCJBYW5tZWxkZW5cIixcbiAgXCJoZWFkZXItdG9vbHRpcC1kZXNjXCI6IFwiRGUgcG9ydGVtb25uZWUgZGllbnQgYWxzIGVlbiBhY2NvdW50IG9tIHV3IGRpZ2l0YWxlIGFjdGl2YSBvcCBkZSBibG9ja2NoYWluIG9wIHRlIHNsYWFuIGVuIHRlIGJlaGVyZW4uXCIsXG4gIFwiaGVhZGVyLXRvb2x0aXAtdGl0bGVcIjogXCJQb3J0ZW1vbm5lZVwiLFxuICBcIm5ldHdvcmsuYWRkLXJlcXVlc3RcIjogXCJEZXplIHNpdGUgdnJhYWd0IG9tIGVlbiBuZXR3ZXJrIHRvZSB0ZSB2b2VnZW5cIixcbiAgXCJuZXR3b3JrLmNhbmNlbFwiOiBcIkFubnVsZXJlblwiLFxuICBcIm5ldHdvcmsuZnJvbVwiOiBcIlZhblwiLFxuICBcIm5ldHdvcmsucHJvY2VlZFwiOiBcIkRvb3JnYWFuXCIsXG4gIFwibmV0d29yay5zd2l0Y2gtcmVxdWVzdFwiOiBcIkRlemUgc2l0ZSB2cmFhZ3Qgb20gb3ZlciB0ZSBzY2hha2VsZW4gbmFhciBlZW4gYW5kZXIgbmV0d2Vya1wiLFxuICBcIm5ldHdvcmsudG9cIjogXCJOYWFyXCIsXG4gIFwicG9wdXAucGhvbmUtYm9keVwiOiBcIlV3IGxhbmRjb2RlIHdvcmR0IGF1dG9tYXRpc2NoIGdlZGV0ZWN0ZWVyZCwgbWFhciBhbHMgdSBlZW4gdGVsZWZvb25udW1tZXIgdWl0IGVlbiBhbmRlciBsYW5kIGdlYnJ1aWt0LCBtb2V0IHUgaGFuZG1hdGlnIGRlIGp1aXN0ZSBsYW5kY29kZSBpbnZvZXJlbi5cIixcbiAgXCJwb3B1cC5waG9uZS1oZWFkZXJcIjogXCJUZWxlZm9vbm51bW1lciBlbiBsYW5kY29kZVwiLFxuICBcInNvY2lhbC5jb250aW51ZVwiOiBcIkRvb3JnYWFuIG1ldFwiLFxuICBcInNvY2lhbC5jb250aW51ZUN1c3RvbVwiOiBcIkRvb3JnYWFuIG1ldCB7e2FkYXB0ZXJ9fVwiLFxuICBcInNvY2lhbC5lbWFpbFwiOiBcIkUtbWFpbFwiLFxuICBcInNvY2lhbC5lbWFpbC1jb250aW51ZVwiOiBcIkRvb3JnYWFuIG1ldCBlLW1haWxcIixcbiAgXCJzb2NpYWwuZW1haWwtbmV3XCI6IFwibmFhbUB2b29yYmVlbGQuY29tXCIsXG4gIFwic29jaWFsLnBhc3N3b3JkbGVzcy1jdGFcIjogXCJEb29yZ2FhblwiLFxuICBcInNvY2lhbC5wYXNzd29yZGxlc3MtdGl0bGVcIjogXCJFLW1haWwgb2YgdGVsZWZvb25cIixcbiAgXCJzb2NpYWwucGhvbmVcIjogXCJUZWxlZm9vblwiLFxuICBcInNvY2lhbC5wb2xpY3lcIjogXCJXZSBzbGFhbiBnZWVuIGdlZ2V2ZW5zIG9wIGRpZSB2ZXJiYW5kIGhvdWRlbiBtZXQgdXcgc29jaWFsZSBsb2dpbnMuXCIsXG4gIFwic29jaWFsLnNtc1wiOiBcIk1vYmllbFwiLFxuICBcInNvY2lhbC5zbXMtY29udGludWVcIjogXCJEb29yZ2FhbiBtZXQgbW9iaWVsXCIsXG4gIFwic29jaWFsLnNtcy1pbnZhbGlkLW51bWJlclwiOiBcIk9uZ2VsZGlnIHRlbGVmb29ubnVtbWVyXCIsXG4gIFwic29jaWFsLnNtcy1wbGFjZWhvbGRlci10ZXh0XCI6IFwiQmlqdi46XCIsXG4gIFwic29jaWFsLnZpZXctbGVzc1wiOiBcIk1pbmRlciBvcHRpZXMgYmVraWprZW5cIixcbiAgXCJzb2NpYWwudmlldy1sZXNzLW5ld1wiOiBcIk1pbmRlciBiZWtpamtlblwiLFxuICBcInNvY2lhbC52aWV3LW1vcmVcIjogXCJNZWVyIG9wdGllcyBiZWtpamtlblwiLFxuICBcInNvY2lhbC52aWV3LW1vcmUtbmV3XCI6IFwiTWVlciBiZWtpamtlblwiLFxuICBcInBvc3QtbG9hZGluZy5jb25uZWN0ZWRcIjogXCJVIGJlbnQgdmVyYm9uZGVuIG1ldCB1dyBhY2NvdW50XCIsXG4gIFwicG9zdC1sb2FkaW5nLnNvbWV0aGluZy13cm9uZ1wiOiBcIkVyIGlzIGlldHMgZm91dCBnZWdhYW4hXCJcbn07XG52YXIgZHV0Y2ggPSB7XG4gIG1vZGFsOiBtb2RhbFxufTtcblxuZXhwb3J0IHsgZHV0Y2ggYXMgZGVmYXVsdCwgbW9kYWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWR1dGNoLTlhMWFlNWMyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIm1vZGFsIiwiZHV0Y2giLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ui/dist/dutch-9a1ae5c2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ui/dist/french-3d857bc5.js":
/*!***********************************************************!*\
  !*** ./node_modules/@web3auth/ui/dist/french-3d857bc5.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ french),\n/* harmony export */   modal: () => (/* binding */ modal)\n/* harmony export */ });\nvar modal = {\n    \"adapter-loader.message\": \"V\\xe9rifiez votre compte {{adapter}} pour continuer\",\n    \"adapter-loader.message1\": \"V\\xe9rifiez votre {{adapter}}\",\n    \"adapter-loader.message2\": \"compte pour continuer\",\n    \"errors-invalid-number-email\": \"Adresse e-mail ou num\\xe9ro de t\\xe9l\\xe9phone invalide\",\n    \"errors-required\": \"Champ obligatoire\",\n    \"external.back\": \"Retour\",\n    \"external.connect\": \"Se connecter avec un portefeuille\",\n    \"external.title\": \"Portefeuille externe\",\n    \"external.walletconnect-connect\": \"Se connecter\",\n    \"external.walletconnect-copy\": \"Cliquez sur le code QR pour le copier dans le presse-papiers\",\n    \"external.walletconnect-subtitle\": \"Scannez le code QR avec un portefeuille compatible WalletConnect\",\n    \"footer.message\": \"Connexion en autonomie par\",\n    \"footer.message-new\": \"Connexion en autonomie par Web3Auth\",\n    \"footer.policy\": \"Politique de confidentialit\\xe9\",\n    \"footer.terms\": \"Conditions d'utilisation\",\n    \"footer.terms-service\": \"Conditions d'utilisation\",\n    \"footer.version\": \"Version\",\n    \"header-subtitle\": \"S\\xe9lectionnez l'une des options suivantes pour continuer\",\n    \"header-subtitle-name\": \"Votre portefeuille {{appName}} en un clic\",\n    \"header-subtitle-new\": \"Votre portefeuille blockchain en un clic\",\n    \"header-title\": \"Se connecter\",\n    \"header-tooltip-desc\": \"Le portefeuille sert de compte pour stocker et g\\xe9rer vos actifs num\\xe9riques sur la blockchain.\",\n    \"header-tooltip-title\": \"Portefeuille\",\n    \"network.add-request\": \"Ce site demande d'ajouter un r\\xe9seau\",\n    \"network.cancel\": \"Annuler\",\n    \"network.from\": \"De\",\n    \"network.proceed\": \"Continuer\",\n    \"network.switch-request\": \"Ce site demande de changer de r\\xe9seau\",\n    \"network.to\": \"\\xc0\",\n    \"popup.phone-body\": \"Votre code pays sera d\\xe9tect\\xe9 automatiquement, mais si vous utilisez un num\\xe9ro de t\\xe9l\\xe9phone d'un autre pays, vous devrez saisir manuellement le bon code pays.\",\n    \"popup.phone-header\": \"Num\\xe9ro de t\\xe9l\\xe9phone et code pays\",\n    \"social.continue\": \"Continuer avec\",\n    \"social.continueCustom\": \"Continuer avec {{adapter}}\",\n    \"social.email\": \"Email\",\n    \"social.email-continue\": \"Continuer avec l'email\",\n    \"social.email-new\": \"nom@exemple.com\",\n    \"social.passwordless-cta\": \"Continuer\",\n    \"social.passwordless-title\": \"Email ou t\\xe9l\\xe9phone\",\n    \"social.phone\": \"T\\xe9l\\xe9phone\",\n    \"social.policy\": \"Nous ne stockons aucune donn\\xe9e li\\xe9e \\xe0 vos connexions sociales.\",\n    \"social.sms\": \"Mobile\",\n    \"social.sms-continue\": \"Continuer avec le mobile\",\n    \"social.sms-invalid-number\": \"Num\\xe9ro de t\\xe9l\\xe9phone invalide\",\n    \"social.sms-placeholder-text\": \"Par exemple :\",\n    \"social.view-less\": \"Voir moins d'options\",\n    \"social.view-less-new\": \"Voir moins\",\n    \"social.view-more\": \"Voir plus d'options\",\n    \"social.view-more-new\": \"Voir plus\",\n    \"post-loading.connected\": \"Vous \\xeates connect\\xe9 avec votre compte\",\n    \"post-loading.something-wrong\": \"Quelque chose s'est mal pass\\xe9!\"\n};\nvar french = {\n    modal: modal\n};\n //# sourceMappingURL=french-3d857bc5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3VpL2Rpc3QvZnJlbmNoLTNkODU3YmM1LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsUUFBUTtJQUNWLDBCQUEwQjtJQUMxQiwyQkFBMkI7SUFDM0IsMkJBQTJCO0lBQzNCLCtCQUErQjtJQUMvQixtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQixrQkFBa0I7SUFDbEIsa0NBQWtDO0lBQ2xDLCtCQUErQjtJQUMvQixtQ0FBbUM7SUFDbkMsa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0QixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLHdCQUF3QjtJQUN4QixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLHdCQUF3QjtJQUN4Qix1QkFBdUI7SUFDdkIsZ0JBQWdCO0lBQ2hCLHVCQUF1QjtJQUN2Qix3QkFBd0I7SUFDeEIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLDBCQUEwQjtJQUMxQixjQUFjO0lBQ2Qsb0JBQW9CO0lBQ3BCLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIseUJBQXlCO0lBQ3pCLGdCQUFnQjtJQUNoQix5QkFBeUI7SUFDekIsb0JBQW9CO0lBQ3BCLDJCQUEyQjtJQUMzQiw2QkFBNkI7SUFDN0IsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QsdUJBQXVCO0lBQ3ZCLDZCQUE2QjtJQUM3QiwrQkFBK0I7SUFDL0Isb0JBQW9CO0lBQ3BCLHdCQUF3QjtJQUN4QixvQkFBb0I7SUFDcEIsd0JBQXdCO0lBQ3hCLDBCQUEwQjtJQUMxQixnQ0FBZ0M7QUFDbEM7QUFDQSxJQUFJQyxTQUFTO0lBQ1hELE9BQU9BO0FBQ1Q7QUFFb0MsQ0FDcEMsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvdWkvZGlzdC9mcmVuY2gtM2Q4NTdiYzUuanM/ODYyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbW9kYWwgPSB7XG4gIFwiYWRhcHRlci1sb2FkZXIubWVzc2FnZVwiOiBcIlbDqXJpZmlleiB2b3RyZSBjb21wdGUge3thZGFwdGVyfX0gcG91ciBjb250aW51ZXJcIixcbiAgXCJhZGFwdGVyLWxvYWRlci5tZXNzYWdlMVwiOiBcIlbDqXJpZmlleiB2b3RyZSB7e2FkYXB0ZXJ9fVwiLFxuICBcImFkYXB0ZXItbG9hZGVyLm1lc3NhZ2UyXCI6IFwiY29tcHRlIHBvdXIgY29udGludWVyXCIsXG4gIFwiZXJyb3JzLWludmFsaWQtbnVtYmVyLWVtYWlsXCI6IFwiQWRyZXNzZSBlLW1haWwgb3UgbnVtw6lybyBkZSB0w6lsw6lwaG9uZSBpbnZhbGlkZVwiLFxuICBcImVycm9ycy1yZXF1aXJlZFwiOiBcIkNoYW1wIG9ibGlnYXRvaXJlXCIsXG4gIFwiZXh0ZXJuYWwuYmFja1wiOiBcIlJldG91clwiLFxuICBcImV4dGVybmFsLmNvbm5lY3RcIjogXCJTZSBjb25uZWN0ZXIgYXZlYyB1biBwb3J0ZWZldWlsbGVcIixcbiAgXCJleHRlcm5hbC50aXRsZVwiOiBcIlBvcnRlZmV1aWxsZSBleHRlcm5lXCIsXG4gIFwiZXh0ZXJuYWwud2FsbGV0Y29ubmVjdC1jb25uZWN0XCI6IFwiU2UgY29ubmVjdGVyXCIsXG4gIFwiZXh0ZXJuYWwud2FsbGV0Y29ubmVjdC1jb3B5XCI6IFwiQ2xpcXVleiBzdXIgbGUgY29kZSBRUiBwb3VyIGxlIGNvcGllciBkYW5zIGxlIHByZXNzZS1wYXBpZXJzXCIsXG4gIFwiZXh0ZXJuYWwud2FsbGV0Y29ubmVjdC1zdWJ0aXRsZVwiOiBcIlNjYW5uZXogbGUgY29kZSBRUiBhdmVjIHVuIHBvcnRlZmV1aWxsZSBjb21wYXRpYmxlIFdhbGxldENvbm5lY3RcIixcbiAgXCJmb290ZXIubWVzc2FnZVwiOiBcIkNvbm5leGlvbiBlbiBhdXRvbm9taWUgcGFyXCIsXG4gIFwiZm9vdGVyLm1lc3NhZ2UtbmV3XCI6IFwiQ29ubmV4aW9uIGVuIGF1dG9ub21pZSBwYXIgV2ViM0F1dGhcIixcbiAgXCJmb290ZXIucG9saWN5XCI6IFwiUG9saXRpcXVlIGRlIGNvbmZpZGVudGlhbGl0w6lcIixcbiAgXCJmb290ZXIudGVybXNcIjogXCJDb25kaXRpb25zIGQndXRpbGlzYXRpb25cIixcbiAgXCJmb290ZXIudGVybXMtc2VydmljZVwiOiBcIkNvbmRpdGlvbnMgZCd1dGlsaXNhdGlvblwiLFxuICBcImZvb3Rlci52ZXJzaW9uXCI6IFwiVmVyc2lvblwiLFxuICBcImhlYWRlci1zdWJ0aXRsZVwiOiBcIlPDqWxlY3Rpb25uZXogbCd1bmUgZGVzIG9wdGlvbnMgc3VpdmFudGVzIHBvdXIgY29udGludWVyXCIsXG4gIFwiaGVhZGVyLXN1YnRpdGxlLW5hbWVcIjogXCJWb3RyZSBwb3J0ZWZldWlsbGUge3thcHBOYW1lfX0gZW4gdW4gY2xpY1wiLFxuICBcImhlYWRlci1zdWJ0aXRsZS1uZXdcIjogXCJWb3RyZSBwb3J0ZWZldWlsbGUgYmxvY2tjaGFpbiBlbiB1biBjbGljXCIsXG4gIFwiaGVhZGVyLXRpdGxlXCI6IFwiU2UgY29ubmVjdGVyXCIsXG4gIFwiaGVhZGVyLXRvb2x0aXAtZGVzY1wiOiBcIkxlIHBvcnRlZmV1aWxsZSBzZXJ0IGRlIGNvbXB0ZSBwb3VyIHN0b2NrZXIgZXQgZ8OpcmVyIHZvcyBhY3RpZnMgbnVtw6lyaXF1ZXMgc3VyIGxhIGJsb2NrY2hhaW4uXCIsXG4gIFwiaGVhZGVyLXRvb2x0aXAtdGl0bGVcIjogXCJQb3J0ZWZldWlsbGVcIixcbiAgXCJuZXR3b3JrLmFkZC1yZXF1ZXN0XCI6IFwiQ2Ugc2l0ZSBkZW1hbmRlIGQnYWpvdXRlciB1biByw6lzZWF1XCIsXG4gIFwibmV0d29yay5jYW5jZWxcIjogXCJBbm51bGVyXCIsXG4gIFwibmV0d29yay5mcm9tXCI6IFwiRGVcIixcbiAgXCJuZXR3b3JrLnByb2NlZWRcIjogXCJDb250aW51ZXJcIixcbiAgXCJuZXR3b3JrLnN3aXRjaC1yZXF1ZXN0XCI6IFwiQ2Ugc2l0ZSBkZW1hbmRlIGRlIGNoYW5nZXIgZGUgcsOpc2VhdVwiLFxuICBcIm5ldHdvcmsudG9cIjogXCLDgFwiLFxuICBcInBvcHVwLnBob25lLWJvZHlcIjogXCJWb3RyZSBjb2RlIHBheXMgc2VyYSBkw6l0ZWN0w6kgYXV0b21hdGlxdWVtZW50LCBtYWlzIHNpIHZvdXMgdXRpbGlzZXogdW4gbnVtw6lybyBkZSB0w6lsw6lwaG9uZSBkJ3VuIGF1dHJlIHBheXMsIHZvdXMgZGV2cmV6IHNhaXNpciBtYW51ZWxsZW1lbnQgbGUgYm9uIGNvZGUgcGF5cy5cIixcbiAgXCJwb3B1cC5waG9uZS1oZWFkZXJcIjogXCJOdW3DqXJvIGRlIHTDqWzDqXBob25lIGV0IGNvZGUgcGF5c1wiLFxuICBcInNvY2lhbC5jb250aW51ZVwiOiBcIkNvbnRpbnVlciBhdmVjXCIsXG4gIFwic29jaWFsLmNvbnRpbnVlQ3VzdG9tXCI6IFwiQ29udGludWVyIGF2ZWMge3thZGFwdGVyfX1cIixcbiAgXCJzb2NpYWwuZW1haWxcIjogXCJFbWFpbFwiLFxuICBcInNvY2lhbC5lbWFpbC1jb250aW51ZVwiOiBcIkNvbnRpbnVlciBhdmVjIGwnZW1haWxcIixcbiAgXCJzb2NpYWwuZW1haWwtbmV3XCI6IFwibm9tQGV4ZW1wbGUuY29tXCIsXG4gIFwic29jaWFsLnBhc3N3b3JkbGVzcy1jdGFcIjogXCJDb250aW51ZXJcIixcbiAgXCJzb2NpYWwucGFzc3dvcmRsZXNzLXRpdGxlXCI6IFwiRW1haWwgb3UgdMOpbMOpcGhvbmVcIixcbiAgXCJzb2NpYWwucGhvbmVcIjogXCJUw6lsw6lwaG9uZVwiLFxuICBcInNvY2lhbC5wb2xpY3lcIjogXCJOb3VzIG5lIHN0b2Nrb25zIGF1Y3VuZSBkb25uw6llIGxpw6llIMOgIHZvcyBjb25uZXhpb25zIHNvY2lhbGVzLlwiLFxuICBcInNvY2lhbC5zbXNcIjogXCJNb2JpbGVcIixcbiAgXCJzb2NpYWwuc21zLWNvbnRpbnVlXCI6IFwiQ29udGludWVyIGF2ZWMgbGUgbW9iaWxlXCIsXG4gIFwic29jaWFsLnNtcy1pbnZhbGlkLW51bWJlclwiOiBcIk51bcOpcm8gZGUgdMOpbMOpcGhvbmUgaW52YWxpZGVcIixcbiAgXCJzb2NpYWwuc21zLXBsYWNlaG9sZGVyLXRleHRcIjogXCJQYXIgZXhlbXBsZSA6XCIsXG4gIFwic29jaWFsLnZpZXctbGVzc1wiOiBcIlZvaXIgbW9pbnMgZCdvcHRpb25zXCIsXG4gIFwic29jaWFsLnZpZXctbGVzcy1uZXdcIjogXCJWb2lyIG1vaW5zXCIsXG4gIFwic29jaWFsLnZpZXctbW9yZVwiOiBcIlZvaXIgcGx1cyBkJ29wdGlvbnNcIixcbiAgXCJzb2NpYWwudmlldy1tb3JlLW5ld1wiOiBcIlZvaXIgcGx1c1wiLFxuICBcInBvc3QtbG9hZGluZy5jb25uZWN0ZWRcIjogXCJWb3VzIMOqdGVzIGNvbm5lY3TDqSBhdmVjIHZvdHJlIGNvbXB0ZVwiLFxuICBcInBvc3QtbG9hZGluZy5zb21ldGhpbmctd3JvbmdcIjogXCJRdWVscXVlIGNob3NlIHMnZXN0IG1hbCBwYXNzw6khXCJcbn07XG52YXIgZnJlbmNoID0ge1xuICBtb2RhbDogbW9kYWxcbn07XG5cbmV4cG9ydCB7IGZyZW5jaCBhcyBkZWZhdWx0LCBtb2RhbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJlbmNoLTNkODU3YmM1LmpzLm1hcFxuIl0sIm5hbWVzIjpbIm1vZGFsIiwiZnJlbmNoIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ui/dist/french-3d857bc5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ui/dist/german-4ae2ee33.js":
/*!***********************************************************!*\
  !*** ./node_modules/@web3auth/ui/dist/german-4ae2ee33.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ german),\n/* harmony export */   modal: () => (/* binding */ modal)\n/* harmony export */ });\nvar modal = {\n    \"adapter-loader.message\": \"Best\\xe4tigen Sie Ihr {{adapter}}-Konto, um fortzufahren\",\n    \"adapter-loader.message1\": \"Best\\xe4tigen Sie Ihr {{adapter}}\",\n    \"adapter-loader.message2\": \"Konto fortzusetzen\",\n    \"errors-invalid-number-email\": \"Ung\\xfcltige E-Mail-Adresse oder Telefonnummer\",\n    \"errors-required\": \"Erforderlich\",\n    \"external.back\": \"Zur\\xfcck\",\n    \"external.connect\": \"Mit Wallet verbinden\",\n    \"external.title\": \"Externe Geldb\\xf6rse\",\n    \"external.walletconnect-connect\": \"Verbinden\",\n    \"external.walletconnect-copy\": \"Klicken Sie auf den QR-Code, um ihn in die Zwischenablage zu kopieren\",\n    \"external.walletconnect-subtitle\": \"Scannen Sie den QR-Code mit einer WalletConnect-kompatiblen Geldb\\xf6rse\",\n    \"footer.message\": \"Selbstverwahrungs-Login durch\",\n    \"footer.message-new\": \"Selbstverwahrungs-Login durch Web3Auth\",\n    \"footer.policy\": \"Datenschutzrichtlinie\",\n    \"footer.terms\": \"Nutzungsbedingungen\",\n    \"footer.terms-service\": \"Nutzungsbedingungen\",\n    \"footer.version\": \"Versión\",\n    \"header-subtitle\": \"W\\xe4hlen Sie eine der folgenden Optionen aus, um fortzufahren\",\n    \"header-subtitle-name\": \"Ihre {{appName}}-Brieftasche mit einem Klick\",\n    \"header-subtitle-new\": \"Ihre Blockchain-Brieftasche mit einem Klick\",\n    \"header-title\": \"Einloggen\",\n    \"header-tooltip-desc\": \"Die Brieftasche dient als Konto zum Speichern und Verwalten Ihrer digitalen Assets auf der Blockchain.\",\n    \"header-tooltip-title\": \"Brieftasche\",\n    \"network.add-request\": \"Diese Website fordert das Hinzuf\\xfcgen eines Netzwerks an\",\n    \"network.cancel\": \"Abbrechen\",\n    \"network.from\": \"Von\",\n    \"network.proceed\": \"Fortfahren\",\n    \"network.switch-request\": \"Diese Website fordert einen Netzwerkwechsel an\",\n    \"network.to\": \"Zu\",\n    \"popup.phone-body\": \"Ihr L\\xe4ndercode wird automatisch erkannt, aber wenn Sie eine Telefonnummer aus einem anderen Land verwenden, m\\xfcssen Sie den richtigen L\\xe4ndercode manuell eingeben.\",\n    \"popup.phone-header\": \"Telefonnummer und L\\xe4ndercode\",\n    \"social.continue\": \"Weitermachen mit\",\n    \"social.continueCustom\": \"Fahren Sie mit {{adapter}} fort\",\n    \"social.email\": \"E-Mail\",\n    \"social.email-continue\": \"Weitermachen mit E-Mail\",\n    \"social.email-new\": \"name@example.com\",\n    \"social.passwordless-cta\": \"Weitermachen\",\n    \"social.passwordless-title\": \"E-Mail oder Telefon\",\n    \"social.phone\": \"Telefon\",\n    \"social.policy\": \"Wir speichern keine Daten im Zusammenhang mit Ihren Social Logins.\",\n    \"social.sms\": \"Mobiltelefon\",\n    \"social.sms-continue\": \"Mit Mobilger\\xe4t fortfahren\",\n    \"social.sms-invalid-number\": \"Ung\\xfcltige Telefonnummer\",\n    \"social.sms-placeholder-text\": \"Z.B.:\",\n    \"social.view-less\": \"Weniger Optionen anzeigen\",\n    \"social.view-less-new\": \"Weniger anzeigen\",\n    \"social.view-more\": \"Weitere Optionen anzeigen\",\n    \"social.view-more-new\": \"Mehr anzeigen\",\n    \"post-loading.connected\": \"Sie sind mit Ihrem Konto verbunden\",\n    \"post-loading.something-wrong\": \"Etwas ist schief gelaufen!\"\n};\nvar german = {\n    modal: modal\n};\n //# sourceMappingURL=german-4ae2ee33.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3VpL2Rpc3QvZ2VybWFuLTRhZTJlZTMzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsUUFBUTtJQUNWLDBCQUEwQjtJQUMxQiwyQkFBMkI7SUFDM0IsMkJBQTJCO0lBQzNCLCtCQUErQjtJQUMvQixtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQixrQkFBa0I7SUFDbEIsa0NBQWtDO0lBQ2xDLCtCQUErQjtJQUMvQixtQ0FBbUM7SUFDbkMsa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0QixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLHdCQUF3QjtJQUN4QixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLHdCQUF3QjtJQUN4Qix1QkFBdUI7SUFDdkIsZ0JBQWdCO0lBQ2hCLHVCQUF1QjtJQUN2Qix3QkFBd0I7SUFDeEIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLDBCQUEwQjtJQUMxQixjQUFjO0lBQ2Qsb0JBQW9CO0lBQ3BCLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIseUJBQXlCO0lBQ3pCLGdCQUFnQjtJQUNoQix5QkFBeUI7SUFDekIsb0JBQW9CO0lBQ3BCLDJCQUEyQjtJQUMzQiw2QkFBNkI7SUFDN0IsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QsdUJBQXVCO0lBQ3ZCLDZCQUE2QjtJQUM3QiwrQkFBK0I7SUFDL0Isb0JBQW9CO0lBQ3BCLHdCQUF3QjtJQUN4QixvQkFBb0I7SUFDcEIsd0JBQXdCO0lBQ3hCLDBCQUEwQjtJQUMxQixnQ0FBZ0M7QUFDbEM7QUFDQSxJQUFJQyxTQUFTO0lBQ1hELE9BQU9BO0FBQ1Q7QUFFb0MsQ0FDcEMsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvdWkvZGlzdC9nZXJtYW4tNGFlMmVlMzMuanM/ZjRmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbW9kYWwgPSB7XG4gIFwiYWRhcHRlci1sb2FkZXIubWVzc2FnZVwiOiBcIkJlc3TDpHRpZ2VuIFNpZSBJaHIge3thZGFwdGVyfX0tS29udG8sIHVtIGZvcnR6dWZhaHJlblwiLFxuICBcImFkYXB0ZXItbG9hZGVyLm1lc3NhZ2UxXCI6IFwiQmVzdMOkdGlnZW4gU2llIElociB7e2FkYXB0ZXJ9fVwiLFxuICBcImFkYXB0ZXItbG9hZGVyLm1lc3NhZ2UyXCI6IFwiS29udG8gZm9ydHp1c2V0emVuXCIsXG4gIFwiZXJyb3JzLWludmFsaWQtbnVtYmVyLWVtYWlsXCI6IFwiVW5nw7xsdGlnZSBFLU1haWwtQWRyZXNzZSBvZGVyIFRlbGVmb25udW1tZXJcIixcbiAgXCJlcnJvcnMtcmVxdWlyZWRcIjogXCJFcmZvcmRlcmxpY2hcIixcbiAgXCJleHRlcm5hbC5iYWNrXCI6IFwiWnVyw7xja1wiLFxuICBcImV4dGVybmFsLmNvbm5lY3RcIjogXCJNaXQgV2FsbGV0IHZlcmJpbmRlblwiLFxuICBcImV4dGVybmFsLnRpdGxlXCI6IFwiRXh0ZXJuZSBHZWxkYsO2cnNlXCIsXG4gIFwiZXh0ZXJuYWwud2FsbGV0Y29ubmVjdC1jb25uZWN0XCI6IFwiVmVyYmluZGVuXCIsXG4gIFwiZXh0ZXJuYWwud2FsbGV0Y29ubmVjdC1jb3B5XCI6IFwiS2xpY2tlbiBTaWUgYXVmIGRlbiBRUi1Db2RlLCB1bSBpaG4gaW4gZGllIFp3aXNjaGVuYWJsYWdlIHp1IGtvcGllcmVuXCIsXG4gIFwiZXh0ZXJuYWwud2FsbGV0Y29ubmVjdC1zdWJ0aXRsZVwiOiBcIlNjYW5uZW4gU2llIGRlbiBRUi1Db2RlIG1pdCBlaW5lciBXYWxsZXRDb25uZWN0LWtvbXBhdGlibGVuIEdlbGRiw7Zyc2VcIixcbiAgXCJmb290ZXIubWVzc2FnZVwiOiBcIlNlbGJzdHZlcndhaHJ1bmdzLUxvZ2luIGR1cmNoXCIsXG4gIFwiZm9vdGVyLm1lc3NhZ2UtbmV3XCI6IFwiU2VsYnN0dmVyd2FocnVuZ3MtTG9naW4gZHVyY2ggV2ViM0F1dGhcIixcbiAgXCJmb290ZXIucG9saWN5XCI6IFwiRGF0ZW5zY2h1dHpyaWNodGxpbmllXCIsXG4gIFwiZm9vdGVyLnRlcm1zXCI6IFwiTnV0enVuZ3NiZWRpbmd1bmdlblwiLFxuICBcImZvb3Rlci50ZXJtcy1zZXJ2aWNlXCI6IFwiTnV0enVuZ3NiZWRpbmd1bmdlblwiLFxuICBcImZvb3Rlci52ZXJzaW9uXCI6IFwiVmVyc2lvzIFuXCIsXG4gIFwiaGVhZGVyLXN1YnRpdGxlXCI6IFwiV8OkaGxlbiBTaWUgZWluZSBkZXIgZm9sZ2VuZGVuIE9wdGlvbmVuIGF1cywgdW0gZm9ydHp1ZmFocmVuXCIsXG4gIFwiaGVhZGVyLXN1YnRpdGxlLW5hbWVcIjogXCJJaHJlIHt7YXBwTmFtZX19LUJyaWVmdGFzY2hlIG1pdCBlaW5lbSBLbGlja1wiLFxuICBcImhlYWRlci1zdWJ0aXRsZS1uZXdcIjogXCJJaHJlIEJsb2NrY2hhaW4tQnJpZWZ0YXNjaGUgbWl0IGVpbmVtIEtsaWNrXCIsXG4gIFwiaGVhZGVyLXRpdGxlXCI6IFwiRWlubG9nZ2VuXCIsXG4gIFwiaGVhZGVyLXRvb2x0aXAtZGVzY1wiOiBcIkRpZSBCcmllZnRhc2NoZSBkaWVudCBhbHMgS29udG8genVtIFNwZWljaGVybiB1bmQgVmVyd2FsdGVuIElocmVyIGRpZ2l0YWxlbiBBc3NldHMgYXVmIGRlciBCbG9ja2NoYWluLlwiLFxuICBcImhlYWRlci10b29sdGlwLXRpdGxlXCI6IFwiQnJpZWZ0YXNjaGVcIixcbiAgXCJuZXR3b3JrLmFkZC1yZXF1ZXN0XCI6IFwiRGllc2UgV2Vic2l0ZSBmb3JkZXJ0IGRhcyBIaW56dWbDvGdlbiBlaW5lcyBOZXR6d2Vya3MgYW5cIixcbiAgXCJuZXR3b3JrLmNhbmNlbFwiOiBcIkFiYnJlY2hlblwiLFxuICBcIm5ldHdvcmsuZnJvbVwiOiBcIlZvblwiLFxuICBcIm5ldHdvcmsucHJvY2VlZFwiOiBcIkZvcnRmYWhyZW5cIixcbiAgXCJuZXR3b3JrLnN3aXRjaC1yZXF1ZXN0XCI6IFwiRGllc2UgV2Vic2l0ZSBmb3JkZXJ0IGVpbmVuIE5ldHp3ZXJrd2VjaHNlbCBhblwiLFxuICBcIm5ldHdvcmsudG9cIjogXCJadVwiLFxuICBcInBvcHVwLnBob25lLWJvZHlcIjogXCJJaHIgTMOkbmRlcmNvZGUgd2lyZCBhdXRvbWF0aXNjaCBlcmthbm50LCBhYmVyIHdlbm4gU2llIGVpbmUgVGVsZWZvbm51bW1lciBhdXMgZWluZW0gYW5kZXJlbiBMYW5kIHZlcndlbmRlbiwgbcO8c3NlbiBTaWUgZGVuIHJpY2h0aWdlbiBMw6RuZGVyY29kZSBtYW51ZWxsIGVpbmdlYmVuLlwiLFxuICBcInBvcHVwLnBob25lLWhlYWRlclwiOiBcIlRlbGVmb25udW1tZXIgdW5kIEzDpG5kZXJjb2RlXCIsXG4gIFwic29jaWFsLmNvbnRpbnVlXCI6IFwiV2VpdGVybWFjaGVuIG1pdFwiLFxuICBcInNvY2lhbC5jb250aW51ZUN1c3RvbVwiOiBcIkZhaHJlbiBTaWUgbWl0IHt7YWRhcHRlcn19IGZvcnRcIixcbiAgXCJzb2NpYWwuZW1haWxcIjogXCJFLU1haWxcIixcbiAgXCJzb2NpYWwuZW1haWwtY29udGludWVcIjogXCJXZWl0ZXJtYWNoZW4gbWl0IEUtTWFpbFwiLFxuICBcInNvY2lhbC5lbWFpbC1uZXdcIjogXCJuYW1lQGV4YW1wbGUuY29tXCIsXG4gIFwic29jaWFsLnBhc3N3b3JkbGVzcy1jdGFcIjogXCJXZWl0ZXJtYWNoZW5cIixcbiAgXCJzb2NpYWwucGFzc3dvcmRsZXNzLXRpdGxlXCI6IFwiRS1NYWlsIG9kZXIgVGVsZWZvblwiLFxuICBcInNvY2lhbC5waG9uZVwiOiBcIlRlbGVmb25cIixcbiAgXCJzb2NpYWwucG9saWN5XCI6IFwiV2lyIHNwZWljaGVybiBrZWluZSBEYXRlbiBpbSBadXNhbW1lbmhhbmcgbWl0IElocmVuIFNvY2lhbCBMb2dpbnMuXCIsXG4gIFwic29jaWFsLnNtc1wiOiBcIk1vYmlsdGVsZWZvblwiLFxuICBcInNvY2lhbC5zbXMtY29udGludWVcIjogXCJNaXQgTW9iaWxnZXLDpHQgZm9ydGZhaHJlblwiLFxuICBcInNvY2lhbC5zbXMtaW52YWxpZC1udW1iZXJcIjogXCJVbmfDvGx0aWdlIFRlbGVmb25udW1tZXJcIixcbiAgXCJzb2NpYWwuc21zLXBsYWNlaG9sZGVyLXRleHRcIjogXCJaLkIuOlwiLFxuICBcInNvY2lhbC52aWV3LWxlc3NcIjogXCJXZW5pZ2VyIE9wdGlvbmVuIGFuemVpZ2VuXCIsXG4gIFwic29jaWFsLnZpZXctbGVzcy1uZXdcIjogXCJXZW5pZ2VyIGFuemVpZ2VuXCIsXG4gIFwic29jaWFsLnZpZXctbW9yZVwiOiBcIldlaXRlcmUgT3B0aW9uZW4gYW56ZWlnZW5cIixcbiAgXCJzb2NpYWwudmlldy1tb3JlLW5ld1wiOiBcIk1laHIgYW56ZWlnZW5cIixcbiAgXCJwb3N0LWxvYWRpbmcuY29ubmVjdGVkXCI6IFwiU2llIHNpbmQgbWl0IElocmVtIEtvbnRvIHZlcmJ1bmRlblwiLFxuICBcInBvc3QtbG9hZGluZy5zb21ldGhpbmctd3JvbmdcIjogXCJFdHdhcyBpc3Qgc2NoaWVmIGdlbGF1ZmVuIVwiXG59O1xudmFyIGdlcm1hbiA9IHtcbiAgbW9kYWw6IG1vZGFsXG59O1xuXG5leHBvcnQgeyBnZXJtYW4gYXMgZGVmYXVsdCwgbW9kYWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlcm1hbi00YWUyZWUzMy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJtb2RhbCIsImdlcm1hbiIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ui/dist/german-4ae2ee33.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ui/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@web3auth/ui/dist/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_LOGO_DARK: () => (/* binding */ DEFAULT_LOGO_DARK),\n/* harmony export */   DEFAULT_LOGO_LIGHT: () => (/* binding */ DEFAULT_LOGO_LIGHT),\n/* harmony export */   LOGIN_MODAL_EVENTS: () => (/* binding */ LOGIN_MODAL_EVENTS),\n/* harmony export */   LoginModal: () => (/* binding */ LoginModal),\n/* harmony export */   MODAL_STATUS: () => (/* binding */ MODAL_STATUS),\n/* harmony export */   NetworkSwitch: () => (/* binding */ NetworkSwitch),\n/* harmony export */   OPENLOGIN_PROVIDERS: () => (/* binding */ OPENLOGIN_PROVIDERS),\n/* harmony export */   OPENLOGIN_PROVIDERS_NAMES: () => (/* binding */ OPENLOGIN_PROVIDERS_NAMES),\n/* harmony export */   WALLET_CONNECT_LOGO: () => (/* binding */ WALLET_CONNECT_LOGO),\n/* harmony export */   capitalizeFirstLetter: () => (/* binding */ capitalizeFirstLetter),\n/* harmony export */   \"default\": () => (/* binding */ LoginModal),\n/* harmony export */   getAdapterSocialLogins: () => (/* binding */ getAdapterSocialLogins),\n/* harmony export */   getNetworkIconId: () => (/* binding */ getNetworkIconId),\n/* harmony export */   getUserCountry: () => (/* binding */ getUserCountry),\n/* harmony export */   getUserLanguage: () => (/* binding */ getUserLanguage),\n/* harmony export */   languageMap: () => (/* binding */ languageMap),\n/* harmony export */   passwordlessBackendUrl: () => (/* binding */ passwordlessBackendUrl),\n/* harmony export */   validateImageUrl: () => (/* binding */ validateImageUrl),\n/* harmony export */   validatePhoneNumber: () => (/* binding */ validatePhoneNumber)\n/* harmony export */ });\n/* harmony import */ var _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @toruslabs/openlogin-utils */ \"(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var react_dom_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-dom/client */ \"(ssr)/./node_modules/next/dist/compiled/react-dom/client.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash.clonedeep */ \"(ssr)/./node_modules/lodash.clonedeep/index.js\");\n/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash.merge */ \"(ssr)/./node_modules/lodash.merge/index.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-i18next */ \"(ssr)/./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! i18next */ \"(ssr)/./node_modules/i18next/dist/esm/i18next.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/bowser/src/bowser.js\");\n/* harmony import */ var copy_to_clipboard__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! copy-to-clipboard */ \"(ssr)/./node_modules/copy-to-clipboard/index.js\");\n/* harmony import */ var copy_to_clipboard__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(copy_to_clipboard__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var react_qrcode_logo__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! react-qrcode-logo */ \"(ssr)/./node_modules/react-qrcode-logo/dist/index.js\");\n/* harmony import */ var react_qrcode_logo__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(react_qrcode_logo__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_16__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nconst OPENLOGIN_PROVIDERS = Object.values(_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER).filter((x)=>x !== _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.WEBAUTHN && x !== _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.JWT);\nconst OPENLOGIN_PROVIDERS_NAMES = OPENLOGIN_PROVIDERS.reduce((acc, x)=>{\n    if (x === \"email_passwordless\") acc[x] = \"Email\";\n    else if (x === \"sms_passwordless\") acc[x] = \"Mobile\";\n    else acc[x] = capitalizeFirstLetter(x);\n    return acc;\n}, {});\n// TODO: change whitelabel settings and pass ui whitelabel to openlogin.\n// capture whitelabel only once\nconst LOGIN_MODAL_EVENTS = {\n    INIT_EXTERNAL_WALLETS: \"INIT_EXTERNAL_WALLETS\",\n    LOGIN: \"LOGIN\",\n    DISCONNECT: \"DISCONNECT\",\n    MODAL_VISIBILITY: \"MODAL_VISIBILITY\"\n};\nconst MODAL_STATUS = {\n    INITIALIZED: \"initialized\",\n    CONNECTED: \"connected\",\n    CONNECTING: \"connecting\",\n    ERRORED: \"errored\"\n};\nconst DEFAULT_LOGO_LIGHT = \"https://images.web3auth.io/web3auth-logo-w-light.svg\";\nconst DEFAULT_LOGO_DARK = \"https://images.web3auth.io/web3auth-logo-w.svg\";\nconst WALLET_CONNECT_LOGO = \"https://images.web3auth.io/login-wallet-connect.svg\";\nfunction styleInject(css, ref) {\n    if (ref === void 0) ref = {};\n    var insertAt = ref.insertAt;\n    if (!css || typeof document === \"undefined\") {\n        return;\n    }\n    var head = document.head || document.getElementsByTagName(\"head\")[0];\n    var style = document.createElement(\"style\");\n    style.type = \"text/css\";\n    if (insertAt === \"top\") {\n        if (head.firstChild) {\n            head.insertBefore(style, head.firstChild);\n        } else {\n            head.appendChild(style);\n        }\n    } else {\n        head.appendChild(style);\n    }\n    if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n    } else {\n        style.appendChild(document.createTextNode(css));\n    }\n}\nvar css_248z$1 = '/*! tailwindcss v3.3.5 | MIT License | https://tailwindcss.com*/.w3a-parent-container *,.w3a-parent-container :after,.w3a-parent-container :before{border:0 solid #e5e7eb;box-sizing:border-box}.w3a-parent-container :after,.w3a-parent-container :before{--tw-content:\"\"}.w3a-parent-container html{-webkit-text-size-adjust:100%;font-feature-settings:normal;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-variation-settings:normal;line-height:1.5;-moz-tab-size:4;tab-size:4}.w3a-parent-container body{line-height:inherit;margin:0}.w3a-parent-container hr{border-top-width:1px;color:inherit;height:0}.w3a-parent-container abbr:where([title]){text-decoration:underline dotted}.w3a-parent-container h1,.w3a-parent-container h2,.w3a-parent-container h3,.w3a-parent-container h4,.w3a-parent-container h5,.w3a-parent-container h6{font-size:inherit;font-weight:inherit}.w3a-parent-container a{color:inherit;text-decoration:inherit}.w3a-parent-container b,.w3a-parent-container strong{font-weight:bolder}.w3a-parent-container code,.w3a-parent-container kbd,.w3a-parent-container pre,.w3a-parent-container samp{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}.w3a-parent-container small{font-size:80%}.w3a-parent-container sub,.w3a-parent-container sup{font-size:75%;line-height:0;position:relative;vertical-align:initial}.w3a-parent-container sub{bottom:-.25em}.w3a-parent-container sup{top:-.5em}.w3a-parent-container table{border-collapse:collapse;border-color:inherit;text-indent:0}.w3a-parent-container button,.w3a-parent-container input,.w3a-parent-container optgroup,.w3a-parent-container select,.w3a-parent-container textarea{font-feature-settings:inherit;color:inherit;font-family:inherit;font-size:100%;font-variation-settings:inherit;font-weight:inherit;line-height:inherit;margin:0;padding:0}.w3a-parent-container button,.w3a-parent-container select{text-transform:none}.w3a-parent-container [type=button],.w3a-parent-container [type=reset],.w3a-parent-container [type=submit],.w3a-parent-container button{-webkit-appearance:button;background-color:initial;background-image:none}.w3a-parent-container :-moz-focusring{outline:auto}.w3a-parent-container :-moz-ui-invalid{box-shadow:none}.w3a-parent-container progress{vertical-align:initial}.w3a-parent-container ::-webkit-inner-spin-button,.w3a-parent-container ::-webkit-outer-spin-button{height:auto}.w3a-parent-container [type=search]{-webkit-appearance:textfield;outline-offset:-2px}.w3a-parent-container ::-webkit-search-decoration{-webkit-appearance:none}.w3a-parent-container ::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.w3a-parent-container summary{display:list-item}.w3a-parent-container blockquote,.w3a-parent-container dd,.w3a-parent-container dl,.w3a-parent-container figure,.w3a-parent-container h1,.w3a-parent-container h2,.w3a-parent-container h3,.w3a-parent-container h4,.w3a-parent-container h5,.w3a-parent-container h6,.w3a-parent-container hr,.w3a-parent-container p,.w3a-parent-container pre{margin:0}.w3a-parent-container fieldset{margin:0;padding:0}.w3a-parent-container legend{padding:0}.w3a-parent-container menu,.w3a-parent-container ol,.w3a-parent-container ul{list-style:none;margin:0;padding:0}.w3a-parent-container dialog{padding:0}.w3a-parent-container textarea{resize:vertical}.w3a-parent-container input::placeholder,.w3a-parent-container textarea::placeholder{color:#9ca3af;opacity:1}.w3a-parent-container [role=button],.w3a-parent-container button{cursor:pointer}.w3a-parent-container :disabled{cursor:default}.w3a-parent-container audio,.w3a-parent-container canvas,.w3a-parent-container embed,.w3a-parent-container iframe,.w3a-parent-container img,.w3a-parent-container object,.w3a-parent-container svg,.w3a-parent-container video{display:block;vertical-align:middle}.w3a-parent-container img,.w3a-parent-container video{height:auto;max-width:100%}.w3a-parent-container [hidden]{display:none}.w3a-parent-container *,.w3a-parent-container :after,.w3a-parent-container :before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:#3b82f680;--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.w3a-parent-container ::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:#3b82f680;--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.w3a-parent-container .container{width:100%}@media (min-width:640px){.w3a-parent-container .container{max-width:640px}}@media (min-width:768px){.w3a-parent-container .container{max-width:768px}}@media (min-width:1024px){.w3a-parent-container .container{max-width:1024px}}@media (min-width:1280px){.w3a-parent-container .container{max-width:1280px}}@media (min-width:1536px){.w3a-parent-container .container{max-width:1536px}}.w3a-parent-container .absolute{position:absolute}.w3a-parent-container .relative{position:relative}.w3a-parent-container .top-4{top:1rem}.w3a-parent-container .z-20{z-index:20}.w3a-parent-container .col-span-2{grid-column:span 2/span 2}.w3a-parent-container .col-span-3{grid-column:span 3/span 3}.w3a-parent-container .col-span-6{grid-column:span 6/span 6}.w3a-parent-container .-mb-2{margin-bottom:-.5rem}.w3a-parent-container .-ml-\\\\[100px\\\\]{margin-left:-100px}.w3a-parent-container .mb-1{margin-bottom:.25rem}.w3a-parent-container .mb-4{margin-bottom:1rem}.w3a-parent-container .mb-5{margin-bottom:1.25rem}.w3a-parent-container .ml-2{margin-left:.5rem}.w3a-parent-container .ml-\\\\[3px\\\\]{margin-left:3px}.w3a-parent-container .mt-4{margin-top:1rem}.w3a-parent-container .block{display:block}.w3a-parent-container .flex{display:flex}.w3a-parent-container .hidden{display:none}.w3a-parent-container .h-12{height:3rem}.w3a-parent-container .h-3{height:.75rem}.w3a-parent-container .w-3{width:.75rem}.w3a-parent-container .w-\\\\[300px\\\\]{width:300px}.w3a-parent-container .w-full{width:100%}.w3a-parent-container .rotate-45{--tw-rotate:45deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.w3a-parent-container .cursor-pointer{cursor:pointer}.w3a-parent-container .flex-col{flex-direction:column}.w3a-parent-container .items-center{align-items:center}.w3a-parent-container .rounded-md{border-radius:.375rem}.w3a-parent-container .bg-app-gray-50{--tw-bg-opacity:1;background-color:rgb(249 250 251/var(--tw-bg-opacity))}.w3a-parent-container .p-4{padding:1rem}.w3a-parent-container .text-left{text-align:left}.w3a-parent-container .text-right{text-align:right}.w3a-parent-container .text-xs{font-size:.75rem;line-height:1rem}.w3a-parent-container .font-medium{font-weight:500}.w3a-parent-container .leading-none{line-height:1}.w3a-parent-container .text-app-gray-400{--tw-text-opacity:1;color:rgb(156 163 175/var(--tw-text-opacity))}.w3a-parent-container .text-app-gray-900{--tw-text-opacity:1;color:rgb(17 25 40/var(--tw-text-opacity))}.w3a-parent-container .text-white{--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity))}.w3a-parent-container .shadow-lg{--tw-shadow:0 10px 15px -3px #0000001a,0 4px 6px -4px #0000001a;--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.w3a-parent-container .filter{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.w3a-parent-container input[type=number]::-webkit-inner-spin-button,.w3a-parent-container input[type=number]::-webkit-outer-spin-button{appearance:none}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa2JL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0460-052f,u+1c80-1c88,u+20b4,u+2de0-2dff,u+a640-a69f,u+fe2e-fe2f}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa0ZL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0301,u+0400-045f,u+0490-0491,u+04b0-04b1,u+2116}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa2ZL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+1f??}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1pL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0370-03ff}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa2pL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0102-0103,u+0110-0111,u+0128-0129,u+0168-0169,u+01a0-01a1,u+01af-01b0,u+1ea0-1ef9,u+20ab}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa25L7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0100-024f,u+0259,u+1e??,u+2020,u+20a0-20ab,u+20ad-20cf,u+2113,u+2c60-2c7f,u+a720-a7ff}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7W0Q5nw.woff2) format(\"woff2\");unicode-range:u+00??,u+0131,u+0152-0153,u+02bb-02bc,u+02c6,u+02da,u+02dc,u+2000-206f,u+2074,u+20ac,u+2122,u+2191,u+2193,u+2212,u+2215,u+feff,u+fffd}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa2JL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0460-052f,u+1c80-1c88,u+20b4,u+2de0-2dff,u+a640-a69f,u+fe2e-fe2f}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa0ZL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0301,u+0400-045f,u+0490-0491,u+04b0-04b1,u+2116}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa2ZL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+1f??}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1pL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0370-03ff}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa2pL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0102-0103,u+0110-0111,u+0128-0129,u+0168-0169,u+01a0-01a1,u+01af-01b0,u+1ea0-1ef9,u+20ab}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa25L7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0100-024f,u+0259,u+1e??,u+2020,u+20a0-20ab,u+20ad-20cf,u+2113,u+2c60-2c7f,u+a720-a7ff}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:500;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7W0Q5nw.woff2) format(\"woff2\");unicode-range:u+00??,u+0131,u+0152-0153,u+02bb-02bc,u+02c6,u+02da,u+02dc,u+2000-206f,u+2074,u+20ac,u+2122,u+2191,u+2193,u+2212,u+2215,u+feff,u+fffd}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa2JL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0460-052f,u+1c80-1c88,u+20b4,u+2de0-2dff,u+a640-a69f,u+fe2e-fe2f}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa0ZL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0301,u+0400-045f,u+0490-0491,u+04b0-04b1,u+2116}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa2ZL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+1f??}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1pL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0370-03ff}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa2pL7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0102-0103,u+0110-0111,u+0128-0129,u+0168-0169,u+01a0-01a1,u+01af-01b0,u+1ea0-1ef9,u+20ab}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa25L7W0Q5n-wU.woff2) format(\"woff2\");unicode-range:u+0100-024f,u+0259,u+1e??,u+2020,u+20a0-20ab,u+20ad-20cf,u+2113,u+2c60-2c7f,u+a720-a7ff}@font-face{font-display:swap;font-family:Inter;font-style:normal;font-weight:700;src:url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7W0Q5nw.woff2) format(\"woff2\");unicode-range:u+00??,u+0131,u+0152-0153,u+02bb-02bc,u+02c6,u+02da,u+02dc,u+2000-206f,u+2074,u+20ac,u+2122,u+2191,u+2193,u+2212,u+2215,u+feff,u+fffd}.w3a-parent-container #w3a-modal{align-items:center;box-sizing:border-box;display:flex;font-family:Inter;inset:0;justify-content:center;padding:1rem;position:fixed}.w3a-parent-container #w3a-modal.w3a-modal--hidden{display:none}.w3a-parent-container #w3a-modal .w3a-modal__inner{--tw-border-opacity:1;--tw-bg-opacity:1;--tw-shadow:0px 4px 16px #00000014;--tw-shadow-colored:0px 4px 16px var(--tw-shadow-color);background-color:rgb(255 255 255/var(--tw-bg-opacity));border-color:rgb(243 244 246/var(--tw-border-opacity));border-radius:32px;border-width:1px;box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow);display:flex;flex-direction:column;max-height:95%;max-width:392px;min-height:630px;opacity:0;overflow-x:hidden;overflow-y:hidden;position:relative;width:100%}.w3a-parent-container :is(.dark #w3a-modal .w3a-modal__inner){--tw-border-opacity:1;--tw-bg-opacity:1;background-color:rgb(55 65 81/var(--tw-bg-opacity));border-color:rgb(55 65 81/var(--tw-border-opacity))}.w3a-parent-container #w3a-modal .w3a-modal__inner{transform:scale(0);transform-origin:center center;transition:all .15s cubic-bezier(.92,0,1,.67)}.w3a-parent-container #w3a-modal .w3a-modal__inner.w3a-modal__inner--active{opacity:1;transform:scale(1);transform-origin:center center;transition:all .15s cubic-bezier(0,.73,.71,1)}.w3a-parent-container #w3a-modal .w3a-modal__header{padding:.5rem 2rem;position:relative}.w3a-parent-container #w3a-modal .w3a-modal__content{overflow-y:auto;padding:1rem 2rem}.w3a-parent-container #w3a-modal .w3a-modal__footer{--tw-bg-opacity:1;align-items:center;background-color:rgb(249 250 251/var(--tw-bg-opacity));justify-content:center;margin-top:auto;padding:1rem 2rem;text-align:center}.w3a-parent-container :is(.dark #w3a-modal .w3a-modal__footer){--tw-bg-opacity:1;background-color:rgb(75 85 99/var(--tw-bg-opacity))}.w3a-parent-container #w3a-modal .w3a-header{align-items:center;display:flex;padding-top:2rem}.w3a-parent-container #w3a-modal .w3a-header__logo{margin-bottom:1rem}.w3a-parent-container #w3a-modal .w3a-header__logo img{height:auto;width:2.5rem}.w3a-parent-container #w3a-modal .w3a-header__title{--tw-text-opacity:1;color:rgb(17 25 40/var(--tw-text-opacity));font-size:1.25rem;font-weight:700;line-height:1.75rem}.w3a-parent-container :is(.dark #w3a-modal .w3a-header__title){--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal div.w3a-header__subtitle{--tw-text-opacity:1;align-items:center;color:rgb(107 114 128/var(--tw-text-opacity));display:flex;font-size:.875rem;font-weight:400;line-height:1.25rem}.w3a-parent-container :is(.dark #w3a-modal div.w3a-header__subtitle){--tw-text-opacity:1;color:rgb(156 163 175/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal div.w3a-header__subtitle img{height:14px;margin-left:.25rem;width:14px}.w3a-parent-container #w3a-modal button.w3a-header__button{border-width:0;cursor:pointer;padding:0;position:absolute;right:1.75rem;top:1.25rem}.w3a-parent-container #w3a-modal button.w3a-header__button:active,.w3a-parent-container #w3a-modal button.w3a-header__button:focus{outline-color:#f9fafb}.w3a-parent-container :is(.dark #w3a-modal button.w3a-header__button:focus){outline-color:#9ca3af;outline-style:solid;outline-width:1px}.w3a-parent-container :is(.dark #w3a-modal button.w3a-header__button:active){outline-color:#9ca3af;outline-style:solid;outline-width:1px}.w3a-parent-container #w3a-modal div.w3a-social__policy{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity));font-size:.75rem;font-weight:500;line-height:1rem;margin-top:1rem;text-align:left}.w3a-parent-container :is(.dark #w3a-modal div.w3a-social__policy){--tw-text-opacity:1;color:rgb(156 163 175/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal .w3a-group{margin-bottom:1rem}.w3a-parent-container #w3a-modal .w3a-group:last-child{margin-bottom:0}.w3a-parent-container #w3a-modal .w3ajs-passwordless div.w3a-group__title{align-items:center;display:flex}.w3a-parent-container #w3a-modal .w3ajs-passwordless div.w3a-group__title img{height:14px;margin-left:.25rem;width:14px}.w3a-parent-container #w3a-modal .w3a-group.w3a-group--email-hidden,.w3a-parent-container #w3a-modal .w3a-group.w3a-group--ext-wallet-hidden,.w3a-parent-container #w3a-modal .w3a-group.w3a-group--hidden,.w3a-parent-container #w3a-modal .w3a-group.w3a-group--social-hidden{display:none}.w3a-parent-container #w3a-modal div.w3a-group__title{--tw-text-opacity:1;color:rgb(17 25 40/var(--tw-text-opacity));font-size:.875rem;font-weight:500;line-height:1.25rem;margin-bottom:.5rem}.w3a-parent-container :is(.dark #w3a-modal div.w3a-group__title){--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal ul.w3a-adapter-list{column-gap:.5rem;display:grid;grid-template-columns:repeat(6,minmax(0,1fr));max-height:500px;overflow-y:hidden;padding:1px;row-gap:1rem;transition:max-height .35s;transition-timing-function:cubic-bezier(.92,0,.74,1)}.w3a-parent-container #w3a-modal ul.w3a-adapter-list.w3a-adapter-list--shrink{max-height:108px;transition:max-height .3s;transition-timing-function:cubic-bezier(0,.73,.71,1)}.w3a-parent-container #w3a-modal ul.w3a-adapter-list.w3a-adapter-list--hidden{display:none}.w3a-parent-container #w3a-modal li.w3a-adapter-item{list-style-type:none}.w3a-parent-container #w3a-modal li.w3a-adapter-item--full{grid-column:span 6/span 6}.w3a-parent-container #w3a-modal .w3a-adapter-item--hide{display:none}.w3a-parent-container #w3a-modal .w3a-external-toggle{display:block}.w3a-parent-container #w3a-modal .w3a-external-toggle.w3a-external-toggle--hidden{display:none}.w3a-parent-container #w3a-modal .w3a-external-container{display:block;margin-bottom:0}.w3a-parent-container #w3a-modal .w3a-external-container.w3a-external-container--hidden{display:none}.w3a-parent-container #w3a-modal .w3a-external-group{display:flex;flex-wrap:wrap;gap:.75rem;margin-bottom:1rem}.w3a-parent-container #w3a-modal .w3a-external-group__left{flex-grow:1}.w3a-parent-container #w3a-modal button.w3a-external-back{--tw-text-opacity:1;align-items:center;background-image:none;border-width:0;color:rgb(107 114 128/var(--tw-text-opacity));cursor:pointer;display:inline-flex;margin-bottom:.5rem;padding:0}.w3a-parent-container #w3a-modal button.w3a-external-back:active,.w3a-parent-container #w3a-modal button.w3a-external-back:focus{outline-color:#f9fafb}.w3a-parent-container :is(.dark #w3a-modal button.w3a-external-back){--tw-text-opacity:1;color:rgb(156 163 175/var(--tw-text-opacity))}.w3a-parent-container :is(.dark #w3a-modal button.w3a-external-back:focus){outline-color:#9ca3af;outline-style:solid;outline-width:1px}.w3a-parent-container :is(.dark #w3a-modal button.w3a-external-back:active){outline-color:#9ca3af;outline-style:solid;outline-width:1px}.w3a-parent-container #w3a-modal .w3a-external-back .w3a-group__title{--tw-text-opacity:1;color:rgb(156 163 175/var(--tw-text-opacity));margin-bottom:0;margin-left:5px}.w3a-parent-container #w3a-modal .w3a-external-loader{display:flex;justify-content:center}.w3a-parent-container #w3a-modal .w3a-wallet-connect{display:block;margin-bottom:1rem;text-align:center}.w3a-parent-container #w3a-modal .w3a-wallet-connect.w3a-wallet-connect--hidden{display:none}.w3a-parent-container #w3a-modal .w3a-wallet-connect__container{--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity));border-radius:10px;color:rgb(107 114 128/var(--tw-text-opacity));font-size:.625rem;margin-left:auto;margin-right:auto;min-width:250px;padding:1rem .75rem;width:fit-content}.w3a-parent-container :is(.dark #w3a-modal .w3a-wallet-connect__container){--tw-text-opacity:1;color:rgb(156 163 175/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal .w3a-wallet-connect__container-android,.w3a-parent-container #w3a-modal .w3a-wallet-connect__container-desktop{margin:auto}.w3a-parent-container #w3a-modal .w3a-wallet-connect__container-btn-group{display:flex;gap:18px}.w3a-parent-container #w3a-modal .w3a-wallet-connect__container-ios{box-sizing:border-box;column-gap:1.25rem;display:flex;flex-wrap:wrap;padding:0 0 1.75rem;row-gap:30px}.w3a-parent-container #w3a-modal .w3a-wallet-connect-qr{margin:1rem}.w3a-parent-container #w3a-modal .w3a-wallet-connect-qr>canvas,.w3a-parent-container #w3a-modal .w3a-wallet-connect-qr>svg{margin:auto}.w3a-parent-container #w3a-modal .w3a-wallet-connect__container-android a{text-decoration-line:none}.w3a-parent-container #w3a-modal .w3a-wallet-connect__logo>img{margin:0 auto 1rem;width:115px}.w3a-parent-container #w3a-modal .w3a-footer{--tw-text-opacity:1;align-items:center;color:rgb(156 163 175/var(--tw-text-opacity));display:flex;font-size:.75rem;justify-content:center;line-height:1rem}.w3a-parent-container #w3a-modal .w3a-footer__links a:active,.w3a-parent-container #w3a-modal .w3a-footer__links a:focus{outline-color:#f9fafb}.w3a-parent-container :is(.dark #w3a-modal .w3a-footer__links a:focus){outline-color:#9ca3af;outline-style:solid;outline-width:1px}.w3a-parent-container :is(.dark #w3a-modal .w3a-footer__links a:active){outline-color:#9ca3af;outline-style:solid;outline-width:1px}.w3a-parent-container #w3a-modal .w3a-footer__links span{margin:0 4px}.w3a-parent-container #w3a-modal.w3a-modal--light .w3a-footer__links a:focus-visible{outline:1px solid #0f1222}.w3a-parent-container #w3a-modal.w3a-modal--light .w3a-external-back:focus-visible{outline:1px solid #0f1222}.w3a-parent-container .hover-icon{display:none;transition:display .15s;transition-timing-function:cubic-bezier(0,.54,.63,.99)}.w3a-parent-container #w3a-modal .w3a-text-field{--tw-border-opacity:1;--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(249 250 251/var(--tw-bg-opacity));border-color:rgb(209 213 219/var(--tw-border-opacity));border-radius:9999px;border-width:1px;color:rgb(17 25 40/var(--tw-text-opacity));font-size:.875rem;line-height:1.25rem;margin-top:.5rem;padding:.75rem 1.5rem}.w3a-parent-container #w3a-modal .w3a-text-field::placeholder{--tw-placeholder-opacity:1;color:rgb(107 114 128/var(--tw-placeholder-opacity))}.w3a-parent-container #w3a-modal .w3a-text-field{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000);outline-width:0}.w3a-parent-container #w3a-modal .w3a-text-field:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);--tw-ring-opacity:1;--tw-ring-color:rgb(3 100 255/var(--tw-ring-opacity));border-color:#0000;box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.w3a-parent-container #w3a-modal .w3a-text-field:disabled{cursor:not-allowed}.w3a-parent-container #w3a-modal .w3a-text-field:disabled::placeholder{--tw-placeholder-opacity:1;color:rgb(156 163 175/var(--tw-placeholder-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-text-field){--tw-border-opacity:1;--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(75 85 99/var(--tw-bg-opacity));border-color:rgb(107 114 128/var(--tw-border-opacity));color:rgb(255 255 255/var(--tw-text-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-text-field)::placeholder{--tw-placeholder-opacity:1;color:rgb(156 163 175/var(--tw-placeholder-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-text-field:focus){--tw-ring-opacity:1;--tw-ring-color:rgb(3 100 255/var(--tw-ring-opacity));border-color:#0000}.w3a-parent-container :is(.dark #w3a-modal .w3a-text-field:disabled)::placeholder{--tw-placeholder-opacity:1;color:rgb(107 114 128/var(--tw-placeholder-opacity))}.w3a-parent-container #w3a-modal .w3a-text-field{line-height:1.25em}.w3a-parent-container #w3a-modal .w3a-text-field--country-code{display:flex;justify-content:space-between;padding-left:1rem;padding-right:1rem;width:100%}.w3a-parent-container #w3a-modal .w3a-text-field--number{appearance:none}.w3a-parent-container #w3a-modal .w3a-sms-field--error{--tw-text-opacity:1;color:rgb(239 68 68/var(--tw-text-opacity));font-size:.875rem;line-height:1.25rem;margin-bottom:.5rem;margin-left:.375rem;margin-top:-.5rem}.w3a-parent-container #w3a-container #w3a-modal input.w3a-text-field:-webkit-autofill,.w3a-parent-container #w3a-container #w3a-modal input.w3a-text-field:-webkit-autofill:active,.w3a-parent-container #w3a-container #w3a-modal input.w3a-text-field:-webkit-autofill:focus,.w3a-parent-container #w3a-container #w3a-modal input.w3a-text-field:-webkit-autofill:hover{--tw-shadow:0 0 0 30px #f9fafb inset;--tw-shadow-colored:inset 0 0 0 30px var(--tw-shadow-color);-webkit-text-fill-color:#111928!important;box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.w3a-parent-container #w3a-container.dark #w3a-modal input.w3a-text-field:-webkit-autofill,.w3a-parent-container #w3a-container.dark #w3a-modal input.w3a-text-field:-webkit-autofill:active,.w3a-parent-container #w3a-container.dark #w3a-modal input.w3a-text-field:-webkit-autofill:focus,.w3a-parent-container #w3a-container.dark #w3a-modal input.w3a-text-field:-webkit-autofill:hover{--tw-shadow:0 0 0 30px #374151 inset;--tw-shadow-colored:inset 0 0 0 30px var(--tw-shadow-color);-webkit-text-fill-color:#fff!important;box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.w3a-parent-container #w3a-modal .w3a-button{--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(243 244 246/var(--tw-bg-opacity));border-radius:9999px;color:rgb(17 25 40/var(--tw-text-opacity));font-size:1rem;font-weight:500;line-height:1.5rem;padding:.75rem 1.5rem}.w3a-parent-container #w3a-modal .w3a-button:hover{--tw-bg-opacity:1;background-color:rgb(209 213 219/var(--tw-bg-opacity))}.w3a-parent-container #w3a-modal .w3a-button:focus{--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(243 244 246/var(--tw-bg-opacity));color:rgb(55 65 81/var(--tw-text-opacity));outline-color:#f9fafb}.w3a-parent-container #w3a-modal .w3a-button:active{outline-color:#f9fafb}.w3a-parent-container #w3a-modal .w3a-button:disabled{--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(249 250 251/var(--tw-bg-opacity));color:rgb(209 213 219/var(--tw-text-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-button){--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(17 25 40/var(--tw-bg-opacity));color:rgb(255 255 255/var(--tw-text-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-button:hover){--tw-bg-opacity:1;background-color:rgb(31 42 55/var(--tw-bg-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-button:focus){--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(17 25 40/var(--tw-bg-opacity));color:rgb(255 255 255/var(--tw-text-opacity));outline-color:#9ca3af;outline-style:solid;outline-width:1px}.w3a-parent-container :is(.dark #w3a-modal .w3a-button:active){outline-color:#9ca3af;outline-style:solid;outline-width:1px}.w3a-parent-container :is(.dark #w3a-modal .w3a-button:disabled){--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(59 69 85/var(--tw-bg-opacity));color:rgb(107 114 128/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal .w3a-button--primary{--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(3 100 255/var(--tw-bg-opacity));color:rgb(255 255 255/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal .w3a-button--primary:hover{--tw-bg-opacity:1;background-color:rgb(30 66 159/var(--tw-bg-opacity))}.w3a-parent-container #w3a-modal .w3a-button--primary:focus{--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(3 100 255/var(--tw-bg-opacity));color:rgb(255 255 255/var(--tw-text-opacity));outline-color:#a4cafe}.w3a-parent-container #w3a-modal .w3a-button--primary:active{outline-color:#a4cafe}.w3a-parent-container #w3a-modal .w3a-button--primary:disabled{--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(195 221 253/var(--tw-bg-opacity));color:rgb(235 245 255/var(--tw-text-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-button--primary){--tw-bg-opacity:1;background-color:rgb(3 100 255/var(--tw-bg-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-button--primary:hover){--tw-bg-opacity:1;background-color:rgb(30 66 159/var(--tw-bg-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-button--primary:focus){--tw-bg-opacity:1;background-color:rgb(3 100 255/var(--tw-bg-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-button--primary:disabled){--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(45 72 116/var(--tw-bg-opacity));color:rgb(107 114 128/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal .w3a-button--login{align-items:center;display:inline-flex;height:2.75rem;justify-content:center}.w3a-parent-container #w3a-modal button.w3a-button--login:hover>.hover-icon{display:block;transition:display .15s;transition-timing-function:cubic-bezier(0,.54,.63,.99)}.w3a-parent-container #w3a-modal button.w3a-button--login:hover>.image-icon{display:none;transition:display .15s;transition-timing-function:cubic-bezier(0,.54,.63,.99)}.w3a-parent-container #w3a-modal button.w3a-button-expand{--tw-text-opacity:1;color:rgb(3 100 255/var(--tw-text-opacity));font-size:.875rem;height:auto;line-height:1.25rem;margin-left:auto;margin-top:1rem;width:auto}.w3a-parent-container #w3a-modal button.w3a-button-expand:hover{--tw-text-opacity:1;color:rgb(30 66 159/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal button.w3a-button-expand:focus-visible{outline-color:#f9fafb;outline-style:solid;outline-width:1px}.w3a-parent-container :is(.dark #w3a-modal button.w3a-button-expand:hover){--tw-text-opacity:1;color:rgb(63 131 248/var(--tw-text-opacity))}.w3a-parent-container :is(.dark #w3a-modal button.w3a-button-expand:focus-visible){outline-color:#9ca3af;outline-style:solid;outline-width:1px}.w3a-parent-container #w3a-modal .w3a-sms-field__container{display:grid;gap:.5rem;grid-template-columns:repeat(12,minmax(0,1fr))}.w3a-parent-container #w3a-modal .w3a-sms-field__code-selected{display:flex}.w3a-parent-container #w3a-modal .w3a-sms-field__code-dropdown{height:185px;position:absolute;width:120px;z-index:10}.w3a-parent-container #w3a-modal .w3a-sms-field__code-dropdown>:not([hidden])~:not([hidden]){--tw-divide-y-reverse:0;--tw-divide-opacity:1;border-bottom-width:calc(1px*var(--tw-divide-y-reverse));border-color:rgb(243 244 246/var(--tw-divide-opacity));border-top-width:calc(1px*(1 - var(--tw-divide-y-reverse)))}.w3a-parent-container #w3a-modal .w3a-sms-field__code-dropdown{--tw-bg-opacity:1;--tw-shadow:0px 4px 16px #00000014;--tw-shadow-colored:0px 4px 16px var(--tw-shadow-color);background-color:rgb(255 255 255/var(--tw-bg-opacity));border-radius:.5rem;box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow);overflow-y:scroll}.w3a-parent-container :is(.dark #w3a-modal .w3a-sms-field__code-dropdown){--tw-bg-opacity:1;background-color:rgb(55 65 81/var(--tw-bg-opacity))}.w3a-parent-container #w3a-modal .w3a-sms-field__code-dropdown{transform:translateY(-230px)}.w3a-parent-container #w3a-modal .w3a-sms-field__code-dropdown--hidden{display:none}.w3a-parent-container #w3a-modal .w3a-sms-field__code-dropdown ul{--tw-text-opacity:1;color:rgb(55 65 81/var(--tw-text-opacity));font-size:.875rem;line-height:1.25rem;padding-bottom:.5rem;padding-top:.5rem}.w3a-parent-container :is(.dark #w3a-modal .w3a-sms-field__code-dropdown ul){--tw-text-opacity:1;color:rgb(229 231 235/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal .w3a-sms-field__code-dropdown li{cursor:pointer;padding:0}.w3a-parent-container #w3a-modal .w3a-sms-field__code-dropdown li:hover{--tw-bg-opacity:1;background-color:rgb(243 244 246/var(--tw-bg-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-sms-field__code-dropdown li:hover){--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgb(17 24 39/var(--tw-bg-opacity));color:rgb(255 255 255/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal .w3a-sms-field__code-dropdown li button{height:100%;padding:.5rem 1rem;text-align:left;width:100%}.w3a-parent-container #w3a-modal .w3a-sms-field__code-dropdown li button div{align-items:center;display:flex}.w3a-parent-container #w3a-modal .w3a-sms-field__code{grid-column:span 5/span 5}.w3a-parent-container #w3a-modal .w3a-sms-field__number{grid-column:span 7/span 7}.w3a-parent-container #w3a-modal .w3a-modal__loader{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity));display:flex;inset:0;justify-content:center;position:absolute;z-index:10}.w3a-parent-container :is(.dark #w3a-modal .w3a-modal__loader){--tw-bg-opacity:1;background-color:rgb(55 65 81/var(--tw-bg-opacity))}.w3a-parent-container #w3a-modal .w3a-modal__loader.w3a-modal__loader--hidden{display:none}.w3a-parent-container #w3a-modal .w3a-modal__loader-content{display:flex;flex-direction:column;margin-bottom:50px;position:relative;text-align:center}.w3a-parent-container #w3a-modal .w3a-modal__loader-info{align-items:center;display:flex;flex-direction:column;flex-grow:1;justify-content:center;padding:0 30px}.w3a-parent-container #w3a-modal .w3a-spinner-label{--tw-text-opacity:1;color:rgb(3 100 255/var(--tw-text-opacity));font-size:1rem;font-weight:500;line-height:1.5rem;margin-top:10px}.w3a-parent-container #w3a-modal .w3a-spinner-message{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity));font-size:1rem;line-height:1.5rem;margin-top:10px}.w3a-parent-container #w3a-modal .w3a-spinner-message:first-letter{text-transform:capitalize}.w3a-parent-container :is(.dark #w3a-modal .w3a-spinner-message){--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal .w3a-spinner-message.w3a-spinner-message--error{--tw-text-opacity:1;color:rgb(239 68 68/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal .w3a-spinner-power{--tw-text-opacity:1;color:rgb(183 184 189/var(--tw-text-opacity));font-size:.75rem;line-height:1rem;margin-top:auto}.w3a-parent-container #w3a-modal .w3a-spinner-power>img{display:inline;height:2rem;width:auto}.w3a-parent-container #w3a-modal .w3a-spinner{--tw-bg-opacity:1;animation:rotate 1s linear infinite;background-color:rgb(3 100 255/var(--tw-bg-opacity));background:conic-gradient(#0000,#0364ff);border-radius:50%;display:inline-block;height:60px;position:relative;width:60px}.w3a-parent-container #w3a-modal .w3a-spinner__head,.w3a-parent-container #w3a-modal .w3a-spinner__mask{border-radius:100%;content:\"\";position:absolute}.w3a-parent-container #w3a-modal .w3a-spinner__mask{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity))}.w3a-parent-container :is(.dark #w3a-modal .w3a-spinner__mask){--tw-bg-opacity:1;background-color:rgb(55 65 81/var(--tw-bg-opacity))}.w3a-parent-container #w3a-modal .w3a-spinner__mask{height:50px;left:5px;top:5px;width:50px}.w3a-parent-container #w3a-modal .w3a-spinner__head{--tw-bg-opacity:1;background-color:rgb(3 100 255/var(--tw-bg-opacity));height:5px;left:26px;top:0;width:5px}@keyframes rotate{0%{transform:rotate(0)}to{transform:rotate(1turn)}}.w3a-parent-container #w3a-modal .w3a-modal__loader-bridge{align-items:center;display:flex;justify-content:center;margin-bottom:14px}.w3a-parent-container #w3a-modal .w3a-modal__loader-bridge-message{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal .w3a-modal__loader-bridge-message:first-letter{text-transform:capitalize}.w3a-parent-container :is(.dark #w3a-modal .w3a-modal__loader-bridge-message){--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity))}.w3a-parent-container #w3a-modal .w3a-modal__loader-app-logo{display:flex;padding:.5rem}.w3a-parent-container #w3a-modal .w3a-modal__loader-app-logo--default{--tw-bg-opacity:1;align-items:center;background-color:rgb(3 100 255/var(--tw-bg-opacity));border-radius:9999px;height:72px;justify-content:center;width:72px}.w3a-parent-container :is(.dark #w3a-modal .w3a-modal__loader-app-logo--default){--tw-bg-opacity:1;background-color:rgb(249 250 251/var(--tw-bg-opacity))}.w3a-parent-container #w3a-modal .w3a-modal__loader-app-logo img{height:auto;max-height:72px;max-width:72px;width:72px}.w3a-parent-container #w3a-modal .w3a-modal__loader-app-logo--default img{max-height:45px;max-width:45px;width:45px}.w3a-parent-container #w3a-modal .w3a-modal__loader-social-logo{--tw-bg-opacity:1;align-items:center;background-color:rgb(243 244 246/var(--tw-bg-opacity));border-radius:9999px;display:flex;height:72px;justify-content:center;width:72px}.w3a-parent-container :is(.dark #w3a-modal .w3a-modal__loader-social-logo){--tw-bg-opacity:1;background-color:rgb(249 250 251/var(--tw-bg-opacity))}.w3a-parent-container #w3a-modal .w3a-modal__loader-social-logo img{height:4rem;width:4rem}.w3a-parent-container #w3a-modal .w3a-modal__loader-adapter img{height:auto;width:84px}.w3a-parent-container #w3a-modal .w3a-modal__connector{align-items:center;display:flex}.w3a-parent-container .w3a-modal__connector-beat{display:inline-block;height:80px;position:relative;width:80px}.w3a-parent-container .w3a-modal__connector-beat div{animation-timing-function:cubic-bezier(0,1,1,0);background:grey;border-radius:50%;height:13px;position:absolute;top:33px;width:13px}.w3a-parent-container .w3a-modal__connector-beat div:first-child{animation:beat1 2.4s infinite;left:8px}.w3a-parent-container .w3a-modal__connector-beat div:nth-child(2){animation:beat2 2.4s infinite;left:8px}.w3a-parent-container .w3a-modal__connector-beat div:nth-child(3){animation:beat3 2.4s infinite;left:8px}.w3a-parent-container .w3a-modal__connector-beat div:nth-child(4){animation:beat4 2.4s infinite;left:32px}.w3a-parent-container .w3a-modal__connector-beat div:nth-child(5){animation:beat5 2.4s infinite;left:56px}@keyframes beat1{0%{transform:scale(0)}25%{transform:scale(0)}50%{transform:scale(1)}75%{transform:scale(0)}to{transform:scale(0)}}@keyframes beat2{0%{transform:scale(0)}25%{transform:scale(1)}50%{transform:translate(24px)}75%{transform:translate(0)}to{transform:translate(0) scale(0)}}@keyframes beat3{0%{transform:translate(0)}25%{transform:translate(24px)}50%{transform:translate(48px)}75%{transform:translate(24px)}to{transform:translate(0)}}@keyframes beat4{0%{transform:translate(0)}25%{transform:translate(24px)}50%{transform:translate(24px) scale(0)}75%{transform:translate(24px) scale(1)}to{transform:translate(0)}}@keyframes beat5{0%{transform:scale(1)}25%{transform:scale(0)}50%{transform:scale(0)}75%{transform:scale(0)}to{transform:scale(1)}}.w3a-parent-container .group:hover .group-hover\\\\:flex{display:flex}.w3a-parent-container :is(.dark .dark\\\\:bg-app-gray-600){--tw-bg-opacity:1;background-color:rgb(75 85 99/var(--tw-bg-opacity))}.w3a-parent-container :is(.dark .dark\\\\:text-white){--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity))}';\nstyleInject(css_248z$1);\nconst ThemedContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_8__.createContext)({\n    isDark: true // default value\n});\nvar modal = {\n    \"adapter-loader.message\": \"Verify your {{adapter}} account to continue\",\n    \"adapter-loader.message1\": \"Verify your {{adapter}}\",\n    \"adapter-loader.message2\": \"account to continue\",\n    \"errors-invalid-number-email\": \"Invalid Email or Phone Number\",\n    \"errors-required\": \"Required\",\n    \"external.back\": \"Back\",\n    \"external.connect\": \"Connect with Wallet\",\n    \"external.title\": \"External Wallet\",\n    \"external.walletconnect-connect\": \"Connect\",\n    \"external.walletconnect-copy\": \"Click on the QR Code to copy to clipboard\",\n    \"external.walletconnect-subtitle\": \"Scan the QR code with a WalletConnect-compatible wallet\",\n    \"footer.message\": \"Self-custodial login by\",\n    \"footer.message-new\": \"Self-custodial login by Web3Auth\",\n    \"footer.policy\": \"Privacy Policy\",\n    \"footer.terms\": \"Terms of Use\",\n    \"footer.terms-service\": \"Terms of Service\",\n    \"footer.version\": \"Version\",\n    \"header-subtitle\": \"Select one of the following options to continue\",\n    \"header-subtitle-name\": \"Your {{appName}} wallet with one click\",\n    \"header-subtitle-new\": \"Your blockchain wallet with one click\",\n    \"header-title\": \"Sign in\",\n    \"header-tooltip-desc\": \"The wallet serves as an account to store and manage your digital assets on the blockchain.\",\n    \"header-tooltip-title\": \"Wallet\",\n    \"network.add-request\": \"This site is requesting to add a network\",\n    \"network.cancel\": \"Cancel\",\n    \"network.from\": \"From\",\n    \"network.proceed\": \"Proceed\",\n    \"network.switch-request\": \"This site is requesting to switch networks\",\n    \"network.to\": \"To\",\n    \"popup.phone-body\": \"Your country code will be detected automatically, but if you're using a phone number from a different country, you'll need to enter the correct country code manually.\",\n    \"popup.phone-header\": \"Phone number and country code\",\n    \"social.continue\": \"Continue with\",\n    \"social.continueCustom\": \"Continue with {{adapter}}\",\n    \"social.email\": \"Email\",\n    \"social.email-continue\": \"Continue with Email\",\n    \"social.email-new\": \"name@example.com\",\n    \"social.passwordless-cta\": \"Continue\",\n    \"social.passwordless-title\": \"Email or Phone\",\n    \"social.phone\": \"Phone\",\n    \"social.policy\": \"We do not store any data related to your social logins.\",\n    \"social.sms\": \"Mobile\",\n    \"social.sms-continue\": \"Continue with Mobile\",\n    \"social.sms-invalid-number\": \"Invalid phone number\",\n    \"social.sms-placeholder-text\": \"E.g.:\",\n    \"social.view-less\": \"View fewer options\",\n    \"social.view-less-new\": \"View fewer\",\n    \"social.view-more\": \"View more options\",\n    \"social.view-more-new\": \"View more\",\n    \"post-loading.connected\": \"You are connected with your account\",\n    \"post-loading.something-wrong\": \"Something went wrong!\"\n};\nvar en = {\n    modal: modal\n};\nconst i18nInstance = i18next__WEBPACK_IMPORTED_MODULE_10__[\"default\"].createInstance();\ni18nInstance.use(react_i18next__WEBPACK_IMPORTED_MODULE_9__.initReactI18next).init({\n    resources: {\n        en: {\n            translation: en\n        }\n    },\n    lng: \"en\",\n    fallbackLng: \"en\",\n    interpolation: {\n        escapeValue: false\n    },\n    debug: false,\n    react: {\n        useSuspense: true\n    }\n});\nvar CircleArrowLeft = \"data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cg%20id%3D%2224%20%2F%20arrows%20%2F%20circle-arrow-left%22%3E%3Cpath%20id%3D%22icon%22%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M12%2023C5.92487%2023%201%2018.0751%201%2012C1%205.92487%205.92487%201%2012%201C18.0751%201%2023%205.92487%2023%2012C23%2018.0751%2018.0751%2023%2012%2023ZM12%2021C16.9706%2021%2021%2016.9706%2021%2012C21%207.02944%2016.9706%203%2012%203C7.02944%203%203%207.02944%203%2012C3%2016.9706%207.02944%2021%2012%2021ZM17%2011H10.4142L12.7071%208.70711L11.2929%207.29289L6.58579%2012L11.2929%2016.7071L12.7071%2015.2929L10.4142%2013H17V11Z%22%20fill%3D%22%23D3D3D4%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E\";\nvar Close = \"data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M13.4142%2012L19.7782%2018.364L18.364%2019.7782L12%2013.4143L5.63604%2019.7782L4.22183%2018.364L10.5858%2012L4.22183%205.63608L5.63604%204.22187L12%2010.5858L18.364%204.22187L19.7782%205.63608L13.4142%2012Z%22%20fill%3D%22%23DFDFDF%22%2F%3E%3C%2Fsvg%3E\";\nvar Connected = \"data:image/svg+xml,%3Csvg%20width%3D%22141%22%20height%3D%22107%22%20viewBox%3D%220%200%20141%20107%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M22.5276%2083.0535C22.5745%2083.0354%2022.613%2082.9958%2022.6292%2082.9402C22.6821%2082.7569%2022.6159%2082.1413%2022.4252%2081.0511C23.204%2080.5866%2023.6245%2080.2954%2023.7147%2080.1668C23.7483%2080.1143%2023.7517%2080.0538%2023.7224%2080.0059C23.6705%2079.9274%2023.6072%2079.8336%2022.0991%2080.112C20.9422%2078.3357%2020.7713%2078.3673%2020.6693%2078.3822C20.66%2078.3858%2020.6489%2078.3852%2020.6349%2078.3906C20.5881%2078.4087%2020.5495%2078.4483%2020.5334%2078.5039C20.4744%2078.6994%2020.5567%2079.4123%2020.7783%2080.6237C19.4856%2081.4304%2019.502%2081.5424%2019.5165%2081.6354C19.5224%2081.6923%2019.5658%2081.7347%2019.6306%2081.7491C19.7839%2081.7834%2020.2955%2081.7134%2021.1934%2081.5284C22.2344%2083.103%2022.3865%2083.0786%2022.4915%2083.0576C22.5072%2083.0565%2022.5183%2083.0571%2022.5276%2083.0535Z%22%20fill%3D%22%239D4492%22%2F%3E%3Cpath%20d%3D%22M38.1699%2024.3125L36.5906%2023.6967L34.7166%2027.4815L36.2959%2028.0974L38.1699%2024.3125Z%22%20fill%3D%22%239BEC7D%22%2F%3E%3Cpath%20d%3D%22M48.5645%2034.7988L49.9232%2035.2505L51.3245%2032.0124L49.9658%2031.5607L48.5645%2034.7988Z%22%20fill%3D%22%23FFBF19%22%2F%3E%3Cpath%20d%3D%22M34.4449%2075.5265L33.4902%2076.6264L36.2729%2078.6922L37.2275%2077.5924L34.4449%2075.5265Z%22%20fill%3D%22%23FFBF19%22%2F%3E%3Cpath%20d%3D%22M35.969%2054.562L35.5664%2056.1768L39.8078%2056.8795L40.2104%2055.2647L35.969%2054.562Z%22%20fill%3D%22%239D4492%22%2F%3E%3Cpath%20d%3D%22M38.1949%2089.7319L37.135%2091.092L40.6027%2093.371L41.6626%2092.0109L38.1949%2089.7319Z%22%20fill%3D%22%239D4492%22%2F%3E%3Cpath%20d%3D%22M35.664%2043.2933L36.2599%2041.7217L32.1621%2040.5607L31.5662%2042.1323L35.664%2043.2933Z%22%20fill%3D%22%239BEC7D%22%2F%3E%3Cpath%20d%3D%22M65.9671%209.19276C65.9998%209.18006%2066.023%209.15631%2066.0317%209.12332C66.0671%209.00603%2066.1432%208.66753%2066.0171%207.96665C66.5192%207.66361%2066.6733%207.41471%2066.733%207.3324C66.7575%207.29825%2066.7582%207.2585%2066.7356%207.22781C66.6999%207.1775%2066.6827%206.98733%2065.706%207.16352C64.9602%206.0171%2064.827%206.16686%2064.7612%206.17758C64.7565%206.1794%2064.7471%206.18303%2064.7424%206.18484C64.7097%206.19754%2064.6865%206.2213%2064.6778%206.25429C64.641%206.38196%2064.5887%206.75785%2064.7307%207.54138C63.8979%208.06133%2064.0099%208.21478%2064.0221%208.27417C64.026%208.31211%2064.0534%208.34097%2064.0945%208.34972C64.194%208.37033%2064.4345%208.4035%2065.019%208.28554C65.6929%209.30198%2065.8761%209.20827%2065.9467%209.19573C65.9513%209.19392%2065.9624%209.19458%2065.9671%209.19276Z%22%20fill%3D%22%239BEC7D%22%2F%3E%3Cpath%20d%3D%22M88.1272%2023.1029C88.16%2023.0902%2088.1831%2023.0665%2088.1919%2023.0335C88.2272%2022.9162%2088.3034%2022.5777%2088.1773%2021.8768C88.6794%2021.5738%2088.8335%2021.3249%2088.8932%2021.2426C88.9176%2021.2084%2088.9184%2021.1687%2088.8957%2021.138C88.8601%2021.0877%2088.8429%2020.8975%2087.8661%2021.0737C87.1203%2019.9273%2086.9872%2020.077%2086.9213%2020.0877C86.9166%2020.0896%2086.9073%2020.0932%2086.9026%2020.095C86.8698%2020.1077%2086.8467%2020.1315%2086.8379%2020.1644C86.8012%2020.2921%2086.7489%2020.668%2086.8908%2021.4515C86.0581%2021.9715%2086.17%2022.1249%2086.1823%2022.1843C86.1862%2022.2223%2086.2135%2022.2511%2086.2546%2022.2599C86.3542%2022.2805%2086.5946%2022.3137%2087.1792%2022.1957C87.8531%2023.2121%2088.0363%2023.1184%2088.1068%2023.1059C88.1115%2023.1041%2088.1225%2023.1047%2088.1272%2023.1029Z%22%20fill%3D%22%23FFBF19%22%2F%3E%3Cpath%20d%3D%22M106.127%2076.1029C106.16%2076.0902%20106.183%2076.0665%20106.192%2076.0335C106.227%2075.9162%20106.303%2075.5777%20106.177%2074.8768C106.679%2074.5738%20106.833%2074.3249%20106.893%2074.2426C106.918%2074.2084%20106.918%2074.1687%20106.896%2074.138C106.86%2074.0877%20106.843%2073.8975%20105.866%2074.0737C105.12%2072.9273%20104.987%2073.077%20104.921%2073.0877C104.917%2073.0896%20104.907%2073.0932%20104.903%2073.095C104.87%2073.1077%20104.847%2073.1315%20104.838%2073.1644C104.801%2073.2921%20104.749%2073.668%20104.891%2074.4515C104.058%2074.9715%20104.17%2075.1249%20104.182%2075.1843C104.186%2075.2223%20104.214%2075.2511%20104.255%2075.2599C104.354%2075.2805%20104.595%2075.3137%20105.179%2075.1957C105.853%2076.2121%20106.036%2076.1184%20106.107%2076.1059C106.111%2076.1041%20106.123%2076.1047%20106.127%2076.1029Z%22%20fill%3D%22%23FFBF19%22%2F%3E%3Cpath%20d%3D%22M28.1272%2065.1029C28.16%2065.0902%2028.1831%2065.0665%2028.1919%2065.0335C28.2272%2064.9162%2028.3034%2064.5777%2028.1773%2063.8768C28.6794%2063.5738%2028.8335%2063.3249%2028.8932%2063.2426C28.9176%2063.2084%2028.9184%2063.1687%2028.8957%2063.138C28.8601%2063.0877%2028.8429%2062.8975%2027.8661%2063.0737C27.1203%2061.9273%2026.9872%2062.077%2026.9213%2062.0877C26.9166%2062.0896%2026.9073%2062.0932%2026.9026%2062.095C26.8698%2062.1077%2026.8467%2062.1315%2026.8379%2062.1644C26.8012%2062.2921%2026.7489%2062.668%2026.8908%2063.4515C26.0581%2063.9715%2026.17%2064.1249%2026.1823%2064.1843C26.1862%2064.2223%2026.2135%2064.2511%2026.2546%2064.2599C26.3542%2064.2805%2026.5946%2064.3137%2027.1792%2064.1957C27.8531%2065.2121%2028.0363%2065.1184%2028.1068%2065.1059C28.1115%2065.1041%2028.1225%2065.1047%2028.1272%2065.1029Z%22%20fill%3D%22%23FFBF19%22%2F%3E%3Cpath%20d%3D%22M24.1272%2035.1049C24.16%2035.0922%2024.1831%2035.0684%2024.1919%2035.0354C24.2272%2034.9181%2024.3034%2034.5796%2024.1773%2033.8788C24.6794%2033.5757%2024.8335%2033.3268%2024.8932%2033.2445C24.9176%2033.2104%2024.9184%2033.1706%2024.8957%2033.1399C24.8601%2033.0896%2024.8429%2032.8994%2023.8661%2033.0756C23.1203%2031.9292%2022.9872%2032.079%2022.9213%2032.0897C22.9166%2032.0915%2022.9073%2032.0951%2022.9026%2032.097C22.8698%2032.1097%2022.8467%2032.1334%2022.8379%2032.1664C22.8012%2032.2941%2022.7489%2032.67%2022.8908%2033.4535C22.0581%2033.9734%2022.17%2034.1269%2022.1823%2034.1863C22.1862%2034.2242%2022.2135%2034.2531%2022.2546%2034.2618C22.3542%2034.2824%2022.5946%2034.3156%2023.1792%2034.1977C23.8531%2035.2141%2024.0363%2035.1204%2024.1068%2035.1078C24.1115%2035.106%2024.1225%2035.1067%2024.1272%2035.1049Z%22%20fill%3D%22%239BEC7D%22%2F%3E%3Cpath%20d%3D%22M15.0937%2054.5618L14.5682%2055.7761L17.7171%2056.8229L18.2426%2055.6086L15.0937%2054.5618Z%22%20fill%3D%22%23FF623A%22%2F%3E%3Cpath%20d%3D%22M96.078%2032.6055C96.0647%2032.6548%2096.0739%2032.7102%2096.1097%2032.7569C96.2279%2032.9107%2096.7718%2033.2274%2097.7795%2033.7279C97.6907%2034.6456%2097.6758%2035.1653%2097.7268%2035.3167C97.7496%2035.3757%2097.7971%2035.4151%2097.8539%2035.4199C97.9495%2035.4246%2098.0645%2035.4293%2098.745%2034.0266C100.897%2034.1494%20100.974%2033.9904%20101.023%2033.8979C101.026%2033.8881%20101.033%2033.8794%20101.037%2033.8646C101.05%2033.8153%20101.041%2033.7599%20101.005%2033.7132C100.881%2033.5472%20100.247%2033.1851%2099.1216%2032.6367C99.2398%2031.0922%2099.1382%2031.0382%2099.0533%2030.994C99.0031%2030.9645%2098.9423%2030.9745%2098.8915%2031.0189C98.771%2031.1239%2098.5201%2031.5849%2098.1308%2032.4317C96.2142%2032.3356%2096.1425%2032.4749%2096.0964%2032.5735C96.0879%2032.587%2096.0807%2032.5957%2096.078%2032.6055Z%22%20fill%3D%22%239D4492%22%2F%3E%3Cpath%20d%3D%22M126.156%2049.8145C126.143%2049.8638%20126.152%2049.9192%20126.188%2049.9659C126.306%2050.1196%20126.85%2050.4363%20127.858%2050.9369C127.769%2051.8546%20127.754%2052.3743%20127.805%2052.5257C127.828%2052.5847%20127.875%2052.624%20127.932%2052.6289C128.028%2052.6336%20128.143%2052.6383%20128.823%2051.2356C130.975%2051.3584%20131.052%2051.1994%20131.101%2051.1069C131.104%2051.097%20131.111%2051.0884%20131.115%2051.0736C131.128%2051.0243%20131.119%2050.9689%20131.083%2050.9222C130.959%2050.7562%20130.325%2050.3941%20129.2%2049.8457C129.318%2048.3012%20129.216%2048.2472%20129.131%2048.203C129.081%2048.1735%20129.02%2048.1835%20128.97%2048.2279C128.849%2048.3328%20128.598%2048.7939%20128.209%2049.6407C126.292%2049.5445%20126.221%2049.6838%20126.175%2049.7824C126.166%2049.796%20126.159%2049.8046%20126.156%2049.8145Z%22%20fill%3D%22%23A7EE8D%22%2F%3E%3Cpath%20d%3D%22M120.338%2059.8887L121.794%2058.9664L119.823%2055.1516L118.367%2056.0739L120.338%2059.8887Z%22%20fill%3D%22%239BEC7D%22%2F%3E%3Cpath%20d%3D%22M117.531%2036.5586L116.343%2037.3991L118.15%2040.4974L119.339%2039.6569L117.531%2036.5586Z%22%20fill%3D%22%23FFBF19%22%2F%3E%3Cpath%20d%3D%22M80.6419%2025.9833L80.3163%2024.539L76.9483%2025.5732L77.2738%2027.0175L80.6419%2025.9833Z%22%20fill%3D%22%23FFBF19%22%2F%3E%3Cpath%20d%3D%22M109.829%2048.4349L108.749%2047.1323L105.618%2050.1823L106.698%2051.4849L109.829%2048.4349Z%22%20fill%3D%22%239D4492%22%2F%3E%3Cpath%20d%3D%22M66.7549%2020.4988L66.2797%2018.8115L62.3243%2020.2783L62.7995%2021.9656L66.7549%2020.4988Z%22%20fill%3D%22%239D4492%22%2F%3E%3Cpath%20d%3D%22M104.749%2024.9248L105.677%2026.3595L109.097%2023.7033L108.169%2022.2685L104.749%2024.9248Z%22%20fill%3D%22%239BEC7D%22%2F%3E%3Cpath%20d%3D%22M115.977%2091.7592C115.968%2091.7937%20115.973%2091.827%20115.995%2091.854C116.07%2091.9536%20116.301%2092.2199%20116.951%2092.5389C116.897%2093.1326%20117.008%2093.4088%20117.039%2093.5072C117.052%2093.5478%20117.084%2093.5724%20117.123%2093.5723C117.186%2093.5734%20117.352%2093.6739%20117.796%2092.7679C119.184%2092.8478%20119.142%2092.6486%20119.173%2092.5882C119.174%2092.5832%20119.177%2092.5734%20119.178%2092.5685C119.187%2092.534%20119.182%2092.5007%20119.16%2092.4737C119.078%2092.3667%20118.801%2092.0974%20118.074%2091.7416C118.15%2090.7464%20117.957%2090.7457%20117.901%2090.7199C117.868%2090.7003%20117.827%2090.7053%20117.796%2090.7336C117.719%2090.8028%20117.547%2090.9797%20117.291%2091.5294C116.053%2091.4689%20116.019%2091.6754%20115.987%2091.7407C115.986%2091.7457%20115.978%2091.7543%20115.977%2091.7592Z%22%20fill%3D%22%239BEC7D%22%2F%3E%3Cpath%20d%3D%22M127.489%2078.9367L126.811%2077.7749L124.057%2079.7229L124.735%2080.8847L127.489%2078.9367Z%22%20fill%3D%22%23FF623A%22%2F%3E%3Ccircle%20cx%3D%2273.5%22%20cy%3D%2264.7305%22%20r%3D%2227.5%22%20fill%3D%22%230E9F6E%22%2F%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M68.5539%2071.8815C68.8439%2072.1793%2069.3223%2072.1793%2069.6122%2071.8815L84.2185%2056.8765C84.9214%2056.1545%2086.0815%2056.1545%2086.7843%2056.8765C87.461%2057.5716%2087.461%2058.6791%2086.7843%2059.3742L70.0456%2076.5698C69.5183%2077.1115%2068.6479%2077.1115%2068.1206%2076.5698L60.2157%2068.4491C59.539%2067.754%2059.539%2066.6465%2060.2157%2065.9515C60.9185%2065.2294%2062.0786%2065.2294%2062.7815%2065.9515L68.5539%2071.8815Z%22%20fill%3D%22white%22%2F%3E%3C%2Fsvg%3E\";\nvar Expand = \"data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M12.0991%2015.6785C11.694%2016.1072%2011.0119%2016.1072%2010.6068%2015.6785L4.98828%209.73136C4.36988%209.0768%204.83393%208%205.73441%208L16.9715%208C17.872%208%2018.336%209.0768%2017.7176%209.73136L12.0991%2015.6785Z%22%20fill%3D%22%23B7B8BD%22%2F%3E%3C%2Fsvg%3E\";\nvar ExpandLight = \"data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M12.0991%2015.6785C11.694%2016.1072%2011.0119%2016.1072%2010.6068%2015.6785L4.98828%209.73136C4.36988%209.0768%204.83393%208%205.73441%208L16.9715%208C17.872%208%2018.336%209.0768%2017.7176%209.73136L12.0991%2015.6785Z%22%20fill%3D%22%23FFFFFF%22%2F%3E%3C%2Fsvg%3E\";\nvar InfoCircle = \"data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%20%20%20%20%3Cpath%20d%3D%22M13%2016H12V12H11M12%208H12.01M21%2012C21%2013.1819%2020.7672%2014.3522%2020.3149%2015.4442C19.8626%2016.5361%2019.1997%2017.5282%2018.364%2018.364C17.5282%2019.1997%2016.5361%2019.8626%2015.4442%2020.3149C14.3522%2020.7672%2013.1819%2021%2012%2021C10.8181%2021%209.64778%2020.7672%208.55585%2020.3149C7.46392%2019.8626%206.47177%2019.1997%205.63604%2018.364C4.80031%2017.5282%204.13738%2016.5361%203.68508%2015.4442C3.23279%2014.3522%203%2013.1819%203%2012C3%209.61305%203.94821%207.32387%205.63604%205.63604C7.32387%203.94821%209.61305%203%2012%203C14.3869%203%2016.6761%203.94821%2018.364%205.63604C20.0518%207.32387%2021%209.61305%2021%2012Z%22%20stroke%3D%22%236B7280%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20%2F%3E%3C%2Fsvg%3E\";\nvar InfoCircleLight = \"data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%20%20%20%20%3Cpath%20d%3D%22M13%2016H12V12H11M12%208H12.01M21%2012C21%2013.1819%2020.7672%2014.3522%2020.3149%2015.4442C19.8626%2016.5361%2019.1997%2017.5282%2018.364%2018.364C17.5282%2019.1997%2016.5361%2019.8626%2015.4442%2020.3149C14.3522%2020.7672%2013.1819%2021%2012%2021C10.8181%2021%209.64778%2020.7672%208.55585%2020.3149C7.46392%2019.8626%206.47177%2019.1997%205.63604%2018.364C4.80031%2017.5282%204.13738%2016.5361%203.68508%2015.4442C3.23279%2014.3522%203%2013.1819%203%2012C3%209.61305%203.94821%207.32387%205.63604%205.63604C7.32387%203.94821%209.61305%203%2012%203C14.3869%203%2016.6761%203.94821%2018.364%205.63604C20.0518%207.32387%2021%209.61305%2021%2012Z%22%20stroke%3D%22%239CA3AF%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20%2F%3E%3C%2Fsvg%3E\";\nconst icons = {\n    \"arrow-left\": {\n        image: CircleArrowLeft\n    },\n    close: {\n        image: Close\n    },\n    \"expand-light\": {\n        image: ExpandLight\n    },\n    expand: {\n        image: Expand\n    },\n    connected: {\n        image: Connected\n    },\n    \"information-circle-light\": {\n        image: InfoCircleLight\n    },\n    \"information-circle\": {\n        image: InfoCircle\n    }\n};\nfunction Icon(props) {\n    const { iconName, iconTitle = \"\", height = \"auto\", width = \"auto\" } = props;\n    return icons[iconName] ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"img\", {\n        className: iconTitle ? \"cursor-pointer\" : \"\",\n        height: height,\n        width: width,\n        src: icons[iconName].image,\n        alt: iconName,\n        title: iconTitle\n    }) : null;\n}\nfunction Image$1(props) {\n    const { hoverImageId, imageId, isButton = false, height = \"auto\", width = \"auto\" } = props;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"img\", {\n                src: `https://images.web3auth.io/${imageId}.svg`,\n                height: height,\n                width: width,\n                alt: imageId,\n                className: \"image-icon\"\n            }),\n            isButton ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"img\", {\n                src: `https://images.web3auth.io/${hoverImageId}.svg`,\n                height: height,\n                width: width,\n                alt: hoverImageId,\n                className: \"hover-icon\"\n            }) : null\n        ]\n    });\n}\nconst closeIcon$1 = /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Icon, {\n    iconName: \"close\"\n});\nfunction DetailedLoader(props) {\n    const { adapter, appLogo, message, modalStatus, adapterName, onClose } = props;\n    const web3authIcon = /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Image$1, {\n        imageId: \"web3auth\"\n    });\n    const providerIcon = /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Image$1, {\n        imageId: `login-${adapter}`\n    });\n    const [t] = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)(undefined, {\n        i18n: i18nInstance\n    });\n    const isDefaultLogo = [\n        DEFAULT_LOGO_DARK,\n        DEFAULT_LOGO_LIGHT\n    ].includes(appLogo);\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"adapter loader re-rendering\");\n        if (modalStatus === MODAL_STATUS.CONNECTED) {\n            setTimeout(()=>{\n                onClose();\n            }, 3000);\n        }\n    }, [\n        modalStatus,\n        onClose\n    ]);\n    return modalStatus !== MODAL_STATUS.INITIALIZED ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n        className: \"w3ajs-modal-loader w3a-modal__loader\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                className: \"w3a-modal__loader-content\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                        className: \"w3a-modal__loader-info\",\n                        children: [\n                            modalStatus === MODAL_STATUS.CONNECTING && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.Fragment, {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                        className: \"w3a-modal__loader-bridge\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                                className: [\n                                                    \"w3a-modal__loader-app-logo\",\n                                                    isDefaultLogo ? \"w3a-modal__loader-app-logo--default\" : \"\"\n                                                ].join(\" \"),\n                                                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"img\", {\n                                                    src: appLogo,\n                                                    alt: \"\"\n                                                })\n                                            }),\n                                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                                className: \"w3a-modal__connector\",\n                                                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                                    className: \"w3a-modal__connector-beat\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {}),\n                                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {}),\n                                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {}),\n                                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {}),\n                                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {})\n                                                    ]\n                                                })\n                                            }),\n                                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                                className: \"w3a-modal__loader-social-logo\",\n                                                children: providerIcon\n                                            })\n                                        ]\n                                    }),\n                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                                className: \"w3a-modal__loader-bridge-message\",\n                                                children: t(\"modal.adapter-loader.message1\", {\n                                                    adapter: adapterName\n                                                })\n                                            }),\n                                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                                className: \"w3a-modal__loader-bridge-message\",\n                                                children: t(\"modal.adapter-loader.message2\", {\n                                                    adapter: adapterName\n                                                })\n                                            })\n                                        ]\n                                    })\n                                ]\n                            }),\n                            modalStatus === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                className: \"flex flex-col items-center\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Icon, {\n                                        iconName: \"connected\"\n                                    }),\n                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                        className: \"w3ajs-modal-loader__message w3a-spinner-message mt-4\",\n                                        children: message\n                                    })\n                                ]\n                            }),\n                            modalStatus === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.ERRORED && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                className: \"w3ajs-modal-loader__message w3a-spinner-message w3a-spinner-message--error\",\n                                children: message\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                        className: \"w3a-spinner-power\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                children: t(\"modal.footer.message\")\n                            }),\n                            web3authIcon\n                        ]\n                    })\n                ]\n            }),\n            (modalStatus === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED || modalStatus === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.ERRORED) && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"button\", {\n                type: \"button\",\n                className: \"w3a-header__button w3ajs-loader-close-btn\",\n                onClick: onClose,\n                children: closeIcon$1\n            })\n        ]\n    }) : null;\n}\nconst closeIcon = /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Icon, {\n    iconName: \"close\"\n});\nfunction Loader(props) {\n    const { message, modalStatus, label, onClose, canEmit = true } = props;\n    const web3authIcon = /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Image$1, {\n        imageId: \"web3auth\"\n    });\n    const [t] = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)(undefined, {\n        i18n: i18nInstance\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"loader re-rendering\");\n        if (modalStatus === MODAL_STATUS.CONNECTED && canEmit) {\n            setTimeout(()=>{\n                onClose();\n            }, 3000);\n        }\n    }, [\n        canEmit,\n        modalStatus,\n        onClose\n    ]);\n    return modalStatus !== MODAL_STATUS.INITIALIZED ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n        className: \"w3ajs-modal-loader w3a-modal__loader\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                className: \"w3a-modal__loader-content\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                        className: \"w3a-modal__loader-info\",\n                        children: [\n                            modalStatus === MODAL_STATUS.CONNECTING && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                className: \"w3ajs-modal-loader__spinner w3a-spinner\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                        className: \"w3a-spinner__head\"\n                                    }),\n                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                        className: \"w3a-spinner__mask\"\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                className: \"w3ajs-modal-loader__label w3a-spinner-label\",\n                                children: label\n                            }),\n                            modalStatus === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                className: \"w3ajs-modal-loader__message w3a-spinner-message\",\n                                children: message\n                            }),\n                            modalStatus === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.ERRORED && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                className: \"w3ajs-modal-loader__message w3a-spinner-message w3a-spinner-message--error\",\n                                children: message\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                        className: \"w3a-spinner-power\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                children: t(\"modal.footer.message\")\n                            }),\n                            web3authIcon\n                        ]\n                    })\n                ]\n            }),\n            (modalStatus === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.CONNECTED || modalStatus === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_STATUS.ERRORED) && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"button\", {\n                type: \"button\",\n                className: \"w3a-header__button w3ajs-loader-close-btn\",\n                onClick: onClose,\n                children: closeIcon\n            })\n        ]\n    }) : null;\n}\nfunction WalletConnect(props) {\n    const { walletConnectUri } = props;\n    const [t] = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)(undefined, {\n        i18n: i18nInstance\n    });\n    // TODO: show only wcAdapters of current chain\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n        className: \"w3ajs-wallet-connect w3a-wallet-connect\",\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n            className: \"w3ajs-wallet-connect__container w3a-wallet-connect__container\",\n            children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                className: \"w3a-wallet-connect__container-desktop\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                        children: t(\"modal.external.walletconnect-subtitle\")\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                        className: \"w3ajs-wallet-connect-qr w3a-wallet-connect-qr\",\n                        tabIndex: 0,\n                        role: \"button\",\n                        onClick: ()=>copy_to_clipboard__WEBPACK_IMPORTED_MODULE_13___default()(walletConnectUri),\n                        onKeyDown: ()=>copy_to_clipboard__WEBPACK_IMPORTED_MODULE_13___default()(walletConnectUri),\n                        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(react_qrcode_logo__WEBPACK_IMPORTED_MODULE_14__.QRCode, {\n                            size: 200,\n                            eyeRadius: 5,\n                            qrStyle: \"dots\",\n                            removeQrCodeBehindLogo: true,\n                            logoImage: WALLET_CONNECT_LOGO,\n                            value: walletConnectUri\n                        })\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                        children: t(\"modal.external.walletconnect-copy\")\n                    })\n                ]\n            })\n        })\n    });\n}\nvar WalletConnect$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_8__.memo)(WalletConnect);\nfunction formatIOSMobile(params) {\n    const encodedUri = encodeURIComponent(params.uri);\n    if (params.universalLink) {\n        return `${params.universalLink}/wc?uri=${encodedUri}`;\n    }\n    if (params.deepLink) {\n        return `${params.deepLink}${params.deepLink.endsWith(\":\") ? \"//\" : \"/\"}wc?uri=${encodedUri}`;\n    }\n    return \"\";\n}\nfunction formatMobileRegistryEntry(entry, walletConnectUri, os) {\n    let platform = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"mobile\";\n    const universalLink = entry[platform].universal || \"\";\n    const deepLink = entry[platform].native || \"\";\n    return {\n        name: entry.name || \"\",\n        logo: entry.logo || \"\",\n        universalLink,\n        deepLink,\n        href: os === bowser__WEBPACK_IMPORTED_MODULE_12__[\"default\"].OS_MAP.iOS ? formatIOSMobile({\n            uri: walletConnectUri,\n            universalLink,\n            deepLink\n        }) : walletConnectUri\n    };\n}\nfunction formatMobileRegistry(registry, walletConnectUri, os) {\n    let platform = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"mobile\";\n    return Object.values(registry).filter((entry)=>!!entry[platform].universal || !!entry[platform].native).map((entry)=>formatMobileRegistryEntry(entry, walletConnectUri, os, platform));\n}\nfunction ExternalWallet(props) {\n    const { hideExternalWallets, handleExternalWalletClick, config = {}, walletConnectUri, showBackButton, modalStatus, wcAdapters } = props;\n    const [isLoaded, setIsLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(true);\n    const [adapterVisibilityMap, setAdapterVisibilityMap] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)({});\n    const [externalButtons, setExternalButtons] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)([]);\n    const deviceType = (0,react__WEBPACK_IMPORTED_MODULE_8__.useMemo)(()=>{\n        const browser = bowser__WEBPACK_IMPORTED_MODULE_12__[\"default\"].getParser(window.navigator.userAgent);\n        return browser.getPlatformType();\n    }, []);\n    const deviceDetails = (0,react__WEBPACK_IMPORTED_MODULE_8__.useMemo)(()=>{\n        const browser = bowser__WEBPACK_IMPORTED_MODULE_12__[\"default\"].getParser(window.navigator.userAgent);\n        return {\n            platform: browser.getPlatformType(),\n            os: browser.getOSName()\n        };\n    }, []);\n    const [t] = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)(undefined, {\n        i18n: i18nInstance\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        var _config$walletConnect;\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"loaded external wallets\", config, walletConnectUri, deviceType);\n        const walletConnectAdapterName = _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.WALLET_CONNECT_V2;\n        const wcAvailable = (((_config$walletConnect = config[walletConnectAdapterName]) === null || _config$walletConnect === void 0 ? void 0 : _config$walletConnect.showOnModal) || false) !== false;\n        if (wcAvailable && !walletConnectUri) {\n            setIsLoaded(false);\n            handleExternalWalletClick({\n                adapter: walletConnectAdapterName\n            });\n        } else if (Object.keys(config).length > 0) {\n            setIsLoaded(true);\n        }\n        const canShowMap = {};\n        Object.keys(config).forEach((adapter)=>{\n            const adapterConfig = config[adapter];\n            if (!adapterConfig.showOnModal) {\n                canShowMap[adapter] = false;\n                return;\n            }\n            if (deviceType === \"desktop\" && adapterConfig.showOnDesktop) {\n                canShowMap[adapter] = true;\n                return;\n            }\n            if ((deviceType === \"mobile\" || deviceType === \"tablet\") && adapterConfig.showOnMobile) {\n                canShowMap[adapter] = true;\n                return;\n            }\n            canShowMap[adapter] = false;\n        });\n        setAdapterVisibilityMap(canShowMap);\n    }, [\n        config,\n        handleExternalWalletClick,\n        walletConnectUri,\n        deviceType\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        const buttons = [];\n        // add wallet connect links\n        if (deviceDetails.platform === bowser__WEBPACK_IMPORTED_MODULE_12__[\"default\"].PLATFORMS_MAP.mobile) {\n            let mobileLinks = formatMobileRegistry(wcAdapters, walletConnectUri, deviceDetails.os, deviceDetails.platform);\n            if (deviceDetails.os === bowser__WEBPACK_IMPORTED_MODULE_12__[\"default\"].OS_MAP.iOS) {\n                var _window$ethereum;\n                if ((_window$ethereum = window.ethereum) !== null && _window$ethereum !== void 0 && _window$ethereum.isMetaMask) {\n                    // if metamask, use the metamask adapter directly\n                    mobileLinks = mobileLinks.filter((x)=>x.name !== \"MetaMask\");\n                }\n                buttons.push(...mobileLinks.map((link)=>({\n                        name: link.name,\n                        href: link.href,\n                        logo: link.logo,\n                        isLink: true,\n                        block: false\n                    })));\n            } else if (mobileLinks.length > 0) {\n                buttons.push({\n                    name: \"WalletConnect\",\n                    href: mobileLinks[0].href,\n                    logo: WALLET_CONNECT_LOGO,\n                    isLink: true,\n                    block: true\n                });\n            }\n        }\n        const adapterBtns = Object.keys(config).filter((adapter)=>![\n                _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.WALLET_CONNECT_V2\n            ].includes(adapter) && adapterVisibilityMap[adapter]).map((adapter)=>({\n                name: adapter,\n                isLink: false,\n                block: false\n            }));\n        if (adapterBtns.length === 1 && deviceDetails.os !== bowser__WEBPACK_IMPORTED_MODULE_12__[\"default\"].OS_MAP.iOS) adapterBtns[0].block = true;\n        buttons.push(...adapterBtns);\n        setExternalButtons(buttons);\n    }, [\n        wcAdapters,\n        config,\n        deviceDetails.os,\n        deviceDetails.platform,\n        walletConnectUri,\n        adapterVisibilityMap\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n        className: \"w3ajs-external-wallet w3a-group\",\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n            className: \"w3a-external-container w3ajs-external-container\",\n            children: [\n                showBackButton && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"button\", {\n                    type: \"button\",\n                    className: \"w3a-external-back w3ajs-external-back\",\n                    onClick: ()=>hideExternalWallets(),\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Icon, {\n                            iconName: \"arrow-left\"\n                        }),\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                            className: \"w3a-group__title\",\n                            children: t(\"modal.external.back\")\n                        })\n                    ]\n                }),\n                !isLoaded && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Loader, {\n                    modalStatus: MODAL_STATUS.CONNECTING,\n                    canEmit: false\n                }),\n                Object.keys(config).map((adapter)=>{\n                    if (walletConnectUri && deviceDetails.platform === bowser__WEBPACK_IMPORTED_MODULE_12__[\"default\"].PLATFORMS_MAP.desktop && [\n                        _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.WALLET_CONNECT_V2\n                    ].includes(adapter)) {\n                        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(WalletConnect$1, {\n                            walletConnectUri: walletConnectUri\n                        }, adapter);\n                    }\n                    return null;\n                }),\n                modalStatus === MODAL_STATUS.INITIALIZED && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"ul\", {\n                    className: \"w3a-adapter-list w3ajs-wallet-adapters\",\n                    children: externalButtons.map((button)=>{\n                        var _config$button$name, _config$button$name2;\n                        const providerIcon = button.isLink ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"img\", {\n                            src: button.logo,\n                            height: \"auto\",\n                            width: \"auto\",\n                            alt: `login-${button.name}`\n                        }) : /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Image$1, {\n                            imageId: `login-${button.name}`,\n                            hoverImageId: `login-${button.name}`,\n                            isButton: true\n                        });\n                        const isBlock = externalButtons.length === 1 || button.block;\n                        const label = isBlock ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"p\", {\n                            className: \"ml-2 text-left\",\n                            children: ((_config$button$name = config[button.name]) === null || _config$button$name === void 0 ? void 0 : _config$button$name.label) || button.name\n                        }) : \"\";\n                        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"li\", {\n                            className: [\n                                `w3a-adapter-item`,\n                                isBlock ? \"w3a-adapter-item--full\" : \"col-span-2\"\n                            ].join(\" \"),\n                            children: button.isLink ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"a\", {\n                                href: button.href,\n                                rel: \"noopener noreferrer\",\n                                target: \"_blank\",\n                                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"button\", {\n                                    type: \"button\",\n                                    className: \"w-full w3a-button w3a-button--login\",\n                                    children: [\n                                        providerIcon,\n                                        label\n                                    ]\n                                })\n                            }, button.name) : /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"button\", {\n                                type: \"button\",\n                                onClick: ()=>handleExternalWalletClick({\n                                        adapter: button.name\n                                    }),\n                                className: \"w-full w3a-button w3a-button--login\",\n                                title: ((_config$button$name2 = config[button.name]) === null || _config$button$name2 === void 0 ? void 0 : _config$button$name2.label) || button.name,\n                                children: [\n                                    providerIcon,\n                                    label\n                                ]\n                            })\n                        }, button.name);\n                    })\n                })\n            ]\n        })\n    });\n}\nfunction Footer(props) {\n    const { privacyPolicy, tncLink, defaultLanguage = \"en\" } = props;\n    const [t] = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)(undefined, {\n        i18n: i18nInstance\n    });\n    const getPrivacyUrl = (0,react__WEBPACK_IMPORTED_MODULE_8__.useCallback)(()=>{\n        return (privacyPolicy === null || privacyPolicy === void 0 ? void 0 : privacyPolicy[defaultLanguage]) || (privacyPolicy === null || privacyPolicy === void 0 ? void 0 : privacyPolicy.en) || \"https://docs.web3auth.io/legal/privacy-policy\";\n    }, [\n        privacyPolicy,\n        defaultLanguage\n    ]);\n    const getTncUrl = (0,react__WEBPACK_IMPORTED_MODULE_8__.useCallback)(()=>{\n        return (tncLink === null || tncLink === void 0 ? void 0 : tncLink[defaultLanguage]) || (tncLink === null || tncLink === void 0 ? void 0 : tncLink.en) || \"https://docs.web3auth.io/legal/terms-and-conditions\";\n    }, [\n        tncLink,\n        defaultLanguage\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n        className: \"w3a-modal__footer\",\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n            className: \"w3a-footer\",\n            children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                            children: t(\"modal.footer.message-new\")\n                        })\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                        className: \"w3a-footer__links\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"a\", {\n                                href: getTncUrl(),\n                                target: \"_blank\",\n                                rel: \"noreferrer noopener\",\n                                children: t(\"modal.footer.terms-service\")\n                            }),\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"span\", {\n                                children: \"|\"\n                            }),\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"a\", {\n                                href: getPrivacyUrl(),\n                                target: \"_blank\",\n                                rel: \"noreferrer noopener\",\n                                children: t(\"modal.footer.policy\")\n                            })\n                        ]\n                    })\n                ]\n            })\n        })\n    });\n}\nvar Footer$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_8__.memo)(Footer);\nfunction Header(props) {\n    const { isDark } = (0,react__WEBPACK_IMPORTED_MODULE_8__.useContext)(ThemedContext);\n    const { onClose, appLogo, appName } = props;\n    const [t] = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)(undefined, {\n        i18n: i18nInstance\n    });\n    const headerLogo = [\n        DEFAULT_LOGO_DARK,\n        DEFAULT_LOGO_LIGHT\n    ].includes(appLogo) ? \"\" : appLogo;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n        className: \"w3a-modal__header\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                className: \"w3a-header\",\n                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                    children: [\n                        headerLogo && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                            className: \"w3a-header__logo\",\n                            children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"img\", {\n                                src: headerLogo,\n                                alt: \"\"\n                            })\n                        }),\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                            className: \"w3a-header__title\",\n                            children: t(\"modal.header-title\")\n                        }),\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                            className: \"w3a-header__subtitle\",\n                            children: [\n                                t(\"modal.header-subtitle-name\", {\n                                    appName\n                                }),\n                                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                    className: \"relative flex flex-col items-center group cursor-pointer\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Icon, {\n                                            iconName: `information-circle${isDark ? \"-light\" : \"\"}`\n                                        }),\n                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                            className: \"absolute top-4 z-20 flex-col items-center hidden mb-5 group-hover:flex\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                                    className: \"w-3 h-3 ml-[3px] -mb-2 rotate-45 bg-app-gray-50 dark:bg-app-gray-600\"\n                                                }),\n                                                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                                    className: \"relative -ml-[100px] p-4 w-[300px] text-xs leading-none text-white rounded-md bg-app-gray-50 dark:bg-app-gray-600 shadow-lg\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                                            className: \"text-xs font-medium mb-1 text-app-gray-900 dark:text-white\",\n                                                            children: t(\"modal.header-tooltip-title\")\n                                                        }),\n                                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                                            className: \"text-xs text-app-gray-400\",\n                                                            children: t(\"modal.header-tooltip-desc\")\n                                                        })\n                                                    ]\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                })\n                            ]\n                        })\n                    ]\n                })\n            }),\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"button\", {\n                type: \"button\",\n                onClick: onClose,\n                className: \"w3a-header__button w3ajs-close-btn\",\n                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Icon, {\n                    iconName: \"close\"\n                })\n            })\n        ]\n    });\n}\nconst memoizedHeader = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_8__.memo)(Header, (prevProps, nextProps)=>{\n    if (prevProps.appLogo !== nextProps.appLogo) {\n        return true;\n    }\n    return false;\n});\nmemoizedHeader.displayName = \"Header\";\nconst getAdapterSocialLogins = function(adapterName) {\n    let loginMethodsConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalLoginMethodsConfig = {};\n    if (adapterName === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.OPENLOGIN) {\n        OPENLOGIN_PROVIDERS.forEach((loginMethod)=>{\n            const currentLoginMethodConfig = loginMethodsConfig[loginMethod] || {\n                name: OPENLOGIN_PROVIDERS_NAMES[loginMethod],\n                showOnMobile: true,\n                showOnModal: true,\n                showOnDesktop: true\n            };\n            finalLoginMethodsConfig[loginMethod] = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, currentLoginMethodConfig);\n        });\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"OpenLogin login method ui config\", finalLoginMethodsConfig);\n    } else {\n        throw new Error(`${adapterName} is not a valid adapter`);\n    }\n    return finalLoginMethodsConfig;\n};\nasync function validateImageUrl(url) {\n    return new Promise((resolve, reject)=>{\n        const img = new Image();\n        img.src = url;\n        if (img.complete) {\n            resolve(true);\n        } else {\n            img.addEventListener(\"load\", ()=>{\n                resolve(true);\n            });\n            img.addEventListener(\"error\", ()=>{\n                reject();\n            });\n        }\n    });\n}\nasync function getNetworkIconId(ticker) {\n    const fallbackId = \"network-default\";\n    if (!ticker) return fallbackId;\n    try {\n        const url = `https://images.web3auth.io/network-${ticker.toLowerCase()}.svg`;\n        const isValid = await validateImageUrl(url);\n        if (isValid) {\n            return `network-${ticker.toLowerCase()}`;\n        }\n        return fallbackId;\n    } catch  {\n        return fallbackId;\n    }\n}\nconst passwordlessBackendUrl = \"https://api-passwordless.web3auth.io\";\nconst getUserCountry = async ()=>{\n    try {\n        const result = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_15__.get)(`${passwordlessBackendUrl}/api/v3/user/location`);\n        if (result && result.data.country) return {\n            country: result.data.country,\n            dialCode: result.data.dial_code\n        };\n        return null;\n    } catch (error) {\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(\"error getting user country\", error);\n        return null;\n    }\n};\nconst validatePhoneNumber = async (phoneNumber)=>{\n    try {\n        const result = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_15__.post)(`${passwordlessBackendUrl}/api/v3/phone_number/validate`, {\n            phone_number: phoneNumber\n        });\n        if (result && result.success) return result.parsed_number;\n        return false;\n    } catch (error) {\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(\"error validating phone number\", error);\n        if (error.status === 400) {\n            return false;\n        }\n        // sending true because we don't want the user to be stuck on a flow\n        // if there is an error with the api or something went wrong.\n        return true;\n    }\n};\nconst languageMap = {\n    en: \"english\",\n    de: \"german\",\n    ja: \"japanese\",\n    ko: \"korean\",\n    zh: \"mandarin\",\n    es: \"spanish\",\n    fr: \"french\",\n    pt: \"portuguese\",\n    nl: \"dutch\"\n};\nconst getUserLanguage = (defaultLanguage)=>{\n    let userLanguage = defaultLanguage;\n    if (!userLanguage) {\n        const browserLanguage =  false ? 0 : \"en-US\";\n        userLanguage = browserLanguage.split(\"-\")[0];\n    }\n    return Object.prototype.hasOwnProperty.call(languageMap, userLanguage) ? userLanguage : \"en\";\n};\nfunction SocialLoginPasswordless(props) {\n    const { handleSocialLoginClick, adapter, isPrimaryBtn, isEmailVisible, isSmsVisible, primaryColor } = props;\n    const { isDark } = (0,react__WEBPACK_IMPORTED_MODULE_8__.useContext)(ThemedContext);\n    const [fieldValue, setFieldValue] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(\"\");\n    const [countryCode, setCountryCode] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(\"\");\n    const [isValidInput, setIsValidInput] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(null);\n    const [t] = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)(undefined, {\n        i18n: i18nInstance\n    });\n    const handleFormSubmit = async (e)=>{\n        e.preventDefault();\n        const value = fieldValue;\n        const isEmailValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n        if (isEmailValid) {\n            return handleSocialLoginClick({\n                adapter,\n                loginParams: {\n                    loginProvider: _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.EMAIL_PASSWORDLESS,\n                    login_hint: value,\n                    name: \"Email\"\n                }\n            });\n        }\n        const number = value.startsWith(\"+\") ? value : `${countryCode}${value}`;\n        const result = await validatePhoneNumber(number);\n        if (result) {\n            return handleSocialLoginClick({\n                adapter,\n                loginParams: {\n                    loginProvider: _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.SMS_PASSWORDLESS,\n                    login_hint: typeof result === \"string\" ? result : number,\n                    name: \"Mobile\"\n                }\n            });\n        }\n        setIsValidInput(false);\n        return undefined;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        const getLocation = async ()=>{\n            const result = await getUserCountry();\n            if (result && result.dialCode) {\n                setCountryCode(result.dialCode);\n            }\n        };\n        if (isSmsVisible) getLocation();\n    }, [\n        isSmsVisible\n    ]);\n    const handleInputChange = (e)=>{\n        setFieldValue(e.target.value);\n        if (isValidInput === false) setIsValidInput(null);\n    };\n    const title = (0,react__WEBPACK_IMPORTED_MODULE_8__.useMemo)(()=>{\n        if (isEmailVisible && isSmsVisible) return \"modal.social.passwordless-title\";\n        if (isEmailVisible) return \"modal.social.email\";\n        return \"modal.social.phone\";\n    }, [\n        isEmailVisible,\n        isSmsVisible\n    ]);\n    const placeholder = (0,react__WEBPACK_IMPORTED_MODULE_8__.useMemo)(()=>{\n        if (isEmailVisible && isSmsVisible) return \"+(00)123456/name@example.com\";\n        if (isEmailVisible) return \"name@example.com\";\n        return \"+(00)123456\";\n    }, [\n        isEmailVisible,\n        isSmsVisible\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n        className: \"w3ajs-passwordless w3a-group w3a-group--passwordless\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                className: \"w3a-group__title\",\n                children: [\n                    t(title),\n                    isSmsVisible && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                        className: \"relative flex flex-col items-center cursor-pointer group\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Icon, {\n                                iconName: `information-circle${isDark ? \"-light\" : \"\"}`\n                            }),\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                className: \"absolute z-20 flex-col items-center hidden mb-5 top-4 group-hover:flex\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                        className: \"w-3 h-3 ml-[3px] -mb-2 rotate-45 bg-app-gray-50 dark:bg-app-gray-600\"\n                                    }),\n                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                        className: \"relative p-4 w-[300px] text-xs leading-none text-white rounded-md bg-app-gray-50 dark:bg-app-gray-600 shadow-lg\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                                className: \"mb-1 text-xs font-medium text-app-gray-900 dark:text-white\",\n                                                children: t(\"modal.popup.phone-header\")\n                                            }),\n                                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                                className: \"text-xs text-app-gray-400\",\n                                                children: t(\"modal.popup.phone-body\")\n                                            })\n                                        ]\n                                    })\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"form\", {\n                className: \"w3ajs-passwordless-form\",\n                onSubmit: (e)=>handleFormSubmit(e),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"input\", {\n                        className: \"w-full mb-4 w3a-text-field\",\n                        name: \"passwordless-input\",\n                        required: true,\n                        placeholder: `${t(\"modal.social.sms-placeholder-text\")} ${placeholder}`,\n                        onFocus: (e)=>e.target.placeholder = \"\",\n                        onBlur: (e)=>e.target.placeholder = `${t(\"modal.social.sms-placeholder-text\")} ${placeholder}`,\n                        onChange: (e)=>handleInputChange(e)\n                    }),\n                    isValidInput === false && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                        className: \"w3a-sms-field--error\",\n                        children: t(\"modal.errors-invalid-number-email\")\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"button\", {\n                        disabled: fieldValue === \"\",\n                        className: `w3a-button ${isPrimaryBtn ? \"w3a-button--primary\" : \"\"} w-full`,\n                        style: {\n                            backgroundColor: isPrimaryBtn ? primaryColor || \"\" : \"\"\n                        },\n                        type: \"submit\",\n                        children: t(\"modal.social.passwordless-cta\")\n                    })\n                ]\n            })\n        ]\n    });\n}\nfunction SocialLogins(props) {\n    const [canShowMore, setCanShowMore] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(false);\n    const [isExpanded, setIsExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(false);\n    const { socialLoginsConfig = {\n        loginMethods: {},\n        loginMethodsOrder: [],\n        adapter: \"\",\n        uiConfig: {}\n    }, handleSocialLoginClick } = props;\n    const { isDark } = (0,react__WEBPACK_IMPORTED_MODULE_8__.useContext)(ThemedContext);\n    const [t] = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)(undefined, {\n        i18n: i18nInstance\n    });\n    // Too small a function to use `useCallback`\n    const expandClickHandler = ()=>{\n        setIsExpanded(!isExpanded);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        const maxOptions = Object.keys(socialLoginsConfig.loginMethods).filter((loginMethodKey)=>{\n            return socialLoginsConfig.loginMethods[loginMethodKey].showOnModal;\n        });\n        setCanShowMore(maxOptions.length > 4);\n    }, [\n        socialLoginsConfig.loginMethods\n    ]);\n    const adapterListClass = classnames__WEBPACK_IMPORTED_MODULE_16___default()(\"w3a-adapter-list\", \"w3ajs-socials-adapters\", !isExpanded ? \" w3a-adapter-list--shrink\" : \"\");\n    const adapterButtonClass = classnames__WEBPACK_IMPORTED_MODULE_16___default()(\"w3a-button-expand\", \"w3ajs-button-expand\", isExpanded ? \"w3a-button--rotate\" : \"\");\n    const adapterExpandText = isExpanded ? t(\"modal.social.view-less\") : t(\"modal.social.view-more\");\n    const loginMethodsCount = Object.keys(socialLoginsConfig.loginMethods).length + 1;\n    const restrictedLoginMethods = [\n        _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.WEBAUTHN,\n        _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.JWT,\n        _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.SMS_PASSWORDLESS,\n        _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.EMAIL_PASSWORDLESS\n    ];\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n        className: \"w3ajs-social-logins w3a-group\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"ul\", {\n                className: adapterListClass,\n                children: Object.keys(socialLoginsConfig.loginMethods).map((method)=>{\n                    var _socialLoginsConfig$u, _socialLoginsConfig$u2, _socialLoginsConfig$u3;\n                    const name = capitalizeFirstLetter(socialLoginsConfig.loginMethods[method].name || method);\n                    const orderIndex = socialLoginsConfig.loginMethodsOrder.indexOf(method) + 1;\n                    const order = orderIndex || Object.keys(socialLoginsConfig.loginMethods).length + 1;\n                    const isMainOption = socialLoginsConfig.loginMethods[method].mainOption;\n                    const isPrimaryBtn = (socialLoginsConfig === null || socialLoginsConfig === void 0 || (_socialLoginsConfig$u = socialLoginsConfig.uiConfig) === null || _socialLoginsConfig$u === void 0 ? void 0 : _socialLoginsConfig$u.primaryButton) === \"socialLogin\" && order === 1;\n                    const primaryColor = (socialLoginsConfig === null || socialLoginsConfig === void 0 || (_socialLoginsConfig$u2 = socialLoginsConfig.uiConfig) === null || _socialLoginsConfig$u2 === void 0 || (_socialLoginsConfig$u2 = _socialLoginsConfig$u2.theme) === null || _socialLoginsConfig$u2 === void 0 ? void 0 : _socialLoginsConfig$u2.primary) || \"\";\n                    const imageId = `login-${method}${isDark || isPrimaryBtn ? \"-light\" : \"-dark\"}`;\n                    const hoverId = `login-${method}-active`;\n                    const hoverImage = method === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.APPLE || method === _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.GITHUB ? imageId : hoverId;\n                    const providerIcon = /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Image$1, {\n                        width: \"20\",\n                        imageId: imageId,\n                        hoverImageId: hoverImage,\n                        isButton: true\n                    });\n                    if (socialLoginsConfig.loginMethods[method].showOnModal === false || restrictedLoginMethods.includes(method)) {\n                        return null;\n                    }\n                    const loginMethodSpan = classnames__WEBPACK_IMPORTED_MODULE_16___default()(\"w3a-adapter-item\", (socialLoginsConfig === null || socialLoginsConfig === void 0 || (_socialLoginsConfig$u3 = socialLoginsConfig.uiConfig) === null || _socialLoginsConfig$u3 === void 0 ? void 0 : _socialLoginsConfig$u3.loginGridCol) === 2 ? \"col-span-3\" : \"col-span-2\");\n                    if (isMainOption || order === 1) {\n                        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"li\", {\n                            className: \"col-span-6 w3a-adapter-item\",\n                            style: {\n                                order\n                            },\n                            children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"button\", {\n                                type: \"button\",\n                                onClick: ()=>handleSocialLoginClick({\n                                        adapter: socialLoginsConfig.adapter,\n                                        loginParams: {\n                                            loginProvider: method,\n                                            name,\n                                            login_hint: \"\"\n                                        }\n                                    }),\n                                className: `w3a-button ${isPrimaryBtn ? \"w3a-button--primary\" : \"\"} w3a-button--login h-12 w-full`,\n                                style: {\n                                    backgroundColor: isPrimaryBtn ? primaryColor : \"\"\n                                },\n                                title: name,\n                                children: [\n                                    providerIcon,\n                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"p\", {\n                                        className: \"ml-2\",\n                                        children: t(\"modal.social.continueCustom\", {\n                                            adapter: name\n                                        })\n                                    })\n                                ]\n                            })\n                        }, method);\n                    }\n                    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"li\", {\n                        className: loginMethodSpan,\n                        style: {\n                            order: order + loginMethodsCount\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"button\", {\n                            type: \"button\",\n                            onClick: ()=>handleSocialLoginClick({\n                                    adapter: socialLoginsConfig.adapter,\n                                    loginParams: {\n                                        loginProvider: method,\n                                        name,\n                                        login_hint: \"\"\n                                    }\n                                }),\n                            className: \"w-full w3a-button w3a-button--login\",\n                            title: name,\n                            children: providerIcon\n                        })\n                    }, method);\n                })\n            }),\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                className: \"w3a-social__policy\",\n                children: t(\"modal.social.policy\")\n            }),\n            canShowMore && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                className: \"text-right\",\n                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"button\", {\n                    type: \"button\",\n                    className: adapterButtonClass,\n                    onClick: expandClickHandler,\n                    children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"span\", {\n                        className: \"w3ajs-button-expand-text\",\n                        children: adapterExpandText\n                    })\n                })\n            })\n        ]\n    });\n}\n_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.enableAll();\n// const DETAILED_ADAPTERS = [WALLET_ADAPTERS.PHANTOM, WALLET_ADAPTERS.METAMASK];\nfunction Modal(props) {\n    var _modalState$socialLog, _modalState$socialLog2, _whiteLabel$theme, _modalState$socialLog5, _modalState$socialLog7, _modalState$socialLog9, _modalState$socialLog10;\n    const [modalTransitionClasses, setModalTransitionClasses] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)([\n        \"w3a-modal__inner\"\n    ]);\n    const [modalState, setModalState] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)({\n        externalWalletsVisibility: false,\n        status: MODAL_STATUS.INITIALIZED,\n        hasExternalWallets: false,\n        externalWalletsInitialized: false,\n        modalVisibility: false,\n        modalVisibilityDelayed: false,\n        postLoadingMessage: \"\",\n        walletConnectUri: \"\",\n        socialLoginsConfig: {\n            loginMethods: {},\n            loginMethodsOrder: [],\n            adapter: \"\",\n            uiConfig: {}\n        },\n        externalWalletsConfig: {},\n        detailedLoaderAdapter: \"\",\n        detailedLoaderAdapterName: \"\",\n        showExternalWalletsOnly: false,\n        wcAdapters: []\n    });\n    const { isDark } = (0,react__WEBPACK_IMPORTED_MODULE_8__.useContext)(ThemedContext);\n    const [t] = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)(undefined, {\n        i18n: i18nInstance\n    });\n    const { stateListener, appLogo, appName, handleSocialLoginClick, handleExternalWalletClick, handleShowExternalWallets, closeModal, whiteLabel } = props;\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        stateListener.emit(\"MOUNTED\");\n        stateListener.on(\"STATE_UPDATED\", (newModalState)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"state updated\", newModalState);\n            setModalState((prevState)=>{\n                const mergedState = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_6___default()(lodash_merge__WEBPACK_IMPORTED_MODULE_7___default()(prevState, newModalState));\n                return mergedState;\n            });\n        });\n    }, [\n        stateListener\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        let timeOutId;\n        if (modalState.modalVisibility) {\n            setModalState((prevState)=>{\n                return _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, prevState), {}, {\n                    modalVisibilityDelayed: modalState.modalVisibility\n                });\n            });\n            timeOutId = window.setTimeout(()=>{\n                setModalTransitionClasses([\n                    \"w3a-modal__inner\",\n                    modalState.modalVisibility ? \"w3a-modal__inner--active\" : \"\"\n                ]);\n            // hide external wallets, if modal is closing, so that it will show social login screen on reopen.\n            }, 100);\n        } else {\n            setModalTransitionClasses([\n                \"w3a-modal__inner\",\n                modalState.modalVisibility ? \"w3a-modal__inner--active\" : \"\"\n            ]);\n            // hide external wallets, if modal is closing, so that it will show social login screen on reopen.\n            timeOutId = window.setTimeout(()=>{\n                setModalState((prevState)=>{\n                    return _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, prevState), {}, {\n                        modalVisibilityDelayed: modalState.modalVisibility\n                    });\n                });\n            }, 250);\n        }\n        return ()=>{\n            clearTimeout(timeOutId);\n        };\n    }, [\n        modalState.modalVisibility\n    ]);\n    const onCloseLoader = (0,react__WEBPACK_IMPORTED_MODULE_8__.useCallback)(()=>{\n        if (modalState.status === MODAL_STATUS.CONNECTED) {\n            closeModal();\n        }\n        if (modalState.status === MODAL_STATUS.ERRORED) {\n            setModalState((prevState)=>{\n                return _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, prevState), {}, {\n                    modalVisibility: true,\n                    status: MODAL_STATUS.INITIALIZED\n                });\n            });\n        }\n    }, [\n        closeModal,\n        modalState.status\n    ]);\n    const preHandleExternalWalletClick = (0,react__WEBPACK_IMPORTED_MODULE_8__.useCallback)((params)=>{\n        const { adapter } = params;\n        setModalState((prevState)=>{\n            return _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, prevState), {}, {\n                detailedLoaderAdapter: adapter,\n                detailedLoaderAdapterName: _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_NAMES[adapter]\n            });\n        });\n        handleExternalWalletClick(params);\n    }, [\n        handleExternalWalletClick\n    ]);\n    const preHandleSocialWalletClick = (params)=>{\n        const { loginParams } = params;\n        setModalState((prevState)=>{\n            return _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, prevState), {}, {\n                detailedLoaderAdapter: loginParams.loginProvider,\n                detailedLoaderAdapterName: loginParams.name\n            });\n        });\n        handleSocialLoginClick(params);\n    };\n    const isEmailPrimary = ((_modalState$socialLog = modalState.socialLoginsConfig) === null || _modalState$socialLog === void 0 || (_modalState$socialLog = _modalState$socialLog.uiConfig) === null || _modalState$socialLog === void 0 ? void 0 : _modalState$socialLog.primaryButton) === \"emailLogin\";\n    const isExternalPrimary = ((_modalState$socialLog2 = modalState.socialLoginsConfig) === null || _modalState$socialLog2 === void 0 || (_modalState$socialLog2 = _modalState$socialLog2.uiConfig) === null || _modalState$socialLog2 === void 0 ? void 0 : _modalState$socialLog2.primaryButton) === \"externalLogin\";\n    const primaryColor = (whiteLabel === null || whiteLabel === void 0 || (_whiteLabel$theme = whiteLabel.theme) === null || _whiteLabel$theme === void 0 ? void 0 : _whiteLabel$theme.primary) || \"\";\n    const externalWalletButton = /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n        className: \"w3ajs-external-wallet w3a-group\",\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n            className: \"w3a-external-toggle w3ajs-external-toggle\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                    className: \"w3a-group__title\",\n                    children: t(\"modal.external.title\")\n                }),\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"button\", {\n                    type: \"button\",\n                    className: `w3a-button ${isExternalPrimary ? \"w3a-button--primary\" : \"\"} w-full w3ajs-external-toggle__button`,\n                    style: {\n                        backgroundColor: isExternalPrimary ? primaryColor : \"\"\n                    },\n                    onClick: ()=>{\n                        handleShowExternalWallets(modalState.externalWalletsInitialized);\n                        setModalState((prevState)=>{\n                            return _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, prevState), {}, {\n                                externalWalletsVisibility: true\n                            });\n                        });\n                    },\n                    children: t(\"modal.external.connect\")\n                })\n            ]\n        })\n    });\n    const areSocialLoginsVisible = (0,react__WEBPACK_IMPORTED_MODULE_8__.useMemo)(()=>{\n        var _modalState$socialLog3, _modalState$socialLog4;\n        if (modalState.showExternalWalletsOnly) return false;\n        if (Object.keys(((_modalState$socialLog3 = modalState.socialLoginsConfig) === null || _modalState$socialLog3 === void 0 ? void 0 : _modalState$socialLog3.loginMethods) || {}).length === 0) return false;\n        const isAnySocialLoginVisible = Object.entries(((_modalState$socialLog4 = modalState.socialLoginsConfig) === null || _modalState$socialLog4 === void 0 ? void 0 : _modalState$socialLog4.loginMethods) || {}).some((_ref)=>{\n            let [k, v] = _ref;\n            return k !== _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.EMAIL_PASSWORDLESS && v.showOnModal !== false;\n        });\n        if (isAnySocialLoginVisible) return true;\n        return false;\n    }, [\n        modalState.showExternalWalletsOnly,\n        (_modalState$socialLog5 = modalState.socialLoginsConfig) === null || _modalState$socialLog5 === void 0 ? void 0 : _modalState$socialLog5.loginMethods\n    ]);\n    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.info(\"modal state\", modalState, areSocialLoginsVisible);\n    const isEmailPasswordlessLoginVisible = (0,react__WEBPACK_IMPORTED_MODULE_8__.useMemo)(()=>{\n        var _modalState$socialLog6;\n        return (_modalState$socialLog6 = modalState.socialLoginsConfig) === null || _modalState$socialLog6 === void 0 || (_modalState$socialLog6 = _modalState$socialLog6.loginMethods[_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.EMAIL_PASSWORDLESS]) === null || _modalState$socialLog6 === void 0 ? void 0 : _modalState$socialLog6.showOnModal;\n    }, [\n        (_modalState$socialLog7 = modalState.socialLoginsConfig) === null || _modalState$socialLog7 === void 0 ? void 0 : _modalState$socialLog7.loginMethods\n    ]);\n    const isSmsPasswordlessLoginVisible = (0,react__WEBPACK_IMPORTED_MODULE_8__.useMemo)(()=>{\n        var _modalState$socialLog8;\n        return (_modalState$socialLog8 = modalState.socialLoginsConfig) === null || _modalState$socialLog8 === void 0 || (_modalState$socialLog8 = _modalState$socialLog8.loginMethods[_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_0__.LOGIN_PROVIDER.SMS_PASSWORDLESS]) === null || _modalState$socialLog8 === void 0 ? void 0 : _modalState$socialLog8.showOnModal;\n    }, [\n        (_modalState$socialLog9 = modalState.socialLoginsConfig) === null || _modalState$socialLog9 === void 0 ? void 0 : _modalState$socialLog9.loginMethods\n    ]);\n    // const modalClassName = `w3a-modal ${isDark ? \"\" : \" w3a-modal--light\"}`;\n    const modalClassName = `w3a-modal ${isDark ? \"\" : \"\"}`;\n    return modalState.modalVisibilityDelayed && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n        id: \"w3a-modal\",\n        className: modalClassName,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n            className: modalTransitionClasses.join(\" \"),\n            children: [\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(memoizedHeader, {\n                    onClose: closeModal,\n                    appLogo: appLogo,\n                    appName: appName\n                }),\n                modalState.status !== MODAL_STATUS.INITIALIZED ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                    className: \"w3a-modal__content w3ajs-content\",\n                    children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(DetailedLoader, {\n                        onClose: onCloseLoader,\n                        appLogo: appLogo,\n                        modalStatus: modalState.status,\n                        message: t(modalState.postLoadingMessage),\n                        adapter: modalState.detailedLoaderAdapter,\n                        adapterName: modalState.detailedLoaderAdapterName\n                    })\n                }) : /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                    className: \"w3a-modal__content w3ajs-content\",\n                    children: (areSocialLoginsVisible || isEmailPasswordlessLoginVisible || isSmsPasswordlessLoginVisible) && !modalState.externalWalletsVisibility ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.Fragment, {\n                        children: [\n                            areSocialLoginsVisible ? /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(SocialLogins, {\n                                handleSocialLoginClick: (params)=>preHandleSocialWalletClick(params),\n                                socialLoginsConfig: modalState.socialLoginsConfig\n                            }) : null,\n                            (isEmailPasswordlessLoginVisible || isSmsPasswordlessLoginVisible) && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(SocialLoginPasswordless, {\n                                isEmailVisible: isEmailPasswordlessLoginVisible,\n                                isSmsVisible: isSmsPasswordlessLoginVisible,\n                                adapter: (_modalState$socialLog10 = modalState.socialLoginsConfig) === null || _modalState$socialLog10 === void 0 ? void 0 : _modalState$socialLog10.adapter,\n                                handleSocialLoginClick: (params)=>preHandleSocialWalletClick(params),\n                                isPrimaryBtn: isEmailPrimary,\n                                primaryColor: primaryColor\n                            }),\n                            modalState.hasExternalWallets && externalWalletButton\n                        ]\n                    }) : /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(ExternalWallet, {\n                        modalStatus: modalState.status,\n                        showBackButton: areSocialLoginsVisible,\n                        handleExternalWalletClick: preHandleExternalWalletClick,\n                        walletConnectUri: modalState.walletConnectUri,\n                        wcAdapters: modalState.wcAdapters,\n                        config: modalState.externalWalletsConfig,\n                        hideExternalWallets: ()=>setModalState((prevState)=>{\n                                return _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_5___default()({}, prevState), {}, {\n                                    externalWalletsVisibility: false\n                                });\n                            })\n                    })\n                }),\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Footer$1, {\n                    privacyPolicy: whiteLabel === null || whiteLabel === void 0 ? void 0 : whiteLabel.privacyPolicy,\n                    tncLink: whiteLabel === null || whiteLabel === void 0 ? void 0 : whiteLabel.tncLink,\n                    defaultLanguage: whiteLabel.defaultLanguage\n                })\n            ]\n        })\n    });\n}\nfunction createWrapper$1(parentZIndex) {\n    const existingWrapper = document.getElementById(\"w3a-parent-container\");\n    if (existingWrapper) existingWrapper.remove();\n    const parent = document.createElement(\"section\");\n    parent.classList.add(\"w3a-parent-container\");\n    parent.setAttribute(\"id\", \"w3a-parent-container\");\n    parent.style.zIndex = parentZIndex;\n    parent.style.position = \"relative\";\n    const wrapper = document.createElement(\"section\");\n    wrapper.setAttribute(\"id\", \"w3a-container\");\n    parent.appendChild(wrapper);\n    document.body.appendChild(parent);\n    return wrapper;\n}\nclass LoginModal extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter {\n    constructor(_uiConfig){\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"uiConfig\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"stateEmitter\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initModal\", async ()=>{\n            const darkState = {\n                isDark: this.isDark\n            };\n            const useLang = this.uiConfig.defaultLanguage || \"en\";\n            // Load new language resource\n            if (useLang === \"de\") {\n                __webpack_require__.e(/*! import() */ \"vendor-chunks/@web3auth\").then(__webpack_require__.bind(__webpack_require__, /*! ./german-4ae2ee33.js */ \"(ssr)/./node_modules/@web3auth/ui/dist/german-4ae2ee33.js\")).then((messages)=>{\n                    i18nInstance.addResourceBundle(useLang, \"translation\", messages.default);\n                    return i18nInstance.changeLanguage(useLang);\n                }).catch((error)=>{\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(error);\n                });\n            } else if (useLang === \"ja\") {\n                __webpack_require__.e(/*! import() */ \"vendor-chunks/@web3auth\").then(__webpack_require__.bind(__webpack_require__, /*! ./japanese-e1a7a06c.js */ \"(ssr)/./node_modules/@web3auth/ui/dist/japanese-e1a7a06c.js\")).then((messages)=>{\n                    i18nInstance.addResourceBundle(useLang, \"translation\", messages.default);\n                    return i18nInstance.changeLanguage(useLang);\n                }).catch((error)=>{\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(error);\n                });\n            } else if (useLang === \"ko\") {\n                __webpack_require__.e(/*! import() */ \"vendor-chunks/@web3auth\").then(__webpack_require__.bind(__webpack_require__, /*! ./korean-95658e12.js */ \"(ssr)/./node_modules/@web3auth/ui/dist/korean-95658e12.js\")).then((messages)=>{\n                    i18nInstance.addResourceBundle(useLang, \"translation\", messages.default);\n                    return i18nInstance.changeLanguage(useLang);\n                }).catch((error)=>{\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(error);\n                });\n            } else if (useLang === \"zh\") {\n                __webpack_require__.e(/*! import() */ \"vendor-chunks/@web3auth\").then(__webpack_require__.bind(__webpack_require__, /*! ./mandarin-1e325876.js */ \"(ssr)/./node_modules/@web3auth/ui/dist/mandarin-1e325876.js\")).then((messages)=>{\n                    i18nInstance.addResourceBundle(useLang, \"translation\", messages.default);\n                    return i18nInstance.changeLanguage(useLang);\n                }).catch((error)=>{\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(error);\n                });\n            } else if (useLang === \"es\") {\n                __webpack_require__.e(/*! import() */ \"vendor-chunks/@web3auth\").then(__webpack_require__.bind(__webpack_require__, /*! ./spanish-54ba83ea.js */ \"(ssr)/./node_modules/@web3auth/ui/dist/spanish-54ba83ea.js\")).then((messages)=>{\n                    i18nInstance.addResourceBundle(useLang, \"translation\", messages.default);\n                    return i18nInstance.changeLanguage(useLang);\n                }).catch((error)=>{\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(error);\n                });\n            } else if (useLang === \"fr\") {\n                __webpack_require__.e(/*! import() */ \"vendor-chunks/@web3auth\").then(__webpack_require__.bind(__webpack_require__, /*! ./french-3d857bc5.js */ \"(ssr)/./node_modules/@web3auth/ui/dist/french-3d857bc5.js\")).then((messages)=>{\n                    i18nInstance.addResourceBundle(useLang, \"translation\", messages.default);\n                    return i18nInstance.changeLanguage(useLang);\n                }).catch((error)=>{\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(error);\n                });\n            } else if (useLang === \"pt\") {\n                __webpack_require__.e(/*! import() */ \"vendor-chunks/@web3auth\").then(__webpack_require__.bind(__webpack_require__, /*! ./portuguese-c1293d6a.js */ \"(ssr)/./node_modules/@web3auth/ui/dist/portuguese-c1293d6a.js\")).then((messages)=>{\n                    i18nInstance.addResourceBundle(useLang, \"translation\", messages.default);\n                    return i18nInstance.changeLanguage(useLang);\n                }).catch((error)=>{\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(error);\n                });\n            } else if (useLang === \"nl\") {\n                __webpack_require__.e(/*! import() */ \"vendor-chunks/@web3auth\").then(__webpack_require__.bind(__webpack_require__, /*! ./dutch-9a1ae5c2.js */ \"(ssr)/./node_modules/@web3auth/ui/dist/dutch-9a1ae5c2.js\")).then((messages)=>{\n                    i18nInstance.addResourceBundle(useLang, \"translation\", messages.default);\n                    return i18nInstance.changeLanguage(useLang);\n                }).catch((error)=>{\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(error);\n                });\n            }\n            return new Promise((resolve)=>{\n                this.stateEmitter.once(\"MOUNTED\", ()=>{\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.info(\"rendered\");\n                    this.setState({\n                        status: MODAL_STATUS.INITIALIZED\n                    });\n                    return resolve();\n                });\n                const container = createWrapper$1(this.uiConfig.modalZIndex);\n                if (darkState.isDark) {\n                    container.classList.add(\"dark\");\n                } else {\n                    container.classList.remove(\"dark\");\n                }\n                const root = (0,react_dom_client__WEBPACK_IMPORTED_MODULE_4__.createRoot)(container);\n                root.render(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(ThemedContext.Provider, {\n                    value: darkState,\n                    children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Modal, {\n                        closeModal: this.closeModal,\n                        stateListener: this.stateEmitter,\n                        handleShowExternalWallets: this.handleShowExternalWallets,\n                        handleExternalWalletClick: this.handleExternalWalletClick,\n                        handleSocialLoginClick: this.handleSocialLoginClick,\n                        appLogo: darkState.isDark ? this.uiConfig.logoDark : this.uiConfig.logoLight,\n                        appName: this.uiConfig.appName,\n                        whiteLabel: this.uiConfig\n                    })\n                }));\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"addSocialLogins\", (adapter, loginMethods, loginMethodsOrder, uiConfig)=>{\n            this.setState({\n                socialLoginsConfig: {\n                    adapter,\n                    loginMethods,\n                    loginMethodsOrder,\n                    uiConfig\n                }\n            });\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.info(\"addSocialLogins\", adapter, loginMethods, loginMethodsOrder, uiConfig);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"addWalletLogins\", (externalWalletsConfig, options)=>{\n            this.setState({\n                externalWalletsConfig,\n                externalWalletsInitialized: true,\n                showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly),\n                externalWalletsVisibility: true\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"open\", ()=>{\n            this.setState({\n                modalVisibility: true\n            });\n            this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, true);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"closeModal\", ()=>{\n            this.setState({\n                modalVisibility: false,\n                externalWalletsVisibility: false\n            });\n            this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, false);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initExternalWalletContainer\", ()=>{\n            this.setState({\n                hasExternalWallets: true\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleShowExternalWallets\", (status)=>{\n            this.emit(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, {\n                externalWalletsInitialized: status\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleExternalWalletClick\", (params)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.info(\"external wallet clicked\", params);\n            const { adapter } = params;\n            this.emit(LOGIN_MODAL_EVENTS.LOGIN, {\n                adapter\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleSocialLoginClick\", (params)=>{\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.info(\"social login clicked\", params);\n            const { adapter, loginParams } = params;\n            this.emit(LOGIN_MODAL_EVENTS.LOGIN, {\n                adapter,\n                loginParams: {\n                    loginProvider: loginParams.loginProvider,\n                    login_hint: loginParams.login_hint,\n                    name: loginParams.name\n                }\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"setState\", (newState)=>{\n            this.stateEmitter.emit(\"STATE_UPDATED\", newState);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"updateWalletConnect\", (walletConnectUri, wcAdapters)=>{\n            if (!walletConnectUri) return;\n            this.setState({\n                walletConnectUri,\n                wcAdapters\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleAdapterData\", (adapterData)=>{\n            if (adapterData.adapterName === _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.WALLET_CONNECT_V2) {\n                const walletConnectData = adapterData.data;\n                this.updateWalletConnect(walletConnectData.uri, walletConnectData.extensionAdapters);\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"subscribeCoreEvents\", (listener)=>{\n            listener.on(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.CONNECTING, (data)=>{\n                _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.info(\"connecting with adapter\", data);\n                // don't show loader in case of wallet connect, because currently it listens for incoming for incoming\n                // connections without any user interaction.\n                if ((data === null || data === void 0 ? void 0 : data.adapter) !== _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.WALLET_ADAPTERS.WALLET_CONNECT_V2) {\n                    // const provider = data?.loginProvider || \"\";\n                    this.setState({\n                        status: MODAL_STATUS.CONNECTING\n                    });\n                }\n            });\n            listener.on(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.CONNECTED, (data)=>{\n                _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"connected with adapter\", data);\n                // only show success if not being reconnected again.\n                if (!data.reconnected) {\n                    this.setState({\n                        status: MODAL_STATUS.CONNECTED,\n                        modalVisibility: true,\n                        postLoadingMessage: \"modal.post-loading.connected\"\n                    });\n                } else {\n                    this.setState({\n                        status: MODAL_STATUS.CONNECTED\n                    });\n                }\n            });\n            listener.on(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.ERRORED, (error)=>{\n                _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.log.error(\"error\", error, error.message);\n                if (error.code === 5000) {\n                    if (this.uiConfig.displayErrorsOnModal) this.setState({\n                        modalVisibility: true,\n                        postLoadingMessage: error.message || \"modal.post-loading.something-wrong\",\n                        status: MODAL_STATUS.ERRORED\n                    });\n                    else this.setState({\n                        modalVisibility: false\n                    });\n                } else {\n                    this.setState({\n                        modalVisibility: true,\n                        status: MODAL_STATUS.INITIALIZED\n                    });\n                }\n            });\n            listener.on(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.DISCONNECTED, ()=>{\n                this.setState({\n                    status: MODAL_STATUS.INITIALIZED,\n                    externalWalletsVisibility: false\n                });\n            // this.toggleMessage(\"\");\n            });\n            listener.on(_web3auth_base__WEBPACK_IMPORTED_MODULE_3__.ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, (adapterData)=>{\n                this.handleAdapterData(adapterData);\n            });\n        });\n        this.uiConfig = _uiConfig;\n        if (!_uiConfig.logoDark) this.uiConfig.logoDark = DEFAULT_LOGO_DARK;\n        if (!_uiConfig.logoLight) this.uiConfig.logoLight = DEFAULT_LOGO_LIGHT;\n        if (!_uiConfig.mode) this.uiConfig.mode = \"auto\";\n        if (!_uiConfig.modalZIndex) this.uiConfig.modalZIndex = \"99998\";\n        if (typeof _uiConfig.displayErrorsOnModal === \"undefined\") this.uiConfig.displayErrorsOnModal = true;\n        if (!_uiConfig.defaultLanguage) this.uiConfig.defaultLanguage = \"en\";\n        if (!_uiConfig.appName) this.uiConfig.appName = \"Web3Auth\";\n        if (!_uiConfig.loginGridCol) this.uiConfig.loginGridCol = 3;\n        if (!_uiConfig.primaryButton) this.uiConfig.primaryButton = \"socialLogin\";\n        if (!_uiConfig.defaultLanguage) this.uiConfig.defaultLanguage = getUserLanguage(_uiConfig.defaultLanguage);\n        this.stateEmitter = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter();\n        this.subscribeCoreEvents(this.uiConfig.adapterListener);\n    }\n    get isDark() {\n        return this.uiConfig.mode === \"dark\" || this.uiConfig.mode === \"auto\" && window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    }\n}\nvar css_248z = '@font-face{font-family:Poppins;font-style:normal;font-weight:600;src:url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLEj6Z11lFd2JQEl8qw.woff2) format(\"woff2\");unicode-range:u+0900-097f,u+1cd0-1cf6,u+1cf8-1cf9,u+200c-200d,u+20a8,u+20b9,u+25cc,u+a830-a839,u+a8e0-a8fb}@font-face{font-family:Poppins;font-style:normal;font-weight:600;src:url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLEj6Z1JlFd2JQEl8qw.woff2) format(\"woff2\");unicode-range:u+0100-024f,u+0259,u+1e??,u+2020,u+20a0-20ab,u+20ad-20cf,u+2113,u+2c60-2c7f,u+a720-a7ff}@font-face{font-family:Poppins;font-style:normal;font-weight:600;src:url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLEj6Z1xlFd2JQEk.woff2) format(\"woff2\");unicode-range:u+00??,u+0131,u+0152-0153,u+02bb-02bc,u+02c6,u+02da,u+02dc,u+2000-206f,u+2074,u+20ac,u+2122,u+2191,u+2193,u+2212,u+2215,u+feff,u+fffd}@font-face{font-family:DM Sans;font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/dmsans/v6/rP2Hp2ywxg089UriCZ2IHTWEBlwu8Q.woff2) format(\"woff2\");unicode-range:u+0100-024f,u+0259,u+1e??,u+2020,u+20a0-20ab,u+20ad-20cf,u+2113,u+2c60-2c7f,u+a720-a7ff}@font-face{font-family:DM Sans;font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/dmsans/v6/rP2Hp2ywxg089UriCZOIHTWEBlw.woff2) format(\"woff2\");unicode-range:u+00??,u+0131,u+0152-0153,u+02bb-02bc,u+02c6,u+02da,u+02dc,u+2000-206f,u+2074,u+20ac,u+2122,u+2191,u+2193,u+2212,u+2215,u+feff,u+fffd}.w3a-parent-container #w3a-network-modal{--bg1:#fff;--bg2:#f9f9fb;--text-color1:#a2a5b5;--text-color2:#5c6c7f;--text-header:\"Poppins\",Helvetica,sans-serif;--text-body:\"DM Sans\",Helvetica,sans-serif;background:#000;color:var(--text-color1);height:100vh;left:0;padding:15px;position:fixed;top:0;width:100vw}.w3a-parent-container #w3a-network-modal,.w3a-parent-container #w3a-network-modal button.w3a-button{align-items:center;box-sizing:border-box;display:flex;font-family:var(--text-body);justify-content:center}.w3a-parent-container #w3a-network-modal button.w3a-button{background-color:#fff;border:1px solid #f3f3f4;border-radius:24px;box-shadow:none;color:#b7b8bd;cursor:pointer;font-size:16px;font-style:normal;font-weight:400;height:48px;padding:8px;width:100%}.w3a-parent-container #w3a-network-modal .w3a-switch-network{align-items:center;background:#f9f9fb;border-radius:10px;box-sizing:border-box;display:flex;flex-direction:column;font-family:var(--text-body);padding:20px;width:375px}.w3a-parent-container #w3a-network-modal .w3a-switch-network__title{color:var(--text-color2);font-family:var(--text-header);font-size:20px;margin-bottom:16px;text-align:center}.w3a-parent-container #w3a-network-modal .w3a-switch-network__link{background-color:#fff;border-radius:12px;color:#b7b8bd;font-size:12px;height:24px;padding:4px 16px}.w3a-parent-container #w3a-network-modal .w3a-switch-network__connect{display:flex;margin:40px auto 0}.w3a-parent-container #w3a-network-modal .w3a-switch-network__connect>div{color:var(--text-color2);font-size:10px;text-align:center}.w3a-parent-container .w3a-switch-network__connect-divider{margin-top:20px}.w3a-parent-container #w3a-network-modal .w3a-switch-network__logo{align-items:center;background:#fff;border-radius:50%;box-shadow:2px 2px 12px #0364ff0d;display:flex;height:58px;justify-content:center;margin:0 auto 6px;width:58px}.w3a-parent-container #w3a-network-modal .w3a-switch-network__logo img{height:34px;width:34px}.w3a-parent-container #w3a-network-modal .w3a-switch-network__buttons{column-gap:16px;display:flex;margin-top:60px;width:100%}.w3a-parent-container #w3a-network-modal .w3a-button.w3a-button--primary{background-color:#0364ff;color:#fff}';\nstyleInject(css_248z);\nfunction AddNetwork(props) {\n    const { chainConfig, appOrigin, onAddNetwork, onCancelNetwork } = props;\n    const [showModal, setShowModal] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(true);\n    const [networkIconId, setNetworkIconId] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(\"network-default\");\n    const [t] = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)(undefined, {\n        i18n: i18nInstance\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        getNetworkIconId(chainConfig.ticker).then((id)=>{\n            return setNetworkIconId(id);\n        }).catch(()=>{});\n    }, [\n        chainConfig.ticker\n    ]);\n    return showModal && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n        id: \"w3a-modal-network\",\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n            className: \"w3a-switch-network\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                    className: \"w3a-switch-network__title\",\n                    children: t(\"modal.network.add-request\")\n                }),\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                    children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"a\", {\n                        className: \"w3a-switch-network__link\",\n                        href: appOrigin,\n                        children: appOrigin\n                    })\n                }),\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                    className: \"w3a-switch-network__connect\",\n                    children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                className: \"w3a-switch-network__logo\",\n                                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Image$1, {\n                                    imageId: networkIconId\n                                })\n                            }),\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                    children: chainConfig.displayName\n                                })\n                            })\n                        ]\n                    })\n                }),\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                    className: \"w3a-switch-network__buttons\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"button\", {\n                            type: \"button\",\n                            className: \"w3a-button\",\n                            onClick: ()=>{\n                                setShowModal(false);\n                                onCancelNetwork();\n                            },\n                            children: t(\"modal.network.cancel\")\n                        }),\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"button\", {\n                            type: \"button\",\n                            className: \"w3a-button w3a-button--primary\",\n                            onClick: ()=>{\n                                setShowModal(false);\n                                onAddNetwork(chainConfig.chainId);\n                            },\n                            children: t(\"modal.network.proceed\")\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n}\nfunction SwitchNetwork(props) {\n    const { currentChainConfig, newChainConfig, appOrigin, onSwitchNetwork, onCancelNetwork } = props;\n    const [showModal, setShowModal] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(true);\n    const [fromNetworkIconId, setFromNetworkIconId] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(\"network-default\");\n    const [toNetworkIconId, setToNetworkIconId] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(\"network-default\");\n    const [t] = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)(undefined, {\n        i18n: i18nInstance\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        getNetworkIconId(currentChainConfig.ticker).then((id)=>{\n            return setFromNetworkIconId(id);\n        }).catch(()=>{});\n        getNetworkIconId(newChainConfig.ticker).then((id)=>{\n            return setToNetworkIconId(id);\n        }).catch(()=>{});\n    }, [\n        currentChainConfig.chainId,\n        currentChainConfig.ticker,\n        newChainConfig.chainId,\n        newChainConfig.ticker\n    ]);\n    return showModal && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n        id: \"w3a-modal-network\",\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n            className: \"w3a-switch-network\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                    className: \"w3a-switch-network__title\",\n                    children: t(\"modal.network.switch-request\")\n                }),\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                    children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"a\", {\n                        className: \"w3a-switch-network__link\",\n                        href: appOrigin,\n                        children: appOrigin\n                    })\n                }),\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                    className: \"w3a-switch-network__connect\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                    className: \"w3a-switch-network__logo\",\n                                    children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Image$1, {\n                                        imageId: fromNetworkIconId\n                                    })\n                                }),\n                                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                            children: [\n                                                t(\"modal.network.from\"),\n                                                \":\"\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                            children: currentChainConfig.displayName\n                                        })\n                                    ]\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                            children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                className: \"w3a-switch-network__connect-divider\",\n                                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Image$1, {\n                                    imageId: \"network-arrow\"\n                                })\n                            })\n                        }),\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                    className: \"w3a-switch-network__logo\",\n                                    children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(Image$1, {\n                                        imageId: toNetworkIconId\n                                    })\n                                }),\n                                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                                            children: [\n                                                t(\"modal.network.to\"),\n                                                \":\"\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"div\", {\n                                            children: newChainConfig.displayName\n                                        })\n                                    ]\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(\"div\", {\n                    className: \"w3a-switch-network__buttons\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"button\", {\n                            type: \"button\",\n                            className: \"w3a-button\",\n                            onClick: ()=>{\n                                setShowModal(false);\n                                onCancelNetwork();\n                            },\n                            children: t(\"modal.network.cancel\")\n                        }),\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(\"button\", {\n                            type: \"button\",\n                            className: \"w3a-button w3a-button--primary\",\n                            onClick: ()=>{\n                                setShowModal(false);\n                                onSwitchNetwork(currentChainConfig.chainId, newChainConfig.chainId);\n                            },\n                            children: t(\"modal.network.proceed\")\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n}\n/* eslint-disable class-methods-use-this */ function createWrapper(id) {\n    const element = document.getElementById(id || \"w3a-network-container\");\n    if (element) return element;\n    const wrapper = document.createElement(\"section\");\n    wrapper.setAttribute(\"id\", id || \"w3a-network-container\");\n    document.body.appendChild(wrapper);\n    return wrapper;\n}\nclass NetworkSwitch extends _web3auth_base__WEBPACK_IMPORTED_MODULE_3__.BaseNetworkSwitch {\n    async addNetwork(params) {\n        const { chainConfig, appOrigin } = params;\n        return new Promise((resolve, reject)=>{\n            const addNetworkCallback = ()=>{\n                return resolve(true);\n            };\n            const cancelCallback = ()=>{\n                return reject(new Error(\"User cancelled request for adding new network\"));\n            };\n            const container = createWrapper(\"w3a-add-network-container\");\n            const networkRoot = (0,react_dom_client__WEBPACK_IMPORTED_MODULE_4__.createRoot)(container);\n            networkRoot.render(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(AddNetwork, {\n                appOrigin: appOrigin,\n                chainConfig: chainConfig,\n                onAddNetwork: addNetworkCallback,\n                onCancelNetwork: cancelCallback\n            }));\n        });\n    }\n    async switchNetwork(params) {\n        const { currentChainConfig, appOrigin, newChainConfig } = params;\n        return new Promise((resolve, reject)=>{\n            const switchNetworkCallback = ()=>{\n                return resolve(true);\n            };\n            const cancelCallback = ()=>{\n                return reject(new Error(\"User cancelled request for adding new network\"));\n            };\n            const networkSwitchContainer = createWrapper(\"w3a-switch-network-container\");\n            const networkRoot = (0,react_dom_client__WEBPACK_IMPORTED_MODULE_4__.createRoot)(networkSwitchContainer);\n            networkRoot.render(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(SwitchNetwork, {\n                appOrigin: appOrigin,\n                currentChainConfig: currentChainConfig,\n                newChainConfig: newChainConfig,\n                onSwitchNetwork: switchNetworkCallback,\n                onCancelNetwork: cancelCallback\n            }));\n        });\n    }\n    cancel() {}\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3VpL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTREO0FBQ1E7QUFDUDtBQUMyRDtBQUMxRTtBQUNtQjtBQUN4QjtBQUNKO0FBQzhEO0FBQ2xDO0FBQ3RDO0FBQzZCO0FBQzVCO0FBQ29CO0FBQ0w7QUFDUztBQUNoQjtBQUVwQyxTQUFTZ0Msc0JBQXNCQyxNQUFNO0lBQ25DLE9BQU9BLE9BQU9DLE1BQU0sQ0FBQyxHQUFHQyxXQUFXLEtBQUtGLE9BQU9HLEtBQUssQ0FBQztBQUN2RDtBQUNBLE1BQU1DLHNCQUFzQkMsT0FBT0MsTUFBTSxDQUFDdkMsc0VBQWNBLEVBQUV3QyxNQUFNLENBQUNDLENBQUFBLElBQUtBLE1BQU16QyxzRUFBY0EsQ0FBQzBDLFFBQVEsSUFBSUQsTUFBTXpDLHNFQUFjQSxDQUFDMkMsR0FBRztBQUMvSCxNQUFNQyw0QkFBNEJQLG9CQUFvQlEsTUFBTSxDQUFDLENBQUNDLEtBQUtMO0lBQ2pFLElBQUlBLE1BQU0sc0JBQXNCSyxHQUFHLENBQUNMLEVBQUUsR0FBRztTQUFhLElBQUlBLE1BQU0sb0JBQW9CSyxHQUFHLENBQUNMLEVBQUUsR0FBRztTQUFjSyxHQUFHLENBQUNMLEVBQUUsR0FBR1Qsc0JBQXNCUztJQUMxSSxPQUFPSztBQUNULEdBQUcsQ0FBQztBQUVKLHdFQUF3RTtBQUN4RSwrQkFBK0I7QUFDL0IsTUFBTUMscUJBQXFCO0lBQ3pCQyx1QkFBdUI7SUFDdkJDLE9BQU87SUFDUEMsWUFBWTtJQUNaQyxrQkFBa0I7QUFDcEI7QUFDQSxNQUFNQyxlQUFlO0lBQ25CQyxhQUFhO0lBQ2JDLFdBQVc7SUFDWEMsWUFBWTtJQUNaQyxTQUFTO0FBQ1g7QUFDQSxNQUFNQyxxQkFBcUI7QUFDM0IsTUFBTUMsb0JBQW9CO0FBQzFCLE1BQU1DLHNCQUFzQjtBQUU1QixTQUFTQyxZQUFZQyxHQUFH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TTtZQUMxQjtZQUNBLE1BQU0yUCx5QkFBeUJULGNBQWM7WUFDN0MsTUFBTU0sY0FBY3hlLDREQUFVQSxDQUFDMmU7WUFDL0JILFlBQVkvQyxNQUFNLENBQUUsV0FBVyxHQUFFM2EsdURBQUdBLENBQUM0YyxlQUFlO2dCQUNsRFIsV0FBV0E7Z0JBQ1hTLG9CQUFvQkE7Z0JBQ3BCQyxnQkFBZ0JBO2dCQUNoQkMsaUJBQWlCYTtnQkFDakJ0QixpQkFBaUJtQjtZQUNuQjtRQUNGO0lBQ0Y7SUFDQUssU0FBUyxDQUFDO0FBQ1o7QUFFd1gsQ0FDeFgsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvdWkvZGlzdC9pbmRleC5qcz9mZTE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExPR0lOX1BST1ZJREVSIH0gZnJvbSAnQHRvcnVzbGFicy9vcGVubG9naW4tdXRpbHMnO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCB7IFNhZmVFdmVudEVtaXR0ZXIgfSBmcm9tICdAdG9ydXNsYWJzL29wZW5sb2dpbi1qcnBjJztcbmltcG9ydCB7IGxvZywgQURBUFRFUl9TVEFUVVMsIFdBTExFVF9BREFQVEVSUywgQURBUFRFUl9OQU1FUywgQURBUFRFUl9FVkVOVFMsIEJhc2VOZXR3b3JrU3dpdGNoIH0gZnJvbSAnQHdlYjNhdXRoL2Jhc2UnO1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyJztcbmltcG9ydCBjbG9uZURlZXAgZnJvbSAnbG9kYXNoLmNsb25lZGVlcCc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2xvZGFzaC5tZXJnZSc7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VFZmZlY3QsIG1lbW8sIHVzZVN0YXRlLCB1c2VNZW1vLCB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGluaXRSZWFjdEkxOG5leHQsIHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCc7XG5pbXBvcnQgaTE4biBmcm9tICdpMThuZXh0JztcbmltcG9ydCB7IGpzeCwganN4cywgRnJhZ21lbnQgfSBmcm9tICdyZWFjdC9qc3gtcnVudGltZSc7XG5pbXBvcnQgYm93c2VyIGZyb20gJ2Jvd3Nlcic7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdG8tY2xpcGJvYXJkJztcbmltcG9ydCB7IFFSQ29kZSB9IGZyb20gJ3JlYWN0LXFyY29kZS1sb2dvJztcbmltcG9ydCB7IGdldCwgcG9zdCB9IGZyb20gJ0B0b3J1c2xhYnMvaHR0cC1oZWxwZXJzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5mdW5jdGlvbiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG5jb25zdCBPUEVOTE9HSU5fUFJPVklERVJTID0gT2JqZWN0LnZhbHVlcyhMT0dJTl9QUk9WSURFUikuZmlsdGVyKHggPT4geCAhPT0gTE9HSU5fUFJPVklERVIuV0VCQVVUSE4gJiYgeCAhPT0gTE9HSU5fUFJPVklERVIuSldUKTtcbmNvbnN0IE9QRU5MT0dJTl9QUk9WSURFUlNfTkFNRVMgPSBPUEVOTE9HSU5fUFJPVklERVJTLnJlZHVjZSgoYWNjLCB4KSA9PiB7XG4gIGlmICh4ID09PSBcImVtYWlsX3Bhc3N3b3JkbGVzc1wiKSBhY2NbeF0gPSBcIkVtYWlsXCI7ZWxzZSBpZiAoeCA9PT0gXCJzbXNfcGFzc3dvcmRsZXNzXCIpIGFjY1t4XSA9IFwiTW9iaWxlXCI7ZWxzZSBhY2NbeF0gPSBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoeCk7XG4gIHJldHVybiBhY2M7XG59LCB7fSk7XG5cbi8vIFRPRE86IGNoYW5nZSB3aGl0ZWxhYmVsIHNldHRpbmdzIGFuZCBwYXNzIHVpIHdoaXRlbGFiZWwgdG8gb3BlbmxvZ2luLlxuLy8gY2FwdHVyZSB3aGl0ZWxhYmVsIG9ubHkgb25jZVxuY29uc3QgTE9HSU5fTU9EQUxfRVZFTlRTID0ge1xuICBJTklUX0VYVEVSTkFMX1dBTExFVFM6IFwiSU5JVF9FWFRFUk5BTF9XQUxMRVRTXCIsXG4gIExPR0lOOiBcIkxPR0lOXCIsXG4gIERJU0NPTk5FQ1Q6IFwiRElTQ09OTkVDVFwiLFxuICBNT0RBTF9WSVNJQklMSVRZOiBcIk1PREFMX1ZJU0lCSUxJVFlcIlxufTtcbmNvbnN0IE1PREFMX1NUQVRVUyA9IHtcbiAgSU5JVElBTElaRUQ6IFwiaW5pdGlhbGl6ZWRcIixcbiAgQ09OTkVDVEVEOiBcImNvbm5lY3RlZFwiLFxuICBDT05ORUNUSU5HOiBcImNvbm5lY3RpbmdcIixcbiAgRVJST1JFRDogXCJlcnJvcmVkXCJcbn07XG5jb25zdCBERUZBVUxUX0xPR09fTElHSFQgPSBcImh0dHBzOi8vaW1hZ2VzLndlYjNhdXRoLmlvL3dlYjNhdXRoLWxvZ28tdy1saWdodC5zdmdcIjtcbmNvbnN0IERFRkFVTFRfTE9HT19EQVJLID0gXCJodHRwczovL2ltYWdlcy53ZWIzYXV0aC5pby93ZWIzYXV0aC1sb2dvLXcuc3ZnXCI7XG5jb25zdCBXQUxMRVRfQ09OTkVDVF9MT0dPID0gXCJodHRwczovL2ltYWdlcy53ZWIzYXV0aC5pby9sb2dpbi13YWxsZXQtY29ubmVjdC5zdmdcIjtcblxuZnVuY3Rpb24gc3R5bGVJbmplY3QoY3NzLCByZWYpIHtcbiAgaWYgKHJlZiA9PT0gdm9pZCAwKSByZWYgPSB7fTtcbiAgdmFyIGluc2VydEF0ID0gcmVmLmluc2VydEF0O1xuICBpZiAoIWNzcyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgaWYgKGluc2VydEF0ID09PSAndG9wJykge1xuICAgIGlmIChoZWFkLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIGNzc18yNDh6JDEgPSBcIi8qISB0YWlsd2luZGNzcyB2My4zLjUgfCBNSVQgTGljZW5zZSB8IGh0dHBzOi8vdGFpbHdpbmRjc3MuY29tKi8udzNhLXBhcmVudC1jb250YWluZXIgKiwudzNhLXBhcmVudC1jb250YWluZXIgOmFmdGVyLC53M2EtcGFyZW50LWNvbnRhaW5lciA6YmVmb3Jle2JvcmRlcjowIHNvbGlkICNlNWU3ZWI7Ym94LXNpemluZzpib3JkZXItYm94fS53M2EtcGFyZW50LWNvbnRhaW5lciA6YWZ0ZXIsLnczYS1wYXJlbnQtY29udGFpbmVyIDpiZWZvcmV7LS10dy1jb250ZW50OlxcXCJcXFwifS53M2EtcGFyZW50LWNvbnRhaW5lciBodG1sey13ZWJraXQtdGV4dC1zaXplLWFkanVzdDoxMDAlO2ZvbnQtZmVhdHVyZS1zZXR0aW5nczpub3JtYWw7Zm9udC1mYW1pbHk6dWktc2Fucy1zZXJpZixzeXN0ZW0tdWksLWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsU2Vnb2UgVUksUm9ib3RvLEhlbHZldGljYSBOZXVlLEFyaWFsLE5vdG8gU2FucyxzYW5zLXNlcmlmLEFwcGxlIENvbG9yIEVtb2ppLFNlZ29lIFVJIEVtb2ppLFNlZ29lIFVJIFN5bWJvbCxOb3RvIENvbG9yIEVtb2ppO2ZvbnQtdmFyaWF0aW9uLXNldHRpbmdzOm5vcm1hbDtsaW5lLWhlaWdodDoxLjU7LW1vei10YWItc2l6ZTo0O3RhYi1zaXplOjR9LnczYS1wYXJlbnQtY29udGFpbmVyIGJvZHl7bGluZS1oZWlnaHQ6aW5oZXJpdDttYXJnaW46MH0udzNhLXBhcmVudC1jb250YWluZXIgaHJ7Ym9yZGVyLXRvcC13aWR0aDoxcHg7Y29sb3I6aW5oZXJpdDtoZWlnaHQ6MH0udzNhLXBhcmVudC1jb250YWluZXIgYWJicjp3aGVyZShbdGl0bGVdKXt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lIGRvdHRlZH0udzNhLXBhcmVudC1jb250YWluZXIgaDEsLnczYS1wYXJlbnQtY29udGFpbmVyIGgyLC53M2EtcGFyZW50LWNvbnRhaW5lciBoMywudzNhLXBhcmVudC1jb250YWluZXIgaDQsLnczYS1wYXJlbnQtY29udGFpbmVyIGg1LC53M2EtcGFyZW50LWNvbnRhaW5lciBoNntmb250LXNpemU6aW5oZXJpdDtmb250LXdlaWdodDppbmhlcml0fS53M2EtcGFyZW50LWNvbnRhaW5lciBhe2NvbG9yOmluaGVyaXQ7dGV4dC1kZWNvcmF0aW9uOmluaGVyaXR9LnczYS1wYXJlbnQtY29udGFpbmVyIGIsLnczYS1wYXJlbnQtY29udGFpbmVyIHN0cm9uZ3tmb250LXdlaWdodDpib2xkZXJ9LnczYS1wYXJlbnQtY29udGFpbmVyIGNvZGUsLnczYS1wYXJlbnQtY29udGFpbmVyIGtiZCwudzNhLXBhcmVudC1jb250YWluZXIgcHJlLC53M2EtcGFyZW50LWNvbnRhaW5lciBzYW1we2ZvbnQtZmFtaWx5OnVpLW1vbm9zcGFjZSxTRk1vbm8tUmVndWxhcixNZW5sbyxNb25hY28sQ29uc29sYXMsTGliZXJhdGlvbiBNb25vLENvdXJpZXIgTmV3LG1vbm9zcGFjZTtmb250LXNpemU6MWVtfS53M2EtcGFyZW50LWNvbnRhaW5lciBzbWFsbHtmb250LXNpemU6ODAlfS53M2EtcGFyZW50LWNvbnRhaW5lciBzdWIsLnczYS1wYXJlbnQtY29udGFpbmVyIHN1cHtmb250LXNpemU6NzUlO2xpbmUtaGVpZ2h0OjA7cG9zaXRpb246cmVsYXRpdmU7dmVydGljYWwtYWxpZ246aW5pdGlhbH0udzNhLXBhcmVudC1jb250YWluZXIgc3Vie2JvdHRvbTotLjI1ZW19LnczYS1wYXJlbnQtY29udGFpbmVyIHN1cHt0b3A6LS41ZW19LnczYS1wYXJlbnQtY29udGFpbmVyIHRhYmxle2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTtib3JkZXItY29sb3I6aW5oZXJpdDt0ZXh0LWluZGVudDowfS53M2EtcGFyZW50LWNvbnRhaW5lciBidXR0b24sLnczYS1wYXJlbnQtY29udGFpbmVyIGlucHV0LC53M2EtcGFyZW50LWNvbnRhaW5lciBvcHRncm91cCwudzNhLXBhcmVudC1jb250YWluZXIgc2VsZWN0LC53M2EtcGFyZW50LWNvbnRhaW5lciB0ZXh0YXJlYXtmb250LWZlYXR1cmUtc2V0dGluZ3M6aW5oZXJpdDtjb2xvcjppbmhlcml0O2ZvbnQtZmFtaWx5OmluaGVyaXQ7Zm9udC1zaXplOjEwMCU7Zm9udC12YXJpYXRpb24tc2V0dGluZ3M6aW5oZXJpdDtmb250LXdlaWdodDppbmhlcml0O2xpbmUtaGVpZ2h0OmluaGVyaXQ7bWFyZ2luOjA7cGFkZGluZzowfS53M2EtcGFyZW50LWNvbnRhaW5lciBidXR0b24sLnczYS1wYXJlbnQtY29udGFpbmVyIHNlbGVjdHt0ZXh0LXRyYW5zZm9ybTpub25lfS53M2EtcGFyZW50LWNvbnRhaW5lciBbdHlwZT1idXR0b25dLC53M2EtcGFyZW50LWNvbnRhaW5lciBbdHlwZT1yZXNldF0sLnczYS1wYXJlbnQtY29udGFpbmVyIFt0eXBlPXN1Ym1pdF0sLnczYS1wYXJlbnQtY29udGFpbmVyIGJ1dHRvbnstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9uO2JhY2tncm91bmQtY29sb3I6aW5pdGlhbDtiYWNrZ3JvdW5kLWltYWdlOm5vbmV9LnczYS1wYXJlbnQtY29udGFpbmVyIDotbW96LWZvY3VzcmluZ3tvdXRsaW5lOmF1dG99LnczYS1wYXJlbnQtY29udGFpbmVyIDotbW96LXVpLWludmFsaWR7Ym94LXNoYWRvdzpub25lfS53M2EtcGFyZW50LWNvbnRhaW5lciBwcm9ncmVzc3t2ZXJ0aWNhbC1hbGlnbjppbml0aWFsfS53M2EtcGFyZW50LWNvbnRhaW5lciA6Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sLnczYS1wYXJlbnQtY29udGFpbmVyIDo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbntoZWlnaHQ6YXV0b30udzNhLXBhcmVudC1jb250YWluZXIgW3R5cGU9c2VhcmNoXXstd2Via2l0LWFwcGVhcmFuY2U6dGV4dGZpZWxkO291dGxpbmUtb2Zmc2V0Oi0ycHh9LnczYS1wYXJlbnQtY29udGFpbmVyIDo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbnstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX0udzNhLXBhcmVudC1jb250YWluZXIgOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbnstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9uO2ZvbnQ6aW5oZXJpdH0udzNhLXBhcmVudC1jb250YWluZXIgc3VtbWFyeXtkaXNwbGF5Omxpc3QtaXRlbX0udzNhLXBhcmVudC1jb250YWluZXIgYmxvY2txdW90ZSwudzNhLXBhcmVudC1jb250YWluZXIgZGQsLnczYS1wYXJlbnQtY29udGFpbmVyIGRsLC53M2EtcGFyZW50LWNvbnRhaW5lciBmaWd1cmUsLnczYS1wYXJlbnQtY29udGFpbmVyIGgxLC53M2EtcGFyZW50LWNvbnRhaW5lciBoMiwudzNhLXBhcmVudC1jb250YWluZXIgaDMsLnczYS1wYXJlbnQtY29udGFpbmVyIGg0LC53M2EtcGFyZW50LWNvbnRhaW5lciBoNSwudzNhLXBhcmVudC1jb250YWluZXIgaDYsLnczYS1wYXJlbnQtY29udGFpbmVyIGhyLC53M2EtcGFyZW50LWNvbnRhaW5lciBwLC53M2EtcGFyZW50LWNvbnRhaW5lciBwcmV7bWFyZ2luOjB9LnczYS1wYXJlbnQtY29udGFpbmVyIGZpZWxkc2V0e21hcmdpbjowO3BhZGRpbmc6MH0udzNhLXBhcmVudC1jb250YWluZXIgbGVnZW5ke3BhZGRpbmc6MH0udzNhLXBhcmVudC1jb250YWluZXIgbWVudSwudzNhLXBhcmVudC1jb250YWluZXIgb2wsLnczYS1wYXJlbnQtY29udGFpbmVyIHVse2xpc3Qtc3R5bGU6bm9uZTttYXJnaW46MDtwYWRkaW5nOjB9LnczYS1wYXJlbnQtY29udGFpbmVyIGRpYWxvZ3twYWRkaW5nOjB9LnczYS1wYXJlbnQtY29udGFpbmVyIHRleHRhcmVhe3Jlc2l6ZTp2ZXJ0aWNhbH0udzNhLXBhcmVudC1jb250YWluZXIgaW5wdXQ6OnBsYWNlaG9sZGVyLC53M2EtcGFyZW50LWNvbnRhaW5lciB0ZXh0YXJlYTo6cGxhY2Vob2xkZXJ7Y29sb3I6IzljYTNhZjtvcGFjaXR5OjF9LnczYS1wYXJlbnQtY29udGFpbmVyIFtyb2xlPWJ1dHRvbl0sLnczYS1wYXJlbnQtY29udGFpbmVyIGJ1dHRvbntjdXJzb3I6cG9pbnRlcn0udzNhLXBhcmVudC1jb250YWluZXIgOmRpc2FibGVke2N1cnNvcjpkZWZhdWx0fS53M2EtcGFyZW50LWNvbnRhaW5lciBhdWRpbywudzNhLXBhcmVudC1jb250YWluZXIgY2FudmFzLC53M2EtcGFyZW50LWNvbnRhaW5lciBlbWJlZCwudzNhLXBhcmVudC1jb250YWluZXIgaWZyYW1lLC53M2EtcGFyZW50LWNvbnRhaW5lciBpbWcsLnczYS1wYXJlbnQtY29udGFpbmVyIG9iamVjdCwudzNhLXBhcmVudC1jb250YWluZXIgc3ZnLC53M2EtcGFyZW50LWNvbnRhaW5lciB2aWRlb3tkaXNwbGF5OmJsb2NrO3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0udzNhLXBhcmVudC1jb250YWluZXIgaW1nLC53M2EtcGFyZW50LWNvbnRhaW5lciB2aWRlb3toZWlnaHQ6YXV0bzttYXgtd2lkdGg6MTAwJX0udzNhLXBhcmVudC1jb250YWluZXIgW2hpZGRlbl17ZGlzcGxheTpub25lfS53M2EtcGFyZW50LWNvbnRhaW5lciAqLC53M2EtcGFyZW50LWNvbnRhaW5lciA6YWZ0ZXIsLnczYS1wYXJlbnQtY29udGFpbmVyIDpiZWZvcmV7LS10dy1ib3JkZXItc3BhY2luZy14OjA7LS10dy1ib3JkZXItc3BhY2luZy15OjA7LS10dy10cmFuc2xhdGUteDowOy0tdHctdHJhbnNsYXRlLXk6MDstLXR3LXJvdGF0ZTowOy0tdHctc2tldy14OjA7LS10dy1za2V3LXk6MDstLXR3LXNjYWxlLXg6MTstLXR3LXNjYWxlLXk6MTstLXR3LXBhbi14OiA7LS10dy1wYW4teTogOy0tdHctcGluY2gtem9vbTogOy0tdHctc2Nyb2xsLXNuYXAtc3RyaWN0bmVzczpwcm94aW1pdHk7LS10dy1ncmFkaWVudC1mcm9tLXBvc2l0aW9uOiA7LS10dy1ncmFkaWVudC12aWEtcG9zaXRpb246IDstLXR3LWdyYWRpZW50LXRvLXBvc2l0aW9uOiA7LS10dy1vcmRpbmFsOiA7LS10dy1zbGFzaGVkLXplcm86IDstLXR3LW51bWVyaWMtZmlndXJlOiA7LS10dy1udW1lcmljLXNwYWNpbmc6IDstLXR3LW51bWVyaWMtZnJhY3Rpb246IDstLXR3LXJpbmctaW5zZXQ6IDstLXR3LXJpbmctb2Zmc2V0LXdpZHRoOjBweDstLXR3LXJpbmctb2Zmc2V0LWNvbG9yOiNmZmY7LS10dy1yaW5nLWNvbG9yOiMzYjgyZjY4MDstLXR3LXJpbmctb2Zmc2V0LXNoYWRvdzowIDAgIzAwMDA7LS10dy1yaW5nLXNoYWRvdzowIDAgIzAwMDA7LS10dy1zaGFkb3c6MCAwICMwMDAwOy0tdHctc2hhZG93LWNvbG9yZWQ6MCAwICMwMDAwOy0tdHctYmx1cjogOy0tdHctYnJpZ2h0bmVzczogOy0tdHctY29udHJhc3Q6IDstLXR3LWdyYXlzY2FsZTogOy0tdHctaHVlLXJvdGF0ZTogOy0tdHctaW52ZXJ0OiA7LS10dy1zYXR1cmF0ZTogOy0tdHctc2VwaWE6IDstLXR3LWRyb3Atc2hhZG93OiA7LS10dy1iYWNrZHJvcC1ibHVyOiA7LS10dy1iYWNrZHJvcC1icmlnaHRuZXNzOiA7LS10dy1iYWNrZHJvcC1jb250cmFzdDogOy0tdHctYmFja2Ryb3AtZ3JheXNjYWxlOiA7LS10dy1iYWNrZHJvcC1odWUtcm90YXRlOiA7LS10dy1iYWNrZHJvcC1pbnZlcnQ6IDstLXR3LWJhY2tkcm9wLW9wYWNpdHk6IDstLXR3LWJhY2tkcm9wLXNhdHVyYXRlOiA7LS10dy1iYWNrZHJvcC1zZXBpYTogfS53M2EtcGFyZW50LWNvbnRhaW5lciA6OmJhY2tkcm9wey0tdHctYm9yZGVyLXNwYWNpbmcteDowOy0tdHctYm9yZGVyLXNwYWNpbmcteTowOy0tdHctdHJhbnNsYXRlLXg6MDstLXR3LXRyYW5zbGF0ZS15OjA7LS10dy1yb3RhdGU6MDstLXR3LXNrZXcteDowOy0tdHctc2tldy15OjA7LS10dy1zY2FsZS14OjE7LS10dy1zY2FsZS15OjE7LS10dy1wYW4teDogOy0tdHctcGFuLXk6IDstLXR3LXBpbmNoLXpvb206IDstLXR3LXNjcm9sbC1zbmFwLXN0cmljdG5lc3M6cHJveGltaXR5Oy0tdHctZ3JhZGllbnQtZnJvbS1wb3NpdGlvbjogOy0tdHctZ3JhZGllbnQtdmlhLXBvc2l0aW9uOiA7LS10dy1ncmFkaWVudC10by1wb3NpdGlvbjogOy0tdHctb3JkaW5hbDogOy0tdHctc2xhc2hlZC16ZXJvOiA7LS10dy1udW1lcmljLWZpZ3VyZTogOy0tdHctbnVtZXJpYy1zcGFjaW5nOiA7LS10dy1udW1lcmljLWZyYWN0aW9uOiA7LS10dy1yaW5nLWluc2V0OiA7LS10dy1yaW5nLW9mZnNldC13aWR0aDowcHg7LS10dy1yaW5nLW9mZnNldC1jb2xvcjojZmZmOy0tdHctcmluZy1jb2xvcjojM2I4MmY2ODA7LS10dy1yaW5nLW9mZnNldC1zaGFkb3c6MCAwICMwMDAwOy0tdHctcmluZy1zaGFkb3c6MCAwICMwMDAwOy0tdHctc2hhZG93OjAgMCAjMDAwMDstLXR3LXNoYWRvdy1jb2xvcmVkOjAgMCAjMDAwMDstLXR3LWJsdXI6IDstLXR3LWJyaWdodG5lc3M6IDstLXR3LWNvbnRyYXN0OiA7LS10dy1ncmF5c2NhbGU6IDstLXR3LWh1ZS1yb3RhdGU6IDstLXR3LWludmVydDogOy0tdHctc2F0dXJhdGU6IDstLXR3LXNlcGlhOiA7LS10dy1kcm9wLXNoYWRvdzogOy0tdHctYmFja2Ryb3AtYmx1cjogOy0tdHctYmFja2Ryb3AtYnJpZ2h0bmVzczogOy0tdHctYmFja2Ryb3AtY29udHJhc3Q6IDstLXR3LWJhY2tkcm9wLWdyYXlzY2FsZTogOy0tdHctYmFja2Ryb3AtaHVlLXJvdGF0ZTogOy0tdHctYmFja2Ryb3AtaW52ZXJ0OiA7LS10dy1iYWNrZHJvcC1vcGFjaXR5OiA7LS10dy1iYWNrZHJvcC1zYXR1cmF0ZTogOy0tdHctYmFja2Ryb3Atc2VwaWE6IH0udzNhLXBhcmVudC1jb250YWluZXIgLmNvbnRhaW5lcnt3aWR0aDoxMDAlfUBtZWRpYSAobWluLXdpZHRoOjY0MHB4KXsudzNhLXBhcmVudC1jb250YWluZXIgLmNvbnRhaW5lcnttYXgtd2lkdGg6NjQwcHh9fUBtZWRpYSAobWluLXdpZHRoOjc2OHB4KXsudzNhLXBhcmVudC1jb250YWluZXIgLmNvbnRhaW5lcnttYXgtd2lkdGg6NzY4cHh9fUBtZWRpYSAobWluLXdpZHRoOjEwMjRweCl7LnczYS1wYXJlbnQtY29udGFpbmVyIC5jb250YWluZXJ7bWF4LXdpZHRoOjEwMjRweH19QG1lZGlhIChtaW4td2lkdGg6MTI4MHB4KXsudzNhLXBhcmVudC1jb250YWluZXIgLmNvbnRhaW5lcnttYXgtd2lkdGg6MTI4MHB4fX1AbWVkaWEgKG1pbi13aWR0aDoxNTM2cHgpey53M2EtcGFyZW50LWNvbnRhaW5lciAuY29udGFpbmVye21heC13aWR0aDoxNTM2cHh9fS53M2EtcGFyZW50LWNvbnRhaW5lciAuYWJzb2x1dGV7cG9zaXRpb246YWJzb2x1dGV9LnczYS1wYXJlbnQtY29udGFpbmVyIC5yZWxhdGl2ZXtwb3NpdGlvbjpyZWxhdGl2ZX0udzNhLXBhcmVudC1jb250YWluZXIgLnRvcC00e3RvcDoxcmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciAuei0yMHt6LWluZGV4OjIwfS53M2EtcGFyZW50LWNvbnRhaW5lciAuY29sLXNwYW4tMntncmlkLWNvbHVtbjpzcGFuIDIvc3BhbiAyfS53M2EtcGFyZW50LWNvbnRhaW5lciAuY29sLXNwYW4tM3tncmlkLWNvbHVtbjpzcGFuIDMvc3BhbiAzfS53M2EtcGFyZW50LWNvbnRhaW5lciAuY29sLXNwYW4tNntncmlkLWNvbHVtbjpzcGFuIDYvc3BhbiA2fS53M2EtcGFyZW50LWNvbnRhaW5lciAuLW1iLTJ7bWFyZ2luLWJvdHRvbTotLjVyZW19LnczYS1wYXJlbnQtY29udGFpbmVyIC4tbWwtXFxcXFsxMDBweFxcXFxde21hcmdpbi1sZWZ0Oi0xMDBweH0udzNhLXBhcmVudC1jb250YWluZXIgLm1iLTF7bWFyZ2luLWJvdHRvbTouMjVyZW19LnczYS1wYXJlbnQtY29udGFpbmVyIC5tYi00e21hcmdpbi1ib3R0b206MXJlbX0udzNhLXBhcmVudC1jb250YWluZXIgLm1iLTV7bWFyZ2luLWJvdHRvbToxLjI1cmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciAubWwtMnttYXJnaW4tbGVmdDouNXJlbX0udzNhLXBhcmVudC1jb250YWluZXIgLm1sLVxcXFxbM3B4XFxcXF17bWFyZ2luLWxlZnQ6M3B4fS53M2EtcGFyZW50LWNvbnRhaW5lciAubXQtNHttYXJnaW4tdG9wOjFyZW19LnczYS1wYXJlbnQtY29udGFpbmVyIC5ibG9ja3tkaXNwbGF5OmJsb2NrfS53M2EtcGFyZW50LWNvbnRhaW5lciAuZmxleHtkaXNwbGF5OmZsZXh9LnczYS1wYXJlbnQtY29udGFpbmVyIC5oaWRkZW57ZGlzcGxheTpub25lfS53M2EtcGFyZW50LWNvbnRhaW5lciAuaC0xMntoZWlnaHQ6M3JlbX0udzNhLXBhcmVudC1jb250YWluZXIgLmgtM3toZWlnaHQ6Ljc1cmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciAudy0ze3dpZHRoOi43NXJlbX0udzNhLXBhcmVudC1jb250YWluZXIgLnctXFxcXFszMDBweFxcXFxde3dpZHRoOjMwMHB4fS53M2EtcGFyZW50LWNvbnRhaW5lciAudy1mdWxse3dpZHRoOjEwMCV9LnczYS1wYXJlbnQtY29udGFpbmVyIC5yb3RhdGUtNDV7LS10dy1yb3RhdGU6NDVkZWc7dHJhbnNmb3JtOnRyYW5zbGF0ZSh2YXIoLS10dy10cmFuc2xhdGUteCksdmFyKC0tdHctdHJhbnNsYXRlLXkpKSByb3RhdGUodmFyKC0tdHctcm90YXRlKSkgc2tld1godmFyKC0tdHctc2tldy14KSkgc2tld1kodmFyKC0tdHctc2tldy15KSkgc2NhbGVYKHZhcigtLXR3LXNjYWxlLXgpKSBzY2FsZVkodmFyKC0tdHctc2NhbGUteSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAuY3Vyc29yLXBvaW50ZXJ7Y3Vyc29yOnBvaW50ZXJ9LnczYS1wYXJlbnQtY29udGFpbmVyIC5mbGV4LWNvbHtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LnczYS1wYXJlbnQtY29udGFpbmVyIC5pdGVtcy1jZW50ZXJ7YWxpZ24taXRlbXM6Y2VudGVyfS53M2EtcGFyZW50LWNvbnRhaW5lciAucm91bmRlZC1tZHtib3JkZXItcmFkaXVzOi4zNzVyZW19LnczYS1wYXJlbnQtY29udGFpbmVyIC5iZy1hcHAtZ3JheS01MHstLXR3LWJnLW9wYWNpdHk6MTtiYWNrZ3JvdW5kLWNvbG9yOnJnYigyNDkgMjUwIDI1MS92YXIoLS10dy1iZy1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyIC5wLTR7cGFkZGluZzoxcmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciAudGV4dC1sZWZ0e3RleHQtYWxpZ246bGVmdH0udzNhLXBhcmVudC1jb250YWluZXIgLnRleHQtcmlnaHR7dGV4dC1hbGlnbjpyaWdodH0udzNhLXBhcmVudC1jb250YWluZXIgLnRleHQteHN7Zm9udC1zaXplOi43NXJlbTtsaW5lLWhlaWdodDoxcmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciAuZm9udC1tZWRpdW17Zm9udC13ZWlnaHQ6NTAwfS53M2EtcGFyZW50LWNvbnRhaW5lciAubGVhZGluZy1ub25le2xpbmUtaGVpZ2h0OjF9LnczYS1wYXJlbnQtY29udGFpbmVyIC50ZXh0LWFwcC1ncmF5LTQwMHstLXR3LXRleHQtb3BhY2l0eToxO2NvbG9yOnJnYigxNTYgMTYzIDE3NS92YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgLnRleHQtYXBwLWdyYXktOTAwey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDE3IDI1IDQwL3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAudGV4dC13aGl0ZXstLXR3LXRleHQtb3BhY2l0eToxO2NvbG9yOnJnYigyNTUgMjU1IDI1NS92YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgLnNoYWRvdy1sZ3stLXR3LXNoYWRvdzowIDEwcHggMTVweCAtM3B4ICMwMDAwMDAxYSwwIDRweCA2cHggLTRweCAjMDAwMDAwMWE7LS10dy1zaGFkb3ctY29sb3JlZDowIDEwcHggMTVweCAtM3B4IHZhcigtLXR3LXNoYWRvdy1jb2xvciksMCA0cHggNnB4IC00cHggdmFyKC0tdHctc2hhZG93LWNvbG9yKTtib3gtc2hhZG93OnZhcigtLXR3LXJpbmctb2Zmc2V0LXNoYWRvdywwIDAgIzAwMDApLHZhcigtLXR3LXJpbmctc2hhZG93LDAgMCAjMDAwMCksdmFyKC0tdHctc2hhZG93KX0udzNhLXBhcmVudC1jb250YWluZXIgLmZpbHRlcntmaWx0ZXI6dmFyKC0tdHctYmx1cikgdmFyKC0tdHctYnJpZ2h0bmVzcykgdmFyKC0tdHctY29udHJhc3QpIHZhcigtLXR3LWdyYXlzY2FsZSkgdmFyKC0tdHctaHVlLXJvdGF0ZSkgdmFyKC0tdHctaW52ZXJ0KSB2YXIoLS10dy1zYXR1cmF0ZSkgdmFyKC0tdHctc2VwaWEpIHZhcigtLXR3LWRyb3Atc2hhZG93KX0udzNhLXBhcmVudC1jb250YWluZXIgaW5wdXRbdHlwZT1udW1iZXJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLC53M2EtcGFyZW50LWNvbnRhaW5lciBpbnB1dFt0eXBlPW51bWJlcl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b257YXBwZWFyYW5jZTpub25lfUBmb250LWZhY2V7Zm9udC1kaXNwbGF5OnN3YXA7Zm9udC1mYW1pbHk6SW50ZXI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NDAwO3NyYzp1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL2ludGVyL3YxMi9VY0M3M0Z3ckszaUxUZUh1U19mdlF0TXdDcDUwS25NYTJKTDdXMFE1bi13VS53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6dSswNDYwLTA1MmYsdSsxYzgwLTFjODgsdSsyMGI0LHUrMmRlMC0yZGZmLHUrYTY0MC1hNjlmLHUrZmUyZS1mZTJmfUBmb250LWZhY2V7Zm9udC1kaXNwbGF5OnN3YXA7Zm9udC1mYW1pbHk6SW50ZXI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NDAwO3NyYzp1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL2ludGVyL3YxMi9VY0M3M0Z3ckszaUxUZUh1U19mdlF0TXdDcDUwS25NYTBaTDdXMFE1bi13VS53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6dSswMzAxLHUrMDQwMC0wNDVmLHUrMDQ5MC0wNDkxLHUrMDRiMC0wNGIxLHUrMjExNn1AZm9udC1mYWNle2ZvbnQtZGlzcGxheTpzd2FwO2ZvbnQtZmFtaWx5OkludGVyO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjQwMDtzcmM6dXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9pbnRlci92MTIvVWNDNzNGd3JLM2lMVGVIdVNfZnZRdE13Q3A1MEtuTWEyWkw3VzBRNW4td1Uud29mZjIpIGZvcm1hdChcXFwid29mZjJcXFwiKTt1bmljb2RlLXJhbmdlOnUrMWY/P31AZm9udC1mYWNle2ZvbnQtZGlzcGxheTpzd2FwO2ZvbnQtZmFtaWx5OkludGVyO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjQwMDtzcmM6dXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9pbnRlci92MTIvVWNDNzNGd3JLM2lMVGVIdVNfZnZRdE13Q3A1MEtuTWExcEw3VzBRNW4td1Uud29mZjIpIGZvcm1hdChcXFwid29mZjJcXFwiKTt1bmljb2RlLXJhbmdlOnUrMDM3MC0wM2ZmfUBmb250LWZhY2V7Zm9udC1kaXNwbGF5OnN3YXA7Zm9udC1mYW1pbHk6SW50ZXI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NDAwO3NyYzp1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL2ludGVyL3YxMi9VY0M3M0Z3ckszaUxUZUh1U19mdlF0TXdDcDUwS25NYTJwTDdXMFE1bi13VS53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6dSswMTAyLTAxMDMsdSswMTEwLTAxMTEsdSswMTI4LTAxMjksdSswMTY4LTAxNjksdSswMWEwLTAxYTEsdSswMWFmLTAxYjAsdSsxZWEwLTFlZjksdSsyMGFifUBmb250LWZhY2V7Zm9udC1kaXNwbGF5OnN3YXA7Zm9udC1mYW1pbHk6SW50ZXI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NDAwO3NyYzp1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL2ludGVyL3YxMi9VY0M3M0Z3ckszaUxUZUh1U19mdlF0TXdDcDUwS25NYTI1TDdXMFE1bi13VS53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6dSswMTAwLTAyNGYsdSswMjU5LHUrMWU/Pyx1KzIwMjAsdSsyMGEwLTIwYWIsdSsyMGFkLTIwY2YsdSsyMTEzLHUrMmM2MC0yYzdmLHUrYTcyMC1hN2ZmfUBmb250LWZhY2V7Zm9udC1kaXNwbGF5OnN3YXA7Zm9udC1mYW1pbHk6SW50ZXI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NDAwO3NyYzp1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL2ludGVyL3YxMi9VY0M3M0Z3ckszaUxUZUh1U19mdlF0TXdDcDUwS25NYTFaTDdXMFE1bncud29mZjIpIGZvcm1hdChcXFwid29mZjJcXFwiKTt1bmljb2RlLXJhbmdlOnUrMDA/Pyx1KzAxMzEsdSswMTUyLTAxNTMsdSswMmJiLTAyYmMsdSswMmM2LHUrMDJkYSx1KzAyZGMsdSsyMDAwLTIwNmYsdSsyMDc0LHUrMjBhYyx1KzIxMjIsdSsyMTkxLHUrMjE5Myx1KzIyMTIsdSsyMjE1LHUrZmVmZix1K2ZmZmR9QGZvbnQtZmFjZXtmb250LWRpc3BsYXk6c3dhcDtmb250LWZhbWlseTpJbnRlcjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo1MDA7c3JjOnVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvaW50ZXIvdjEyL1VjQzczRndySzNpTFRlSHVTX2Z2UXRNd0NwNTBLbk1hMkpMN1cwUTVuLXdVLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTp1KzA0NjAtMDUyZix1KzFjODAtMWM4OCx1KzIwYjQsdSsyZGUwLTJkZmYsdSthNjQwLWE2OWYsdStmZTJlLWZlMmZ9QGZvbnQtZmFjZXtmb250LWRpc3BsYXk6c3dhcDtmb250LWZhbWlseTpJbnRlcjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo1MDA7c3JjOnVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvaW50ZXIvdjEyL1VjQzczRndySzNpTFRlSHVTX2Z2UXRNd0NwNTBLbk1hMFpMN1cwUTVuLXdVLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTp1KzAzMDEsdSswNDAwLTA0NWYsdSswNDkwLTA0OTEsdSswNGIwLTA0YjEsdSsyMTE2fUBmb250LWZhY2V7Zm9udC1kaXNwbGF5OnN3YXA7Zm9udC1mYW1pbHk6SW50ZXI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NTAwO3NyYzp1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL2ludGVyL3YxMi9VY0M3M0Z3ckszaUxUZUh1U19mdlF0TXdDcDUwS25NYTJaTDdXMFE1bi13VS53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6dSsxZj8/fUBmb250LWZhY2V7Zm9udC1kaXNwbGF5OnN3YXA7Zm9udC1mYW1pbHk6SW50ZXI7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NTAwO3NyYzp1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL2ludGVyL3YxMi9VY0M3M0Z3ckszaUxUZUh1U19mdlF0TXdDcDUwS25NYTFwTDdXMFE1bi13VS53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6dSswMzcwLTAzZmZ9QGZvbnQtZmFjZXtmb250LWRpc3BsYXk6c3dhcDtmb250LWZhbWlseTpJbnRlcjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo1MDA7c3JjOnVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvaW50ZXIvdjEyL1VjQzczRndySzNpTFRlSHVTX2Z2UXRNd0NwNTBLbk1hMnBMN1cwUTVuLXdVLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTp1KzAxMDItMDEwMyx1KzAxMTAtMDExMSx1KzAxMjgtMDEyOSx1KzAxNjgtMDE2OSx1KzAxYTAtMDFhMSx1KzAxYWYtMDFiMCx1KzFlYTAtMWVmOSx1KzIwYWJ9QGZvbnQtZmFjZXtmb250LWRpc3BsYXk6c3dhcDtmb250LWZhbWlseTpJbnRlcjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo1MDA7c3JjOnVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvaW50ZXIvdjEyL1VjQzczRndySzNpTFRlSHVTX2Z2UXRNd0NwNTBLbk1hMjVMN1cwUTVuLXdVLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTp1KzAxMDAtMDI0Zix1KzAyNTksdSsxZT8/LHUrMjAyMCx1KzIwYTAtMjBhYix1KzIwYWQtMjBjZix1KzIxMTMsdSsyYzYwLTJjN2YsdSthNzIwLWE3ZmZ9QGZvbnQtZmFjZXtmb250LWRpc3BsYXk6c3dhcDtmb250LWZhbWlseTpJbnRlcjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo1MDA7c3JjOnVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvaW50ZXIvdjEyL1VjQzczRndySzNpTFRlSHVTX2Z2UXRNd0NwNTBLbk1hMVpMN1cwUTVudy53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6dSswMD8/LHUrMDEzMSx1KzAxNTItMDE1Myx1KzAyYmItMDJiYyx1KzAyYzYsdSswMmRhLHUrMDJkYyx1KzIwMDAtMjA2Zix1KzIwNzQsdSsyMGFjLHUrMjEyMix1KzIxOTEsdSsyMTkzLHUrMjIxMix1KzIyMTUsdStmZWZmLHUrZmZmZH1AZm9udC1mYWNle2ZvbnQtZGlzcGxheTpzd2FwO2ZvbnQtZmFtaWx5OkludGVyO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjcwMDtzcmM6dXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9pbnRlci92MTIvVWNDNzNGd3JLM2lMVGVIdVNfZnZRdE13Q3A1MEtuTWEySkw3VzBRNW4td1Uud29mZjIpIGZvcm1hdChcXFwid29mZjJcXFwiKTt1bmljb2RlLXJhbmdlOnUrMDQ2MC0wNTJmLHUrMWM4MC0xYzg4LHUrMjBiNCx1KzJkZTAtMmRmZix1K2E2NDAtYTY5Zix1K2ZlMmUtZmUyZn1AZm9udC1mYWNle2ZvbnQtZGlzcGxheTpzd2FwO2ZvbnQtZmFtaWx5OkludGVyO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjcwMDtzcmM6dXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9pbnRlci92MTIvVWNDNzNGd3JLM2lMVGVIdVNfZnZRdE13Q3A1MEtuTWEwWkw3VzBRNW4td1Uud29mZjIpIGZvcm1hdChcXFwid29mZjJcXFwiKTt1bmljb2RlLXJhbmdlOnUrMDMwMSx1KzA0MDAtMDQ1Zix1KzA0OTAtMDQ5MSx1KzA0YjAtMDRiMSx1KzIxMTZ9QGZvbnQtZmFjZXtmb250LWRpc3BsYXk6c3dhcDtmb250LWZhbWlseTpJbnRlcjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo3MDA7c3JjOnVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvaW50ZXIvdjEyL1VjQzczRndySzNpTFRlSHVTX2Z2UXRNd0NwNTBLbk1hMlpMN1cwUTVuLXdVLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTp1KzFmPz99QGZvbnQtZmFjZXtmb250LWRpc3BsYXk6c3dhcDtmb250LWZhbWlseTpJbnRlcjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo3MDA7c3JjOnVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvaW50ZXIvdjEyL1VjQzczRndySzNpTFRlSHVTX2Z2UXRNd0NwNTBLbk1hMXBMN1cwUTVuLXdVLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTp1KzAzNzAtMDNmZn1AZm9udC1mYWNle2ZvbnQtZGlzcGxheTpzd2FwO2ZvbnQtZmFtaWx5OkludGVyO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjcwMDtzcmM6dXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9pbnRlci92MTIvVWNDNzNGd3JLM2lMVGVIdVNfZnZRdE13Q3A1MEtuTWEycEw3VzBRNW4td1Uud29mZjIpIGZvcm1hdChcXFwid29mZjJcXFwiKTt1bmljb2RlLXJhbmdlOnUrMDEwMi0wMTAzLHUrMDExMC0wMTExLHUrMDEyOC0wMTI5LHUrMDE2OC0wMTY5LHUrMDFhMC0wMWExLHUrMDFhZi0wMWIwLHUrMWVhMC0xZWY5LHUrMjBhYn1AZm9udC1mYWNle2ZvbnQtZGlzcGxheTpzd2FwO2ZvbnQtZmFtaWx5OkludGVyO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjcwMDtzcmM6dXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9pbnRlci92MTIvVWNDNzNGd3JLM2lMVGVIdVNfZnZRdE13Q3A1MEtuTWEyNUw3VzBRNW4td1Uud29mZjIpIGZvcm1hdChcXFwid29mZjJcXFwiKTt1bmljb2RlLXJhbmdlOnUrMDEwMC0wMjRmLHUrMDI1OSx1KzFlPz8sdSsyMDIwLHUrMjBhMC0yMGFiLHUrMjBhZC0yMGNmLHUrMjExMyx1KzJjNjAtMmM3Zix1K2E3MjAtYTdmZn1AZm9udC1mYWNle2ZvbnQtZGlzcGxheTpzd2FwO2ZvbnQtZmFtaWx5OkludGVyO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjcwMDtzcmM6dXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9pbnRlci92MTIvVWNDNzNGd3JLM2lMVGVIdVNfZnZRdE13Q3A1MEtuTWExWkw3VzBRNW53LndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTp1KzAwPz8sdSswMTMxLHUrMDE1Mi0wMTUzLHUrMDJiYi0wMmJjLHUrMDJjNix1KzAyZGEsdSswMmRjLHUrMjAwMC0yMDZmLHUrMjA3NCx1KzIwYWMsdSsyMTIyLHUrMjE5MSx1KzIxOTMsdSsyMjEyLHUrMjIxNSx1K2ZlZmYsdStmZmZkfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFse2FsaWduLWl0ZW1zOmNlbnRlcjtib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpmbGV4O2ZvbnQtZmFtaWx5OkludGVyO2luc2V0OjA7anVzdGlmeS1jb250ZW50OmNlbnRlcjtwYWRkaW5nOjFyZW07cG9zaXRpb246Zml4ZWR9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwudzNhLW1vZGFsLS1oaWRkZW57ZGlzcGxheTpub25lfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtbW9kYWxfX2lubmVyey0tdHctYm9yZGVyLW9wYWNpdHk6MTstLXR3LWJnLW9wYWNpdHk6MTstLXR3LXNoYWRvdzowcHggNHB4IDE2cHggIzAwMDAwMDE0Oy0tdHctc2hhZG93LWNvbG9yZWQ6MHB4IDRweCAxNnB4IHZhcigtLXR3LXNoYWRvdy1jb2xvcik7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMjU1IDI1NSAyNTUvdmFyKC0tdHctYmctb3BhY2l0eSkpO2JvcmRlci1jb2xvcjpyZ2IoMjQzIDI0NCAyNDYvdmFyKC0tdHctYm9yZGVyLW9wYWNpdHkpKTtib3JkZXItcmFkaXVzOjMycHg7Ym9yZGVyLXdpZHRoOjFweDtib3gtc2hhZG93OnZhcigtLXR3LXJpbmctb2Zmc2V0LXNoYWRvdywwIDAgIzAwMDApLHZhcigtLXR3LXJpbmctc2hhZG93LDAgMCAjMDAwMCksdmFyKC0tdHctc2hhZG93KTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO21heC1oZWlnaHQ6OTUlO21heC13aWR0aDozOTJweDttaW4taGVpZ2h0OjYzMHB4O29wYWNpdHk6MDtvdmVyZmxvdy14OmhpZGRlbjtvdmVyZmxvdy15OmhpZGRlbjtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLW1vZGFsX19pbm5lcil7LS10dy1ib3JkZXItb3BhY2l0eToxOy0tdHctYmctb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDU1IDY1IDgxL3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtib3JkZXItY29sb3I6cmdiKDU1IDY1IDgxL3ZhcigtLXR3LWJvcmRlci1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1tb2RhbF9faW5uZXJ7dHJhbnNmb3JtOnNjYWxlKDApO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjt0cmFuc2l0aW9uOmFsbCAuMTVzIGN1YmljLWJlemllciguOTIsMCwxLC42Nyl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1tb2RhbF9faW5uZXIudzNhLW1vZGFsX19pbm5lci0tYWN0aXZle29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zaXRpb246YWxsIC4xNXMgY3ViaWMtYmV6aWVyKDAsLjczLC43MSwxKX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLW1vZGFsX19oZWFkZXJ7cGFkZGluZzouNXJlbSAycmVtO3Bvc2l0aW9uOnJlbGF0aXZlfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtbW9kYWxfX2NvbnRlbnR7b3ZlcmZsb3cteTphdXRvO3BhZGRpbmc6MXJlbSAycmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtbW9kYWxfX2Zvb3RlcnstLXR3LWJnLW9wYWNpdHk6MTthbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMjQ5IDI1MCAyNTEvdmFyKC0tdHctYmctb3BhY2l0eSkpO2p1c3RpZnktY29udGVudDpjZW50ZXI7bWFyZ2luLXRvcDphdXRvO3BhZGRpbmc6MXJlbSAycmVtO3RleHQtYWxpZ246Y2VudGVyfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLW1vZGFsX19mb290ZXIpey0tdHctYmctb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDc1IDg1IDk5L3ZhcigtLXR3LWJnLW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWhlYWRlcnthbGlnbi1pdGVtczpjZW50ZXI7ZGlzcGxheTpmbGV4O3BhZGRpbmctdG9wOjJyZW19LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1oZWFkZXJfX2xvZ297bWFyZ2luLWJvdHRvbToxcmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtaGVhZGVyX19sb2dvIGltZ3toZWlnaHQ6YXV0bzt3aWR0aDoyLjVyZW19LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1oZWFkZXJfX3RpdGxley0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDE3IDI1IDQwL3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpO2ZvbnQtc2l6ZToxLjI1cmVtO2ZvbnQtd2VpZ2h0OjcwMDtsaW5lLWhlaWdodDoxLjc1cmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLWhlYWRlcl9fdGl0bGUpey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDI1NSAyNTUgMjU1L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIGRpdi53M2EtaGVhZGVyX19zdWJ0aXRsZXstLXR3LXRleHQtb3BhY2l0eToxO2FsaWduLWl0ZW1zOmNlbnRlcjtjb2xvcjpyZ2IoMTA3IDExNCAxMjgvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7ZGlzcGxheTpmbGV4O2ZvbnQtc2l6ZTouODc1cmVtO2ZvbnQtd2VpZ2h0OjQwMDtsaW5lLWhlaWdodDoxLjI1cmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCBkaXYudzNhLWhlYWRlcl9fc3VidGl0bGUpey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDE1NiAxNjMgMTc1L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIGRpdi53M2EtaGVhZGVyX19zdWJ0aXRsZSBpbWd7aGVpZ2h0OjE0cHg7bWFyZ2luLWxlZnQ6LjI1cmVtO3dpZHRoOjE0cHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgYnV0dG9uLnczYS1oZWFkZXJfX2J1dHRvbntib3JkZXItd2lkdGg6MDtjdXJzb3I6cG9pbnRlcjtwYWRkaW5nOjA7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MS43NXJlbTt0b3A6MS4yNXJlbX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCBidXR0b24udzNhLWhlYWRlcl9fYnV0dG9uOmFjdGl2ZSwudzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCBidXR0b24udzNhLWhlYWRlcl9fYnV0dG9uOmZvY3Vze291dGxpbmUtY29sb3I6I2Y5ZmFmYn0udzNhLXBhcmVudC1jb250YWluZXIgOmlzKC5kYXJrICN3M2EtbW9kYWwgYnV0dG9uLnczYS1oZWFkZXJfX2J1dHRvbjpmb2N1cyl7b3V0bGluZS1jb2xvcjojOWNhM2FmO291dGxpbmUtc3R5bGU6c29saWQ7b3V0bGluZS13aWR0aDoxcHh9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIGJ1dHRvbi53M2EtaGVhZGVyX19idXR0b246YWN0aXZlKXtvdXRsaW5lLWNvbG9yOiM5Y2EzYWY7b3V0bGluZS1zdHlsZTpzb2xpZDtvdXRsaW5lLXdpZHRoOjFweH0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCBkaXYudzNhLXNvY2lhbF9fcG9saWN5ey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDEwNyAxMTQgMTI4L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpO2ZvbnQtc2l6ZTouNzVyZW07Zm9udC13ZWlnaHQ6NTAwO2xpbmUtaGVpZ2h0OjFyZW07bWFyZ2luLXRvcDoxcmVtO3RleHQtYWxpZ246bGVmdH0udzNhLXBhcmVudC1jb250YWluZXIgOmlzKC5kYXJrICN3M2EtbW9kYWwgZGl2LnczYS1zb2NpYWxfX3BvbGljeSl7LS10dy10ZXh0LW9wYWNpdHk6MTtjb2xvcjpyZ2IoMTU2IDE2MyAxNzUvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1ncm91cHttYXJnaW4tYm90dG9tOjFyZW19LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1ncm91cDpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206MH0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhanMtcGFzc3dvcmRsZXNzIGRpdi53M2EtZ3JvdXBfX3RpdGxle2FsaWduLWl0ZW1zOmNlbnRlcjtkaXNwbGF5OmZsZXh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYWpzLXBhc3N3b3JkbGVzcyBkaXYudzNhLWdyb3VwX190aXRsZSBpbWd7aGVpZ2h0OjE0cHg7bWFyZ2luLWxlZnQ6LjI1cmVtO3dpZHRoOjE0cHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1ncm91cC53M2EtZ3JvdXAtLWVtYWlsLWhpZGRlbiwudzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWdyb3VwLnczYS1ncm91cC0tZXh0LXdhbGxldC1oaWRkZW4sLnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1ncm91cC53M2EtZ3JvdXAtLWhpZGRlbiwudzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWdyb3VwLnczYS1ncm91cC0tc29jaWFsLWhpZGRlbntkaXNwbGF5Om5vbmV9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgZGl2LnczYS1ncm91cF9fdGl0bGV7LS10dy10ZXh0LW9wYWNpdHk6MTtjb2xvcjpyZ2IoMTcgMjUgNDAvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7Zm9udC1zaXplOi44NzVyZW07Zm9udC13ZWlnaHQ6NTAwO2xpbmUtaGVpZ2h0OjEuMjVyZW07bWFyZ2luLWJvdHRvbTouNXJlbX0udzNhLXBhcmVudC1jb250YWluZXIgOmlzKC5kYXJrICN3M2EtbW9kYWwgZGl2LnczYS1ncm91cF9fdGl0bGUpey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDI1NSAyNTUgMjU1L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIHVsLnczYS1hZGFwdGVyLWxpc3R7Y29sdW1uLWdhcDouNXJlbTtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdCg2LG1pbm1heCgwLDFmcikpO21heC1oZWlnaHQ6NTAwcHg7b3ZlcmZsb3cteTpoaWRkZW47cGFkZGluZzoxcHg7cm93LWdhcDoxcmVtO3RyYW5zaXRpb246bWF4LWhlaWdodCAuMzVzO3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguOTIsMCwuNzQsMSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgdWwudzNhLWFkYXB0ZXItbGlzdC53M2EtYWRhcHRlci1saXN0LS1zaHJpbmt7bWF4LWhlaWdodDoxMDhweDt0cmFuc2l0aW9uOm1heC1oZWlnaHQgLjNzO3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLC43MywuNzEsMSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgdWwudzNhLWFkYXB0ZXItbGlzdC53M2EtYWRhcHRlci1saXN0LS1oaWRkZW57ZGlzcGxheTpub25lfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIGxpLnczYS1hZGFwdGVyLWl0ZW17bGlzdC1zdHlsZS10eXBlOm5vbmV9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgbGkudzNhLWFkYXB0ZXItaXRlbS0tZnVsbHtncmlkLWNvbHVtbjpzcGFuIDYvc3BhbiA2fS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtYWRhcHRlci1pdGVtLS1oaWRle2Rpc3BsYXk6bm9uZX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWV4dGVybmFsLXRvZ2dsZXtkaXNwbGF5OmJsb2NrfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtZXh0ZXJuYWwtdG9nZ2xlLnczYS1leHRlcm5hbC10b2dnbGUtLWhpZGRlbntkaXNwbGF5Om5vbmV9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1leHRlcm5hbC1jb250YWluZXJ7ZGlzcGxheTpibG9jazttYXJnaW4tYm90dG9tOjB9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1leHRlcm5hbC1jb250YWluZXIudzNhLWV4dGVybmFsLWNvbnRhaW5lci0taGlkZGVue2Rpc3BsYXk6bm9uZX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWV4dGVybmFsLWdyb3Vwe2Rpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6Ljc1cmVtO21hcmdpbi1ib3R0b206MXJlbX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWV4dGVybmFsLWdyb3VwX19sZWZ0e2ZsZXgtZ3JvdzoxfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIGJ1dHRvbi53M2EtZXh0ZXJuYWwtYmFja3stLXR3LXRleHQtb3BhY2l0eToxO2FsaWduLWl0ZW1zOmNlbnRlcjtiYWNrZ3JvdW5kLWltYWdlOm5vbmU7Ym9yZGVyLXdpZHRoOjA7Y29sb3I6cmdiKDEwNyAxMTQgMTI4L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpO2N1cnNvcjpwb2ludGVyO2Rpc3BsYXk6aW5saW5lLWZsZXg7bWFyZ2luLWJvdHRvbTouNXJlbTtwYWRkaW5nOjB9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgYnV0dG9uLnczYS1leHRlcm5hbC1iYWNrOmFjdGl2ZSwudzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCBidXR0b24udzNhLWV4dGVybmFsLWJhY2s6Zm9jdXN7b3V0bGluZS1jb2xvcjojZjlmYWZifS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCBidXR0b24udzNhLWV4dGVybmFsLWJhY2spey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDE1NiAxNjMgMTc1L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCBidXR0b24udzNhLWV4dGVybmFsLWJhY2s6Zm9jdXMpe291dGxpbmUtY29sb3I6IzljYTNhZjtvdXRsaW5lLXN0eWxlOnNvbGlkO291dGxpbmUtd2lkdGg6MXB4fS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCBidXR0b24udzNhLWV4dGVybmFsLWJhY2s6YWN0aXZlKXtvdXRsaW5lLWNvbG9yOiM5Y2EzYWY7b3V0bGluZS1zdHlsZTpzb2xpZDtvdXRsaW5lLXdpZHRoOjFweH0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWV4dGVybmFsLWJhY2sgLnczYS1ncm91cF9fdGl0bGV7LS10dy10ZXh0LW9wYWNpdHk6MTtjb2xvcjpyZ2IoMTU2IDE2MyAxNzUvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7bWFyZ2luLWJvdHRvbTowO21hcmdpbi1sZWZ0OjVweH0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWV4dGVybmFsLWxvYWRlcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcn0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXdhbGxldC1jb25uZWN0e2Rpc3BsYXk6YmxvY2s7bWFyZ2luLWJvdHRvbToxcmVtO3RleHQtYWxpZ246Y2VudGVyfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etd2FsbGV0LWNvbm5lY3QudzNhLXdhbGxldC1jb25uZWN0LS1oaWRkZW57ZGlzcGxheTpub25lfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etd2FsbGV0LWNvbm5lY3RfX2NvbnRhaW5lcnstLXR3LWJnLW9wYWNpdHk6MTstLXR3LXRleHQtb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDI1NSAyNTUgMjU1L3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtib3JkZXItcmFkaXVzOjEwcHg7Y29sb3I6cmdiKDEwNyAxMTQgMTI4L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpO2ZvbnQtc2l6ZTouNjI1cmVtO21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXJpZ2h0OmF1dG87bWluLXdpZHRoOjI1MHB4O3BhZGRpbmc6MXJlbSAuNzVyZW07d2lkdGg6Zml0LWNvbnRlbnR9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2Etd2FsbGV0LWNvbm5lY3RfX2NvbnRhaW5lcil7LS10dy10ZXh0LW9wYWNpdHk6MTtjb2xvcjpyZ2IoMTU2IDE2MyAxNzUvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS13YWxsZXQtY29ubmVjdF9fY29udGFpbmVyLWFuZHJvaWQsLnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS13YWxsZXQtY29ubmVjdF9fY29udGFpbmVyLWRlc2t0b3B7bWFyZ2luOmF1dG99LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS13YWxsZXQtY29ubmVjdF9fY29udGFpbmVyLWJ0bi1ncm91cHtkaXNwbGF5OmZsZXg7Z2FwOjE4cHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS13YWxsZXQtY29ubmVjdF9fY29udGFpbmVyLWlvc3tib3gtc2l6aW5nOmJvcmRlci1ib3g7Y29sdW1uLWdhcDoxLjI1cmVtO2Rpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtwYWRkaW5nOjAgMCAxLjc1cmVtO3Jvdy1nYXA6MzBweH0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXdhbGxldC1jb25uZWN0LXFye21hcmdpbjoxcmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etd2FsbGV0LWNvbm5lY3QtcXI+Y2FudmFzLC53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etd2FsbGV0LWNvbm5lY3QtcXI+c3Zne21hcmdpbjphdXRvfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etd2FsbGV0LWNvbm5lY3RfX2NvbnRhaW5lci1hbmRyb2lkIGF7dGV4dC1kZWNvcmF0aW9uLWxpbmU6bm9uZX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXdhbGxldC1jb25uZWN0X19sb2dvPmltZ3ttYXJnaW46MCBhdXRvIDFyZW07d2lkdGg6MTE1cHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1mb290ZXJ7LS10dy10ZXh0LW9wYWNpdHk6MTthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6cmdiKDE1NiAxNjMgMTc1L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpO2Rpc3BsYXk6ZmxleDtmb250LXNpemU6Ljc1cmVtO2p1c3RpZnktY29udGVudDpjZW50ZXI7bGluZS1oZWlnaHQ6MXJlbX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWZvb3Rlcl9fbGlua3MgYTphY3RpdmUsLnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1mb290ZXJfX2xpbmtzIGE6Zm9jdXN7b3V0bGluZS1jb2xvcjojZjlmYWZifS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLWZvb3Rlcl9fbGlua3MgYTpmb2N1cyl7b3V0bGluZS1jb2xvcjojOWNhM2FmO291dGxpbmUtc3R5bGU6c29saWQ7b3V0bGluZS13aWR0aDoxcHh9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2EtZm9vdGVyX19saW5rcyBhOmFjdGl2ZSl7b3V0bGluZS1jb2xvcjojOWNhM2FmO291dGxpbmUtc3R5bGU6c29saWQ7b3V0bGluZS13aWR0aDoxcHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1mb290ZXJfX2xpbmtzIHNwYW57bWFyZ2luOjAgNHB4fS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsLnczYS1tb2RhbC0tbGlnaHQgLnczYS1mb290ZXJfX2xpbmtzIGE6Zm9jdXMtdmlzaWJsZXtvdXRsaW5lOjFweCBzb2xpZCAjMGYxMjIyfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsLnczYS1tb2RhbC0tbGlnaHQgLnczYS1leHRlcm5hbC1iYWNrOmZvY3VzLXZpc2libGV7b3V0bGluZToxcHggc29saWQgIzBmMTIyMn0udzNhLXBhcmVudC1jb250YWluZXIgLmhvdmVyLWljb257ZGlzcGxheTpub25lO3RyYW5zaXRpb246ZGlzcGxheSAuMTVzO3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLC41NCwuNjMsLjk5KX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXRleHQtZmllbGR7LS10dy1ib3JkZXItb3BhY2l0eToxOy0tdHctYmctb3BhY2l0eToxOy0tdHctdGV4dC1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMjQ5IDI1MCAyNTEvdmFyKC0tdHctYmctb3BhY2l0eSkpO2JvcmRlci1jb2xvcjpyZ2IoMjA5IDIxMyAyMTkvdmFyKC0tdHctYm9yZGVyLW9wYWNpdHkpKTtib3JkZXItcmFkaXVzOjk5OTlweDtib3JkZXItd2lkdGg6MXB4O2NvbG9yOnJnYigxNyAyNSA0MC92YXIoLS10dy10ZXh0LW9wYWNpdHkpKTtmb250LXNpemU6Ljg3NXJlbTtsaW5lLWhlaWdodDoxLjI1cmVtO21hcmdpbi10b3A6LjVyZW07cGFkZGluZzouNzVyZW0gMS41cmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtdGV4dC1maWVsZDo6cGxhY2Vob2xkZXJ7LS10dy1wbGFjZWhvbGRlci1vcGFjaXR5OjE7Y29sb3I6cmdiKDEwNyAxMTQgMTI4L3ZhcigtLXR3LXBsYWNlaG9sZGVyLW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXRleHQtZmllbGR7LS10dy1yaW5nLW9mZnNldC1zaGFkb3c6dmFyKC0tdHctcmluZy1pbnNldCkgMCAwIDAgdmFyKC0tdHctcmluZy1vZmZzZXQtd2lkdGgpIHZhcigtLXR3LXJpbmctb2Zmc2V0LWNvbG9yKTstLXR3LXJpbmctc2hhZG93OnZhcigtLXR3LXJpbmctaW5zZXQpIDAgMCAwIGNhbGModmFyKC0tdHctcmluZy1vZmZzZXQtd2lkdGgpKSB2YXIoLS10dy1yaW5nLWNvbG9yKTtib3gtc2hhZG93OnZhcigtLXR3LXJpbmctb2Zmc2V0LXNoYWRvdyksdmFyKC0tdHctcmluZy1zaGFkb3cpLHZhcigtLXR3LXNoYWRvdywwIDAgIzAwMDApO291dGxpbmUtd2lkdGg6MH0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXRleHQtZmllbGQ6Zm9jdXN7LS10dy1yaW5nLW9mZnNldC1zaGFkb3c6dmFyKC0tdHctcmluZy1pbnNldCkgMCAwIDAgdmFyKC0tdHctcmluZy1vZmZzZXQtd2lkdGgpIHZhcigtLXR3LXJpbmctb2Zmc2V0LWNvbG9yKTstLXR3LXJpbmctc2hhZG93OnZhcigtLXR3LXJpbmctaW5zZXQpIDAgMCAwIGNhbGMoMXB4ICsgdmFyKC0tdHctcmluZy1vZmZzZXQtd2lkdGgpKSB2YXIoLS10dy1yaW5nLWNvbG9yKTstLXR3LXJpbmctb3BhY2l0eToxOy0tdHctcmluZy1jb2xvcjpyZ2IoMyAxMDAgMjU1L3ZhcigtLXR3LXJpbmctb3BhY2l0eSkpO2JvcmRlci1jb2xvcjojMDAwMDtib3gtc2hhZG93OnZhcigtLXR3LXJpbmctb2Zmc2V0LXNoYWRvdyksdmFyKC0tdHctcmluZy1zaGFkb3cpLHZhcigtLXR3LXNoYWRvdywwIDAgIzAwMDApfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtdGV4dC1maWVsZDpkaXNhYmxlZHtjdXJzb3I6bm90LWFsbG93ZWR9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS10ZXh0LWZpZWxkOmRpc2FibGVkOjpwbGFjZWhvbGRlcnstLXR3LXBsYWNlaG9sZGVyLW9wYWNpdHk6MTtjb2xvcjpyZ2IoMTU2IDE2MyAxNzUvdmFyKC0tdHctcGxhY2Vob2xkZXItb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLXRleHQtZmllbGQpey0tdHctYm9yZGVyLW9wYWNpdHk6MTstLXR3LWJnLW9wYWNpdHk6MTstLXR3LXRleHQtb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDc1IDg1IDk5L3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtib3JkZXItY29sb3I6cmdiKDEwNyAxMTQgMTI4L3ZhcigtLXR3LWJvcmRlci1vcGFjaXR5KSk7Y29sb3I6cmdiKDI1NSAyNTUgMjU1L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLXRleHQtZmllbGQpOjpwbGFjZWhvbGRlcnstLXR3LXBsYWNlaG9sZGVyLW9wYWNpdHk6MTtjb2xvcjpyZ2IoMTU2IDE2MyAxNzUvdmFyKC0tdHctcGxhY2Vob2xkZXItb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLXRleHQtZmllbGQ6Zm9jdXMpey0tdHctcmluZy1vcGFjaXR5OjE7LS10dy1yaW5nLWNvbG9yOnJnYigzIDEwMCAyNTUvdmFyKC0tdHctcmluZy1vcGFjaXR5KSk7Ym9yZGVyLWNvbG9yOiMwMDAwfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLXRleHQtZmllbGQ6ZGlzYWJsZWQpOjpwbGFjZWhvbGRlcnstLXR3LXBsYWNlaG9sZGVyLW9wYWNpdHk6MTtjb2xvcjpyZ2IoMTA3IDExNCAxMjgvdmFyKC0tdHctcGxhY2Vob2xkZXItb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtdGV4dC1maWVsZHtsaW5lLWhlaWdodDoxLjI1ZW19LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS10ZXh0LWZpZWxkLS1jb3VudHJ5LWNvZGV7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3BhZGRpbmctbGVmdDoxcmVtO3BhZGRpbmctcmlnaHQ6MXJlbTt3aWR0aDoxMDAlfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtdGV4dC1maWVsZC0tbnVtYmVye2FwcGVhcmFuY2U6bm9uZX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXNtcy1maWVsZC0tZXJyb3J7LS10dy10ZXh0LW9wYWNpdHk6MTtjb2xvcjpyZ2IoMjM5IDY4IDY4L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpO2ZvbnQtc2l6ZTouODc1cmVtO2xpbmUtaGVpZ2h0OjEuMjVyZW07bWFyZ2luLWJvdHRvbTouNXJlbTttYXJnaW4tbGVmdDouMzc1cmVtO21hcmdpbi10b3A6LS41cmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLWNvbnRhaW5lciAjdzNhLW1vZGFsIGlucHV0LnczYS10ZXh0LWZpZWxkOi13ZWJraXQtYXV0b2ZpbGwsLnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtY29udGFpbmVyICN3M2EtbW9kYWwgaW5wdXQudzNhLXRleHQtZmllbGQ6LXdlYmtpdC1hdXRvZmlsbDphY3RpdmUsLnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtY29udGFpbmVyICN3M2EtbW9kYWwgaW5wdXQudzNhLXRleHQtZmllbGQ6LXdlYmtpdC1hdXRvZmlsbDpmb2N1cywudzNhLXBhcmVudC1jb250YWluZXIgI3czYS1jb250YWluZXIgI3czYS1tb2RhbCBpbnB1dC53M2EtdGV4dC1maWVsZDotd2Via2l0LWF1dG9maWxsOmhvdmVyey0tdHctc2hhZG93OjAgMCAwIDMwcHggI2Y5ZmFmYiBpbnNldDstLXR3LXNoYWRvdy1jb2xvcmVkOmluc2V0IDAgMCAwIDMwcHggdmFyKC0tdHctc2hhZG93LWNvbG9yKTstd2Via2l0LXRleHQtZmlsbC1jb2xvcjojMTExOTI4IWltcG9ydGFudDtib3gtc2hhZG93OnZhcigtLXR3LXJpbmctb2Zmc2V0LXNoYWRvdywwIDAgIzAwMDApLHZhcigtLXR3LXJpbmctc2hhZG93LDAgMCAjMDAwMCksdmFyKC0tdHctc2hhZG93KX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1jb250YWluZXIuZGFyayAjdzNhLW1vZGFsIGlucHV0LnczYS10ZXh0LWZpZWxkOi13ZWJraXQtYXV0b2ZpbGwsLnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtY29udGFpbmVyLmRhcmsgI3czYS1tb2RhbCBpbnB1dC53M2EtdGV4dC1maWVsZDotd2Via2l0LWF1dG9maWxsOmFjdGl2ZSwudzNhLXBhcmVudC1jb250YWluZXIgI3czYS1jb250YWluZXIuZGFyayAjdzNhLW1vZGFsIGlucHV0LnczYS10ZXh0LWZpZWxkOi13ZWJraXQtYXV0b2ZpbGw6Zm9jdXMsLnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtY29udGFpbmVyLmRhcmsgI3czYS1tb2RhbCBpbnB1dC53M2EtdGV4dC1maWVsZDotd2Via2l0LWF1dG9maWxsOmhvdmVyey0tdHctc2hhZG93OjAgMCAwIDMwcHggIzM3NDE1MSBpbnNldDstLXR3LXNoYWRvdy1jb2xvcmVkOmluc2V0IDAgMCAwIDMwcHggdmFyKC0tdHctc2hhZG93LWNvbG9yKTstd2Via2l0LXRleHQtZmlsbC1jb2xvcjojZmZmIWltcG9ydGFudDtib3gtc2hhZG93OnZhcigtLXR3LXJpbmctb2Zmc2V0LXNoYWRvdywwIDAgIzAwMDApLHZhcigtLXR3LXJpbmctc2hhZG93LDAgMCAjMDAwMCksdmFyKC0tdHctc2hhZG93KX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWJ1dHRvbnstLXR3LWJnLW9wYWNpdHk6MTstLXR3LXRleHQtb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDI0MyAyNDQgMjQ2L3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtib3JkZXItcmFkaXVzOjk5OTlweDtjb2xvcjpyZ2IoMTcgMjUgNDAvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7Zm9udC1zaXplOjFyZW07Zm9udC13ZWlnaHQ6NTAwO2xpbmUtaGVpZ2h0OjEuNXJlbTtwYWRkaW5nOi43NXJlbSAxLjVyZW19LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1idXR0b246aG92ZXJ7LS10dy1iZy1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMjA5IDIxMyAyMTkvdmFyKC0tdHctYmctb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtYnV0dG9uOmZvY3Vzey0tdHctYmctb3BhY2l0eToxOy0tdHctdGV4dC1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMjQzIDI0NCAyNDYvdmFyKC0tdHctYmctb3BhY2l0eSkpO2NvbG9yOnJnYig1NSA2NSA4MS92YXIoLS10dy10ZXh0LW9wYWNpdHkpKTtvdXRsaW5lLWNvbG9yOiNmOWZhZmJ9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1idXR0b246YWN0aXZle291dGxpbmUtY29sb3I6I2Y5ZmFmYn0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWJ1dHRvbjpkaXNhYmxlZHstLXR3LWJnLW9wYWNpdHk6MTstLXR3LXRleHQtb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDI0OSAyNTAgMjUxL3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtjb2xvcjpyZ2IoMjA5IDIxMyAyMTkvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2EtYnV0dG9uKXstLXR3LWJnLW9wYWNpdHk6MTstLXR3LXRleHQtb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDE3IDI1IDQwL3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtjb2xvcjpyZ2IoMjU1IDI1NSAyNTUvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2EtYnV0dG9uOmhvdmVyKXstLXR3LWJnLW9wYWNpdHk6MTtiYWNrZ3JvdW5kLWNvbG9yOnJnYigzMSA0MiA1NS92YXIoLS10dy1iZy1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2EtYnV0dG9uOmZvY3VzKXstLXR3LWJnLW9wYWNpdHk6MTstLXR3LXRleHQtb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDE3IDI1IDQwL3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtjb2xvcjpyZ2IoMjU1IDI1NSAyNTUvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7b3V0bGluZS1jb2xvcjojOWNhM2FmO291dGxpbmUtc3R5bGU6c29saWQ7b3V0bGluZS13aWR0aDoxcHh9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2EtYnV0dG9uOmFjdGl2ZSl7b3V0bGluZS1jb2xvcjojOWNhM2FmO291dGxpbmUtc3R5bGU6c29saWQ7b3V0bGluZS13aWR0aDoxcHh9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2EtYnV0dG9uOmRpc2FibGVkKXstLXR3LWJnLW9wYWNpdHk6MTstLXR3LXRleHQtb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDU5IDY5IDg1L3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtjb2xvcjpyZ2IoMTA3IDExNCAxMjgvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1idXR0b24tLXByaW1hcnl7LS10dy1iZy1vcGFjaXR5OjE7LS10dy10ZXh0LW9wYWNpdHk6MTtiYWNrZ3JvdW5kLWNvbG9yOnJnYigzIDEwMCAyNTUvdmFyKC0tdHctYmctb3BhY2l0eSkpO2NvbG9yOnJnYigyNTUgMjU1IDI1NS92YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWJ1dHRvbi0tcHJpbWFyeTpob3ZlcnstLXR3LWJnLW9wYWNpdHk6MTtiYWNrZ3JvdW5kLWNvbG9yOnJnYigzMCA2NiAxNTkvdmFyKC0tdHctYmctb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtYnV0dG9uLS1wcmltYXJ5OmZvY3Vzey0tdHctYmctb3BhY2l0eToxOy0tdHctdGV4dC1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMyAxMDAgMjU1L3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtjb2xvcjpyZ2IoMjU1IDI1NSAyNTUvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7b3V0bGluZS1jb2xvcjojYTRjYWZlfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtYnV0dG9uLS1wcmltYXJ5OmFjdGl2ZXtvdXRsaW5lLWNvbG9yOiNhNGNhZmV9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1idXR0b24tLXByaW1hcnk6ZGlzYWJsZWR7LS10dy1iZy1vcGFjaXR5OjE7LS10dy10ZXh0LW9wYWNpdHk6MTtiYWNrZ3JvdW5kLWNvbG9yOnJnYigxOTUgMjIxIDI1My92YXIoLS10dy1iZy1vcGFjaXR5KSk7Y29sb3I6cmdiKDIzNSAyNDUgMjU1L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLWJ1dHRvbi0tcHJpbWFyeSl7LS10dy1iZy1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMyAxMDAgMjU1L3ZhcigtLXR3LWJnLW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgOmlzKC5kYXJrICN3M2EtbW9kYWwgLnczYS1idXR0b24tLXByaW1hcnk6aG92ZXIpey0tdHctYmctb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDMwIDY2IDE1OS92YXIoLS10dy1iZy1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2EtYnV0dG9uLS1wcmltYXJ5OmZvY3VzKXstLXR3LWJnLW9wYWNpdHk6MTtiYWNrZ3JvdW5kLWNvbG9yOnJnYigzIDEwMCAyNTUvdmFyKC0tdHctYmctb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLWJ1dHRvbi0tcHJpbWFyeTpkaXNhYmxlZCl7LS10dy1iZy1vcGFjaXR5OjE7LS10dy10ZXh0LW9wYWNpdHk6MTtiYWNrZ3JvdW5kLWNvbG9yOnJnYig0NSA3MiAxMTYvdmFyKC0tdHctYmctb3BhY2l0eSkpO2NvbG9yOnJnYigxMDcgMTE0IDEyOC92YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLWJ1dHRvbi0tbG9naW57YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6aW5saW5lLWZsZXg7aGVpZ2h0OjIuNzVyZW07anVzdGlmeS1jb250ZW50OmNlbnRlcn0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCBidXR0b24udzNhLWJ1dHRvbi0tbG9naW46aG92ZXI+LmhvdmVyLWljb257ZGlzcGxheTpibG9jazt0cmFuc2l0aW9uOmRpc3BsYXkgLjE1czt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMCwuNTQsLjYzLC45OSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgYnV0dG9uLnczYS1idXR0b24tLWxvZ2luOmhvdmVyPi5pbWFnZS1pY29ue2Rpc3BsYXk6bm9uZTt0cmFuc2l0aW9uOmRpc3BsYXkgLjE1czt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMCwuNTQsLjYzLC45OSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgYnV0dG9uLnczYS1idXR0b24tZXhwYW5key0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDMgMTAwIDI1NS92YXIoLS10dy10ZXh0LW9wYWNpdHkpKTtmb250LXNpemU6Ljg3NXJlbTtoZWlnaHQ6YXV0bztsaW5lLWhlaWdodDoxLjI1cmVtO21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXRvcDoxcmVtO3dpZHRoOmF1dG99LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgYnV0dG9uLnczYS1idXR0b24tZXhwYW5kOmhvdmVyey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDMwIDY2IDE1OS92YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCBidXR0b24udzNhLWJ1dHRvbi1leHBhbmQ6Zm9jdXMtdmlzaWJsZXtvdXRsaW5lLWNvbG9yOiNmOWZhZmI7b3V0bGluZS1zdHlsZTpzb2xpZDtvdXRsaW5lLXdpZHRoOjFweH0udzNhLXBhcmVudC1jb250YWluZXIgOmlzKC5kYXJrICN3M2EtbW9kYWwgYnV0dG9uLnczYS1idXR0b24tZXhwYW5kOmhvdmVyKXstLXR3LXRleHQtb3BhY2l0eToxO2NvbG9yOnJnYig2MyAxMzEgMjQ4L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCBidXR0b24udzNhLWJ1dHRvbi1leHBhbmQ6Zm9jdXMtdmlzaWJsZSl7b3V0bGluZS1jb2xvcjojOWNhM2FmO291dGxpbmUtc3R5bGU6c29saWQ7b3V0bGluZS13aWR0aDoxcHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1zbXMtZmllbGRfX2NvbnRhaW5lcntkaXNwbGF5OmdyaWQ7Z2FwOi41cmVtO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoMTIsbWlubWF4KDAsMWZyKSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1zbXMtZmllbGRfX2NvZGUtc2VsZWN0ZWR7ZGlzcGxheTpmbGV4fS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etc21zLWZpZWxkX19jb2RlLWRyb3Bkb3due2hlaWdodDoxODVweDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMjBweDt6LWluZGV4OjEwfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etc21zLWZpZWxkX19jb2RlLWRyb3Bkb3duPjpub3QoW2hpZGRlbl0pfjpub3QoW2hpZGRlbl0pey0tdHctZGl2aWRlLXktcmV2ZXJzZTowOy0tdHctZGl2aWRlLW9wYWNpdHk6MTtib3JkZXItYm90dG9tLXdpZHRoOmNhbGMoMXB4KnZhcigtLXR3LWRpdmlkZS15LXJldmVyc2UpKTtib3JkZXItY29sb3I6cmdiKDI0MyAyNDQgMjQ2L3ZhcigtLXR3LWRpdmlkZS1vcGFjaXR5KSk7Ym9yZGVyLXRvcC13aWR0aDpjYWxjKDFweCooMSAtIHZhcigtLXR3LWRpdmlkZS15LXJldmVyc2UpKSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1zbXMtZmllbGRfX2NvZGUtZHJvcGRvd257LS10dy1iZy1vcGFjaXR5OjE7LS10dy1zaGFkb3c6MHB4IDRweCAxNnB4ICMwMDAwMDAxNDstLXR3LXNoYWRvdy1jb2xvcmVkOjBweCA0cHggMTZweCB2YXIoLS10dy1zaGFkb3ctY29sb3IpO2JhY2tncm91bmQtY29sb3I6cmdiKDI1NSAyNTUgMjU1L3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtib3JkZXItcmFkaXVzOi41cmVtO2JveC1zaGFkb3c6dmFyKC0tdHctcmluZy1vZmZzZXQtc2hhZG93LDAgMCAjMDAwMCksdmFyKC0tdHctcmluZy1zaGFkb3csMCAwICMwMDAwKSx2YXIoLS10dy1zaGFkb3cpO292ZXJmbG93LXk6c2Nyb2xsfS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLXNtcy1maWVsZF9fY29kZS1kcm9wZG93bil7LS10dy1iZy1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjpyZ2IoNTUgNjUgODEvdmFyKC0tdHctYmctb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etc21zLWZpZWxkX19jb2RlLWRyb3Bkb3due3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMzBweCl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1zbXMtZmllbGRfX2NvZGUtZHJvcGRvd24tLWhpZGRlbntkaXNwbGF5Om5vbmV9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1zbXMtZmllbGRfX2NvZGUtZHJvcGRvd24gdWx7LS10dy10ZXh0LW9wYWNpdHk6MTtjb2xvcjpyZ2IoNTUgNjUgODEvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7Zm9udC1zaXplOi44NzVyZW07bGluZS1oZWlnaHQ6MS4yNXJlbTtwYWRkaW5nLWJvdHRvbTouNXJlbTtwYWRkaW5nLXRvcDouNXJlbX0udzNhLXBhcmVudC1jb250YWluZXIgOmlzKC5kYXJrICN3M2EtbW9kYWwgLnczYS1zbXMtZmllbGRfX2NvZGUtZHJvcGRvd24gdWwpey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDIyOSAyMzEgMjM1L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etc21zLWZpZWxkX19jb2RlLWRyb3Bkb3duIGxpe2N1cnNvcjpwb2ludGVyO3BhZGRpbmc6MH0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXNtcy1maWVsZF9fY29kZS1kcm9wZG93biBsaTpob3ZlcnstLXR3LWJnLW9wYWNpdHk6MTtiYWNrZ3JvdW5kLWNvbG9yOnJnYigyNDMgMjQ0IDI0Ni92YXIoLS10dy1iZy1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2Etc21zLWZpZWxkX19jb2RlLWRyb3Bkb3duIGxpOmhvdmVyKXstLXR3LWJnLW9wYWNpdHk6MTstLXR3LXRleHQtb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDE3IDI0IDM5L3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtjb2xvcjpyZ2IoMjU1IDI1NSAyNTUvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1zbXMtZmllbGRfX2NvZGUtZHJvcGRvd24gbGkgYnV0dG9ue2hlaWdodDoxMDAlO3BhZGRpbmc6LjVyZW0gMXJlbTt0ZXh0LWFsaWduOmxlZnQ7d2lkdGg6MTAwJX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXNtcy1maWVsZF9fY29kZS1kcm9wZG93biBsaSBidXR0b24gZGl2e2FsaWduLWl0ZW1zOmNlbnRlcjtkaXNwbGF5OmZsZXh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1zbXMtZmllbGRfX2NvZGV7Z3JpZC1jb2x1bW46c3BhbiA1L3NwYW4gNX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXNtcy1maWVsZF9fbnVtYmVye2dyaWQtY29sdW1uOnNwYW4gNy9zcGFuIDd9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1tb2RhbF9fbG9hZGVyey0tdHctYmctb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDI1NSAyNTUgMjU1L3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtkaXNwbGF5OmZsZXg7aW5zZXQ6MDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MTB9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2EtbW9kYWxfX2xvYWRlcil7LS10dy1iZy1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjpyZ2IoNTUgNjUgODEvdmFyKC0tdHctYmctb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtbW9kYWxfX2xvYWRlci53M2EtbW9kYWxfX2xvYWRlci0taGlkZGVue2Rpc3BsYXk6bm9uZX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLW1vZGFsX19sb2FkZXItY29udGVudHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO21hcmdpbi1ib3R0b206NTBweDtwb3NpdGlvbjpyZWxhdGl2ZTt0ZXh0LWFsaWduOmNlbnRlcn0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLW1vZGFsX19sb2FkZXItaW5mb3thbGlnbi1pdGVtczpjZW50ZXI7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWdyb3c6MTtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmc6MCAzMHB4fS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etc3Bpbm5lci1sYWJlbHstLXR3LXRleHQtb3BhY2l0eToxO2NvbG9yOnJnYigzIDEwMCAyNTUvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7Zm9udC1zaXplOjFyZW07Zm9udC13ZWlnaHQ6NTAwO2xpbmUtaGVpZ2h0OjEuNXJlbTttYXJnaW4tdG9wOjEwcHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1zcGlubmVyLW1lc3NhZ2V7LS10dy10ZXh0LW9wYWNpdHk6MTtjb2xvcjpyZ2IoMTA3IDExNCAxMjgvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7Zm9udC1zaXplOjFyZW07bGluZS1oZWlnaHQ6MS41cmVtO21hcmdpbi10b3A6MTBweH0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXNwaW5uZXItbWVzc2FnZTpmaXJzdC1sZXR0ZXJ7dGV4dC10cmFuc2Zvcm06Y2FwaXRhbGl6ZX0udzNhLXBhcmVudC1jb250YWluZXIgOmlzKC5kYXJrICN3M2EtbW9kYWwgLnczYS1zcGlubmVyLW1lc3NhZ2Upey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDI1NSAyNTUgMjU1L3ZhcigtLXR3LXRleHQtb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etc3Bpbm5lci1tZXNzYWdlLnczYS1zcGlubmVyLW1lc3NhZ2UtLWVycm9yey0tdHctdGV4dC1vcGFjaXR5OjE7Y29sb3I6cmdiKDIzOSA2OCA2OC92YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXNwaW5uZXItcG93ZXJ7LS10dy10ZXh0LW9wYWNpdHk6MTtjb2xvcjpyZ2IoMTgzIDE4NCAxODkvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSk7Zm9udC1zaXplOi43NXJlbTtsaW5lLWhlaWdodDoxcmVtO21hcmdpbi10b3A6YXV0b30udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXNwaW5uZXItcG93ZXI+aW1ne2Rpc3BsYXk6aW5saW5lO2hlaWdodDoycmVtO3dpZHRoOmF1dG99LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1zcGlubmVyey0tdHctYmctb3BhY2l0eToxO2FuaW1hdGlvbjpyb3RhdGUgMXMgbGluZWFyIGluZmluaXRlO2JhY2tncm91bmQtY29sb3I6cmdiKDMgMTAwIDI1NS92YXIoLS10dy1iZy1vcGFjaXR5KSk7YmFja2dyb3VuZDpjb25pYy1ncmFkaWVudCgjMDAwMCwjMDM2NGZmKTtib3JkZXItcmFkaXVzOjUwJTtkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6NjBweDtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo2MHB4fS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2Etc3Bpbm5lcl9faGVhZCwudzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXNwaW5uZXJfX21hc2t7Ym9yZGVyLXJhZGl1czoxMDAlO2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGV9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1zcGlubmVyX19tYXNrey0tdHctYmctb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDI1NSAyNTUgMjU1L3ZhcigtLXR3LWJnLW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgOmlzKC5kYXJrICN3M2EtbW9kYWwgLnczYS1zcGlubmVyX19tYXNrKXstLXR3LWJnLW9wYWNpdHk6MTtiYWNrZ3JvdW5kLWNvbG9yOnJnYig1NSA2NSA4MS92YXIoLS10dy1iZy1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1zcGlubmVyX19tYXNre2hlaWdodDo1MHB4O2xlZnQ6NXB4O3RvcDo1cHg7d2lkdGg6NTBweH0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLXNwaW5uZXJfX2hlYWR7LS10dy1iZy1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMyAxMDAgMjU1L3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtoZWlnaHQ6NXB4O2xlZnQ6MjZweDt0b3A6MDt3aWR0aDo1cHh9QGtleWZyYW1lcyByb3RhdGV7MCV7dHJhbnNmb3JtOnJvdGF0ZSgwKX10b3t0cmFuc2Zvcm06cm90YXRlKDF0dXJuKX19LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1tb2RhbF9fbG9hZGVyLWJyaWRnZXthbGlnbi1pdGVtczpjZW50ZXI7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7bWFyZ2luLWJvdHRvbToxNHB4fS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtbW9kYWxfX2xvYWRlci1icmlkZ2UtbWVzc2FnZXstLXR3LXRleHQtb3BhY2l0eToxO2NvbG9yOnJnYigxMDcgMTE0IDEyOC92YXIoLS10dy10ZXh0LW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLW1vZGFsX19sb2FkZXItYnJpZGdlLW1lc3NhZ2U6Zmlyc3QtbGV0dGVye3RleHQtdHJhbnNmb3JtOmNhcGl0YWxpemV9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2EtbW9kYWxfX2xvYWRlci1icmlkZ2UtbWVzc2FnZSl7LS10dy10ZXh0LW9wYWNpdHk6MTtjb2xvcjpyZ2IoMjU1IDI1NSAyNTUvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1tb2RhbF9fbG9hZGVyLWFwcC1sb2dve2Rpc3BsYXk6ZmxleDtwYWRkaW5nOi41cmVtfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtbW9kYWxfX2xvYWRlci1hcHAtbG9nby0tZGVmYXVsdHstLXR3LWJnLW9wYWNpdHk6MTthbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMyAxMDAgMjU1L3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtib3JkZXItcmFkaXVzOjk5OTlweDtoZWlnaHQ6NzJweDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjcycHh9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAjdzNhLW1vZGFsIC53M2EtbW9kYWxfX2xvYWRlci1hcHAtbG9nby0tZGVmYXVsdCl7LS10dy1iZy1vcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMjQ5IDI1MCAyNTEvdmFyKC0tdHctYmctb3BhY2l0eSkpfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW1vZGFsIC53M2EtbW9kYWxfX2xvYWRlci1hcHAtbG9nbyBpbWd7aGVpZ2h0OmF1dG87bWF4LWhlaWdodDo3MnB4O21heC13aWR0aDo3MnB4O3dpZHRoOjcycHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1tb2RhbF9fbG9hZGVyLWFwcC1sb2dvLS1kZWZhdWx0IGltZ3ttYXgtaGVpZ2h0OjQ1cHg7bWF4LXdpZHRoOjQ1cHg7d2lkdGg6NDVweH0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLW1vZGFsX19sb2FkZXItc29jaWFsLWxvZ297LS10dy1iZy1vcGFjaXR5OjE7YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQtY29sb3I6cmdiKDI0MyAyNDQgMjQ2L3ZhcigtLXR3LWJnLW9wYWNpdHkpKTtib3JkZXItcmFkaXVzOjk5OTlweDtkaXNwbGF5OmZsZXg7aGVpZ2h0OjcycHg7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDo3MnB4fS53M2EtcGFyZW50LWNvbnRhaW5lciA6aXMoLmRhcmsgI3czYS1tb2RhbCAudzNhLW1vZGFsX19sb2FkZXItc29jaWFsLWxvZ28pey0tdHctYmctb3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6cmdiKDI0OSAyNTAgMjUxL3ZhcigtLXR3LWJnLW9wYWNpdHkpKX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1tb2RhbCAudzNhLW1vZGFsX19sb2FkZXItc29jaWFsLWxvZ28gaW1ne2hlaWdodDo0cmVtO3dpZHRoOjRyZW19LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1tb2RhbF9fbG9hZGVyLWFkYXB0ZXIgaW1ne2hlaWdodDphdXRvO3dpZHRoOjg0cHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbW9kYWwgLnczYS1tb2RhbF9fY29ubmVjdG9ye2FsaWduLWl0ZW1zOmNlbnRlcjtkaXNwbGF5OmZsZXh9LnczYS1wYXJlbnQtY29udGFpbmVyIC53M2EtbW9kYWxfX2Nvbm5lY3Rvci1iZWF0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDo4MHB4O3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjgwcHh9LnczYS1wYXJlbnQtY29udGFpbmVyIC53M2EtbW9kYWxfX2Nvbm5lY3Rvci1iZWF0IGRpdnthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLDEsMSwwKTtiYWNrZ3JvdW5kOmdyZXk7Ym9yZGVyLXJhZGl1czo1MCU7aGVpZ2h0OjEzcHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjMzcHg7d2lkdGg6MTNweH0udzNhLXBhcmVudC1jb250YWluZXIgLnczYS1tb2RhbF9fY29ubmVjdG9yLWJlYXQgZGl2OmZpcnN0LWNoaWxke2FuaW1hdGlvbjpiZWF0MSAyLjRzIGluZmluaXRlO2xlZnQ6OHB4fS53M2EtcGFyZW50LWNvbnRhaW5lciAudzNhLW1vZGFsX19jb25uZWN0b3ItYmVhdCBkaXY6bnRoLWNoaWxkKDIpe2FuaW1hdGlvbjpiZWF0MiAyLjRzIGluZmluaXRlO2xlZnQ6OHB4fS53M2EtcGFyZW50LWNvbnRhaW5lciAudzNhLW1vZGFsX19jb25uZWN0b3ItYmVhdCBkaXY6bnRoLWNoaWxkKDMpe2FuaW1hdGlvbjpiZWF0MyAyLjRzIGluZmluaXRlO2xlZnQ6OHB4fS53M2EtcGFyZW50LWNvbnRhaW5lciAudzNhLW1vZGFsX19jb25uZWN0b3ItYmVhdCBkaXY6bnRoLWNoaWxkKDQpe2FuaW1hdGlvbjpiZWF0NCAyLjRzIGluZmluaXRlO2xlZnQ6MzJweH0udzNhLXBhcmVudC1jb250YWluZXIgLnczYS1tb2RhbF9fY29ubmVjdG9yLWJlYXQgZGl2Om50aC1jaGlsZCg1KXthbmltYXRpb246YmVhdDUgMi40cyBpbmZpbml0ZTtsZWZ0OjU2cHh9QGtleWZyYW1lcyBiZWF0MXswJXt0cmFuc2Zvcm06c2NhbGUoMCl9MjUle3RyYW5zZm9ybTpzY2FsZSgwKX01MCV7dHJhbnNmb3JtOnNjYWxlKDEpfTc1JXt0cmFuc2Zvcm06c2NhbGUoMCl9dG97dHJhbnNmb3JtOnNjYWxlKDApfX1Aa2V5ZnJhbWVzIGJlYXQyezAle3RyYW5zZm9ybTpzY2FsZSgwKX0yNSV7dHJhbnNmb3JtOnNjYWxlKDEpfTUwJXt0cmFuc2Zvcm06dHJhbnNsYXRlKDI0cHgpfTc1JXt0cmFuc2Zvcm06dHJhbnNsYXRlKDApfXRve3RyYW5zZm9ybTp0cmFuc2xhdGUoMCkgc2NhbGUoMCl9fUBrZXlmcmFtZXMgYmVhdDN7MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwKX0yNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgyNHB4KX01MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSg0OHB4KX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgyNHB4KX10b3t0cmFuc2Zvcm06dHJhbnNsYXRlKDApfX1Aa2V5ZnJhbWVzIGJlYXQ0ezAle3RyYW5zZm9ybTp0cmFuc2xhdGUoMCl9MjUle3RyYW5zZm9ybTp0cmFuc2xhdGUoMjRweCl9NTAle3RyYW5zZm9ybTp0cmFuc2xhdGUoMjRweCkgc2NhbGUoMCl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGUoMjRweCkgc2NhbGUoMSl9dG97dHJhbnNmb3JtOnRyYW5zbGF0ZSgwKX19QGtleWZyYW1lcyBiZWF0NXswJXt0cmFuc2Zvcm06c2NhbGUoMSl9MjUle3RyYW5zZm9ybTpzY2FsZSgwKX01MCV7dHJhbnNmb3JtOnNjYWxlKDApfTc1JXt0cmFuc2Zvcm06c2NhbGUoMCl9dG97dHJhbnNmb3JtOnNjYWxlKDEpfX0udzNhLXBhcmVudC1jb250YWluZXIgLmdyb3VwOmhvdmVyIC5ncm91cC1ob3ZlclxcXFw6ZmxleHtkaXNwbGF5OmZsZXh9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAuZGFya1xcXFw6YmctYXBwLWdyYXktNjAwKXstLXR3LWJnLW9wYWNpdHk6MTtiYWNrZ3JvdW5kLWNvbG9yOnJnYig3NSA4NSA5OS92YXIoLS10dy1iZy1vcGFjaXR5KSl9LnczYS1wYXJlbnQtY29udGFpbmVyIDppcyguZGFyayAuZGFya1xcXFw6dGV4dC13aGl0ZSl7LS10dy10ZXh0LW9wYWNpdHk6MTtjb2xvcjpyZ2IoMjU1IDI1NSAyNTUvdmFyKC0tdHctdGV4dC1vcGFjaXR5KSl9XCI7XG5zdHlsZUluamVjdChjc3NfMjQ4eiQxKTtcblxuY29uc3QgVGhlbWVkQ29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KHtcbiAgaXNEYXJrOiB0cnVlIC8vIGRlZmF1bHQgdmFsdWVcbn0pO1xuXG52YXIgbW9kYWwgPSB7XG4gIFwiYWRhcHRlci1sb2FkZXIubWVzc2FnZVwiOiBcIlZlcmlmeSB5b3VyIHt7YWRhcHRlcn19IGFjY291bnQgdG8gY29udGludWVcIixcbiAgXCJhZGFwdGVyLWxvYWRlci5tZXNzYWdlMVwiOiBcIlZlcmlmeSB5b3VyIHt7YWRhcHRlcn19XCIsXG4gIFwiYWRhcHRlci1sb2FkZXIubWVzc2FnZTJcIjogXCJhY2NvdW50IHRvIGNvbnRpbnVlXCIsXG4gIFwiZXJyb3JzLWludmFsaWQtbnVtYmVyLWVtYWlsXCI6IFwiSW52YWxpZCBFbWFpbCBvciBQaG9uZSBOdW1iZXJcIixcbiAgXCJlcnJvcnMtcmVxdWlyZWRcIjogXCJSZXF1aXJlZFwiLFxuICBcImV4dGVybmFsLmJhY2tcIjogXCJCYWNrXCIsXG4gIFwiZXh0ZXJuYWwuY29ubmVjdFwiOiBcIkNvbm5lY3Qgd2l0aCBXYWxsZXRcIixcbiAgXCJleHRlcm5hbC50aXRsZVwiOiBcIkV4dGVybmFsIFdhbGxldFwiLFxuICBcImV4dGVybmFsLndhbGxldGNvbm5lY3QtY29ubmVjdFwiOiBcIkNvbm5lY3RcIixcbiAgXCJleHRlcm5hbC53YWxsZXRjb25uZWN0LWNvcHlcIjogXCJDbGljayBvbiB0aGUgUVIgQ29kZSB0byBjb3B5IHRvIGNsaXBib2FyZFwiLFxuICBcImV4dGVybmFsLndhbGxldGNvbm5lY3Qtc3VidGl0bGVcIjogXCJTY2FuIHRoZSBRUiBjb2RlIHdpdGggYSBXYWxsZXRDb25uZWN0LWNvbXBhdGlibGUgd2FsbGV0XCIsXG4gIFwiZm9vdGVyLm1lc3NhZ2VcIjogXCJTZWxmLWN1c3RvZGlhbCBsb2dpbiBieVwiLFxuICBcImZvb3Rlci5tZXNzYWdlLW5ld1wiOiBcIlNlbGYtY3VzdG9kaWFsIGxvZ2luIGJ5IFdlYjNBdXRoXCIsXG4gIFwiZm9vdGVyLnBvbGljeVwiOiBcIlByaXZhY3kgUG9saWN5XCIsXG4gIFwiZm9vdGVyLnRlcm1zXCI6IFwiVGVybXMgb2YgVXNlXCIsXG4gIFwiZm9vdGVyLnRlcm1zLXNlcnZpY2VcIjogXCJUZXJtcyBvZiBTZXJ2aWNlXCIsXG4gIFwiZm9vdGVyLnZlcnNpb25cIjogXCJWZXJzaW9uXCIsXG4gIFwiaGVhZGVyLXN1YnRpdGxlXCI6IFwiU2VsZWN0IG9uZSBvZiB0aGUgZm9sbG93aW5nIG9wdGlvbnMgdG8gY29udGludWVcIixcbiAgXCJoZWFkZXItc3VidGl0bGUtbmFtZVwiOiBcIllvdXIge3thcHBOYW1lfX0gd2FsbGV0IHdpdGggb25lIGNsaWNrXCIsXG4gIFwiaGVhZGVyLXN1YnRpdGxlLW5ld1wiOiBcIllvdXIgYmxvY2tjaGFpbiB3YWxsZXQgd2l0aCBvbmUgY2xpY2tcIixcbiAgXCJoZWFkZXItdGl0bGVcIjogXCJTaWduIGluXCIsXG4gIFwiaGVhZGVyLXRvb2x0aXAtZGVzY1wiOiBcIlRoZSB3YWxsZXQgc2VydmVzIGFzIGFuIGFjY291bnQgdG8gc3RvcmUgYW5kIG1hbmFnZSB5b3VyIGRpZ2l0YWwgYXNzZXRzIG9uIHRoZSBibG9ja2NoYWluLlwiLFxuICBcImhlYWRlci10b29sdGlwLXRpdGxlXCI6IFwiV2FsbGV0XCIsXG4gIFwibmV0d29yay5hZGQtcmVxdWVzdFwiOiBcIlRoaXMgc2l0ZSBpcyByZXF1ZXN0aW5nIHRvIGFkZCBhIG5ldHdvcmtcIixcbiAgXCJuZXR3b3JrLmNhbmNlbFwiOiBcIkNhbmNlbFwiLFxuICBcIm5ldHdvcmsuZnJvbVwiOiBcIkZyb21cIixcbiAgXCJuZXR3b3JrLnByb2NlZWRcIjogXCJQcm9jZWVkXCIsXG4gIFwibmV0d29yay5zd2l0Y2gtcmVxdWVzdFwiOiBcIlRoaXMgc2l0ZSBpcyByZXF1ZXN0aW5nIHRvIHN3aXRjaCBuZXR3b3Jrc1wiLFxuICBcIm5ldHdvcmsudG9cIjogXCJUb1wiLFxuICBcInBvcHVwLnBob25lLWJvZHlcIjogXCJZb3VyIGNvdW50cnkgY29kZSB3aWxsIGJlIGRldGVjdGVkIGF1dG9tYXRpY2FsbHksIGJ1dCBpZiB5b3UncmUgdXNpbmcgYSBwaG9uZSBudW1iZXIgZnJvbSBhIGRpZmZlcmVudCBjb3VudHJ5LCB5b3UnbGwgbmVlZCB0byBlbnRlciB0aGUgY29ycmVjdCBjb3VudHJ5IGNvZGUgbWFudWFsbHkuXCIsXG4gIFwicG9wdXAucGhvbmUtaGVhZGVyXCI6IFwiUGhvbmUgbnVtYmVyIGFuZCBjb3VudHJ5IGNvZGVcIixcbiAgXCJzb2NpYWwuY29udGludWVcIjogXCJDb250aW51ZSB3aXRoXCIsXG4gIFwic29jaWFsLmNvbnRpbnVlQ3VzdG9tXCI6IFwiQ29udGludWUgd2l0aCB7e2FkYXB0ZXJ9fVwiLFxuICBcInNvY2lhbC5lbWFpbFwiOiBcIkVtYWlsXCIsXG4gIFwic29jaWFsLmVtYWlsLWNvbnRpbnVlXCI6IFwiQ29udGludWUgd2l0aCBFbWFpbFwiLFxuICBcInNvY2lhbC5lbWFpbC1uZXdcIjogXCJuYW1lQGV4YW1wbGUuY29tXCIsXG4gIFwic29jaWFsLnBhc3N3b3JkbGVzcy1jdGFcIjogXCJDb250aW51ZVwiLFxuICBcInNvY2lhbC5wYXNzd29yZGxlc3MtdGl0bGVcIjogXCJFbWFpbCBvciBQaG9uZVwiLFxuICBcInNvY2lhbC5waG9uZVwiOiBcIlBob25lXCIsXG4gIFwic29jaWFsLnBvbGljeVwiOiBcIldlIGRvIG5vdCBzdG9yZSBhbnkgZGF0YSByZWxhdGVkIHRvIHlvdXIgc29jaWFsIGxvZ2lucy5cIixcbiAgXCJzb2NpYWwuc21zXCI6IFwiTW9iaWxlXCIsXG4gIFwic29jaWFsLnNtcy1jb250aW51ZVwiOiBcIkNvbnRpbnVlIHdpdGggTW9iaWxlXCIsXG4gIFwic29jaWFsLnNtcy1pbnZhbGlkLW51bWJlclwiOiBcIkludmFsaWQgcGhvbmUgbnVtYmVyXCIsXG4gIFwic29jaWFsLnNtcy1wbGFjZWhvbGRlci10ZXh0XCI6IFwiRS5nLjpcIixcbiAgXCJzb2NpYWwudmlldy1sZXNzXCI6IFwiVmlldyBmZXdlciBvcHRpb25zXCIsXG4gIFwic29jaWFsLnZpZXctbGVzcy1uZXdcIjogXCJWaWV3IGZld2VyXCIsXG4gIFwic29jaWFsLnZpZXctbW9yZVwiOiBcIlZpZXcgbW9yZSBvcHRpb25zXCIsXG4gIFwic29jaWFsLnZpZXctbW9yZS1uZXdcIjogXCJWaWV3IG1vcmVcIixcbiAgXCJwb3N0LWxvYWRpbmcuY29ubmVjdGVkXCI6IFwiWW91IGFyZSBjb25uZWN0ZWQgd2l0aCB5b3VyIGFjY291bnRcIixcbiAgXCJwb3N0LWxvYWRpbmcuc29tZXRoaW5nLXdyb25nXCI6IFwiU29tZXRoaW5nIHdlbnQgd3JvbmchXCJcbn07XG52YXIgZW4gPSB7XG4gIG1vZGFsOiBtb2RhbFxufTtcblxuY29uc3QgaTE4bkluc3RhbmNlID0gaTE4bi5jcmVhdGVJbnN0YW5jZSgpO1xuaTE4bkluc3RhbmNlLnVzZShpbml0UmVhY3RJMThuZXh0KS5pbml0KHtcbiAgcmVzb3VyY2VzOiB7XG4gICAgZW46IHtcbiAgICAgIHRyYW5zbGF0aW9uOiBlblxuICAgIH1cbiAgfSxcbiAgbG5nOiBcImVuXCIsXG4gIGZhbGxiYWNrTG5nOiBcImVuXCIsXG4gIGludGVycG9sYXRpb246IHtcbiAgICBlc2NhcGVWYWx1ZTogZmFsc2VcbiAgfSxcbiAgZGVidWc6IGZhbHNlLFxuICByZWFjdDoge1xuICAgIHVzZVN1c3BlbnNlOiB0cnVlXG4gIH1cbn0pO1xuXG52YXIgQ2lyY2xlQXJyb3dMZWZ0ID0gXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnJTIwd2lkdGglM0QlMjIyNCUyMiUyMGhlaWdodCUzRCUyMjI0JTIyJTIwdmlld0JveCUzRCUyMjAlMjAwJTIwMjQlMjAyNCUyMiUyMGZpbGwlM0QlMjJub25lJTIyJTIweG1sbnMlM0QlMjJodHRwJTNBJTJGJTJGd3d3LnczLm9yZyUyRjIwMDAlMkZzdmclMjIlM0UlM0NnJTIwaWQlM0QlMjIyNCUyMCUyRiUyMGFycm93cyUyMCUyRiUyMGNpcmNsZS1hcnJvdy1sZWZ0JTIyJTNFJTNDcGF0aCUyMGlkJTNEJTIyaWNvbiUyMiUyMGZpbGwtcnVsZSUzRCUyMmV2ZW5vZGQlMjIlMjBjbGlwLXJ1bGUlM0QlMjJldmVub2RkJTIyJTIwZCUzRCUyMk0xMiUyMDIzQzUuOTI0ODclMjAyMyUyMDElMjAxOC4wNzUxJTIwMSUyMDEyQzElMjA1LjkyNDg3JTIwNS45MjQ4NyUyMDElMjAxMiUyMDFDMTguMDc1MSUyMDElMjAyMyUyMDUuOTI0ODclMjAyMyUyMDEyQzIzJTIwMTguMDc1MSUyMDE4LjA3NTElMjAyMyUyMDEyJTIwMjNaTTEyJTIwMjFDMTYuOTcwNiUyMDIxJTIwMjElMjAxNi45NzA2JTIwMjElMjAxMkMyMSUyMDcuMDI5NDQlMjAxNi45NzA2JTIwMyUyMDEyJTIwM0M3LjAyOTQ0JTIwMyUyMDMlMjA3LjAyOTQ0JTIwMyUyMDEyQzMlMjAxNi45NzA2JTIwNy4wMjk0NCUyMDIxJTIwMTIlMjAyMVpNMTclMjAxMUgxMC40MTQyTDEyLjcwNzElMjA4LjcwNzExTDExLjI5MjklMjA3LjI5Mjg5TDYuNTg1NzklMjAxMkwxMS4yOTI5JTIwMTYuNzA3MUwxMi43MDcxJTIwMTUuMjkyOUwxMC40MTQyJTIwMTNIMTdWMTFaJTIyJTIwZmlsbCUzRCUyMiUyM0QzRDNENCUyMiUyRiUzRSUzQyUyRmclM0UlM0MlMkZzdmclM0VcIjtcblxudmFyIENsb3NlID0gXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnJTIwd2lkdGglM0QlMjIyNCUyMiUyMGhlaWdodCUzRCUyMjI0JTIyJTIwdmlld0JveCUzRCUyMjAlMjAwJTIwMjQlMjAyNCUyMiUyMGZpbGwlM0QlMjJub25lJTIyJTIweG1sbnMlM0QlMjJodHRwJTNBJTJGJTJGd3d3LnczLm9yZyUyRjIwMDAlMkZzdmclMjIlM0UlM0NwYXRoJTIwZmlsbC1ydWxlJTNEJTIyZXZlbm9kZCUyMiUyMGNsaXAtcnVsZSUzRCUyMmV2ZW5vZGQlMjIlMjBkJTNEJTIyTTEzLjQxNDIlMjAxMkwxOS43NzgyJTIwMTguMzY0TDE4LjM2NCUyMDE5Ljc3ODJMMTIlMjAxMy40MTQzTDUuNjM2MDQlMjAxOS43NzgyTDQuMjIxODMlMjAxOC4zNjRMMTAuNTg1OCUyMDEyTDQuMjIxODMlMjA1LjYzNjA4TDUuNjM2MDQlMjA0LjIyMTg3TDEyJTIwMTAuNTg1OEwxOC4zNjQlMjA0LjIyMTg3TDE5Ljc3ODIlMjA1LjYzNjA4TDEzLjQxNDIlMjAxMlolMjIlMjBmaWxsJTNEJTIyJTIzREZERkRGJTIyJTJGJTNFJTNDJTJGc3ZnJTNFXCI7XG5cbnZhciBDb25uZWN0ZWQgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmclMjB3aWR0aCUzRCUyMjE0MSUyMiUyMGhlaWdodCUzRCUyMjEwNyUyMiUyMHZpZXdCb3glM0QlMjIwJTIwMCUyMDE0MSUyMDEwNyUyMiUyMGZpbGwlM0QlMjJub25lJTIyJTIweG1sbnMlM0QlMjJodHRwJTNBJTJGJTJGd3d3LnczLm9yZyUyRjIwMDAlMkZzdmclMjIlM0UlM0NwYXRoJTIwZCUzRCUyMk0yMi41Mjc2JTIwODMuMDUzNUMyMi41NzQ1JTIwODMuMDM1NCUyMDIyLjYxMyUyMDgyLjk5NTglMjAyMi42MjkyJTIwODIuOTQwMkMyMi42ODIxJTIwODIuNzU2OSUyMDIyLjYxNTklMjA4Mi4xNDEzJTIwMjIuNDI1MiUyMDgxLjA1MTFDMjMuMjA0JTIwODAuNTg2NiUyMDIzLjYyNDUlMjA4MC4yOTU0JTIwMjMuNzE0NyUyMDgwLjE2NjhDMjMuNzQ4MyUyMDgwLjExNDMlMjAyMy43NTE3JTIwODAuMDUzOCUyMDIzLjcyMjQlMjA4MC4wMDU5QzIzLjY3MDUlMjA3OS45Mjc0JTIwMjMuNjA3MiUyMDc5LjgzMzYlMjAyMi4wOTkxJTIwODAuMTEyQzIwLjk0MjIlMjA3OC4zMzU3JTIwMjAuNzcxMyUyMDc4LjM2NzMlMjAyMC42NjkzJTIwNzguMzgyMkMyMC42NiUyMDc4LjM4NTglMjAyMC42NDg5JTIwNzguMzg1MiUyMDIwLjYzNDklMjA3OC4zOTA2QzIwLjU4ODElMjA3OC40MDg3JTIwMjAuNTQ5NSUyMDc4LjQ0ODMlMjAyMC41MzM0JTIwNzguNTAzOUMyMC40NzQ0JTIwNzguNjk5NCUyMDIwLjU1NjclMjA3OS40MTIzJTIwMjAuNzc4MyUyMDgwLjYyMzdDMTkuNDg1NiUyMDgxLjQzMDQlMjAxOS41MDIlMjA4MS41NDI0JTIwMTkuNTE2NSUyMDgxLjYzNTRDMTkuNTIyNCUyMDgxLjY5MjMlMjAxOS41NjU4JTIwODEuNzM0NyUyMDE5LjYzMDYlMjA4MS43NDkxQzE5Ljc4MzklMjA4MS43ODM0JTIwMjAuMjk1NSUyMDgxLjcxMzQlMjAyMS4xOTM0JTIwODEuNTI4NEMyMi4yMzQ0JTIwODMuMTAzJTIwMjIuMzg2NSUyMDgzLjA3ODYlMjAyMi40OTE1JTIwODMuMDU3NkMyMi41MDcyJTIwODMuMDU2NSUyMDIyLjUxODMlMjA4My4wNTcxJTIwMjIuNTI3NiUyMDgzLjA1MzVaJTIyJTIwZmlsbCUzRCUyMiUyMzlENDQ5MiUyMiUyRiUzRSUzQ3BhdGglMjBkJTNEJTIyTTM4LjE2OTklMjAyNC4zMTI1TDM2LjU5MDYlMjAyMy42OTY3TDM0LjcxNjYlMjAyNy40ODE1TDM2LjI5NTklMjAyOC4wOTc0TDM4LjE2OTklMjAyNC4zMTI1WiUyMiUyMGZpbGwlM0QlMjIlMjM5QkVDN0QlMjIlMkYlM0UlM0NwYXRoJTIwZCUzRCUyMk00OC41NjQ1JTIwMzQuNzk4OEw0OS45MjMyJTIwMzUuMjUwNUw1MS4zMjQ1JTIwMzIuMDEyNEw0OS45NjU4JTIwMzEuNTYwN0w0OC41NjQ1JTIwMzQuNzk4OFolMjIlMjBmaWxsJTNEJTIyJTIzRkZCRjE5JTIyJTJGJTNFJTNDcGF0aCUyMGQlM0QlMjJNMzQuNDQ0OSUyMDc1LjUyNjVMMzMuNDkwMiUyMDc2LjYyNjRMMzYuMjcyOSUyMDc4LjY5MjJMMzcuMjI3NSUyMDc3LjU5MjRMMzQuNDQ0OSUyMDc1LjUyNjVaJTIyJTIwZmlsbCUzRCUyMiUyM0ZGQkYxOSUyMiUyRiUzRSUzQ3BhdGglMjBkJTNEJTIyTTM1Ljk2OSUyMDU0LjU2MkwzNS41NjY0JTIwNTYuMTc2OEwzOS44MDc4JTIwNTYuODc5NUw0MC4yMTA0JTIwNTUuMjY0N0wzNS45NjklMjA1NC41NjJaJTIyJTIwZmlsbCUzRCUyMiUyMzlENDQ5MiUyMiUyRiUzRSUzQ3BhdGglMjBkJTNEJTIyTTM4LjE5NDklMjA4OS43MzE5TDM3LjEzNSUyMDkxLjA5Mkw0MC42MDI3JTIwOTMuMzcxTDQxLjY2MjYlMjA5Mi4wMTA5TDM4LjE5NDklMjA4OS43MzE5WiUyMiUyMGZpbGwlM0QlMjIlMjM5RDQ0OTIlMjIlMkYlM0UlM0NwYXRoJTIwZCUzRCUyMk0zNS42NjQlMjA0My4yOTMzTDM2LjI1OTklMjA0MS43MjE3TDMyLjE2MjElMjA0MC41NjA3TDMxLjU2NjIlMjA0Mi4xMzIzTDM1LjY2NCUyMDQzLjI5MzNaJTIyJTIwZmlsbCUzRCUyMiUyMzlCRUM3RCUyMiUyRiUzRSUzQ3BhdGglMjBkJTNEJTIyTTY1Ljk2NzElMjA5LjE5Mjc2QzY1Ljk5OTglMjA5LjE4MDA2JTIwNjYuMDIzJTIwOS4xNTYzMSUyMDY2LjAzMTclMjA5LjEyMzMyQzY2LjA2NzElMjA5LjAwNjAzJTIwNjYuMTQzMiUyMDguNjY3NTMlMjA2Ni4wMTcxJTIwNy45NjY2NUM2Ni41MTkyJTIwNy42NjM2MSUyMDY2LjY3MzMlMjA3LjQxNDcxJTIwNjYuNzMzJTIwNy4zMzI0QzY2Ljc1NzUlMjA3LjI5ODI1JTIwNjYuNzU4MiUyMDcuMjU4NSUyMDY2LjczNTYlMjA3LjIyNzgxQzY2LjY5OTklMjA3LjE3NzUlMjA2Ni42ODI3JTIwNi45ODczMyUyMDY1LjcwNiUyMDcuMTYzNTJDNjQuOTYwMiUyMDYuMDE3MSUyMDY0LjgyNyUyMDYuMTY2ODYlMjA2NC43NjEyJTIwNi4xNzc1OEM2NC43NTY1JTIwNi4xNzk0JTIwNjQuNzQ3MSUyMDYuMTgzMDMlMjA2NC43NDI0JTIwNi4xODQ4NEM2NC43MDk3JTIwNi4xOTc1NCUyMDY0LjY4NjUlMjA2LjIyMTMlMjA2NC42Nzc4JTIwNi4yNTQyOUM2NC42NDElMjA2LjM4MTk2JTIwNjQuNTg4NyUyMDYuNzU3ODUlMjA2NC43MzA3JTIwNy41NDEzOEM2My44OTc5JTIwOC4wNjEzMyUyMDY0LjAwOTklMjA4LjIxNDc4JTIwNjQuMDIyMSUyMDguMjc0MTdDNjQuMDI2JTIwOC4zMTIxMSUyMDY0LjA1MzQlMjA4LjM0MDk3JTIwNjQuMDk0NSUyMDguMzQ5NzJDNjQuMTk0JTIwOC4zNzAzMyUyMDY0LjQzNDUlMjA4LjQwMzUlMjA2NS4wMTklMjA4LjI4NTU0QzY1LjY5MjklMjA5LjMwMTk4JTIwNjUuODc2MSUyMDkuMjA4MjclMjA2NS45NDY3JTIwOS4xOTU3M0M2NS45NTEzJTIwOS4xOTM5MiUyMDY1Ljk2MjQlMjA5LjE5NDU4JTIwNjUuOTY3MSUyMDkuMTkyNzZaJTIyJTIwZmlsbCUzRCUyMiUyMzlCRUM3RCUyMiUyRiUzRSUzQ3BhdGglMjBkJTNEJTIyTTg4LjEyNzIlMjAyMy4xMDI5Qzg4LjE2JTIwMjMuMDkwMiUyMDg4LjE4MzElMjAyMy4wNjY1JTIwODguMTkxOSUyMDIzLjAzMzVDODguMjI3MiUyMDIyLjkxNjIlMjA4OC4zMDM0JTIwMjIuNTc3NyUyMDg4LjE3NzMlMjAyMS44NzY4Qzg4LjY3OTQlMjAyMS41NzM4JTIwODguODMzNSUyMDIxLjMyNDklMjA4OC44OTMyJTIwMjEuMjQyNkM4OC45MTc2JTIwMjEuMjA4NCUyMDg4LjkxODQlMjAyMS4xNjg3JTIwODguODk1NyUyMDIxLjEzOEM4OC44NjAxJTIwMjEuMDg3NyUyMDg4Ljg0MjklMjAyMC44OTc1JTIwODcuODY2MSUyMDIxLjA3MzdDODcuMTIwMyUyMDE5LjkyNzMlMjA4Ni45ODcyJTIwMjAuMDc3JTIwODYuOTIxMyUyMDIwLjA4NzdDODYuOTE2NiUyMDIwLjA4OTYlMjA4Ni45MDczJTIwMjAuMDkzMiUyMDg2LjkwMjYlMjAyMC4wOTVDODYuODY5OCUyMDIwLjEwNzclMjA4Ni44NDY3JTIwMjAuMTMxNSUyMDg2LjgzNzklMjAyMC4xNjQ0Qzg2LjgwMTIlMjAyMC4yOTIxJTIwODYuNzQ4OSUyMDIwLjY2OCUyMDg2Ljg5MDglMjAyMS40NTE1Qzg2LjA1ODElMjAyMS45NzE1JTIwODYuMTclMjAyMi4xMjQ5JTIwODYuMTgyMyUyMDIyLjE4NDNDODYuMTg2MiUyMDIyLjIyMjMlMjA4Ni4yMTM1JTIwMjIuMjUxMSUyMDg2LjI1NDYlMjAyMi4yNTk5Qzg2LjM1NDIlMjAyMi4yODA1JTIwODYuNTk0NiUyMDIyLjMxMzclMjA4Ny4xNzkyJTIwMjIuMTk1N0M4Ny44NTMxJTIwMjMuMjEyMSUyMDg4LjAzNjMlMjAyMy4xMTg0JTIwODguMTA2OCUyMDIzLjEwNTlDODguMTExNSUyMDIzLjEwNDElMjA4OC4xMjI1JTIwMjMuMTA0NyUyMDg4LjEyNzIlMjAyMy4xMDI5WiUyMiUyMGZpbGwlM0QlMjIlMjNGRkJGMTklMjIlMkYlM0UlM0NwYXRoJTIwZCUzRCUyMk0xMDYuMTI3JTIwNzYuMTAyOUMxMDYuMTYlMjA3Ni4wOTAyJTIwMTA2LjE4MyUyMDc2LjA2NjUlMjAxMDYuMTkyJTIwNzYuMDMzNUMxMDYuMjI3JTIwNzUuOTE2MiUyMDEwNi4zMDMlMjA3NS41Nzc3JTIwMTA2LjE3NyUyMDc0Ljg3NjhDMTA2LjY3OSUyMDc0LjU3MzglMjAxMDYuODMzJTIwNzQuMzI0OSUyMDEwNi44OTMlMjA3NC4yNDI2QzEwNi45MTglMjA3NC4yMDg0JTIwMTA2LjkxOCUyMDc0LjE2ODclMjAxMDYuODk2JTIwNzQuMTM4QzEwNi44NiUyMDc0LjA4NzclMjAxMDYuODQzJTIwNzMuODk3NSUyMDEwNS44NjYlMjA3NC4wNzM3QzEwNS4xMiUyMDcyLjkyNzMlMjAxMDQuOTg3JTIwNzMuMDc3JTIwMTA0LjkyMSUyMDczLjA4NzdDMTA0LjkxNyUyMDczLjA4OTYlMjAxMDQuOTA3JTIwNzMuMDkzMiUyMDEwNC45MDMlMjA3My4wOTVDMTA0Ljg3JTIwNzMuMTA3NyUyMDEwNC44NDclMjA3My4xMzE1JTIwMTA0LjgzOCUyMDczLjE2NDRDMTA0LjgwMSUyMDczLjI5MjElMjAxMDQuNzQ5JTIwNzMuNjY4JTIwMTA0Ljg5MSUyMDc0LjQ1MTVDMTA0LjA1OCUyMDc0Ljk3MTUlMjAxMDQuMTclMjA3NS4xMjQ5JTIwMTA0LjE4MiUyMDc1LjE4NDNDMTA0LjE4NiUyMDc1LjIyMjMlMjAxMDQuMjE0JTIwNzUuMjUxMSUyMDEwNC4yNTUlMjA3NS4yNTk5QzEwNC4zNTQlMjA3NS4yODA1JTIwMTA0LjU5NSUyMDc1LjMxMzclMjAxMDUuMTc5JTIwNzUuMTk1N0MxMDUuODUzJTIwNzYuMjEyMSUyMDEwNi4wMzYlMjA3Ni4xMTg0JTIwMTA2LjEwNyUyMDc2LjEwNTlDMTA2LjExMSUyMDc2LjEwNDElMjAxMDYuMTIzJTIwNzYuMTA0NyUyMDEwNi4xMjclMjA3Ni4xMDI5WiUyMiUyMGZpbGwlM0QlMjIlMjNGRkJGMTklMjIlMkYlM0UlM0NwYXRoJTIwZCUzRCUyMk0yOC4xMjcyJTIwNjUuMTAyOUMyOC4xNiUyMDY1LjA5MDIlMjAyOC4xODMxJTIwNjUuMDY2NSUyMDI4LjE5MTklMjA2NS4wMzM1QzI4LjIyNzIlMjA2NC45MTYyJTIwMjguMzAzNCUyMDY0LjU3NzclMjAyOC4xNzczJTIwNjMuODc2OEMyOC42Nzk0JTIwNjMuNTczOCUyMDI4LjgzMzUlMjA2My4zMjQ5JTIwMjguODkzMiUyMDYzLjI0MjZDMjguOTE3NiUyMDYzLjIwODQlMjAyOC45MTg0JTIwNjMuMTY4NyUyMDI4Ljg5NTclMjA2My4xMzhDMjguODYwMSUyMDYzLjA4NzclMjAyOC44NDI5JTIwNjIuODk3NSUyMDI3Ljg2NjElMjA2My4wNzM3QzI3LjEyMDMlMjA2MS45MjczJTIwMjYuOTg3MiUyMDYyLjA3NyUyMDI2LjkyMTMlMjA2Mi4wODc3QzI2LjkxNjYlMjA2Mi4wODk2JTIwMjYuOTA3MyUyMDYyLjA5MzIlMjAyNi45MDI2JTIwNjIuMDk1QzI2Ljg2OTglMjA2Mi4xMDc3JTIwMjYuODQ2NyUyMDYyLjEzMTUlMjAyNi44Mzc5JTIwNjIuMTY0NEMyNi44MDEyJTIwNjIuMjkyMSUyMDI2Ljc0ODklMjA2Mi42NjglMjAyNi44OTA4JTIwNjMuNDUxNUMyNi4wNTgxJTIwNjMuOTcxNSUyMDI2LjE3JTIwNjQuMTI0OSUyMDI2LjE4MjMlMjA2NC4xODQzQzI2LjE4NjIlMjA2NC4yMjIzJTIwMjYuMjEzNSUyMDY0LjI1MTElMjAyNi4yNTQ2JTIwNjQuMjU5OUMyNi4zNTQyJTIwNjQuMjgwNSUyMDI2LjU5NDYlMjA2NC4zMTM3JTIwMjcuMTc5MiUyMDY0LjE5NTdDMjcuODUzMSUyMDY1LjIxMjElMjAyOC4wMzYzJTIwNjUuMTE4NCUyMDI4LjEwNjglMjA2NS4xMDU5QzI4LjExMTUlMjA2NS4xMDQxJTIwMjguMTIyNSUyMDY1LjEwNDclMjAyOC4xMjcyJTIwNjUuMTAyOVolMjIlMjBmaWxsJTNEJTIyJTIzRkZCRjE5JTIyJTJGJTNFJTNDcGF0aCUyMGQlM0QlMjJNMjQuMTI3MiUyMDM1LjEwNDlDMjQuMTYlMjAzNS4wOTIyJTIwMjQuMTgzMSUyMDM1LjA2ODQlMjAyNC4xOTE5JTIwMzUuMDM1NEMyNC4yMjcyJTIwMzQuOTE4MSUyMDI0LjMwMzQlMjAzNC41Nzk2JTIwMjQuMTc3MyUyMDMzLjg3ODhDMjQuNjc5NCUyMDMzLjU3NTclMjAyNC44MzM1JTIwMzMuMzI2OCUyMDI0Ljg5MzIlMjAzMy4yNDQ1QzI0LjkxNzYlMjAzMy4yMTA0JTIwMjQuOTE4NCUyMDMzLjE3MDYlMjAyNC44OTU3JTIwMzMuMTM5OUMyNC44NjAxJTIwMzMuMDg5NiUyMDI0Ljg0MjklMjAzMi44OTk0JTIwMjMuODY2MSUyMDMzLjA3NTZDMjMuMTIwMyUyMDMxLjkyOTIlMjAyMi45ODcyJTIwMzIuMDc5JTIwMjIuOTIxMyUyMDMyLjA4OTdDMjIuOTE2NiUyMDMyLjA5MTUlMjAyMi45MDczJTIwMzIuMDk1MSUyMDIyLjkwMjYlMjAzMi4wOTdDMjIuODY5OCUyMDMyLjEwOTclMjAyMi44NDY3JTIwMzIuMTMzNCUyMDIyLjgzNzklMjAzMi4xNjY0QzIyLjgwMTIlMjAzMi4yOTQxJTIwMjIuNzQ4OSUyMDMyLjY3JTIwMjIuODkwOCUyMDMzLjQ1MzVDMjIuMDU4MSUyMDMzLjk3MzQlMjAyMi4xNyUyMDM0LjEyNjklMjAyMi4xODIzJTIwMzQuMTg2M0MyMi4xODYyJTIwMzQuMjI0MiUyMDIyLjIxMzUlMjAzNC4yNTMxJTIwMjIuMjU0NiUyMDM0LjI2MThDMjIuMzU0MiUyMDM0LjI4MjQlMjAyMi41OTQ2JTIwMzQuMzE1NiUyMDIzLjE3OTIlMjAzNC4xOTc3QzIzLjg1MzElMjAzNS4yMTQxJTIwMjQuMDM2MyUyMDM1LjEyMDQlMjAyNC4xMDY4JTIwMzUuMTA3OEMyNC4xMTE1JTIwMzUuMTA2JTIwMjQuMTIyNSUyMDM1LjEwNjclMjAyNC4xMjcyJTIwMzUuMTA0OVolMjIlMjBmaWxsJTNEJTIyJTIzOUJFQzdEJTIyJTJGJTNFJTNDcGF0aCUyMGQlM0QlMjJNMTUuMDkzNyUyMDU0LjU2MThMMTQuNTY4MiUyMDU1Ljc3NjFMMTcuNzE3MSUyMDU2LjgyMjlMMTguMjQyNiUyMDU1LjYwODZMMTUuMDkzNyUyMDU0LjU2MThaJTIyJTIwZmlsbCUzRCUyMiUyM0ZGNjIzQSUyMiUyRiUzRSUzQ3BhdGglMjBkJTNEJTIyTTk2LjA3OCUyMDMyLjYwNTVDOTYuMDY0NyUyMDMyLjY1NDglMjA5Ni4wNzM5JTIwMzIuNzEwMiUyMDk2LjEwOTclMjAzMi43NTY5Qzk2LjIyNzklMjAzMi45MTA3JTIwOTYuNzcxOCUyMDMzLjIyNzQlMjA5Ny43Nzk1JTIwMzMuNzI3OUM5Ny42OTA3JTIwMzQuNjQ1NiUyMDk3LjY3NTglMjAzNS4xNjUzJTIwOTcuNzI2OCUyMDM1LjMxNjdDOTcuNzQ5NiUyMDM1LjM3NTclMjA5Ny43OTcxJTIwMzUuNDE1MSUyMDk3Ljg1MzklMjAzNS40MTk5Qzk3Ljk0OTUlMjAzNS40MjQ2JTIwOTguMDY0NSUyMDM1LjQyOTMlMjA5OC43NDUlMjAzNC4wMjY2QzEwMC44OTclMjAzNC4xNDk0JTIwMTAwLjk3NCUyMDMzLjk5MDQlMjAxMDEuMDIzJTIwMzMuODk3OUMxMDEuMDI2JTIwMzMuODg4MSUyMDEwMS4wMzMlMjAzMy44Nzk0JTIwMTAxLjAzNyUyMDMzLjg2NDZDMTAxLjA1JTIwMzMuODE1MyUyMDEwMS4wNDElMjAzMy43NTk5JTIwMTAxLjAwNSUyMDMzLjcxMzJDMTAwLjg4MSUyMDMzLjU0NzIlMjAxMDAuMjQ3JTIwMzMuMTg1MSUyMDk5LjEyMTYlMjAzMi42MzY3Qzk5LjIzOTglMjAzMS4wOTIyJTIwOTkuMTM4MiUyMDMxLjAzODIlMjA5OS4wNTMzJTIwMzAuOTk0Qzk5LjAwMzElMjAzMC45NjQ1JTIwOTguOTQyMyUyMDMwLjk3NDUlMjA5OC44OTE1JTIwMzEuMDE4OUM5OC43NzElMjAzMS4xMjM5JTIwOTguNTIwMSUyMDMxLjU4NDklMjA5OC4xMzA4JTIwMzIuNDMxN0M5Ni4yMTQyJTIwMzIuMzM1NiUyMDk2LjE0MjUlMjAzMi40NzQ5JTIwOTYuMDk2NCUyMDMyLjU3MzVDOTYuMDg3OSUyMDMyLjU4NyUyMDk2LjA4MDclMjAzMi41OTU3JTIwOTYuMDc4JTIwMzIuNjA1NVolMjIlMjBmaWxsJTNEJTIyJTIzOUQ0NDkyJTIyJTJGJTNFJTNDcGF0aCUyMGQlM0QlMjJNMTI2LjE1NiUyMDQ5LjgxNDVDMTI2LjE0MyUyMDQ5Ljg2MzglMjAxMjYuMTUyJTIwNDkuOTE5MiUyMDEyNi4xODglMjA0OS45NjU5QzEyNi4zMDYlMjA1MC4xMTk2JTIwMTI2Ljg1JTIwNTAuNDM2MyUyMDEyNy44NTglMjA1MC45MzY5QzEyNy43NjklMjA1MS44NTQ2JTIwMTI3Ljc1NCUyMDUyLjM3NDMlMjAxMjcuODA1JTIwNTIuNTI1N0MxMjcuODI4JTIwNTIuNTg0NyUyMDEyNy44NzUlMjA1Mi42MjQlMjAxMjcuOTMyJTIwNTIuNjI4OUMxMjguMDI4JTIwNTIuNjMzNiUyMDEyOC4xNDMlMjA1Mi42MzgzJTIwMTI4LjgyMyUyMDUxLjIzNTZDMTMwLjk3NSUyMDUxLjM1ODQlMjAxMzEuMDUyJTIwNTEuMTk5NCUyMDEzMS4xMDElMjA1MS4xMDY5QzEzMS4xMDQlMjA1MS4wOTclMjAxMzEuMTExJTIwNTEuMDg4NCUyMDEzMS4xMTUlMjA1MS4wNzM2QzEzMS4xMjglMjA1MS4wMjQzJTIwMTMxLjExOSUyMDUwLjk2ODklMjAxMzEuMDgzJTIwNTAuOTIyMkMxMzAuOTU5JTIwNTAuNzU2MiUyMDEzMC4zMjUlMjA1MC4zOTQxJTIwMTI5LjIlMjA0OS44NDU3QzEyOS4zMTglMjA0OC4zMDEyJTIwMTI5LjIxNiUyMDQ4LjI0NzIlMjAxMjkuMTMxJTIwNDguMjAzQzEyOS4wODElMjA0OC4xNzM1JTIwMTI5LjAyJTIwNDguMTgzNSUyMDEyOC45NyUyMDQ4LjIyNzlDMTI4Ljg0OSUyMDQ4LjMzMjglMjAxMjguNTk4JTIwNDguNzkzOSUyMDEyOC4yMDklMjA0OS42NDA3QzEyNi4yOTIlMjA0OS41NDQ1JTIwMTI2LjIyMSUyMDQ5LjY4MzglMjAxMjYuMTc1JTIwNDkuNzgyNEMxMjYuMTY2JTIwNDkuNzk2JTIwMTI2LjE1OSUyMDQ5LjgwNDYlMjAxMjYuMTU2JTIwNDkuODE0NVolMjIlMjBmaWxsJTNEJTIyJTIzQTdFRThEJTIyJTJGJTNFJTNDcGF0aCUyMGQlM0QlMjJNMTIwLjMzOCUyMDU5Ljg4ODdMMTIxLjc5NCUyMDU4Ljk2NjRMMTE5LjgyMyUyMDU1LjE1MTZMMTE4LjM2NyUyMDU2LjA3MzlMMTIwLjMzOCUyMDU5Ljg4ODdaJTIyJTIwZmlsbCUzRCUyMiUyMzlCRUM3RCUyMiUyRiUzRSUzQ3BhdGglMjBkJTNEJTIyTTExNy41MzElMjAzNi41NTg2TDExNi4zNDMlMjAzNy4zOTkxTDExOC4xNSUyMDQwLjQ5NzRMMTE5LjMzOSUyMDM5LjY1NjlMMTE3LjUzMSUyMDM2LjU1ODZaJTIyJTIwZmlsbCUzRCUyMiUyM0ZGQkYxOSUyMiUyRiUzRSUzQ3BhdGglMjBkJTNEJTIyTTgwLjY0MTklMjAyNS45ODMzTDgwLjMxNjMlMjAyNC41MzlMNzYuOTQ4MyUyMDI1LjU3MzJMNzcuMjczOCUyMDI3LjAxNzVMODAuNjQxOSUyMDI1Ljk4MzNaJTIyJTIwZmlsbCUzRCUyMiUyM0ZGQkYxOSUyMiUyRiUzRSUzQ3BhdGglMjBkJTNEJTIyTTEwOS44MjklMjA0OC40MzQ5TDEwOC43NDklMjA0Ny4xMzIzTDEwNS42MTglMjA1MC4xODIzTDEwNi42OTglMjA1MS40ODQ5TDEwOS44MjklMjA0OC40MzQ5WiUyMiUyMGZpbGwlM0QlMjIlMjM5RDQ0OTIlMjIlMkYlM0UlM0NwYXRoJTIwZCUzRCUyMk02Ni43NTQ5JTIwMjAuNDk4OEw2Ni4yNzk3JTIwMTguODExNUw2Mi4zMjQzJTIwMjAuMjc4M0w2Mi43OTk1JTIwMjEuOTY1Nkw2Ni43NTQ5JTIwMjAuNDk4OFolMjIlMjBmaWxsJTNEJTIyJTIzOUQ0NDkyJTIyJTJGJTNFJTNDcGF0aCUyMGQlM0QlMjJNMTA0Ljc0OSUyMDI0LjkyNDhMMTA1LjY3NyUyMDI2LjM1OTVMMTA5LjA5NyUyMDIzLjcwMzNMMTA4LjE2OSUyMDIyLjI2ODVMMTA0Ljc0OSUyMDI0LjkyNDhaJTIyJTIwZmlsbCUzRCUyMiUyMzlCRUM3RCUyMiUyRiUzRSUzQ3BhdGglMjBkJTNEJTIyTTExNS45NzclMjA5MS43NTkyQzExNS45NjglMjA5MS43OTM3JTIwMTE1Ljk3MyUyMDkxLjgyNyUyMDExNS45OTUlMjA5MS44NTRDMTE2LjA3JTIwOTEuOTUzNiUyMDExNi4zMDElMjA5Mi4yMTk5JTIwMTE2Ljk1MSUyMDkyLjUzODlDMTE2Ljg5NyUyMDkzLjEzMjYlMjAxMTcuMDA4JTIwOTMuNDA4OCUyMDExNy4wMzklMjA5My41MDcyQzExNy4wNTIlMjA5My41NDc4JTIwMTE3LjA4NCUyMDkzLjU3MjQlMjAxMTcuMTIzJTIwOTMuNTcyM0MxMTcuMTg2JTIwOTMuNTczNCUyMDExNy4zNTIlMjA5My42NzM5JTIwMTE3Ljc5NiUyMDkyLjc2NzlDMTE5LjE4NCUyMDkyLjg0NzglMjAxMTkuMTQyJTIwOTIuNjQ4NiUyMDExOS4xNzMlMjA5Mi41ODgyQzExOS4xNzQlMjA5Mi41ODMyJTIwMTE5LjE3NyUyMDkyLjU3MzQlMjAxMTkuMTc4JTIwOTIuNTY4NUMxMTkuMTg3JTIwOTIuNTM0JTIwMTE5LjE4MiUyMDkyLjUwMDclMjAxMTkuMTYlMjA5Mi40NzM3QzExOS4wNzglMjA5Mi4zNjY3JTIwMTE4LjgwMSUyMDkyLjA5NzQlMjAxMTguMDc0JTIwOTEuNzQxNkMxMTguMTUlMjA5MC43NDY0JTIwMTE3Ljk1NyUyMDkwLjc0NTclMjAxMTcuOTAxJTIwOTAuNzE5OUMxMTcuODY4JTIwOTAuNzAwMyUyMDExNy44MjclMjA5MC43MDUzJTIwMTE3Ljc5NiUyMDkwLjczMzZDMTE3LjcxOSUyMDkwLjgwMjglMjAxMTcuNTQ3JTIwOTAuOTc5NyUyMDExNy4yOTElMjA5MS41Mjk0QzExNi4wNTMlMjA5MS40Njg5JTIwMTE2LjAxOSUyMDkxLjY3NTQlMjAxMTUuOTg3JTIwOTEuNzQwN0MxMTUuOTg2JTIwOTEuNzQ1NyUyMDExNS45NzglMjA5MS43NTQzJTIwMTE1Ljk3NyUyMDkxLjc1OTJaJTIyJTIwZmlsbCUzRCUyMiUyMzlCRUM3RCUyMiUyRiUzRSUzQ3BhdGglMjBkJTNEJTIyTTEyNy40ODklMjA3OC45MzY3TDEyNi44MTElMjA3Ny43NzQ5TDEyNC4wNTclMjA3OS43MjI5TDEyNC43MzUlMjA4MC44ODQ3TDEyNy40ODklMjA3OC45MzY3WiUyMiUyMGZpbGwlM0QlMjIlMjNGRjYyM0ElMjIlMkYlM0UlM0NjaXJjbGUlMjBjeCUzRCUyMjczLjUlMjIlMjBjeSUzRCUyMjY0LjczMDUlMjIlMjByJTNEJTIyMjcuNSUyMiUyMGZpbGwlM0QlMjIlMjMwRTlGNkUlMjIlMkYlM0UlM0NwYXRoJTIwZmlsbC1ydWxlJTNEJTIyZXZlbm9kZCUyMiUyMGNsaXAtcnVsZSUzRCUyMmV2ZW5vZGQlMjIlMjBkJTNEJTIyTTY4LjU1MzklMjA3MS44ODE1QzY4Ljg0MzklMjA3Mi4xNzkzJTIwNjkuMzIyMyUyMDcyLjE3OTMlMjA2OS42MTIyJTIwNzEuODgxNUw4NC4yMTg1JTIwNTYuODc2NUM4NC45MjE0JTIwNTYuMTU0NSUyMDg2LjA4MTUlMjA1Ni4xNTQ1JTIwODYuNzg0MyUyMDU2Ljg3NjVDODcuNDYxJTIwNTcuNTcxNiUyMDg3LjQ2MSUyMDU4LjY3OTElMjA4Ni43ODQzJTIwNTkuMzc0Mkw3MC4wNDU2JTIwNzYuNTY5OEM2OS41MTgzJTIwNzcuMTExNSUyMDY4LjY0NzklMjA3Ny4xMTE1JTIwNjguMTIwNiUyMDc2LjU2OThMNjAuMjE1NyUyMDY4LjQ0OTFDNTkuNTM5JTIwNjcuNzU0JTIwNTkuNTM5JTIwNjYuNjQ2NSUyMDYwLjIxNTclMjA2NS45NTE1QzYwLjkxODUlMjA2NS4yMjk0JTIwNjIuMDc4NiUyMDY1LjIyOTQlMjA2Mi43ODE1JTIwNjUuOTUxNUw2OC41NTM5JTIwNzEuODgxNVolMjIlMjBmaWxsJTNEJTIyd2hpdGUlMjIlMkYlM0UlM0MlMkZzdmclM0VcIjtcblxudmFyIEV4cGFuZCA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyUyMHdpZHRoJTNEJTIyMjQlMjIlMjBoZWlnaHQlM0QlMjIyNCUyMiUyMHZpZXdCb3glM0QlMjIwJTIwMCUyMDI0JTIwMjQlMjIlMjBmaWxsJTNEJTIybm9uZSUyMiUyMHhtbG5zJTNEJTIyaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJTIyJTNFJTNDcGF0aCUyMGQlM0QlMjJNMTIuMDk5MSUyMDE1LjY3ODVDMTEuNjk0JTIwMTYuMTA3MiUyMDExLjAxMTklMjAxNi4xMDcyJTIwMTAuNjA2OCUyMDE1LjY3ODVMNC45ODgyOCUyMDkuNzMxMzZDNC4zNjk4OCUyMDkuMDc2OCUyMDQuODMzOTMlMjA4JTIwNS43MzQ0MSUyMDhMMTYuOTcxNSUyMDhDMTcuODcyJTIwOCUyMDE4LjMzNiUyMDkuMDc2OCUyMDE3LjcxNzYlMjA5LjczMTM2TDEyLjA5OTElMjAxNS42Nzg1WiUyMiUyMGZpbGwlM0QlMjIlMjNCN0I4QkQlMjIlMkYlM0UlM0MlMkZzdmclM0VcIjtcblxudmFyIEV4cGFuZExpZ2h0ID0gXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnJTIwd2lkdGglM0QlMjIyNCUyMiUyMGhlaWdodCUzRCUyMjI0JTIyJTIwdmlld0JveCUzRCUyMjAlMjAwJTIwMjQlMjAyNCUyMiUyMGZpbGwlM0QlMjJub25lJTIyJTIweG1sbnMlM0QlMjJodHRwJTNBJTJGJTJGd3d3LnczLm9yZyUyRjIwMDAlMkZzdmclMjIlM0UlM0NwYXRoJTIwZCUzRCUyMk0xMi4wOTkxJTIwMTUuNjc4NUMxMS42OTQlMjAxNi4xMDcyJTIwMTEuMDExOSUyMDE2LjEwNzIlMjAxMC42MDY4JTIwMTUuNjc4NUw0Ljk4ODI4JTIwOS43MzEzNkM0LjM2OTg4JTIwOS4wNzY4JTIwNC44MzM5MyUyMDglMjA1LjczNDQxJTIwOEwxNi45NzE1JTIwOEMxNy44NzIlMjA4JTIwMTguMzM2JTIwOS4wNzY4JTIwMTcuNzE3NiUyMDkuNzMxMzZMMTIuMDk5MSUyMDE1LjY3ODVaJTIyJTIwZmlsbCUzRCUyMiUyM0ZGRkZGRiUyMiUyRiUzRSUzQyUyRnN2ZyUzRVwiO1xuXG52YXIgSW5mb0NpcmNsZSA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyUyMHdpZHRoJTNEJTIyMjQlMjIlMjBoZWlnaHQlM0QlMjIyNCUyMiUyMHZpZXdCb3glM0QlMjIwJTIwMCUyMDI0JTIwMjQlMjIlMjBmaWxsJTNEJTIybm9uZSUyMiUyMHhtbG5zJTNEJTIyaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJTIyJTNFJTIwJTIwJTIwJTIwJTNDcGF0aCUyMGQlM0QlMjJNMTMlMjAxNkgxMlYxMkgxMU0xMiUyMDhIMTIuMDFNMjElMjAxMkMyMSUyMDEzLjE4MTklMjAyMC43NjcyJTIwMTQuMzUyMiUyMDIwLjMxNDklMjAxNS40NDQyQzE5Ljg2MjYlMjAxNi41MzYxJTIwMTkuMTk5NyUyMDE3LjUyODIlMjAxOC4zNjQlMjAxOC4zNjRDMTcuNTI4MiUyMDE5LjE5OTclMjAxNi41MzYxJTIwMTkuODYyNiUyMDE1LjQ0NDIlMjAyMC4zMTQ5QzE0LjM1MjIlMjAyMC43NjcyJTIwMTMuMTgxOSUyMDIxJTIwMTIlMjAyMUMxMC44MTgxJTIwMjElMjA5LjY0Nzc4JTIwMjAuNzY3MiUyMDguNTU1ODUlMjAyMC4zMTQ5QzcuNDYzOTIlMjAxOS44NjI2JTIwNi40NzE3NyUyMDE5LjE5OTclMjA1LjYzNjA0JTIwMTguMzY0QzQuODAwMzElMjAxNy41MjgyJTIwNC4xMzczOCUyMDE2LjUzNjElMjAzLjY4NTA4JTIwMTUuNDQ0MkMzLjIzMjc5JTIwMTQuMzUyMiUyMDMlMjAxMy4xODE5JTIwMyUyMDEyQzMlMjA5LjYxMzA1JTIwMy45NDgyMSUyMDcuMzIzODclMjA1LjYzNjA0JTIwNS42MzYwNEM3LjMyMzg3JTIwMy45NDgyMSUyMDkuNjEzMDUlMjAzJTIwMTIlMjAzQzE0LjM4NjklMjAzJTIwMTYuNjc2MSUyMDMuOTQ4MjElMjAxOC4zNjQlMjA1LjYzNjA0QzIwLjA1MTglMjA3LjMyMzg3JTIwMjElMjA5LjYxMzA1JTIwMjElMjAxMlolMjIlMjBzdHJva2UlM0QlMjIlMjM2QjcyODAlMjIlMjBzdHJva2Utd2lkdGglM0QlMjIyJTIyJTIwc3Ryb2tlLWxpbmVjYXAlM0QlMjJyb3VuZCUyMiUyMHN0cm9rZS1saW5lam9pbiUzRCUyMnJvdW5kJTIyJTIwJTJGJTNFJTNDJTJGc3ZnJTNFXCI7XG5cbnZhciBJbmZvQ2lyY2xlTGlnaHQgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmclMjB3aWR0aCUzRCUyMjI0JTIyJTIwaGVpZ2h0JTNEJTIyMjQlMjIlMjB2aWV3Qm94JTNEJTIyMCUyMDAlMjAyNCUyMDI0JTIyJTIwZmlsbCUzRCUyMm5vbmUlMjIlMjB4bWxucyUzRCUyMmh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRnN2ZyUyMiUzRSUyMCUyMCUyMCUyMCUzQ3BhdGglMjBkJTNEJTIyTTEzJTIwMTZIMTJWMTJIMTFNMTIlMjA4SDEyLjAxTTIxJTIwMTJDMjElMjAxMy4xODE5JTIwMjAuNzY3MiUyMDE0LjM1MjIlMjAyMC4zMTQ5JTIwMTUuNDQ0MkMxOS44NjI2JTIwMTYuNTM2MSUyMDE5LjE5OTclMjAxNy41MjgyJTIwMTguMzY0JTIwMTguMzY0QzE3LjUyODIlMjAxOS4xOTk3JTIwMTYuNTM2MSUyMDE5Ljg2MjYlMjAxNS40NDQyJTIwMjAuMzE0OUMxNC4zNTIyJTIwMjAuNzY3MiUyMDEzLjE4MTklMjAyMSUyMDEyJTIwMjFDMTAuODE4MSUyMDIxJTIwOS42NDc3OCUyMDIwLjc2NzIlMjA4LjU1NTg1JTIwMjAuMzE0OUM3LjQ2MzkyJTIwMTkuODYyNiUyMDYuNDcxNzclMjAxOS4xOTk3JTIwNS42MzYwNCUyMDE4LjM2NEM0LjgwMDMxJTIwMTcuNTI4MiUyMDQuMTM3MzglMjAxNi41MzYxJTIwMy42ODUwOCUyMDE1LjQ0NDJDMy4yMzI3OSUyMDE0LjM1MjIlMjAzJTIwMTMuMTgxOSUyMDMlMjAxMkMzJTIwOS42MTMwNSUyMDMuOTQ4MjElMjA3LjMyMzg3JTIwNS42MzYwNCUyMDUuNjM2MDRDNy4zMjM4NyUyMDMuOTQ4MjElMjA5LjYxMzA1JTIwMyUyMDEyJTIwM0MxNC4zODY5JTIwMyUyMDE2LjY3NjElMjAzLjk0ODIxJTIwMTguMzY0JTIwNS42MzYwNEMyMC4wNTE4JTIwNy4zMjM4NyUyMDIxJTIwOS42MTMwNSUyMDIxJTIwMTJaJTIyJTIwc3Ryb2tlJTNEJTIyJTIzOUNBM0FGJTIyJTIwc3Ryb2tlLXdpZHRoJTNEJTIyMiUyMiUyMHN0cm9rZS1saW5lY2FwJTNEJTIycm91bmQlMjIlMjBzdHJva2UtbGluZWpvaW4lM0QlMjJyb3VuZCUyMiUyMCUyRiUzRSUzQyUyRnN2ZyUzRVwiO1xuXG5jb25zdCBpY29ucyA9IHtcbiAgXCJhcnJvdy1sZWZ0XCI6IHtcbiAgICBpbWFnZTogQ2lyY2xlQXJyb3dMZWZ0XG4gIH0sXG4gIGNsb3NlOiB7XG4gICAgaW1hZ2U6IENsb3NlXG4gIH0sXG4gIFwiZXhwYW5kLWxpZ2h0XCI6IHtcbiAgICBpbWFnZTogRXhwYW5kTGlnaHRcbiAgfSxcbiAgZXhwYW5kOiB7XG4gICAgaW1hZ2U6IEV4cGFuZFxuICB9LFxuICBjb25uZWN0ZWQ6IHtcbiAgICBpbWFnZTogQ29ubmVjdGVkXG4gIH0sXG4gIFwiaW5mb3JtYXRpb24tY2lyY2xlLWxpZ2h0XCI6IHtcbiAgICBpbWFnZTogSW5mb0NpcmNsZUxpZ2h0XG4gIH0sXG4gIFwiaW5mb3JtYXRpb24tY2lyY2xlXCI6IHtcbiAgICBpbWFnZTogSW5mb0NpcmNsZVxuICB9XG59O1xuZnVuY3Rpb24gSWNvbihwcm9wcykge1xuICBjb25zdCB7XG4gICAgaWNvbk5hbWUsXG4gICAgaWNvblRpdGxlID0gXCJcIixcbiAgICBoZWlnaHQgPSBcImF1dG9cIixcbiAgICB3aWR0aCA9IFwiYXV0b1wiXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIGljb25zW2ljb25OYW1lXSA/IC8qI19fUFVSRV9fKi9qc3goXCJpbWdcIiwge1xuICAgIGNsYXNzTmFtZTogaWNvblRpdGxlID8gXCJjdXJzb3ItcG9pbnRlclwiIDogXCJcIixcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgc3JjOiBpY29uc1tpY29uTmFtZV0uaW1hZ2UsXG4gICAgYWx0OiBpY29uTmFtZSxcbiAgICB0aXRsZTogaWNvblRpdGxlXG4gIH0pIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gSW1hZ2UkMShwcm9wcykge1xuICBjb25zdCB7XG4gICAgaG92ZXJJbWFnZUlkLFxuICAgIGltYWdlSWQsXG4gICAgaXNCdXR0b24gPSBmYWxzZSxcbiAgICBoZWlnaHQgPSBcImF1dG9cIixcbiAgICB3aWR0aCA9IFwiYXV0b1wiXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9qc3hzKEZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4KFwiaW1nXCIsIHtcbiAgICAgIHNyYzogYGh0dHBzOi8vaW1hZ2VzLndlYjNhdXRoLmlvLyR7aW1hZ2VJZH0uc3ZnYCxcbiAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgYWx0OiBpbWFnZUlkLFxuICAgICAgY2xhc3NOYW1lOiBcImltYWdlLWljb25cIlxuICAgIH0pLCBpc0J1dHRvbiA/IC8qI19fUFVSRV9fKi9qc3goXCJpbWdcIiwge1xuICAgICAgc3JjOiBgaHR0cHM6Ly9pbWFnZXMud2ViM2F1dGguaW8vJHtob3ZlckltYWdlSWR9LnN2Z2AsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgIGFsdDogaG92ZXJJbWFnZUlkLFxuICAgICAgY2xhc3NOYW1lOiBcImhvdmVyLWljb25cIlxuICAgIH0pIDogbnVsbF1cbiAgfSk7XG59XG5cbmNvbnN0IGNsb3NlSWNvbiQxID0gLyojX19QVVJFX18qL2pzeChJY29uLCB7XG4gIGljb25OYW1lOiBcImNsb3NlXCJcbn0pO1xuZnVuY3Rpb24gRGV0YWlsZWRMb2FkZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGFkYXB0ZXIsXG4gICAgYXBwTG9nbyxcbiAgICBtZXNzYWdlLFxuICAgIG1vZGFsU3RhdHVzLFxuICAgIGFkYXB0ZXJOYW1lLFxuICAgIG9uQ2xvc2VcbiAgfSA9IHByb3BzO1xuICBjb25zdCB3ZWIzYXV0aEljb24gPSAvKiNfX1BVUkVfXyovanN4KEltYWdlJDEsIHtcbiAgICBpbWFnZUlkOiBcIndlYjNhdXRoXCJcbiAgfSk7XG4gIGNvbnN0IHByb3ZpZGVySWNvbiA9IC8qI19fUFVSRV9fKi9qc3goSW1hZ2UkMSwge1xuICAgIGltYWdlSWQ6IGBsb2dpbi0ke2FkYXB0ZXJ9YFxuICB9KTtcbiAgY29uc3QgW3RdID0gdXNlVHJhbnNsYXRpb24odW5kZWZpbmVkLCB7XG4gICAgaTE4bjogaTE4bkluc3RhbmNlXG4gIH0pO1xuICBjb25zdCBpc0RlZmF1bHRMb2dvID0gW0RFRkFVTFRfTE9HT19EQVJLLCBERUZBVUxUX0xPR09fTElHSFRdLmluY2x1ZGVzKGFwcExvZ28pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxvZy5kZWJ1ZyhcImFkYXB0ZXIgbG9hZGVyIHJlLXJlbmRlcmluZ1wiKTtcbiAgICBpZiAobW9kYWxTdGF0dXMgPT09IE1PREFMX1NUQVRVUy5DT05ORUNURUQpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBvbkNsb3NlKCk7XG4gICAgICB9LCAzMDAwKTtcbiAgICB9XG4gIH0sIFttb2RhbFN0YXR1cywgb25DbG9zZV0pO1xuICByZXR1cm4gbW9kYWxTdGF0dXMgIT09IE1PREFMX1NUQVRVUy5JTklUSUFMSVpFRCA/IC8qI19fUFVSRV9fKi9qc3hzKFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwidzNhanMtbW9kYWwtbG9hZGVyIHczYS1tb2RhbF9fbG9hZGVyXCIsXG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwidzNhLW1vZGFsX19sb2FkZXItY29udGVudFwiLFxuICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ3M2EtbW9kYWxfX2xvYWRlci1pbmZvXCIsXG4gICAgICAgIGNoaWxkcmVuOiBbbW9kYWxTdGF0dXMgPT09IE1PREFMX1NUQVRVUy5DT05ORUNUSU5HICYmIC8qI19fUFVSRV9fKi9qc3hzKEZyYWdtZW50LCB7XG4gICAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidzNhLW1vZGFsX19sb2FkZXItYnJpZGdlXCIsXG4gICAgICAgICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IFtcInczYS1tb2RhbF9fbG9hZGVyLWFwcC1sb2dvXCIsIGlzRGVmYXVsdExvZ28gPyBcInczYS1tb2RhbF9fbG9hZGVyLWFwcC1sb2dvLS1kZWZhdWx0XCIgOiBcIlwiXS5qb2luKFwiIFwiKSxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3goXCJpbWdcIiwge1xuICAgICAgICAgICAgICAgIHNyYzogYXBwTG9nbyxcbiAgICAgICAgICAgICAgICBhbHQ6IFwiXCJcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInczYS1tb2RhbF9fY29ubmVjdG9yXCIsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInczYS1tb2RhbF9fY29ubmVjdG9yLWJlYXRcIixcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge30pLCAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHt9KSwgLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7fSksIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge30pLCAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHt9KV1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInczYS1tb2RhbF9fbG9hZGVyLXNvY2lhbC1sb2dvXCIsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiBwcm92aWRlckljb25cbiAgICAgICAgICAgIH0pXVxuICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwidzNhLW1vZGFsX19sb2FkZXItYnJpZGdlLW1lc3NhZ2VcIixcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHQoXCJtb2RhbC5hZGFwdGVyLWxvYWRlci5tZXNzYWdlMVwiLCB7XG4gICAgICAgICAgICAgICAgYWRhcHRlcjogYWRhcHRlck5hbWVcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInczYS1tb2RhbF9fbG9hZGVyLWJyaWRnZS1tZXNzYWdlXCIsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0KFwibW9kYWwuYWRhcHRlci1sb2FkZXIubWVzc2FnZTJcIiwge1xuICAgICAgICAgICAgICAgIGFkYXB0ZXI6IGFkYXB0ZXJOYW1lXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KV1cbiAgICAgICAgICB9KV1cbiAgICAgICAgfSksIG1vZGFsU3RhdHVzID09PSBBREFQVEVSX1NUQVRVUy5DT05ORUNURUQgJiYgLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlclwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL2pzeChJY29uLCB7XG4gICAgICAgICAgICBpY29uTmFtZTogXCJjb25uZWN0ZWRcIlxuICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2Fqcy1tb2RhbC1sb2FkZXJfX21lc3NhZ2UgdzNhLXNwaW5uZXItbWVzc2FnZSBtdC00XCIsXG4gICAgICAgICAgICBjaGlsZHJlbjogbWVzc2FnZVxuICAgICAgICAgIH0pXVxuICAgICAgICB9KSwgbW9kYWxTdGF0dXMgPT09IEFEQVBURVJfU1RBVFVTLkVSUk9SRUQgJiYgLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInczYWpzLW1vZGFsLWxvYWRlcl9fbWVzc2FnZSB3M2Etc3Bpbm5lci1tZXNzYWdlIHczYS1zcGlubmVyLW1lc3NhZ2UtLWVycm9yXCIsXG4gICAgICAgICAgY2hpbGRyZW46IG1lc3NhZ2VcbiAgICAgICAgfSldXG4gICAgICB9KSwgLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwidzNhLXNwaW5uZXItcG93ZXJcIixcbiAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogdChcIm1vZGFsLmZvb3Rlci5tZXNzYWdlXCIpXG4gICAgICAgIH0pLCB3ZWIzYXV0aEljb25dXG4gICAgICB9KV1cbiAgICB9KSwgKG1vZGFsU3RhdHVzID09PSBBREFQVEVSX1NUQVRVUy5DT05ORUNURUQgfHwgbW9kYWxTdGF0dXMgPT09IEFEQVBURVJfU1RBVFVTLkVSUk9SRUQpICYmIC8qI19fUFVSRV9fKi9qc3goXCJidXR0b25cIiwge1xuICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgIGNsYXNzTmFtZTogXCJ3M2EtaGVhZGVyX19idXR0b24gdzNhanMtbG9hZGVyLWNsb3NlLWJ0blwiLFxuICAgICAgb25DbGljazogb25DbG9zZSxcbiAgICAgIGNoaWxkcmVuOiBjbG9zZUljb24kMVxuICAgIH0pXVxuICB9KSA6IG51bGw7XG59XG5cbmNvbnN0IGNsb3NlSWNvbiA9IC8qI19fUFVSRV9fKi9qc3goSWNvbiwge1xuICBpY29uTmFtZTogXCJjbG9zZVwiXG59KTtcbmZ1bmN0aW9uIExvYWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgbWVzc2FnZSxcbiAgICBtb2RhbFN0YXR1cyxcbiAgICBsYWJlbCxcbiAgICBvbkNsb3NlLFxuICAgIGNhbkVtaXQgPSB0cnVlXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qgd2ViM2F1dGhJY29uID0gLyojX19QVVJFX18qL2pzeChJbWFnZSQxLCB7XG4gICAgaW1hZ2VJZDogXCJ3ZWIzYXV0aFwiXG4gIH0pO1xuICBjb25zdCBbdF0gPSB1c2VUcmFuc2xhdGlvbih1bmRlZmluZWQsIHtcbiAgICBpMThuOiBpMThuSW5zdGFuY2VcbiAgfSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbG9nLmRlYnVnKFwibG9hZGVyIHJlLXJlbmRlcmluZ1wiKTtcbiAgICBpZiAobW9kYWxTdGF0dXMgPT09IE1PREFMX1NUQVRVUy5DT05ORUNURUQgJiYgY2FuRW1pdCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgIH0sIDMwMDApO1xuICAgIH1cbiAgfSwgW2NhbkVtaXQsIG1vZGFsU3RhdHVzLCBvbkNsb3NlXSk7XG4gIHJldHVybiBtb2RhbFN0YXR1cyAhPT0gTU9EQUxfU1RBVFVTLklOSVRJQUxJWkVEID8gLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3M2Fqcy1tb2RhbC1sb2FkZXIgdzNhLW1vZGFsX19sb2FkZXJcIixcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3hzKFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ3M2EtbW9kYWxfX2xvYWRlci1jb250ZW50XCIsXG4gICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3hzKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInczYS1tb2RhbF9fbG9hZGVyLWluZm9cIixcbiAgICAgICAgY2hpbGRyZW46IFttb2RhbFN0YXR1cyA9PT0gTU9EQUxfU1RBVFVTLkNPTk5FQ1RJTkcgJiYgLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2Fqcy1tb2RhbC1sb2FkZXJfX3NwaW5uZXIgdzNhLXNwaW5uZXJcIixcbiAgICAgICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcInczYS1zcGlubmVyX19oZWFkXCJcbiAgICAgICAgICB9KSwgLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidzNhLXNwaW5uZXJfX21hc2tcIlxuICAgICAgICAgIH0pXVxuICAgICAgICB9KSwgLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInczYWpzLW1vZGFsLWxvYWRlcl9fbGFiZWwgdzNhLXNwaW5uZXItbGFiZWxcIixcbiAgICAgICAgICBjaGlsZHJlbjogbGFiZWxcbiAgICAgICAgfSksIG1vZGFsU3RhdHVzID09PSBBREFQVEVSX1NUQVRVUy5DT05ORUNURUQgJiYgLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInczYWpzLW1vZGFsLWxvYWRlcl9fbWVzc2FnZSB3M2Etc3Bpbm5lci1tZXNzYWdlXCIsXG4gICAgICAgICAgY2hpbGRyZW46IG1lc3NhZ2VcbiAgICAgICAgfSksIG1vZGFsU3RhdHVzID09PSBBREFQVEVSX1NUQVRVUy5FUlJPUkVEICYmIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2Fqcy1tb2RhbC1sb2FkZXJfX21lc3NhZ2UgdzNhLXNwaW5uZXItbWVzc2FnZSB3M2Etc3Bpbm5lci1tZXNzYWdlLS1lcnJvclwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBtZXNzYWdlXG4gICAgICAgIH0pXVxuICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3hzKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInczYS1zcGlubmVyLXBvd2VyXCIsXG4gICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgY2hpbGRyZW46IHQoXCJtb2RhbC5mb290ZXIubWVzc2FnZVwiKVxuICAgICAgICB9KSwgd2ViM2F1dGhJY29uXVxuICAgICAgfSldXG4gICAgfSksIChtb2RhbFN0YXR1cyA9PT0gQURBUFRFUl9TVEFUVVMuQ09OTkVDVEVEIHx8IG1vZGFsU3RhdHVzID09PSBBREFQVEVSX1NUQVRVUy5FUlJPUkVEKSAmJiAvKiNfX1BVUkVfXyovanN4KFwiYnV0dG9uXCIsIHtcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBjbGFzc05hbWU6IFwidzNhLWhlYWRlcl9fYnV0dG9uIHczYWpzLWxvYWRlci1jbG9zZS1idG5cIixcbiAgICAgIG9uQ2xpY2s6IG9uQ2xvc2UsXG4gICAgICBjaGlsZHJlbjogY2xvc2VJY29uXG4gICAgfSldXG4gIH0pIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gV2FsbGV0Q29ubmVjdChwcm9wcykge1xuICBjb25zdCB7XG4gICAgd2FsbGV0Q29ubmVjdFVyaVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFt0XSA9IHVzZVRyYW5zbGF0aW9uKHVuZGVmaW5lZCwge1xuICAgIGkxOG46IGkxOG5JbnN0YW5jZVxuICB9KTtcblxuICAvLyBUT0RPOiBzaG93IG9ubHkgd2NBZGFwdGVycyBvZiBjdXJyZW50IGNoYWluXG4gIHJldHVybiAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwidzNhanMtd2FsbGV0LWNvbm5lY3QgdzNhLXdhbGxldC1jb25uZWN0XCIsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInczYWpzLXdhbGxldC1jb25uZWN0X19jb250YWluZXIgdzNhLXdhbGxldC1jb25uZWN0X19jb250YWluZXJcIixcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ3M2Etd2FsbGV0LWNvbm5lY3RfX2NvbnRhaW5lci1kZXNrdG9wXCIsXG4gICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgY2hpbGRyZW46IHQoXCJtb2RhbC5leHRlcm5hbC53YWxsZXRjb25uZWN0LXN1YnRpdGxlXCIpXG4gICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwidzNhanMtd2FsbGV0LWNvbm5lY3QtcXIgdzNhLXdhbGxldC1jb25uZWN0LXFyXCIsXG4gICAgICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICAgICAgcm9sZTogXCJidXR0b25cIixcbiAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBjb3B5VG9DbGlwYm9hcmQod2FsbGV0Q29ubmVjdFVyaSksXG4gICAgICAgICAgb25LZXlEb3duOiAoKSA9PiBjb3B5VG9DbGlwYm9hcmQod2FsbGV0Q29ubmVjdFVyaSksXG4gICAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3goUVJDb2RlLCB7XG4gICAgICAgICAgICBzaXplOiAyMDAsXG4gICAgICAgICAgICBleWVSYWRpdXM6IDUsXG4gICAgICAgICAgICBxclN0eWxlOiBcImRvdHNcIixcbiAgICAgICAgICAgIHJlbW92ZVFyQ29kZUJlaGluZExvZ286IHRydWUsXG4gICAgICAgICAgICBsb2dvSW1hZ2U6IFdBTExFVF9DT05ORUNUX0xPR08sXG4gICAgICAgICAgICB2YWx1ZTogd2FsbGV0Q29ubmVjdFVyaVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICBjaGlsZHJlbjogdChcIm1vZGFsLmV4dGVybmFsLndhbGxldGNvbm5lY3QtY29weVwiKVxuICAgICAgICB9KV1cbiAgICAgIH0pXG4gICAgfSlcbiAgfSk7XG59XG52YXIgV2FsbGV0Q29ubmVjdCQxID0gLyojX19QVVJFX18qL21lbW8oV2FsbGV0Q29ubmVjdCk7XG5cbmZ1bmN0aW9uIGZvcm1hdElPU01vYmlsZShwYXJhbXMpIHtcbiAgY29uc3QgZW5jb2RlZFVyaSA9IGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXMudXJpKTtcbiAgaWYgKHBhcmFtcy51bml2ZXJzYWxMaW5rKSB7XG4gICAgcmV0dXJuIGAke3BhcmFtcy51bml2ZXJzYWxMaW5rfS93Yz91cmk9JHtlbmNvZGVkVXJpfWA7XG4gIH1cbiAgaWYgKHBhcmFtcy5kZWVwTGluaykge1xuICAgIHJldHVybiBgJHtwYXJhbXMuZGVlcExpbmt9JHtwYXJhbXMuZGVlcExpbmsuZW5kc1dpdGgoXCI6XCIpID8gXCIvL1wiIDogXCIvXCJ9d2M/dXJpPSR7ZW5jb2RlZFVyaX1gO1xuICB9XG4gIHJldHVybiBcIlwiO1xufVxuZnVuY3Rpb24gZm9ybWF0TW9iaWxlUmVnaXN0cnlFbnRyeShlbnRyeSwgd2FsbGV0Q29ubmVjdFVyaSwgb3MpIHtcbiAgbGV0IHBsYXRmb3JtID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBcIm1vYmlsZVwiO1xuICBjb25zdCB1bml2ZXJzYWxMaW5rID0gZW50cnlbcGxhdGZvcm1dLnVuaXZlcnNhbCB8fCBcIlwiO1xuICBjb25zdCBkZWVwTGluayA9IGVudHJ5W3BsYXRmb3JtXS5uYXRpdmUgfHwgXCJcIjtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBlbnRyeS5uYW1lIHx8IFwiXCIsXG4gICAgbG9nbzogZW50cnkubG9nbyB8fCBcIlwiLFxuICAgIHVuaXZlcnNhbExpbmssXG4gICAgZGVlcExpbmssXG4gICAgaHJlZjogb3MgPT09IGJvd3Nlci5PU19NQVAuaU9TID8gZm9ybWF0SU9TTW9iaWxlKHtcbiAgICAgIHVyaTogd2FsbGV0Q29ubmVjdFVyaSxcbiAgICAgIHVuaXZlcnNhbExpbmssXG4gICAgICBkZWVwTGlua1xuICAgIH0pIDogd2FsbGV0Q29ubmVjdFVyaVxuICB9O1xufVxuZnVuY3Rpb24gZm9ybWF0TW9iaWxlUmVnaXN0cnkocmVnaXN0cnksIHdhbGxldENvbm5lY3RVcmksIG9zKSB7XG4gIGxldCBwbGF0Zm9ybSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogXCJtb2JpbGVcIjtcbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMocmVnaXN0cnkpLmZpbHRlcihlbnRyeSA9PiAhIWVudHJ5W3BsYXRmb3JtXS51bml2ZXJzYWwgfHwgISFlbnRyeVtwbGF0Zm9ybV0ubmF0aXZlKS5tYXAoZW50cnkgPT4gZm9ybWF0TW9iaWxlUmVnaXN0cnlFbnRyeShlbnRyeSwgd2FsbGV0Q29ubmVjdFVyaSwgb3MsIHBsYXRmb3JtKSk7XG59XG5mdW5jdGlvbiBFeHRlcm5hbFdhbGxldChwcm9wcykge1xuICBjb25zdCB7XG4gICAgaGlkZUV4dGVybmFsV2FsbGV0cyxcbiAgICBoYW5kbGVFeHRlcm5hbFdhbGxldENsaWNrLFxuICAgIGNvbmZpZyA9IHt9LFxuICAgIHdhbGxldENvbm5lY3RVcmksXG4gICAgc2hvd0JhY2tCdXR0b24sXG4gICAgbW9kYWxTdGF0dXMsXG4gICAgd2NBZGFwdGVyc1xuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtpc0xvYWRlZCwgc2V0SXNMb2FkZWRdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFthZGFwdGVyVmlzaWJpbGl0eU1hcCwgc2V0QWRhcHRlclZpc2liaWxpdHlNYXBdID0gdXNlU3RhdGUoe30pO1xuICBjb25zdCBbZXh0ZXJuYWxCdXR0b25zLCBzZXRFeHRlcm5hbEJ1dHRvbnNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBkZXZpY2VUeXBlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgYnJvd3NlciA9IGJvd3Nlci5nZXRQYXJzZXIod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHJldHVybiBicm93c2VyLmdldFBsYXRmb3JtVHlwZSgpO1xuICB9LCBbXSk7XG4gIGNvbnN0IGRldmljZURldGFpbHMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBicm93c2VyID0gYm93c2VyLmdldFBhcnNlcih3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBsYXRmb3JtOiBicm93c2VyLmdldFBsYXRmb3JtVHlwZSgpLFxuICAgICAgb3M6IGJyb3dzZXIuZ2V0T1NOYW1lKClcbiAgICB9O1xuICB9LCBbXSk7XG4gIGNvbnN0IFt0XSA9IHVzZVRyYW5zbGF0aW9uKHVuZGVmaW5lZCwge1xuICAgIGkxOG46IGkxOG5JbnN0YW5jZVxuICB9KTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB2YXIgX2NvbmZpZyR3YWxsZXRDb25uZWN0O1xuICAgIGxvZy5kZWJ1ZyhcImxvYWRlZCBleHRlcm5hbCB3YWxsZXRzXCIsIGNvbmZpZywgd2FsbGV0Q29ubmVjdFVyaSwgZGV2aWNlVHlwZSk7XG4gICAgY29uc3Qgd2FsbGV0Q29ubmVjdEFkYXB0ZXJOYW1lID0gV0FMTEVUX0FEQVBURVJTLldBTExFVF9DT05ORUNUX1YyO1xuICAgIGNvbnN0IHdjQXZhaWxhYmxlID0gKCgoX2NvbmZpZyR3YWxsZXRDb25uZWN0ID0gY29uZmlnW3dhbGxldENvbm5lY3RBZGFwdGVyTmFtZV0pID09PSBudWxsIHx8IF9jb25maWckd2FsbGV0Q29ubmVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NvbmZpZyR3YWxsZXRDb25uZWN0LnNob3dPbk1vZGFsKSB8fCBmYWxzZSkgIT09IGZhbHNlO1xuICAgIGlmICh3Y0F2YWlsYWJsZSAmJiAhd2FsbGV0Q29ubmVjdFVyaSkge1xuICAgICAgc2V0SXNMb2FkZWQoZmFsc2UpO1xuICAgICAgaGFuZGxlRXh0ZXJuYWxXYWxsZXRDbGljayh7XG4gICAgICAgIGFkYXB0ZXI6IHdhbGxldENvbm5lY3RBZGFwdGVyTmFtZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3Qua2V5cyhjb25maWcpLmxlbmd0aCA+IDApIHtcbiAgICAgIHNldElzTG9hZGVkKHRydWUpO1xuICAgIH1cbiAgICBjb25zdCBjYW5TaG93TWFwID0ge307XG4gICAgT2JqZWN0LmtleXMoY29uZmlnKS5mb3JFYWNoKGFkYXB0ZXIgPT4ge1xuICAgICAgY29uc3QgYWRhcHRlckNvbmZpZyA9IGNvbmZpZ1thZGFwdGVyXTtcbiAgICAgIGlmICghYWRhcHRlckNvbmZpZy5zaG93T25Nb2RhbCkge1xuICAgICAgICBjYW5TaG93TWFwW2FkYXB0ZXJdID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkZXZpY2VUeXBlID09PSBcImRlc2t0b3BcIiAmJiBhZGFwdGVyQ29uZmlnLnNob3dPbkRlc2t0b3ApIHtcbiAgICAgICAgY2FuU2hvd01hcFthZGFwdGVyXSA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICgoZGV2aWNlVHlwZSA9PT0gXCJtb2JpbGVcIiB8fCBkZXZpY2VUeXBlID09PSBcInRhYmxldFwiKSAmJiBhZGFwdGVyQ29uZmlnLnNob3dPbk1vYmlsZSkge1xuICAgICAgICBjYW5TaG93TWFwW2FkYXB0ZXJdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FuU2hvd01hcFthZGFwdGVyXSA9IGZhbHNlO1xuICAgIH0pO1xuICAgIHNldEFkYXB0ZXJWaXNpYmlsaXR5TWFwKGNhblNob3dNYXApO1xuICB9LCBbY29uZmlnLCBoYW5kbGVFeHRlcm5hbFdhbGxldENsaWNrLCB3YWxsZXRDb25uZWN0VXJpLCBkZXZpY2VUeXBlXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgYnV0dG9ucyA9IFtdO1xuICAgIC8vIGFkZCB3YWxsZXQgY29ubmVjdCBsaW5rc1xuICAgIGlmIChkZXZpY2VEZXRhaWxzLnBsYXRmb3JtID09PSBib3dzZXIuUExBVEZPUk1TX01BUC5tb2JpbGUpIHtcbiAgICAgIGxldCBtb2JpbGVMaW5rcyA9IGZvcm1hdE1vYmlsZVJlZ2lzdHJ5KHdjQWRhcHRlcnMsIHdhbGxldENvbm5lY3RVcmksIGRldmljZURldGFpbHMub3MsIGRldmljZURldGFpbHMucGxhdGZvcm0pO1xuICAgICAgaWYgKGRldmljZURldGFpbHMub3MgPT09IGJvd3Nlci5PU19NQVAuaU9TKSB7XG4gICAgICAgIHZhciBfd2luZG93JGV0aGVyZXVtO1xuICAgICAgICBpZiAoKF93aW5kb3ckZXRoZXJldW0gPSB3aW5kb3cuZXRoZXJldW0pICE9PSBudWxsICYmIF93aW5kb3ckZXRoZXJldW0gIT09IHZvaWQgMCAmJiBfd2luZG93JGV0aGVyZXVtLmlzTWV0YU1hc2spIHtcbiAgICAgICAgICAvLyBpZiBtZXRhbWFzaywgdXNlIHRoZSBtZXRhbWFzayBhZGFwdGVyIGRpcmVjdGx5XG4gICAgICAgICAgbW9iaWxlTGlua3MgPSBtb2JpbGVMaW5rcy5maWx0ZXIoeCA9PiB4Lm5hbWUgIT09IFwiTWV0YU1hc2tcIik7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9ucy5wdXNoKC4uLm1vYmlsZUxpbmtzLm1hcChsaW5rID0+ICh7XG4gICAgICAgICAgbmFtZTogbGluay5uYW1lLFxuICAgICAgICAgIGhyZWY6IGxpbmsuaHJlZixcbiAgICAgICAgICBsb2dvOiBsaW5rLmxvZ28sXG4gICAgICAgICAgaXNMaW5rOiB0cnVlLFxuICAgICAgICAgIGJsb2NrOiBmYWxzZVxuICAgICAgICB9KSkpO1xuICAgICAgfSBlbHNlIGlmIChtb2JpbGVMaW5rcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGJ1dHRvbnMucHVzaCh7XG4gICAgICAgICAgbmFtZTogXCJXYWxsZXRDb25uZWN0XCIsXG4gICAgICAgICAgaHJlZjogbW9iaWxlTGlua3NbMF0uaHJlZixcbiAgICAgICAgICBsb2dvOiBXQUxMRVRfQ09OTkVDVF9MT0dPLFxuICAgICAgICAgIGlzTGluazogdHJ1ZSxcbiAgICAgICAgICBibG9jazogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYWRhcHRlckJ0bnMgPSBPYmplY3Qua2V5cyhjb25maWcpLmZpbHRlcihhZGFwdGVyID0+ICFbV0FMTEVUX0FEQVBURVJTLldBTExFVF9DT05ORUNUX1YyXS5pbmNsdWRlcyhhZGFwdGVyKSAmJiBhZGFwdGVyVmlzaWJpbGl0eU1hcFthZGFwdGVyXSkubWFwKGFkYXB0ZXIgPT4gKHtcbiAgICAgIG5hbWU6IGFkYXB0ZXIsXG4gICAgICBpc0xpbms6IGZhbHNlLFxuICAgICAgYmxvY2s6IGZhbHNlXG4gICAgfSkpO1xuICAgIGlmIChhZGFwdGVyQnRucy5sZW5ndGggPT09IDEgJiYgZGV2aWNlRGV0YWlscy5vcyAhPT0gYm93c2VyLk9TX01BUC5pT1MpIGFkYXB0ZXJCdG5zWzBdLmJsb2NrID0gdHJ1ZTtcbiAgICBidXR0b25zLnB1c2goLi4uYWRhcHRlckJ0bnMpO1xuICAgIHNldEV4dGVybmFsQnV0dG9ucyhidXR0b25zKTtcbiAgfSwgW3djQWRhcHRlcnMsIGNvbmZpZywgZGV2aWNlRGV0YWlscy5vcywgZGV2aWNlRGV0YWlscy5wbGF0Zm9ybSwgd2FsbGV0Q29ubmVjdFVyaSwgYWRhcHRlclZpc2liaWxpdHlNYXBdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3M2Fqcy1leHRlcm5hbC13YWxsZXQgdzNhLWdyb3VwXCIsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3hzKFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ3M2EtZXh0ZXJuYWwtY29udGFpbmVyIHczYWpzLWV4dGVybmFsLWNvbnRhaW5lclwiLFxuICAgICAgY2hpbGRyZW46IFtzaG93QmFja0J1dHRvbiAmJiAvKiNfX1BVUkVfXyovanN4cyhcImJ1dHRvblwiLCB7XG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJ3M2EtZXh0ZXJuYWwtYmFjayB3M2Fqcy1leHRlcm5hbC1iYWNrXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGhpZGVFeHRlcm5hbFdhbGxldHMoKSxcbiAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4KEljb24sIHtcbiAgICAgICAgICBpY29uTmFtZTogXCJhcnJvdy1sZWZ0XCJcbiAgICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2EtZ3JvdXBfX3RpdGxlXCIsXG4gICAgICAgICAgY2hpbGRyZW46IHQoXCJtb2RhbC5leHRlcm5hbC5iYWNrXCIpXG4gICAgICAgIH0pXVxuICAgICAgfSksICFpc0xvYWRlZCAmJiAvKiNfX1BVUkVfXyovanN4KExvYWRlciwge1xuICAgICAgICBtb2RhbFN0YXR1czogTU9EQUxfU1RBVFVTLkNPTk5FQ1RJTkcsXG4gICAgICAgIGNhbkVtaXQ6IGZhbHNlXG4gICAgICB9KSwgT2JqZWN0LmtleXMoY29uZmlnKS5tYXAoYWRhcHRlciA9PiB7XG4gICAgICAgIGlmICh3YWxsZXRDb25uZWN0VXJpICYmIGRldmljZURldGFpbHMucGxhdGZvcm0gPT09IGJvd3Nlci5QTEFURk9STVNfTUFQLmRlc2t0b3AgJiYgW1dBTExFVF9BREFQVEVSUy5XQUxMRVRfQ09OTkVDVF9WMl0uaW5jbHVkZXMoYWRhcHRlcikpIHtcbiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL2pzeChXYWxsZXRDb25uZWN0JDEsIHtcbiAgICAgICAgICAgIHdhbGxldENvbm5lY3RVcmk6IHdhbGxldENvbm5lY3RVcmlcbiAgICAgICAgICB9LCBhZGFwdGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pLCBtb2RhbFN0YXR1cyA9PT0gTU9EQUxfU1RBVFVTLklOSVRJQUxJWkVEICYmIC8qI19fUFVSRV9fKi9qc3goXCJ1bFwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ3M2EtYWRhcHRlci1saXN0IHczYWpzLXdhbGxldC1hZGFwdGVyc1wiLFxuICAgICAgICBjaGlsZHJlbjogZXh0ZXJuYWxCdXR0b25zLm1hcChidXR0b24gPT4ge1xuICAgICAgICAgIHZhciBfY29uZmlnJGJ1dHRvbiRuYW1lLCBfY29uZmlnJGJ1dHRvbiRuYW1lMjtcbiAgICAgICAgICBjb25zdCBwcm92aWRlckljb24gPSBidXR0b24uaXNMaW5rID8gLyojX19QVVJFX18qL2pzeChcImltZ1wiLCB7XG4gICAgICAgICAgICBzcmM6IGJ1dHRvbi5sb2dvLFxuICAgICAgICAgICAgaGVpZ2h0OiBcImF1dG9cIixcbiAgICAgICAgICAgIHdpZHRoOiBcImF1dG9cIixcbiAgICAgICAgICAgIGFsdDogYGxvZ2luLSR7YnV0dG9uLm5hbWV9YFxuICAgICAgICAgIH0pIDogLyojX19QVVJFX18qL2pzeChJbWFnZSQxLCB7XG4gICAgICAgICAgICBpbWFnZUlkOiBgbG9naW4tJHtidXR0b24ubmFtZX1gLFxuICAgICAgICAgICAgaG92ZXJJbWFnZUlkOiBgbG9naW4tJHtidXR0b24ubmFtZX1gLFxuICAgICAgICAgICAgaXNCdXR0b246IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zdCBpc0Jsb2NrID0gZXh0ZXJuYWxCdXR0b25zLmxlbmd0aCA9PT0gMSB8fCBidXR0b24uYmxvY2s7XG4gICAgICAgICAgY29uc3QgbGFiZWwgPSBpc0Jsb2NrID8gLyojX19QVVJFX18qL2pzeChcInBcIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm1sLTIgdGV4dC1sZWZ0XCIsXG4gICAgICAgICAgICBjaGlsZHJlbjogKChfY29uZmlnJGJ1dHRvbiRuYW1lID0gY29uZmlnW2J1dHRvbi5uYW1lXSkgPT09IG51bGwgfHwgX2NvbmZpZyRidXR0b24kbmFtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NvbmZpZyRidXR0b24kbmFtZS5sYWJlbCkgfHwgYnV0dG9uLm5hbWVcbiAgICAgICAgICB9KSA6IFwiXCI7XG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9qc3goXCJsaVwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFtgdzNhLWFkYXB0ZXItaXRlbWAsIGlzQmxvY2sgPyBcInczYS1hZGFwdGVyLWl0ZW0tLWZ1bGxcIiA6IFwiY29sLXNwYW4tMlwiXS5qb2luKFwiIFwiKSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBidXR0b24uaXNMaW5rID8gLyojX19QVVJFX18qL2pzeChcImFcIiwge1xuICAgICAgICAgICAgICBocmVmOiBidXR0b24uaHJlZixcbiAgICAgICAgICAgICAgcmVsOiBcIm5vb3BlbmVyIG5vcmVmZXJyZXJcIixcbiAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL2pzeHMoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInctZnVsbCB3M2EtYnV0dG9uIHczYS1idXR0b24tLWxvZ2luXCIsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtwcm92aWRlckljb24sIGxhYmVsXVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSwgYnV0dG9uLm5hbWUpIDogLyojX19QVVJFX18qL2pzeHMoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBoYW5kbGVFeHRlcm5hbFdhbGxldENsaWNrKHtcbiAgICAgICAgICAgICAgICBhZGFwdGVyOiBidXR0b24ubmFtZVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInctZnVsbCB3M2EtYnV0dG9uIHczYS1idXR0b24tLWxvZ2luXCIsXG4gICAgICAgICAgICAgIHRpdGxlOiAoKF9jb25maWckYnV0dG9uJG5hbWUyID0gY29uZmlnW2J1dHRvbi5uYW1lXSkgPT09IG51bGwgfHwgX2NvbmZpZyRidXR0b24kbmFtZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jb25maWckYnV0dG9uJG5hbWUyLmxhYmVsKSB8fCBidXR0b24ubmFtZSxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFtwcm92aWRlckljb24sIGxhYmVsXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9LCBidXR0b24ubmFtZSk7XG4gICAgICAgIH0pXG4gICAgICB9KV1cbiAgICB9KVxuICB9KTtcbn1cblxuZnVuY3Rpb24gRm9vdGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBwcml2YWN5UG9saWN5LFxuICAgIHRuY0xpbmssXG4gICAgZGVmYXVsdExhbmd1YWdlID0gXCJlblwiXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgW3RdID0gdXNlVHJhbnNsYXRpb24odW5kZWZpbmVkLCB7XG4gICAgaTE4bjogaTE4bkluc3RhbmNlXG4gIH0pO1xuICBjb25zdCBnZXRQcml2YWN5VXJsID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHJldHVybiAocHJpdmFjeVBvbGljeSA9PT0gbnVsbCB8fCBwcml2YWN5UG9saWN5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcml2YWN5UG9saWN5W2RlZmF1bHRMYW5ndWFnZV0pIHx8IChwcml2YWN5UG9saWN5ID09PSBudWxsIHx8IHByaXZhY3lQb2xpY3kgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByaXZhY3lQb2xpY3kuZW4pIHx8IFwiaHR0cHM6Ly9kb2NzLndlYjNhdXRoLmlvL2xlZ2FsL3ByaXZhY3ktcG9saWN5XCI7XG4gIH0sIFtwcml2YWN5UG9saWN5LCBkZWZhdWx0TGFuZ3VhZ2VdKTtcbiAgY29uc3QgZ2V0VG5jVXJsID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHJldHVybiAodG5jTGluayA9PT0gbnVsbCB8fCB0bmNMaW5rID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0bmNMaW5rW2RlZmF1bHRMYW5ndWFnZV0pIHx8ICh0bmNMaW5rID09PSBudWxsIHx8IHRuY0xpbmsgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRuY0xpbmsuZW4pIHx8IFwiaHR0cHM6Ly9kb2NzLndlYjNhdXRoLmlvL2xlZ2FsL3Rlcm1zLWFuZC1jb25kaXRpb25zXCI7XG4gIH0sIFt0bmNMaW5rLCBkZWZhdWx0TGFuZ3VhZ2VdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3M2EtbW9kYWxfX2Zvb3RlclwiLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ3M2EtZm9vdGVyXCIsXG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiB0KFwibW9kYWwuZm9vdGVyLm1lc3NhZ2UtbmV3XCIpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3hzKFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwidzNhLWZvb3Rlcl9fbGlua3NcIixcbiAgICAgICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goXCJhXCIsIHtcbiAgICAgICAgICAgIGhyZWY6IGdldFRuY1VybCgpLFxuICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgICAgICAgICAgcmVsOiBcIm5vcmVmZXJyZXIgbm9vcGVuZXJcIixcbiAgICAgICAgICAgIGNoaWxkcmVuOiB0KFwibW9kYWwuZm9vdGVyLnRlcm1zLXNlcnZpY2VcIilcbiAgICAgICAgICB9KSwgLyojX19QVVJFX18qL2pzeChcInNwYW5cIiwge1xuICAgICAgICAgICAgY2hpbGRyZW46IFwifFwiXG4gICAgICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3goXCJhXCIsIHtcbiAgICAgICAgICAgIGhyZWY6IGdldFByaXZhY3lVcmwoKSxcbiAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgICAgIHJlbDogXCJub3JlZmVycmVyIG5vb3BlbmVyXCIsXG4gICAgICAgICAgICBjaGlsZHJlbjogdChcIm1vZGFsLmZvb3Rlci5wb2xpY3lcIilcbiAgICAgICAgICB9KV1cbiAgICAgICAgfSldXG4gICAgICB9KVxuICAgIH0pXG4gIH0pO1xufVxudmFyIEZvb3RlciQxID0gLyojX19QVVJFX18qL21lbW8oRm9vdGVyKTtcblxuZnVuY3Rpb24gSGVhZGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBpc0RhcmtcbiAgfSA9IHVzZUNvbnRleHQoVGhlbWVkQ29udGV4dCk7XG4gIGNvbnN0IHtcbiAgICBvbkNsb3NlLFxuICAgIGFwcExvZ28sXG4gICAgYXBwTmFtZVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFt0XSA9IHVzZVRyYW5zbGF0aW9uKHVuZGVmaW5lZCwge1xuICAgIGkxOG46IGkxOG5JbnN0YW5jZVxuICB9KTtcbiAgY29uc3QgaGVhZGVyTG9nbyA9IFtERUZBVUxUX0xPR09fREFSSywgREVGQVVMVF9MT0dPX0xJR0hUXS5pbmNsdWRlcyhhcHBMb2dvKSA/IFwiXCIgOiBhcHBMb2dvO1xuICByZXR1cm4gLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3M2EtbW9kYWxfX2hlYWRlclwiLFxuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwidzNhLWhlYWRlclwiLFxuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3hzKFwiZGl2XCIsIHtcbiAgICAgICAgY2hpbGRyZW46IFtoZWFkZXJMb2dvICYmIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2EtaGVhZGVyX19sb2dvXCIsXG4gICAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3goXCJpbWdcIiwge1xuICAgICAgICAgICAgc3JjOiBoZWFkZXJMb2dvLFxuICAgICAgICAgICAgYWx0OiBcIlwiXG4gICAgICAgICAgfSlcbiAgICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2EtaGVhZGVyX190aXRsZVwiLFxuICAgICAgICAgIGNoaWxkcmVuOiB0KFwibW9kYWwuaGVhZGVyLXRpdGxlXCIpXG4gICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInczYS1oZWFkZXJfX3N1YnRpdGxlXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFt0KFwibW9kYWwuaGVhZGVyLXN1YnRpdGxlLW5hbWVcIiwge1xuICAgICAgICAgICAgYXBwTmFtZVxuICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwicmVsYXRpdmUgZmxleCBmbGV4LWNvbCBpdGVtcy1jZW50ZXIgZ3JvdXAgY3Vyc29yLXBvaW50ZXJcIixcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL2pzeChJY29uLCB7XG4gICAgICAgICAgICAgIGljb25OYW1lOiBgaW5mb3JtYXRpb24tY2lyY2xlJHtpc0RhcmsgPyBcIi1saWdodFwiIDogXCJcIn1gXG4gICAgICAgICAgICB9KSwgLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiYWJzb2x1dGUgdG9wLTQgei0yMCBmbGV4LWNvbCBpdGVtcy1jZW50ZXIgaGlkZGVuIG1iLTUgZ3JvdXAtaG92ZXI6ZmxleFwiLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ3LTMgaC0zIG1sLVszcHhdIC1tYi0yIHJvdGF0ZS00NSBiZy1hcHAtZ3JheS01MCBkYXJrOmJnLWFwcC1ncmF5LTYwMFwiXG4gICAgICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInJlbGF0aXZlIC1tbC1bMTAwcHhdIHAtNCB3LVszMDBweF0gdGV4dC14cyBsZWFkaW5nLW5vbmUgdGV4dC13aGl0ZSByb3VuZGVkLW1kIGJnLWFwcC1ncmF5LTUwIGRhcms6YmctYXBwLWdyYXktNjAwIHNoYWRvdy1sZ1wiLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwidGV4dC14cyBmb250LW1lZGl1bSBtYi0xIHRleHQtYXBwLWdyYXktOTAwIGRhcms6dGV4dC13aGl0ZVwiLFxuICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHQoXCJtb2RhbC5oZWFkZXItdG9vbHRpcC10aXRsZVwiKVxuICAgICAgICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ0ZXh0LXhzIHRleHQtYXBwLWdyYXktNDAwXCIsXG4gICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdChcIm1vZGFsLmhlYWRlci10b29sdGlwLWRlc2NcIilcbiAgICAgICAgICAgICAgICB9KV1cbiAgICAgICAgICAgICAgfSldXG4gICAgICAgICAgICB9KV1cbiAgICAgICAgICB9KV1cbiAgICAgICAgfSldXG4gICAgICB9KVxuICAgIH0pLCAvKiNfX1BVUkVfXyovanN4KFwiYnV0dG9uXCIsIHtcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBvbkNsaWNrOiBvbkNsb3NlLFxuICAgICAgY2xhc3NOYW1lOiBcInczYS1oZWFkZXJfX2J1dHRvbiB3M2Fqcy1jbG9zZS1idG5cIixcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4KEljb24sIHtcbiAgICAgICAgaWNvbk5hbWU6IFwiY2xvc2VcIlxuICAgICAgfSlcbiAgICB9KV1cbiAgfSk7XG59XG5jb25zdCBtZW1vaXplZEhlYWRlciA9IC8qI19fUFVSRV9fKi9tZW1vKEhlYWRlciwgKHByZXZQcm9wcywgbmV4dFByb3BzKSA9PiB7XG4gIGlmIChwcmV2UHJvcHMuYXBwTG9nbyAhPT0gbmV4dFByb3BzLmFwcExvZ28pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KTtcbm1lbW9pemVkSGVhZGVyLmRpc3BsYXlOYW1lID0gXCJIZWFkZXJcIjtcblxuY29uc3QgZ2V0QWRhcHRlclNvY2lhbExvZ2lucyA9IGZ1bmN0aW9uIChhZGFwdGVyTmFtZSkge1xuICBsZXQgbG9naW5NZXRob2RzQ29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgY29uc3QgZmluYWxMb2dpbk1ldGhvZHNDb25maWcgPSB7fTtcbiAgaWYgKGFkYXB0ZXJOYW1lID09PSBXQUxMRVRfQURBUFRFUlMuT1BFTkxPR0lOKSB7XG4gICAgT1BFTkxPR0lOX1BST1ZJREVSUy5mb3JFYWNoKGxvZ2luTWV0aG9kID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRMb2dpbk1ldGhvZENvbmZpZyA9IGxvZ2luTWV0aG9kc0NvbmZpZ1tsb2dpbk1ldGhvZF0gfHwge1xuICAgICAgICBuYW1lOiBPUEVOTE9HSU5fUFJPVklERVJTX05BTUVTW2xvZ2luTWV0aG9kXSxcbiAgICAgICAgc2hvd09uTW9iaWxlOiB0cnVlLFxuICAgICAgICBzaG93T25Nb2RhbDogdHJ1ZSxcbiAgICAgICAgc2hvd09uRGVza3RvcDogdHJ1ZVxuICAgICAgfTtcbiAgICAgIGZpbmFsTG9naW5NZXRob2RzQ29uZmlnW2xvZ2luTWV0aG9kXSA9IF9vYmplY3RTcHJlYWQoe30sIGN1cnJlbnRMb2dpbk1ldGhvZENvbmZpZyk7XG4gICAgfSk7XG4gICAgbG9nLmRlYnVnKFwiT3BlbkxvZ2luIGxvZ2luIG1ldGhvZCB1aSBjb25maWdcIiwgZmluYWxMb2dpbk1ldGhvZHNDb25maWcpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHthZGFwdGVyTmFtZX0gaXMgbm90IGEgdmFsaWQgYWRhcHRlcmApO1xuICB9XG4gIHJldHVybiBmaW5hbExvZ2luTWV0aG9kc0NvbmZpZztcbn07XG5hc3luYyBmdW5jdGlvbiB2YWxpZGF0ZUltYWdlVXJsKHVybCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgIGltZy5zcmMgPSB1cmw7XG4gICAgaWYgKGltZy5jb21wbGV0ZSkge1xuICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgIH0pO1xuICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCAoKSA9PiB7XG4gICAgICAgIHJlamVjdCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldE5ldHdvcmtJY29uSWQodGlja2VyKSB7XG4gIGNvbnN0IGZhbGxiYWNrSWQgPSBcIm5ldHdvcmstZGVmYXVsdFwiO1xuICBpZiAoIXRpY2tlcikgcmV0dXJuIGZhbGxiYWNrSWQ7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gYGh0dHBzOi8vaW1hZ2VzLndlYjNhdXRoLmlvL25ldHdvcmstJHt0aWNrZXIudG9Mb3dlckNhc2UoKX0uc3ZnYDtcbiAgICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgdmFsaWRhdGVJbWFnZVVybCh1cmwpO1xuICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gYG5ldHdvcmstJHt0aWNrZXIudG9Mb3dlckNhc2UoKX1gO1xuICAgIH1cbiAgICByZXR1cm4gZmFsbGJhY2tJZDtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbGxiYWNrSWQ7XG4gIH1cbn1cbmNvbnN0IHBhc3N3b3JkbGVzc0JhY2tlbmRVcmwgPSBcImh0dHBzOi8vYXBpLXBhc3N3b3JkbGVzcy53ZWIzYXV0aC5pb1wiO1xuY29uc3QgZ2V0VXNlckNvdW50cnkgPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0KGAke3Bhc3N3b3JkbGVzc0JhY2tlbmRVcmx9L2FwaS92My91c2VyL2xvY2F0aW9uYCk7XG4gICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuZGF0YS5jb3VudHJ5KSByZXR1cm4ge1xuICAgICAgY291bnRyeTogcmVzdWx0LmRhdGEuY291bnRyeSxcbiAgICAgIGRpYWxDb2RlOiByZXN1bHQuZGF0YS5kaWFsX2NvZGVcbiAgICB9O1xuICAgIHJldHVybiBudWxsO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZy5lcnJvcihcImVycm9yIGdldHRpbmcgdXNlciBjb3VudHJ5XCIsIGVycm9yKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcbmNvbnN0IHZhbGlkYXRlUGhvbmVOdW1iZXIgPSBhc3luYyBwaG9uZU51bWJlciA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcG9zdChgJHtwYXNzd29yZGxlc3NCYWNrZW5kVXJsfS9hcGkvdjMvcGhvbmVfbnVtYmVyL3ZhbGlkYXRlYCwge1xuICAgICAgcGhvbmVfbnVtYmVyOiBwaG9uZU51bWJlclxuICAgIH0pO1xuICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnN1Y2Nlc3MpIHJldHVybiByZXN1bHQucGFyc2VkX251bWJlcjtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nLmVycm9yKFwiZXJyb3IgdmFsaWRhdGluZyBwaG9uZSBudW1iZXJcIiwgZXJyb3IpO1xuICAgIGlmIChlcnJvci5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBzZW5kaW5nIHRydWUgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRoZSB1c2VyIHRvIGJlIHN0dWNrIG9uIGEgZmxvd1xuICAgIC8vIGlmIHRoZXJlIGlzIGFuIGVycm9yIHdpdGggdGhlIGFwaSBvciBzb21ldGhpbmcgd2VudCB3cm9uZy5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbmNvbnN0IGxhbmd1YWdlTWFwID0ge1xuICBlbjogXCJlbmdsaXNoXCIsXG4gIGRlOiBcImdlcm1hblwiLFxuICBqYTogXCJqYXBhbmVzZVwiLFxuICBrbzogXCJrb3JlYW5cIixcbiAgemg6IFwibWFuZGFyaW5cIixcbiAgZXM6IFwic3BhbmlzaFwiLFxuICBmcjogXCJmcmVuY2hcIixcbiAgcHQ6IFwicG9ydHVndWVzZVwiLFxuICBubDogXCJkdXRjaFwiXG59O1xuY29uc3QgZ2V0VXNlckxhbmd1YWdlID0gZGVmYXVsdExhbmd1YWdlID0+IHtcbiAgbGV0IHVzZXJMYW5ndWFnZSA9IGRlZmF1bHRMYW5ndWFnZTtcbiAgaWYgKCF1c2VyTGFuZ3VhZ2UpIHtcbiAgICBjb25zdCBicm93c2VyTGFuZ3VhZ2UgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93Lm5hdmlnYXRvci51c2VyTGFuZ3VhZ2UgfHwgd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZSB8fCBcImVuLVVTXCIgOiBcImVuLVVTXCI7XG4gICAgdXNlckxhbmd1YWdlID0gYnJvd3Nlckxhbmd1YWdlLnNwbGl0KFwiLVwiKVswXTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGxhbmd1YWdlTWFwLCB1c2VyTGFuZ3VhZ2UpID8gdXNlckxhbmd1YWdlIDogXCJlblwiO1xufTtcblxuZnVuY3Rpb24gU29jaWFsTG9naW5QYXNzd29yZGxlc3MocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGhhbmRsZVNvY2lhbExvZ2luQ2xpY2ssXG4gICAgYWRhcHRlcixcbiAgICBpc1ByaW1hcnlCdG4sXG4gICAgaXNFbWFpbFZpc2libGUsXG4gICAgaXNTbXNWaXNpYmxlLFxuICAgIHByaW1hcnlDb2xvclxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHtcbiAgICBpc0RhcmtcbiAgfSA9IHVzZUNvbnRleHQoVGhlbWVkQ29udGV4dCk7XG4gIGNvbnN0IFtmaWVsZFZhbHVlLCBzZXRGaWVsZFZhbHVlXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbY291bnRyeUNvZGUsIHNldENvdW50cnlDb2RlXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbaXNWYWxpZElucHV0LCBzZXRJc1ZhbGlkSW5wdXRdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFt0XSA9IHVzZVRyYW5zbGF0aW9uKHVuZGVmaW5lZCwge1xuICAgIGkxOG46IGkxOG5JbnN0YW5jZVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IGFzeW5jIGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB2YWx1ZSA9IGZpZWxkVmFsdWU7XG4gICAgY29uc3QgaXNFbWFpbFZhbGlkID0gdmFsdWUubWF0Y2goL14oW1xcdy4lKy1dKylAKFtcXHctXStcXC4pKyhbXFx3XXsyLH0pJC9pKTtcbiAgICBpZiAoaXNFbWFpbFZhbGlkKSB7XG4gICAgICByZXR1cm4gaGFuZGxlU29jaWFsTG9naW5DbGljayh7XG4gICAgICAgIGFkYXB0ZXIsXG4gICAgICAgIGxvZ2luUGFyYW1zOiB7XG4gICAgICAgICAgbG9naW5Qcm92aWRlcjogTE9HSU5fUFJPVklERVIuRU1BSUxfUEFTU1dPUkRMRVNTLFxuICAgICAgICAgIGxvZ2luX2hpbnQ6IHZhbHVlLFxuICAgICAgICAgIG5hbWU6IFwiRW1haWxcIlxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgbnVtYmVyID0gdmFsdWUuc3RhcnRzV2l0aChcIitcIikgPyB2YWx1ZSA6IGAke2NvdW50cnlDb2RlfSR7dmFsdWV9YDtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0ZVBob25lTnVtYmVyKG51bWJlcik7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIGhhbmRsZVNvY2lhbExvZ2luQ2xpY2soe1xuICAgICAgICBhZGFwdGVyLFxuICAgICAgICBsb2dpblBhcmFtczoge1xuICAgICAgICAgIGxvZ2luUHJvdmlkZXI6IExPR0lOX1BST1ZJREVSLlNNU19QQVNTV09SRExFU1MsXG4gICAgICAgICAgbG9naW5faGludDogdHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIiA/IHJlc3VsdCA6IG51bWJlcixcbiAgICAgICAgICBuYW1lOiBcIk1vYmlsZVwiXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRJc1ZhbGlkSW5wdXQoZmFsc2UpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZ2V0TG9jYXRpb24gPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRVc2VyQ291bnRyeSgpO1xuICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuZGlhbENvZGUpIHtcbiAgICAgICAgc2V0Q291bnRyeUNvZGUocmVzdWx0LmRpYWxDb2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc1Ntc1Zpc2libGUpIGdldExvY2F0aW9uKCk7XG4gIH0sIFtpc1Ntc1Zpc2libGVdKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRDaGFuZ2UgPSBlID0+IHtcbiAgICBzZXRGaWVsZFZhbHVlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICBpZiAoaXNWYWxpZElucHV0ID09PSBmYWxzZSkgc2V0SXNWYWxpZElucHV0KG51bGwpO1xuICB9O1xuICBjb25zdCB0aXRsZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChpc0VtYWlsVmlzaWJsZSAmJiBpc1Ntc1Zpc2libGUpIHJldHVybiBcIm1vZGFsLnNvY2lhbC5wYXNzd29yZGxlc3MtdGl0bGVcIjtcbiAgICBpZiAoaXNFbWFpbFZpc2libGUpIHJldHVybiBcIm1vZGFsLnNvY2lhbC5lbWFpbFwiO1xuICAgIHJldHVybiBcIm1vZGFsLnNvY2lhbC5waG9uZVwiO1xuICB9LCBbaXNFbWFpbFZpc2libGUsIGlzU21zVmlzaWJsZV0pO1xuICBjb25zdCBwbGFjZWhvbGRlciA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChpc0VtYWlsVmlzaWJsZSAmJiBpc1Ntc1Zpc2libGUpIHJldHVybiBcIisoMDApMTIzNDU2L25hbWVAZXhhbXBsZS5jb21cIjtcbiAgICBpZiAoaXNFbWFpbFZpc2libGUpIHJldHVybiBcIm5hbWVAZXhhbXBsZS5jb21cIjtcbiAgICByZXR1cm4gXCIrKDAwKTEyMzQ1NlwiO1xuICB9LCBbaXNFbWFpbFZpc2libGUsIGlzU21zVmlzaWJsZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3M2Fqcy1wYXNzd29yZGxlc3MgdzNhLWdyb3VwIHczYS1ncm91cC0tcGFzc3dvcmRsZXNzXCIsXG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwidzNhLWdyb3VwX190aXRsZVwiLFxuICAgICAgY2hpbGRyZW46IFt0KHRpdGxlKSwgaXNTbXNWaXNpYmxlICYmIC8qI19fUFVSRV9fKi9qc3hzKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlbGF0aXZlIGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGN1cnNvci1wb2ludGVyIGdyb3VwXCIsXG4gICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL2pzeChJY29uLCB7XG4gICAgICAgICAgaWNvbk5hbWU6IGBpbmZvcm1hdGlvbi1jaXJjbGUke2lzRGFyayA/IFwiLWxpZ2h0XCIgOiBcIlwifWBcbiAgICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3hzKFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwiYWJzb2x1dGUgei0yMCBmbGV4LWNvbCBpdGVtcy1jZW50ZXIgaGlkZGVuIG1iLTUgdG9wLTQgZ3JvdXAtaG92ZXI6ZmxleFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidy0zIGgtMyBtbC1bM3B4XSAtbWItMiByb3RhdGUtNDUgYmctYXBwLWdyYXktNTAgZGFyazpiZy1hcHAtZ3JheS02MDBcIlxuICAgICAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwicmVsYXRpdmUgcC00IHctWzMwMHB4XSB0ZXh0LXhzIGxlYWRpbmctbm9uZSB0ZXh0LXdoaXRlIHJvdW5kZWQtbWQgYmctYXBwLWdyYXktNTAgZGFyazpiZy1hcHAtZ3JheS02MDAgc2hhZG93LWxnXCIsXG4gICAgICAgICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwibWItMSB0ZXh0LXhzIGZvbnQtbWVkaXVtIHRleHQtYXBwLWdyYXktOTAwIGRhcms6dGV4dC13aGl0ZVwiLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdChcIm1vZGFsLnBvcHVwLnBob25lLWhlYWRlclwiKVxuICAgICAgICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwidGV4dC14cyB0ZXh0LWFwcC1ncmF5LTQwMFwiLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdChcIm1vZGFsLnBvcHVwLnBob25lLWJvZHlcIilcbiAgICAgICAgICAgIH0pXVxuICAgICAgICAgIH0pXVxuICAgICAgICB9KV1cbiAgICAgIH0pXVxuICAgIH0pLCAvKiNfX1BVUkVfXyovanN4cyhcImZvcm1cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInczYWpzLXBhc3N3b3JkbGVzcy1mb3JtXCIsXG4gICAgICBvblN1Ym1pdDogZSA9PiBoYW5kbGVGb3JtU3VibWl0KGUpLFxuICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4KFwiaW5wdXRcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwidy1mdWxsIG1iLTQgdzNhLXRleHQtZmllbGRcIixcbiAgICAgICAgbmFtZTogXCJwYXNzd29yZGxlc3MtaW5wdXRcIixcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBgJHt0KFwibW9kYWwuc29jaWFsLnNtcy1wbGFjZWhvbGRlci10ZXh0XCIpfSAke3BsYWNlaG9sZGVyfWAsXG4gICAgICAgIG9uRm9jdXM6IGUgPT4gZS50YXJnZXQucGxhY2Vob2xkZXIgPSBcIlwiLFxuICAgICAgICBvbkJsdXI6IGUgPT4gZS50YXJnZXQucGxhY2Vob2xkZXIgPSBgJHt0KFwibW9kYWwuc29jaWFsLnNtcy1wbGFjZWhvbGRlci10ZXh0XCIpfSAke3BsYWNlaG9sZGVyfWAsXG4gICAgICAgIG9uQ2hhbmdlOiBlID0+IGhhbmRsZUlucHV0Q2hhbmdlKGUpXG4gICAgICB9KSwgaXNWYWxpZElucHV0ID09PSBmYWxzZSAmJiAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInczYS1zbXMtZmllbGQtLWVycm9yXCIsXG4gICAgICAgIGNoaWxkcmVuOiB0KFwibW9kYWwuZXJyb3JzLWludmFsaWQtbnVtYmVyLWVtYWlsXCIpXG4gICAgICB9KSwgLyojX19QVVJFX18qL2pzeChcImJ1dHRvblwiLCB7XG4gICAgICAgIGRpc2FibGVkOiBmaWVsZFZhbHVlID09PSBcIlwiLFxuICAgICAgICBjbGFzc05hbWU6IGB3M2EtYnV0dG9uICR7aXNQcmltYXJ5QnRuID8gXCJ3M2EtYnV0dG9uLS1wcmltYXJ5XCIgOiBcIlwifSB3LWZ1bGxgLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNQcmltYXJ5QnRuID8gcHJpbWFyeUNvbG9yIHx8IFwiXCIgOiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IFwic3VibWl0XCIsXG4gICAgICAgIGNoaWxkcmVuOiB0KFwibW9kYWwuc29jaWFsLnBhc3N3b3JkbGVzcy1jdGFcIilcbiAgICAgIH0pXVxuICAgIH0pXVxuICB9KTtcbn1cblxuZnVuY3Rpb24gU29jaWFsTG9naW5zKHByb3BzKSB7XG4gIGNvbnN0IFtjYW5TaG93TW9yZSwgc2V0Q2FuU2hvd01vcmVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbaXNFeHBhbmRlZCwgc2V0SXNFeHBhbmRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHtcbiAgICBzb2NpYWxMb2dpbnNDb25maWcgPSB7XG4gICAgICBsb2dpbk1ldGhvZHM6IHt9LFxuICAgICAgbG9naW5NZXRob2RzT3JkZXI6IFtdLFxuICAgICAgYWRhcHRlcjogXCJcIixcbiAgICAgIHVpQ29uZmlnOiB7fVxuICAgIH0sXG4gICAgaGFuZGxlU29jaWFsTG9naW5DbGlja1xuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHtcbiAgICBpc0RhcmtcbiAgfSA9IHVzZUNvbnRleHQoVGhlbWVkQ29udGV4dCk7XG4gIGNvbnN0IFt0XSA9IHVzZVRyYW5zbGF0aW9uKHVuZGVmaW5lZCwge1xuICAgIGkxOG46IGkxOG5JbnN0YW5jZVxuICB9KTtcblxuICAvLyBUb28gc21hbGwgYSBmdW5jdGlvbiB0byB1c2UgYHVzZUNhbGxiYWNrYFxuICBjb25zdCBleHBhbmRDbGlja0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgc2V0SXNFeHBhbmRlZCghaXNFeHBhbmRlZCk7XG4gIH07XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbWF4T3B0aW9ucyA9IE9iamVjdC5rZXlzKHNvY2lhbExvZ2luc0NvbmZpZy5sb2dpbk1ldGhvZHMpLmZpbHRlcihsb2dpbk1ldGhvZEtleSA9PiB7XG4gICAgICByZXR1cm4gc29jaWFsTG9naW5zQ29uZmlnLmxvZ2luTWV0aG9kc1tsb2dpbk1ldGhvZEtleV0uc2hvd09uTW9kYWw7XG4gICAgfSk7XG4gICAgc2V0Q2FuU2hvd01vcmUobWF4T3B0aW9ucy5sZW5ndGggPiA0KTtcbiAgfSwgW3NvY2lhbExvZ2luc0NvbmZpZy5sb2dpbk1ldGhvZHNdKTtcbiAgY29uc3QgYWRhcHRlckxpc3RDbGFzcyA9IGNsYXNzTmFtZXMoXCJ3M2EtYWRhcHRlci1saXN0XCIsIFwidzNhanMtc29jaWFscy1hZGFwdGVyc1wiLCAhaXNFeHBhbmRlZCA/IFwiIHczYS1hZGFwdGVyLWxpc3QtLXNocmlua1wiIDogXCJcIik7XG4gIGNvbnN0IGFkYXB0ZXJCdXR0b25DbGFzcyA9IGNsYXNzTmFtZXMoXCJ3M2EtYnV0dG9uLWV4cGFuZFwiLCBcInczYWpzLWJ1dHRvbi1leHBhbmRcIiwgaXNFeHBhbmRlZCA/IFwidzNhLWJ1dHRvbi0tcm90YXRlXCIgOiBcIlwiKTtcbiAgY29uc3QgYWRhcHRlckV4cGFuZFRleHQgPSBpc0V4cGFuZGVkID8gdChcIm1vZGFsLnNvY2lhbC52aWV3LWxlc3NcIikgOiB0KFwibW9kYWwuc29jaWFsLnZpZXctbW9yZVwiKTtcbiAgY29uc3QgbG9naW5NZXRob2RzQ291bnQgPSBPYmplY3Qua2V5cyhzb2NpYWxMb2dpbnNDb25maWcubG9naW5NZXRob2RzKS5sZW5ndGggKyAxO1xuICBjb25zdCByZXN0cmljdGVkTG9naW5NZXRob2RzID0gW0xPR0lOX1BST1ZJREVSLldFQkFVVEhOLCBMT0dJTl9QUk9WSURFUi5KV1QsIExPR0lOX1BST1ZJREVSLlNNU19QQVNTV09SRExFU1MsIExPR0lOX1BST1ZJREVSLkVNQUlMX1BBU1NXT1JETEVTU107XG4gIHJldHVybiAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcInczYWpzLXNvY2lhbC1sb2dpbnMgdzNhLWdyb3VwXCIsXG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4KFwidWxcIiwge1xuICAgICAgY2xhc3NOYW1lOiBhZGFwdGVyTGlzdENsYXNzLFxuICAgICAgY2hpbGRyZW46IE9iamVjdC5rZXlzKHNvY2lhbExvZ2luc0NvbmZpZy5sb2dpbk1ldGhvZHMpLm1hcChtZXRob2QgPT4ge1xuICAgICAgICB2YXIgX3NvY2lhbExvZ2luc0NvbmZpZyR1LCBfc29jaWFsTG9naW5zQ29uZmlnJHUyLCBfc29jaWFsTG9naW5zQ29uZmlnJHUzO1xuICAgICAgICBjb25zdCBuYW1lID0gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHNvY2lhbExvZ2luc0NvbmZpZy5sb2dpbk1ldGhvZHNbbWV0aG9kXS5uYW1lIHx8IG1ldGhvZCk7XG4gICAgICAgIGNvbnN0IG9yZGVySW5kZXggPSBzb2NpYWxMb2dpbnNDb25maWcubG9naW5NZXRob2RzT3JkZXIuaW5kZXhPZihtZXRob2QpICsgMTtcbiAgICAgICAgY29uc3Qgb3JkZXIgPSBvcmRlckluZGV4IHx8IE9iamVjdC5rZXlzKHNvY2lhbExvZ2luc0NvbmZpZy5sb2dpbk1ldGhvZHMpLmxlbmd0aCArIDE7XG4gICAgICAgIGNvbnN0IGlzTWFpbk9wdGlvbiA9IHNvY2lhbExvZ2luc0NvbmZpZy5sb2dpbk1ldGhvZHNbbWV0aG9kXS5tYWluT3B0aW9uO1xuICAgICAgICBjb25zdCBpc1ByaW1hcnlCdG4gPSAoc29jaWFsTG9naW5zQ29uZmlnID09PSBudWxsIHx8IHNvY2lhbExvZ2luc0NvbmZpZyA9PT0gdm9pZCAwIHx8IChfc29jaWFsTG9naW5zQ29uZmlnJHUgPSBzb2NpYWxMb2dpbnNDb25maWcudWlDb25maWcpID09PSBudWxsIHx8IF9zb2NpYWxMb2dpbnNDb25maWckdSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3NvY2lhbExvZ2luc0NvbmZpZyR1LnByaW1hcnlCdXR0b24pID09PSBcInNvY2lhbExvZ2luXCIgJiYgb3JkZXIgPT09IDE7XG4gICAgICAgIGNvbnN0IHByaW1hcnlDb2xvciA9IChzb2NpYWxMb2dpbnNDb25maWcgPT09IG51bGwgfHwgc29jaWFsTG9naW5zQ29uZmlnID09PSB2b2lkIDAgfHwgKF9zb2NpYWxMb2dpbnNDb25maWckdTIgPSBzb2NpYWxMb2dpbnNDb25maWcudWlDb25maWcpID09PSBudWxsIHx8IF9zb2NpYWxMb2dpbnNDb25maWckdTIgPT09IHZvaWQgMCB8fCAoX3NvY2lhbExvZ2luc0NvbmZpZyR1MiA9IF9zb2NpYWxMb2dpbnNDb25maWckdTIudGhlbWUpID09PSBudWxsIHx8IF9zb2NpYWxMb2dpbnNDb25maWckdTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zb2NpYWxMb2dpbnNDb25maWckdTIucHJpbWFyeSkgfHwgXCJcIjtcbiAgICAgICAgY29uc3QgaW1hZ2VJZCA9IGBsb2dpbi0ke21ldGhvZH0ke2lzRGFyayB8fCBpc1ByaW1hcnlCdG4gPyBcIi1saWdodFwiIDogXCItZGFya1wifWA7XG4gICAgICAgIGNvbnN0IGhvdmVySWQgPSBgbG9naW4tJHttZXRob2R9LWFjdGl2ZWA7XG4gICAgICAgIGNvbnN0IGhvdmVySW1hZ2UgPSBtZXRob2QgPT09IExPR0lOX1BST1ZJREVSLkFQUExFIHx8IG1ldGhvZCA9PT0gTE9HSU5fUFJPVklERVIuR0lUSFVCID8gaW1hZ2VJZCA6IGhvdmVySWQ7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVySWNvbiA9IC8qI19fUFVSRV9fKi9qc3goSW1hZ2UkMSwge1xuICAgICAgICAgIHdpZHRoOiBcIjIwXCIsXG4gICAgICAgICAgaW1hZ2VJZDogaW1hZ2VJZCxcbiAgICAgICAgICBob3ZlckltYWdlSWQ6IGhvdmVySW1hZ2UsXG4gICAgICAgICAgaXNCdXR0b246IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzb2NpYWxMb2dpbnNDb25maWcubG9naW5NZXRob2RzW21ldGhvZF0uc2hvd09uTW9kYWwgPT09IGZhbHNlIHx8IHJlc3RyaWN0ZWRMb2dpbk1ldGhvZHMuaW5jbHVkZXMobWV0aG9kKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvZ2luTWV0aG9kU3BhbiA9IGNsYXNzTmFtZXMoXCJ3M2EtYWRhcHRlci1pdGVtXCIsIChzb2NpYWxMb2dpbnNDb25maWcgPT09IG51bGwgfHwgc29jaWFsTG9naW5zQ29uZmlnID09PSB2b2lkIDAgfHwgKF9zb2NpYWxMb2dpbnNDb25maWckdTMgPSBzb2NpYWxMb2dpbnNDb25maWcudWlDb25maWcpID09PSBudWxsIHx8IF9zb2NpYWxMb2dpbnNDb25maWckdTMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zb2NpYWxMb2dpbnNDb25maWckdTMubG9naW5HcmlkQ29sKSA9PT0gMiA/IFwiY29sLXNwYW4tM1wiIDogXCJjb2wtc3Bhbi0yXCIpO1xuICAgICAgICBpZiAoaXNNYWluT3B0aW9uIHx8IG9yZGVyID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9qc3goXCJsaVwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwiY29sLXNwYW4tNiB3M2EtYWRhcHRlci1pdGVtXCIsXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBvcmRlclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4cyhcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IGhhbmRsZVNvY2lhbExvZ2luQ2xpY2soe1xuICAgICAgICAgICAgICAgIGFkYXB0ZXI6IHNvY2lhbExvZ2luc0NvbmZpZy5hZGFwdGVyLFxuICAgICAgICAgICAgICAgIGxvZ2luUGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICBsb2dpblByb3ZpZGVyOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgbG9naW5faGludDogXCJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogYHczYS1idXR0b24gJHtpc1ByaW1hcnlCdG4gPyBcInczYS1idXR0b24tLXByaW1hcnlcIiA6IFwiXCJ9IHczYS1idXR0b24tLWxvZ2luIGgtMTIgdy1mdWxsYCxcbiAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzUHJpbWFyeUJ0biA/IHByaW1hcnlDb2xvciA6IFwiXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdGl0bGU6IG5hbWUsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiBbcHJvdmlkZXJJY29uLCAvKiNfX1BVUkVfXyovanN4KFwicFwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm1sLTJcIixcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogdChcIm1vZGFsLnNvY2lhbC5jb250aW51ZUN1c3RvbVwiLCB7XG4gICAgICAgICAgICAgICAgICBhZGFwdGVyOiBuYW1lXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfSldXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0sIG1ldGhvZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9qc3goXCJsaVwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBsb2dpbk1ldGhvZFNwYW4sXG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIG9yZGVyOiBvcmRlciArIGxvZ2luTWV0aG9kc0NvdW50XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL2pzeChcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgb25DbGljazogKCkgPT4gaGFuZGxlU29jaWFsTG9naW5DbGljayh7XG4gICAgICAgICAgICAgIGFkYXB0ZXI6IHNvY2lhbExvZ2luc0NvbmZpZy5hZGFwdGVyLFxuICAgICAgICAgICAgICBsb2dpblBhcmFtczoge1xuICAgICAgICAgICAgICAgIGxvZ2luUHJvdmlkZXI6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIGxvZ2luX2hpbnQ6IFwiXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidy1mdWxsIHczYS1idXR0b24gdzNhLWJ1dHRvbi0tbG9naW5cIixcbiAgICAgICAgICAgIHRpdGxlOiBuYW1lLFxuICAgICAgICAgICAgY2hpbGRyZW46IHByb3ZpZGVySWNvblxuICAgICAgICAgIH0pXG4gICAgICAgIH0sIG1ldGhvZCk7XG4gICAgICB9KVxuICAgIH0pLCAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ3M2Etc29jaWFsX19wb2xpY3lcIixcbiAgICAgIGNoaWxkcmVuOiB0KFwibW9kYWwuc29jaWFsLnBvbGljeVwiKVxuICAgIH0pLCBjYW5TaG93TW9yZSAmJiAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ0ZXh0LXJpZ2h0XCIsXG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL2pzeChcImJ1dHRvblwiLCB7XG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIGNsYXNzTmFtZTogYWRhcHRlckJ1dHRvbkNsYXNzLFxuICAgICAgICBvbkNsaWNrOiBleHBhbmRDbGlja0hhbmRsZXIsXG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4KFwic3BhblwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInczYWpzLWJ1dHRvbi1leHBhbmQtdGV4dFwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBhZGFwdGVyRXhwYW5kVGV4dFxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KV1cbiAgfSk7XG59XG5cbmxvZy5lbmFibGVBbGwoKTtcblxuLy8gY29uc3QgREVUQUlMRURfQURBUFRFUlMgPSBbV0FMTEVUX0FEQVBURVJTLlBIQU5UT00sIFdBTExFVF9BREFQVEVSUy5NRVRBTUFTS107XG5cbmZ1bmN0aW9uIE1vZGFsKHByb3BzKSB7XG4gIHZhciBfbW9kYWxTdGF0ZSRzb2NpYWxMb2csIF9tb2RhbFN0YXRlJHNvY2lhbExvZzIsIF93aGl0ZUxhYmVsJHRoZW1lLCBfbW9kYWxTdGF0ZSRzb2NpYWxMb2c1LCBfbW9kYWxTdGF0ZSRzb2NpYWxMb2c3LCBfbW9kYWxTdGF0ZSRzb2NpYWxMb2c5LCBfbW9kYWxTdGF0ZSRzb2NpYWxMb2cxMDtcbiAgY29uc3QgW21vZGFsVHJhbnNpdGlvbkNsYXNzZXMsIHNldE1vZGFsVHJhbnNpdGlvbkNsYXNzZXNdID0gdXNlU3RhdGUoW1widzNhLW1vZGFsX19pbm5lclwiXSk7XG4gIGNvbnN0IFttb2RhbFN0YXRlLCBzZXRNb2RhbFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBleHRlcm5hbFdhbGxldHNWaXNpYmlsaXR5OiBmYWxzZSxcbiAgICBzdGF0dXM6IE1PREFMX1NUQVRVUy5JTklUSUFMSVpFRCxcbiAgICBoYXNFeHRlcm5hbFdhbGxldHM6IGZhbHNlLFxuICAgIGV4dGVybmFsV2FsbGV0c0luaXRpYWxpemVkOiBmYWxzZSxcbiAgICBtb2RhbFZpc2liaWxpdHk6IGZhbHNlLFxuICAgIG1vZGFsVmlzaWJpbGl0eURlbGF5ZWQ6IGZhbHNlLFxuICAgIHBvc3RMb2FkaW5nTWVzc2FnZTogXCJcIixcbiAgICB3YWxsZXRDb25uZWN0VXJpOiBcIlwiLFxuICAgIHNvY2lhbExvZ2luc0NvbmZpZzoge1xuICAgICAgbG9naW5NZXRob2RzOiB7fSxcbiAgICAgIGxvZ2luTWV0aG9kc09yZGVyOiBbXSxcbiAgICAgIGFkYXB0ZXI6IFwiXCIsXG4gICAgICB1aUNvbmZpZzoge31cbiAgICB9LFxuICAgIGV4dGVybmFsV2FsbGV0c0NvbmZpZzoge30sXG4gICAgZGV0YWlsZWRMb2FkZXJBZGFwdGVyOiBcIlwiLFxuICAgIGRldGFpbGVkTG9hZGVyQWRhcHRlck5hbWU6IFwiXCIsXG4gICAgc2hvd0V4dGVybmFsV2FsbGV0c09ubHk6IGZhbHNlLFxuICAgIHdjQWRhcHRlcnM6IFtdXG4gIH0pO1xuICBjb25zdCB7XG4gICAgaXNEYXJrXG4gIH0gPSB1c2VDb250ZXh0KFRoZW1lZENvbnRleHQpO1xuICBjb25zdCBbdF0gPSB1c2VUcmFuc2xhdGlvbih1bmRlZmluZWQsIHtcbiAgICBpMThuOiBpMThuSW5zdGFuY2VcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBzdGF0ZUxpc3RlbmVyLFxuICAgIGFwcExvZ28sXG4gICAgYXBwTmFtZSxcbiAgICBoYW5kbGVTb2NpYWxMb2dpbkNsaWNrLFxuICAgIGhhbmRsZUV4dGVybmFsV2FsbGV0Q2xpY2ssXG4gICAgaGFuZGxlU2hvd0V4dGVybmFsV2FsbGV0cyxcbiAgICBjbG9zZU1vZGFsLFxuICAgIHdoaXRlTGFiZWxcbiAgfSA9IHByb3BzO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHN0YXRlTGlzdGVuZXIuZW1pdChcIk1PVU5URURcIik7XG4gICAgc3RhdGVMaXN0ZW5lci5vbihcIlNUQVRFX1VQREFURURcIiwgbmV3TW9kYWxTdGF0ZSA9PiB7XG4gICAgICBsb2cuZGVidWcoXCJzdGF0ZSB1cGRhdGVkXCIsIG5ld01vZGFsU3RhdGUpO1xuICAgICAgc2V0TW9kYWxTdGF0ZShwcmV2U3RhdGUgPT4ge1xuICAgICAgICBjb25zdCBtZXJnZWRTdGF0ZSA9IGNsb25lRGVlcChkZWVwbWVyZ2UocHJldlN0YXRlLCBuZXdNb2RhbFN0YXRlKSk7XG4gICAgICAgIHJldHVybiBtZXJnZWRTdGF0ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCBbc3RhdGVMaXN0ZW5lcl0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCB0aW1lT3V0SWQ7XG4gICAgaWYgKG1vZGFsU3RhdGUubW9kYWxWaXNpYmlsaXR5KSB7XG4gICAgICBzZXRNb2RhbFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByZXZTdGF0ZSksIHt9LCB7XG4gICAgICAgICAgbW9kYWxWaXNpYmlsaXR5RGVsYXllZDogbW9kYWxTdGF0ZS5tb2RhbFZpc2liaWxpdHlcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRpbWVPdXRJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2V0TW9kYWxUcmFuc2l0aW9uQ2xhc3NlcyhbXCJ3M2EtbW9kYWxfX2lubmVyXCIsIG1vZGFsU3RhdGUubW9kYWxWaXNpYmlsaXR5ID8gXCJ3M2EtbW9kYWxfX2lubmVyLS1hY3RpdmVcIiA6IFwiXCJdKTtcbiAgICAgICAgLy8gaGlkZSBleHRlcm5hbCB3YWxsZXRzLCBpZiBtb2RhbCBpcyBjbG9zaW5nLCBzbyB0aGF0IGl0IHdpbGwgc2hvdyBzb2NpYWwgbG9naW4gc2NyZWVuIG9uIHJlb3Blbi5cbiAgICAgIH0sIDEwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldE1vZGFsVHJhbnNpdGlvbkNsYXNzZXMoW1widzNhLW1vZGFsX19pbm5lclwiLCBtb2RhbFN0YXRlLm1vZGFsVmlzaWJpbGl0eSA/IFwidzNhLW1vZGFsX19pbm5lci0tYWN0aXZlXCIgOiBcIlwiXSk7XG4gICAgICAvLyBoaWRlIGV4dGVybmFsIHdhbGxldHMsIGlmIG1vZGFsIGlzIGNsb3NpbmcsIHNvIHRoYXQgaXQgd2lsbCBzaG93IHNvY2lhbCBsb2dpbiBzY3JlZW4gb24gcmVvcGVuLlxuXG4gICAgICB0aW1lT3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldE1vZGFsU3RhdGUocHJldlN0YXRlID0+IHtcbiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcmV2U3RhdGUpLCB7fSwge1xuICAgICAgICAgICAgbW9kYWxWaXNpYmlsaXR5RGVsYXllZDogbW9kYWxTdGF0ZS5tb2RhbFZpc2liaWxpdHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9LCAyNTApO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVPdXRJZCk7XG4gICAgfTtcbiAgfSwgW21vZGFsU3RhdGUubW9kYWxWaXNpYmlsaXR5XSk7XG4gIGNvbnN0IG9uQ2xvc2VMb2FkZXIgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG1vZGFsU3RhdGUuc3RhdHVzID09PSBNT0RBTF9TVEFUVVMuQ09OTkVDVEVEKSB7XG4gICAgICBjbG9zZU1vZGFsKCk7XG4gICAgfVxuICAgIGlmIChtb2RhbFN0YXRlLnN0YXR1cyA9PT0gTU9EQUxfU1RBVFVTLkVSUk9SRUQpIHtcbiAgICAgIHNldE1vZGFsU3RhdGUocHJldlN0YXRlID0+IHtcbiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJldlN0YXRlKSwge30sIHtcbiAgICAgICAgICBtb2RhbFZpc2liaWxpdHk6IHRydWUsXG4gICAgICAgICAgc3RhdHVzOiBNT0RBTF9TVEFUVVMuSU5JVElBTElaRURcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtjbG9zZU1vZGFsLCBtb2RhbFN0YXRlLnN0YXR1c10pO1xuICBjb25zdCBwcmVIYW5kbGVFeHRlcm5hbFdhbGxldENsaWNrID0gdXNlQ2FsbGJhY2socGFyYW1zID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBhZGFwdGVyXG4gICAgfSA9IHBhcmFtcztcbiAgICBzZXRNb2RhbFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcmV2U3RhdGUpLCB7fSwge1xuICAgICAgICBkZXRhaWxlZExvYWRlckFkYXB0ZXI6IGFkYXB0ZXIsXG4gICAgICAgIGRldGFpbGVkTG9hZGVyQWRhcHRlck5hbWU6IEFEQVBURVJfTkFNRVNbYWRhcHRlcl1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGhhbmRsZUV4dGVybmFsV2FsbGV0Q2xpY2socGFyYW1zKTtcbiAgfSwgW2hhbmRsZUV4dGVybmFsV2FsbGV0Q2xpY2tdKTtcbiAgY29uc3QgcHJlSGFuZGxlU29jaWFsV2FsbGV0Q2xpY2sgPSBwYXJhbXMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGxvZ2luUGFyYW1zXG4gICAgfSA9IHBhcmFtcztcbiAgICBzZXRNb2RhbFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcmV2U3RhdGUpLCB7fSwge1xuICAgICAgICBkZXRhaWxlZExvYWRlckFkYXB0ZXI6IGxvZ2luUGFyYW1zLmxvZ2luUHJvdmlkZXIsXG4gICAgICAgIGRldGFpbGVkTG9hZGVyQWRhcHRlck5hbWU6IGxvZ2luUGFyYW1zLm5hbWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGhhbmRsZVNvY2lhbExvZ2luQ2xpY2socGFyYW1zKTtcbiAgfTtcbiAgY29uc3QgaXNFbWFpbFByaW1hcnkgPSAoKF9tb2RhbFN0YXRlJHNvY2lhbExvZyA9IG1vZGFsU3RhdGUuc29jaWFsTG9naW5zQ29uZmlnKSA9PT0gbnVsbCB8fCBfbW9kYWxTdGF0ZSRzb2NpYWxMb2cgPT09IHZvaWQgMCB8fCAoX21vZGFsU3RhdGUkc29jaWFsTG9nID0gX21vZGFsU3RhdGUkc29jaWFsTG9nLnVpQ29uZmlnKSA9PT0gbnVsbCB8fCBfbW9kYWxTdGF0ZSRzb2NpYWxMb2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tb2RhbFN0YXRlJHNvY2lhbExvZy5wcmltYXJ5QnV0dG9uKSA9PT0gXCJlbWFpbExvZ2luXCI7XG4gIGNvbnN0IGlzRXh0ZXJuYWxQcmltYXJ5ID0gKChfbW9kYWxTdGF0ZSRzb2NpYWxMb2cyID0gbW9kYWxTdGF0ZS5zb2NpYWxMb2dpbnNDb25maWcpID09PSBudWxsIHx8IF9tb2RhbFN0YXRlJHNvY2lhbExvZzIgPT09IHZvaWQgMCB8fCAoX21vZGFsU3RhdGUkc29jaWFsTG9nMiA9IF9tb2RhbFN0YXRlJHNvY2lhbExvZzIudWlDb25maWcpID09PSBudWxsIHx8IF9tb2RhbFN0YXRlJHNvY2lhbExvZzIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tb2RhbFN0YXRlJHNvY2lhbExvZzIucHJpbWFyeUJ1dHRvbikgPT09IFwiZXh0ZXJuYWxMb2dpblwiO1xuICBjb25zdCBwcmltYXJ5Q29sb3IgPSAod2hpdGVMYWJlbCA9PT0gbnVsbCB8fCB3aGl0ZUxhYmVsID09PSB2b2lkIDAgfHwgKF93aGl0ZUxhYmVsJHRoZW1lID0gd2hpdGVMYWJlbC50aGVtZSkgPT09IG51bGwgfHwgX3doaXRlTGFiZWwkdGhlbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF93aGl0ZUxhYmVsJHRoZW1lLnByaW1hcnkpIHx8IFwiXCI7XG4gIGNvbnN0IGV4dGVybmFsV2FsbGV0QnV0dG9uID0gLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcInczYWpzLWV4dGVybmFsLXdhbGxldCB3M2EtZ3JvdXBcIixcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInczYS1leHRlcm5hbC10b2dnbGUgdzNhanMtZXh0ZXJuYWwtdG9nZ2xlXCIsXG4gICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwidzNhLWdyb3VwX190aXRsZVwiLFxuICAgICAgICBjaGlsZHJlbjogdChcIm1vZGFsLmV4dGVybmFsLnRpdGxlXCIpXG4gICAgICB9KSwgLyojX19QVVJFX18qL2pzeChcImJ1dHRvblwiLCB7XG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIGNsYXNzTmFtZTogYHczYS1idXR0b24gJHtpc0V4dGVybmFsUHJpbWFyeSA/IFwidzNhLWJ1dHRvbi0tcHJpbWFyeVwiIDogXCJcIn0gdy1mdWxsIHczYWpzLWV4dGVybmFsLXRvZ2dsZV9fYnV0dG9uYCxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzRXh0ZXJuYWxQcmltYXJ5ID8gcHJpbWFyeUNvbG9yIDogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgaGFuZGxlU2hvd0V4dGVybmFsV2FsbGV0cyhtb2RhbFN0YXRlLmV4dGVybmFsV2FsbGV0c0luaXRpYWxpemVkKTtcbiAgICAgICAgICBzZXRNb2RhbFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcmV2U3RhdGUpLCB7fSwge1xuICAgICAgICAgICAgICBleHRlcm5hbFdhbGxldHNWaXNpYmlsaXR5OiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IHQoXCJtb2RhbC5leHRlcm5hbC5jb25uZWN0XCIpXG4gICAgICB9KV1cbiAgICB9KVxuICB9KTtcbiAgY29uc3QgYXJlU29jaWFsTG9naW5zVmlzaWJsZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHZhciBfbW9kYWxTdGF0ZSRzb2NpYWxMb2czLCBfbW9kYWxTdGF0ZSRzb2NpYWxMb2c0O1xuICAgIGlmIChtb2RhbFN0YXRlLnNob3dFeHRlcm5hbFdhbGxldHNPbmx5KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKE9iamVjdC5rZXlzKCgoX21vZGFsU3RhdGUkc29jaWFsTG9nMyA9IG1vZGFsU3RhdGUuc29jaWFsTG9naW5zQ29uZmlnKSA9PT0gbnVsbCB8fCBfbW9kYWxTdGF0ZSRzb2NpYWxMb2czID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbW9kYWxTdGF0ZSRzb2NpYWxMb2czLmxvZ2luTWV0aG9kcykgfHwge30pLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGlzQW55U29jaWFsTG9naW5WaXNpYmxlID0gT2JqZWN0LmVudHJpZXMoKChfbW9kYWxTdGF0ZSRzb2NpYWxMb2c0ID0gbW9kYWxTdGF0ZS5zb2NpYWxMb2dpbnNDb25maWcpID09PSBudWxsIHx8IF9tb2RhbFN0YXRlJHNvY2lhbExvZzQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tb2RhbFN0YXRlJHNvY2lhbExvZzQubG9naW5NZXRob2RzKSB8fCB7fSkuc29tZShfcmVmID0+IHtcbiAgICAgIGxldCBbaywgdl0gPSBfcmVmO1xuICAgICAgcmV0dXJuIGsgIT09IExPR0lOX1BST1ZJREVSLkVNQUlMX1BBU1NXT1JETEVTUyAmJiB2LnNob3dPbk1vZGFsICE9PSBmYWxzZTtcbiAgICB9KTtcbiAgICBpZiAoaXNBbnlTb2NpYWxMb2dpblZpc2libGUpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSwgW21vZGFsU3RhdGUuc2hvd0V4dGVybmFsV2FsbGV0c09ubHksIChfbW9kYWxTdGF0ZSRzb2NpYWxMb2c1ID0gbW9kYWxTdGF0ZS5zb2NpYWxMb2dpbnNDb25maWcpID09PSBudWxsIHx8IF9tb2RhbFN0YXRlJHNvY2lhbExvZzUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tb2RhbFN0YXRlJHNvY2lhbExvZzUubG9naW5NZXRob2RzXSk7XG4gIGxvZy5pbmZvKFwibW9kYWwgc3RhdGVcIiwgbW9kYWxTdGF0ZSwgYXJlU29jaWFsTG9naW5zVmlzaWJsZSk7XG4gIGNvbnN0IGlzRW1haWxQYXNzd29yZGxlc3NMb2dpblZpc2libGUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICB2YXIgX21vZGFsU3RhdGUkc29jaWFsTG9nNjtcbiAgICByZXR1cm4gKF9tb2RhbFN0YXRlJHNvY2lhbExvZzYgPSBtb2RhbFN0YXRlLnNvY2lhbExvZ2luc0NvbmZpZykgPT09IG51bGwgfHwgX21vZGFsU3RhdGUkc29jaWFsTG9nNiA9PT0gdm9pZCAwIHx8IChfbW9kYWxTdGF0ZSRzb2NpYWxMb2c2ID0gX21vZGFsU3RhdGUkc29jaWFsTG9nNi5sb2dpbk1ldGhvZHNbTE9HSU5fUFJPVklERVIuRU1BSUxfUEFTU1dPUkRMRVNTXSkgPT09IG51bGwgfHwgX21vZGFsU3RhdGUkc29jaWFsTG9nNiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX21vZGFsU3RhdGUkc29jaWFsTG9nNi5zaG93T25Nb2RhbDtcbiAgfSwgWyhfbW9kYWxTdGF0ZSRzb2NpYWxMb2c3ID0gbW9kYWxTdGF0ZS5zb2NpYWxMb2dpbnNDb25maWcpID09PSBudWxsIHx8IF9tb2RhbFN0YXRlJHNvY2lhbExvZzcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tb2RhbFN0YXRlJHNvY2lhbExvZzcubG9naW5NZXRob2RzXSk7XG4gIGNvbnN0IGlzU21zUGFzc3dvcmRsZXNzTG9naW5WaXNpYmxlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgdmFyIF9tb2RhbFN0YXRlJHNvY2lhbExvZzg7XG4gICAgcmV0dXJuIChfbW9kYWxTdGF0ZSRzb2NpYWxMb2c4ID0gbW9kYWxTdGF0ZS5zb2NpYWxMb2dpbnNDb25maWcpID09PSBudWxsIHx8IF9tb2RhbFN0YXRlJHNvY2lhbExvZzggPT09IHZvaWQgMCB8fCAoX21vZGFsU3RhdGUkc29jaWFsTG9nOCA9IF9tb2RhbFN0YXRlJHNvY2lhbExvZzgubG9naW5NZXRob2RzW0xPR0lOX1BST1ZJREVSLlNNU19QQVNTV09SRExFU1NdKSA9PT0gbnVsbCB8fCBfbW9kYWxTdGF0ZSRzb2NpYWxMb2c4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbW9kYWxTdGF0ZSRzb2NpYWxMb2c4LnNob3dPbk1vZGFsO1xuICB9LCBbKF9tb2RhbFN0YXRlJHNvY2lhbExvZzkgPSBtb2RhbFN0YXRlLnNvY2lhbExvZ2luc0NvbmZpZykgPT09IG51bGwgfHwgX21vZGFsU3RhdGUkc29jaWFsTG9nOSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX21vZGFsU3RhdGUkc29jaWFsTG9nOS5sb2dpbk1ldGhvZHNdKTtcblxuICAvLyBjb25zdCBtb2RhbENsYXNzTmFtZSA9IGB3M2EtbW9kYWwgJHtpc0RhcmsgPyBcIlwiIDogXCIgdzNhLW1vZGFsLS1saWdodFwifWA7XG4gIGNvbnN0IG1vZGFsQ2xhc3NOYW1lID0gYHczYS1tb2RhbCAke2lzRGFyayA/IFwiXCIgOiBcIlwifWA7XG4gIHJldHVybiBtb2RhbFN0YXRlLm1vZGFsVmlzaWJpbGl0eURlbGF5ZWQgJiYgLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgaWQ6IFwidzNhLW1vZGFsXCIsXG4gICAgY2xhc3NOYW1lOiBtb2RhbENsYXNzTmFtZSxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBtb2RhbFRyYW5zaXRpb25DbGFzc2VzLmpvaW4oXCIgXCIpLFxuICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4KG1lbW9pemVkSGVhZGVyLCB7XG4gICAgICAgIG9uQ2xvc2U6IGNsb3NlTW9kYWwsXG4gICAgICAgIGFwcExvZ286IGFwcExvZ28sXG4gICAgICAgIGFwcE5hbWU6IGFwcE5hbWVcbiAgICAgIH0pLCBtb2RhbFN0YXRlLnN0YXR1cyAhPT0gTU9EQUxfU1RBVFVTLklOSVRJQUxJWkVEID8gLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ3M2EtbW9kYWxfX2NvbnRlbnQgdzNhanMtY29udGVudFwiLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL2pzeChEZXRhaWxlZExvYWRlciwge1xuICAgICAgICAgIG9uQ2xvc2U6IG9uQ2xvc2VMb2FkZXIsXG4gICAgICAgICAgYXBwTG9nbzogYXBwTG9nbyxcbiAgICAgICAgICBtb2RhbFN0YXR1czogbW9kYWxTdGF0ZS5zdGF0dXMsXG4gICAgICAgICAgbWVzc2FnZTogdChtb2RhbFN0YXRlLnBvc3RMb2FkaW5nTWVzc2FnZSksXG4gICAgICAgICAgYWRhcHRlcjogbW9kYWxTdGF0ZS5kZXRhaWxlZExvYWRlckFkYXB0ZXIsXG4gICAgICAgICAgYWRhcHRlck5hbWU6IG1vZGFsU3RhdGUuZGV0YWlsZWRMb2FkZXJBZGFwdGVyTmFtZVxuICAgICAgICB9KVxuICAgICAgfSkgOiAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInczYS1tb2RhbF9fY29udGVudCB3M2Fqcy1jb250ZW50XCIsXG4gICAgICAgIGNoaWxkcmVuOiAoYXJlU29jaWFsTG9naW5zVmlzaWJsZSB8fCBpc0VtYWlsUGFzc3dvcmRsZXNzTG9naW5WaXNpYmxlIHx8IGlzU21zUGFzc3dvcmRsZXNzTG9naW5WaXNpYmxlKSAmJiAhbW9kYWxTdGF0ZS5leHRlcm5hbFdhbGxldHNWaXNpYmlsaXR5ID8gLyojX19QVVJFX18qL2pzeHMoRnJhZ21lbnQsIHtcbiAgICAgICAgICBjaGlsZHJlbjogW2FyZVNvY2lhbExvZ2luc1Zpc2libGUgPyAvKiNfX1BVUkVfXyovanN4KFNvY2lhbExvZ2lucywge1xuICAgICAgICAgICAgaGFuZGxlU29jaWFsTG9naW5DbGljazogcGFyYW1zID0+IHByZUhhbmRsZVNvY2lhbFdhbGxldENsaWNrKHBhcmFtcyksXG4gICAgICAgICAgICBzb2NpYWxMb2dpbnNDb25maWc6IG1vZGFsU3RhdGUuc29jaWFsTG9naW5zQ29uZmlnXG4gICAgICAgICAgfSkgOiBudWxsLCAoaXNFbWFpbFBhc3N3b3JkbGVzc0xvZ2luVmlzaWJsZSB8fCBpc1Ntc1Bhc3N3b3JkbGVzc0xvZ2luVmlzaWJsZSkgJiYgLyojX19QVVJFX18qL2pzeChTb2NpYWxMb2dpblBhc3N3b3JkbGVzcywge1xuICAgICAgICAgICAgaXNFbWFpbFZpc2libGU6IGlzRW1haWxQYXNzd29yZGxlc3NMb2dpblZpc2libGUsXG4gICAgICAgICAgICBpc1Ntc1Zpc2libGU6IGlzU21zUGFzc3dvcmRsZXNzTG9naW5WaXNpYmxlLFxuICAgICAgICAgICAgYWRhcHRlcjogKF9tb2RhbFN0YXRlJHNvY2lhbExvZzEwID0gbW9kYWxTdGF0ZS5zb2NpYWxMb2dpbnNDb25maWcpID09PSBudWxsIHx8IF9tb2RhbFN0YXRlJHNvY2lhbExvZzEwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbW9kYWxTdGF0ZSRzb2NpYWxMb2cxMC5hZGFwdGVyLFxuICAgICAgICAgICAgaGFuZGxlU29jaWFsTG9naW5DbGljazogcGFyYW1zID0+IHByZUhhbmRsZVNvY2lhbFdhbGxldENsaWNrKHBhcmFtcyksXG4gICAgICAgICAgICBpc1ByaW1hcnlCdG46IGlzRW1haWxQcmltYXJ5LFxuICAgICAgICAgICAgcHJpbWFyeUNvbG9yOiBwcmltYXJ5Q29sb3JcbiAgICAgICAgICB9KSwgbW9kYWxTdGF0ZS5oYXNFeHRlcm5hbFdhbGxldHMgJiYgZXh0ZXJuYWxXYWxsZXRCdXR0b25dXG4gICAgICAgIH0pIDogLyojX19QVVJFX18qL2pzeChFeHRlcm5hbFdhbGxldCwge1xuICAgICAgICAgIG1vZGFsU3RhdHVzOiBtb2RhbFN0YXRlLnN0YXR1cyxcbiAgICAgICAgICBzaG93QmFja0J1dHRvbjogYXJlU29jaWFsTG9naW5zVmlzaWJsZSxcbiAgICAgICAgICBoYW5kbGVFeHRlcm5hbFdhbGxldENsaWNrOiBwcmVIYW5kbGVFeHRlcm5hbFdhbGxldENsaWNrLFxuICAgICAgICAgIHdhbGxldENvbm5lY3RVcmk6IG1vZGFsU3RhdGUud2FsbGV0Q29ubmVjdFVyaSxcbiAgICAgICAgICB3Y0FkYXB0ZXJzOiBtb2RhbFN0YXRlLndjQWRhcHRlcnMsXG4gICAgICAgICAgY29uZmlnOiBtb2RhbFN0YXRlLmV4dGVybmFsV2FsbGV0c0NvbmZpZyxcbiAgICAgICAgICBoaWRlRXh0ZXJuYWxXYWxsZXRzOiAoKSA9PiBzZXRNb2RhbFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwcmV2U3RhdGUpLCB7fSwge1xuICAgICAgICAgICAgICBleHRlcm5hbFdhbGxldHNWaXNpYmlsaXR5OiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4KEZvb3RlciQxLCB7XG4gICAgICAgIHByaXZhY3lQb2xpY3k6IHdoaXRlTGFiZWwgPT09IG51bGwgfHwgd2hpdGVMYWJlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2hpdGVMYWJlbC5wcml2YWN5UG9saWN5LFxuICAgICAgICB0bmNMaW5rOiB3aGl0ZUxhYmVsID09PSBudWxsIHx8IHdoaXRlTGFiZWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdoaXRlTGFiZWwudG5jTGluayxcbiAgICAgICAgZGVmYXVsdExhbmd1YWdlOiB3aGl0ZUxhYmVsLmRlZmF1bHRMYW5ndWFnZVxuICAgICAgfSldXG4gICAgfSlcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdyYXBwZXIkMShwYXJlbnRaSW5kZXgpIHtcbiAgY29uc3QgZXhpc3RpbmdXcmFwcGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3M2EtcGFyZW50LWNvbnRhaW5lclwiKTtcbiAgaWYgKGV4aXN0aW5nV3JhcHBlcikgZXhpc3RpbmdXcmFwcGVyLnJlbW92ZSgpO1xuICBjb25zdCBwYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiKTtcbiAgcGFyZW50LmNsYXNzTGlzdC5hZGQoXCJ3M2EtcGFyZW50LWNvbnRhaW5lclwiKTtcbiAgcGFyZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIFwidzNhLXBhcmVudC1jb250YWluZXJcIik7XG4gIHBhcmVudC5zdHlsZS56SW5kZXggPSBwYXJlbnRaSW5kZXg7XG4gIHBhcmVudC5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWN0aW9uXCIpO1xuICB3cmFwcGVyLnNldEF0dHJpYnV0ZShcImlkXCIsIFwidzNhLWNvbnRhaW5lclwiKTtcbiAgcGFyZW50LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBhcmVudCk7XG4gIHJldHVybiB3cmFwcGVyO1xufVxuY2xhc3MgTG9naW5Nb2RhbCBleHRlbmRzIFNhZmVFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihfdWlDb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInVpQ29uZmlnXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic3RhdGVFbWl0dGVyXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5pdE1vZGFsXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGRhcmtTdGF0ZSA9IHtcbiAgICAgICAgaXNEYXJrOiB0aGlzLmlzRGFya1xuICAgICAgfTtcbiAgICAgIGNvbnN0IHVzZUxhbmcgPSB0aGlzLnVpQ29uZmlnLmRlZmF1bHRMYW5ndWFnZSB8fCBcImVuXCI7XG4gICAgICAvLyBMb2FkIG5ldyBsYW5ndWFnZSByZXNvdXJjZVxuXG4gICAgICBpZiAodXNlTGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgICAgIGltcG9ydCgnLi9nZXJtYW4tNGFlMmVlMzMuanMnKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICBpMThuSW5zdGFuY2UuYWRkUmVzb3VyY2VCdW5kbGUodXNlTGFuZywgXCJ0cmFuc2xhdGlvblwiLCBtZXNzYWdlcy5kZWZhdWx0KTtcbiAgICAgICAgICByZXR1cm4gaTE4bkluc3RhbmNlLmNoYW5nZUxhbmd1YWdlKHVzZUxhbmcpO1xuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHVzZUxhbmcgPT09IFwiamFcIikge1xuICAgICAgICBpbXBvcnQoJy4vamFwYW5lc2UtZTFhN2EwNmMuanMnKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICBpMThuSW5zdGFuY2UuYWRkUmVzb3VyY2VCdW5kbGUodXNlTGFuZywgXCJ0cmFuc2xhdGlvblwiLCBtZXNzYWdlcy5kZWZhdWx0KTtcbiAgICAgICAgICByZXR1cm4gaTE4bkluc3RhbmNlLmNoYW5nZUxhbmd1YWdlKHVzZUxhbmcpO1xuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHVzZUxhbmcgPT09IFwia29cIikge1xuICAgICAgICBpbXBvcnQoJy4va29yZWFuLTk1NjU4ZTEyLmpzJykudGhlbihtZXNzYWdlcyA9PiB7XG4gICAgICAgICAgaTE4bkluc3RhbmNlLmFkZFJlc291cmNlQnVuZGxlKHVzZUxhbmcsIFwidHJhbnNsYXRpb25cIiwgbWVzc2FnZXMuZGVmYXVsdCk7XG4gICAgICAgICAgcmV0dXJuIGkxOG5JbnN0YW5jZS5jaGFuZ2VMYW5ndWFnZSh1c2VMYW5nKTtcbiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIGxvZy5lcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh1c2VMYW5nID09PSBcInpoXCIpIHtcbiAgICAgICAgaW1wb3J0KCcuL21hbmRhcmluLTFlMzI1ODc2LmpzJykudGhlbihtZXNzYWdlcyA9PiB7XG4gICAgICAgICAgaTE4bkluc3RhbmNlLmFkZFJlc291cmNlQnVuZGxlKHVzZUxhbmcsIFwidHJhbnNsYXRpb25cIiwgbWVzc2FnZXMuZGVmYXVsdCk7XG4gICAgICAgICAgcmV0dXJuIGkxOG5JbnN0YW5jZS5jaGFuZ2VMYW5ndWFnZSh1c2VMYW5nKTtcbiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIGxvZy5lcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh1c2VMYW5nID09PSBcImVzXCIpIHtcbiAgICAgICAgaW1wb3J0KCcuL3NwYW5pc2gtNTRiYTgzZWEuanMnKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICBpMThuSW5zdGFuY2UuYWRkUmVzb3VyY2VCdW5kbGUodXNlTGFuZywgXCJ0cmFuc2xhdGlvblwiLCBtZXNzYWdlcy5kZWZhdWx0KTtcbiAgICAgICAgICByZXR1cm4gaTE4bkluc3RhbmNlLmNoYW5nZUxhbmd1YWdlKHVzZUxhbmcpO1xuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHVzZUxhbmcgPT09IFwiZnJcIikge1xuICAgICAgICBpbXBvcnQoJy4vZnJlbmNoLTNkODU3YmM1LmpzJykudGhlbihtZXNzYWdlcyA9PiB7XG4gICAgICAgICAgaTE4bkluc3RhbmNlLmFkZFJlc291cmNlQnVuZGxlKHVzZUxhbmcsIFwidHJhbnNsYXRpb25cIiwgbWVzc2FnZXMuZGVmYXVsdCk7XG4gICAgICAgICAgcmV0dXJuIGkxOG5JbnN0YW5jZS5jaGFuZ2VMYW5ndWFnZSh1c2VMYW5nKTtcbiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIGxvZy5lcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh1c2VMYW5nID09PSBcInB0XCIpIHtcbiAgICAgICAgaW1wb3J0KCcuL3BvcnR1Z3Vlc2UtYzEyOTNkNmEuanMnKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICBpMThuSW5zdGFuY2UuYWRkUmVzb3VyY2VCdW5kbGUodXNlTGFuZywgXCJ0cmFuc2xhdGlvblwiLCBtZXNzYWdlcy5kZWZhdWx0KTtcbiAgICAgICAgICByZXR1cm4gaTE4bkluc3RhbmNlLmNoYW5nZUxhbmd1YWdlKHVzZUxhbmcpO1xuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHVzZUxhbmcgPT09IFwibmxcIikge1xuICAgICAgICBpbXBvcnQoJy4vZHV0Y2gtOWExYWU1YzIuanMnKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICBpMThuSW5zdGFuY2UuYWRkUmVzb3VyY2VCdW5kbGUodXNlTGFuZywgXCJ0cmFuc2xhdGlvblwiLCBtZXNzYWdlcy5kZWZhdWx0KTtcbiAgICAgICAgICByZXR1cm4gaTE4bkluc3RhbmNlLmNoYW5nZUxhbmd1YWdlKHVzZUxhbmcpO1xuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGVFbWl0dGVyLm9uY2UoXCJNT1VOVEVEXCIsICgpID0+IHtcbiAgICAgICAgICBsb2cuaW5mbyhcInJlbmRlcmVkXCIpO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc3RhdHVzOiBNT0RBTF9TVEFUVVMuSU5JVElBTElaRURcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gY3JlYXRlV3JhcHBlciQxKHRoaXMudWlDb25maWcubW9kYWxaSW5kZXgpO1xuICAgICAgICBpZiAoZGFya1N0YXRlLmlzRGFyaykge1xuICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZGFya1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcImRhcmtcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm9vdCA9IGNyZWF0ZVJvb3QoY29udGFpbmVyKTtcbiAgICAgICAgcm9vdC5yZW5kZXIoIC8qI19fUFVSRV9fKi9qc3goVGhlbWVkQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICAgIHZhbHVlOiBkYXJrU3RhdGUsXG4gICAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3goTW9kYWwsIHtcbiAgICAgICAgICAgIGNsb3NlTW9kYWw6IHRoaXMuY2xvc2VNb2RhbCxcbiAgICAgICAgICAgIHN0YXRlTGlzdGVuZXI6IHRoaXMuc3RhdGVFbWl0dGVyLFxuICAgICAgICAgICAgaGFuZGxlU2hvd0V4dGVybmFsV2FsbGV0czogdGhpcy5oYW5kbGVTaG93RXh0ZXJuYWxXYWxsZXRzLFxuICAgICAgICAgICAgaGFuZGxlRXh0ZXJuYWxXYWxsZXRDbGljazogdGhpcy5oYW5kbGVFeHRlcm5hbFdhbGxldENsaWNrLFxuICAgICAgICAgICAgaGFuZGxlU29jaWFsTG9naW5DbGljazogdGhpcy5oYW5kbGVTb2NpYWxMb2dpbkNsaWNrLFxuICAgICAgICAgICAgYXBwTG9nbzogZGFya1N0YXRlLmlzRGFyayA/IHRoaXMudWlDb25maWcubG9nb0RhcmsgOiB0aGlzLnVpQ29uZmlnLmxvZ29MaWdodCxcbiAgICAgICAgICAgIGFwcE5hbWU6IHRoaXMudWlDb25maWcuYXBwTmFtZSxcbiAgICAgICAgICAgIHdoaXRlTGFiZWw6IHRoaXMudWlDb25maWdcbiAgICAgICAgICB9KVxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJhZGRTb2NpYWxMb2dpbnNcIiwgKGFkYXB0ZXIsIGxvZ2luTWV0aG9kcywgbG9naW5NZXRob2RzT3JkZXIsIHVpQ29uZmlnKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc29jaWFsTG9naW5zQ29uZmlnOiB7XG4gICAgICAgICAgYWRhcHRlcixcbiAgICAgICAgICBsb2dpbk1ldGhvZHMsXG4gICAgICAgICAgbG9naW5NZXRob2RzT3JkZXIsXG4gICAgICAgICAgdWlDb25maWdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBsb2cuaW5mbyhcImFkZFNvY2lhbExvZ2luc1wiLCBhZGFwdGVyLCBsb2dpbk1ldGhvZHMsIGxvZ2luTWV0aG9kc09yZGVyLCB1aUNvbmZpZyk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiYWRkV2FsbGV0TG9naW5zXCIsIChleHRlcm5hbFdhbGxldHNDb25maWcsIG9wdGlvbnMpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBleHRlcm5hbFdhbGxldHNDb25maWcsXG4gICAgICAgIGV4dGVybmFsV2FsbGV0c0luaXRpYWxpemVkOiB0cnVlLFxuICAgICAgICBzaG93RXh0ZXJuYWxXYWxsZXRzT25seTogISEob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5zaG93RXh0ZXJuYWxXYWxsZXRzT25seSksXG4gICAgICAgIGV4dGVybmFsV2FsbGV0c1Zpc2liaWxpdHk6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9wZW5cIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG1vZGFsVmlzaWJpbGl0eTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoTE9HSU5fTU9EQUxfRVZFTlRTLk1PREFMX1ZJU0lCSUxJVFksIHRydWUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNsb3NlTW9kYWxcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG1vZGFsVmlzaWJpbGl0eTogZmFsc2UsXG4gICAgICAgIGV4dGVybmFsV2FsbGV0c1Zpc2liaWxpdHk6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChMT0dJTl9NT0RBTF9FVkVOVFMuTU9EQUxfVklTSUJJTElUWSwgZmFsc2UpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImluaXRFeHRlcm5hbFdhbGxldENvbnRhaW5lclwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaGFzRXh0ZXJuYWxXYWxsZXRzOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJoYW5kbGVTaG93RXh0ZXJuYWxXYWxsZXRzXCIsIHN0YXR1cyA9PiB7XG4gICAgICB0aGlzLmVtaXQoTE9HSU5fTU9EQUxfRVZFTlRTLklOSVRfRVhURVJOQUxfV0FMTEVUUywge1xuICAgICAgICBleHRlcm5hbFdhbGxldHNJbml0aWFsaXplZDogc3RhdHVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJoYW5kbGVFeHRlcm5hbFdhbGxldENsaWNrXCIsIHBhcmFtcyA9PiB7XG4gICAgICBsb2cuaW5mbyhcImV4dGVybmFsIHdhbGxldCBjbGlja2VkXCIsIHBhcmFtcyk7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGFkYXB0ZXJcbiAgICAgIH0gPSBwYXJhbXM7XG4gICAgICB0aGlzLmVtaXQoTE9HSU5fTU9EQUxfRVZFTlRTLkxPR0lOLCB7XG4gICAgICAgIGFkYXB0ZXJcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImhhbmRsZVNvY2lhbExvZ2luQ2xpY2tcIiwgcGFyYW1zID0+IHtcbiAgICAgIGxvZy5pbmZvKFwic29jaWFsIGxvZ2luIGNsaWNrZWRcIiwgcGFyYW1zKTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYWRhcHRlcixcbiAgICAgICAgbG9naW5QYXJhbXNcbiAgICAgIH0gPSBwYXJhbXM7XG4gICAgICB0aGlzLmVtaXQoTE9HSU5fTU9EQUxfRVZFTlRTLkxPR0lOLCB7XG4gICAgICAgIGFkYXB0ZXIsXG4gICAgICAgIGxvZ2luUGFyYW1zOiB7XG4gICAgICAgICAgbG9naW5Qcm92aWRlcjogbG9naW5QYXJhbXMubG9naW5Qcm92aWRlcixcbiAgICAgICAgICBsb2dpbl9oaW50OiBsb2dpblBhcmFtcy5sb2dpbl9oaW50LFxuICAgICAgICAgIG5hbWU6IGxvZ2luUGFyYW1zLm5hbWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic2V0U3RhdGVcIiwgbmV3U3RhdGUgPT4ge1xuICAgICAgdGhpcy5zdGF0ZUVtaXR0ZXIuZW1pdChcIlNUQVRFX1VQREFURURcIiwgbmV3U3RhdGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInVwZGF0ZVdhbGxldENvbm5lY3RcIiwgKHdhbGxldENvbm5lY3RVcmksIHdjQWRhcHRlcnMpID0+IHtcbiAgICAgIGlmICghd2FsbGV0Q29ubmVjdFVyaSkgcmV0dXJuO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHdhbGxldENvbm5lY3RVcmksXG4gICAgICAgIHdjQWRhcHRlcnNcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImhhbmRsZUFkYXB0ZXJEYXRhXCIsIGFkYXB0ZXJEYXRhID0+IHtcbiAgICAgIGlmIChhZGFwdGVyRGF0YS5hZGFwdGVyTmFtZSA9PT0gV0FMTEVUX0FEQVBURVJTLldBTExFVF9DT05ORUNUX1YyKSB7XG4gICAgICAgIGNvbnN0IHdhbGxldENvbm5lY3REYXRhID0gYWRhcHRlckRhdGEuZGF0YTtcbiAgICAgICAgdGhpcy51cGRhdGVXYWxsZXRDb25uZWN0KHdhbGxldENvbm5lY3REYXRhLnVyaSwgd2FsbGV0Q29ubmVjdERhdGEuZXh0ZW5zaW9uQWRhcHRlcnMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN1YnNjcmliZUNvcmVFdmVudHNcIiwgbGlzdGVuZXIgPT4ge1xuICAgICAgbGlzdGVuZXIub24oQURBUFRFUl9FVkVOVFMuQ09OTkVDVElORywgZGF0YSA9PiB7XG4gICAgICAgIGxvZy5pbmZvKFwiY29ubmVjdGluZyB3aXRoIGFkYXB0ZXJcIiwgZGF0YSk7XG4gICAgICAgIC8vIGRvbid0IHNob3cgbG9hZGVyIGluIGNhc2Ugb2Ygd2FsbGV0IGNvbm5lY3QsIGJlY2F1c2UgY3VycmVudGx5IGl0IGxpc3RlbnMgZm9yIGluY29taW5nIGZvciBpbmNvbWluZ1xuICAgICAgICAvLyBjb25uZWN0aW9ucyB3aXRob3V0IGFueSB1c2VyIGludGVyYWN0aW9uLlxuICAgICAgICBpZiAoKGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5hZGFwdGVyKSAhPT0gV0FMTEVUX0FEQVBURVJTLldBTExFVF9DT05ORUNUX1YyKSB7XG4gICAgICAgICAgLy8gY29uc3QgcHJvdmlkZXIgPSBkYXRhPy5sb2dpblByb3ZpZGVyIHx8IFwiXCI7XG5cbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHN0YXR1czogTU9EQUxfU1RBVFVTLkNPTk5FQ1RJTkdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBsaXN0ZW5lci5vbihBREFQVEVSX0VWRU5UUy5DT05ORUNURUQsIGRhdGEgPT4ge1xuICAgICAgICBsb2cuZGVidWcoXCJjb25uZWN0ZWQgd2l0aCBhZGFwdGVyXCIsIGRhdGEpO1xuICAgICAgICAvLyBvbmx5IHNob3cgc3VjY2VzcyBpZiBub3QgYmVpbmcgcmVjb25uZWN0ZWQgYWdhaW4uXG4gICAgICAgIGlmICghZGF0YS5yZWNvbm5lY3RlZCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc3RhdHVzOiBNT0RBTF9TVEFUVVMuQ09OTkVDVEVELFxuICAgICAgICAgICAgbW9kYWxWaXNpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgICAgcG9zdExvYWRpbmdNZXNzYWdlOiBcIm1vZGFsLnBvc3QtbG9hZGluZy5jb25uZWN0ZWRcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc3RhdHVzOiBNT0RBTF9TVEFUVVMuQ09OTkVDVEVEXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbGlzdGVuZXIub24oQURBUFRFUl9FVkVOVFMuRVJST1JFRCwgZXJyb3IgPT4ge1xuICAgICAgICBsb2cuZXJyb3IoXCJlcnJvclwiLCBlcnJvciwgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIGlmIChlcnJvci5jb2RlID09PSA1MDAwKSB7XG4gICAgICAgICAgaWYgKHRoaXMudWlDb25maWcuZGlzcGxheUVycm9yc09uTW9kYWwpIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbW9kYWxWaXNpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgICAgcG9zdExvYWRpbmdNZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8IFwibW9kYWwucG9zdC1sb2FkaW5nLnNvbWV0aGluZy13cm9uZ1wiLFxuICAgICAgICAgICAgc3RhdHVzOiBNT0RBTF9TVEFUVVMuRVJST1JFRFxuICAgICAgICAgIH0pO2Vsc2UgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBtb2RhbFZpc2liaWxpdHk6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBtb2RhbFZpc2liaWxpdHk6IHRydWUsXG4gICAgICAgICAgICBzdGF0dXM6IE1PREFMX1NUQVRVUy5JTklUSUFMSVpFRFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGxpc3RlbmVyLm9uKEFEQVBURVJfRVZFTlRTLkRJU0NPTk5FQ1RFRCwgKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IE1PREFMX1NUQVRVUy5JTklUSUFMSVpFRCxcbiAgICAgICAgICBleHRlcm5hbFdhbGxldHNWaXNpYmlsaXR5OiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gdGhpcy50b2dnbGVNZXNzYWdlKFwiXCIpO1xuICAgICAgfSk7XG5cbiAgICAgIGxpc3RlbmVyLm9uKEFEQVBURVJfRVZFTlRTLkFEQVBURVJfREFUQV9VUERBVEVELCBhZGFwdGVyRGF0YSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlQWRhcHRlckRhdGEoYWRhcHRlckRhdGEpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy51aUNvbmZpZyA9IF91aUNvbmZpZztcbiAgICBpZiAoIV91aUNvbmZpZy5sb2dvRGFyaykgdGhpcy51aUNvbmZpZy5sb2dvRGFyayA9IERFRkFVTFRfTE9HT19EQVJLO1xuICAgIGlmICghX3VpQ29uZmlnLmxvZ29MaWdodCkgdGhpcy51aUNvbmZpZy5sb2dvTGlnaHQgPSBERUZBVUxUX0xPR09fTElHSFQ7XG4gICAgaWYgKCFfdWlDb25maWcubW9kZSkgdGhpcy51aUNvbmZpZy5tb2RlID0gXCJhdXRvXCI7XG4gICAgaWYgKCFfdWlDb25maWcubW9kYWxaSW5kZXgpIHRoaXMudWlDb25maWcubW9kYWxaSW5kZXggPSBcIjk5OTk4XCI7XG4gICAgaWYgKHR5cGVvZiBfdWlDb25maWcuZGlzcGxheUVycm9yc09uTW9kYWwgPT09IFwidW5kZWZpbmVkXCIpIHRoaXMudWlDb25maWcuZGlzcGxheUVycm9yc09uTW9kYWwgPSB0cnVlO1xuICAgIGlmICghX3VpQ29uZmlnLmRlZmF1bHRMYW5ndWFnZSkgdGhpcy51aUNvbmZpZy5kZWZhdWx0TGFuZ3VhZ2UgPSBcImVuXCI7XG4gICAgaWYgKCFfdWlDb25maWcuYXBwTmFtZSkgdGhpcy51aUNvbmZpZy5hcHBOYW1lID0gXCJXZWIzQXV0aFwiO1xuICAgIGlmICghX3VpQ29uZmlnLmxvZ2luR3JpZENvbCkgdGhpcy51aUNvbmZpZy5sb2dpbkdyaWRDb2wgPSAzO1xuICAgIGlmICghX3VpQ29uZmlnLnByaW1hcnlCdXR0b24pIHRoaXMudWlDb25maWcucHJpbWFyeUJ1dHRvbiA9IFwic29jaWFsTG9naW5cIjtcbiAgICBpZiAoIV91aUNvbmZpZy5kZWZhdWx0TGFuZ3VhZ2UpIHRoaXMudWlDb25maWcuZGVmYXVsdExhbmd1YWdlID0gZ2V0VXNlckxhbmd1YWdlKF91aUNvbmZpZy5kZWZhdWx0TGFuZ3VhZ2UpO1xuICAgIHRoaXMuc3RhdGVFbWl0dGVyID0gbmV3IFNhZmVFdmVudEVtaXR0ZXIoKTtcbiAgICB0aGlzLnN1YnNjcmliZUNvcmVFdmVudHModGhpcy51aUNvbmZpZy5hZGFwdGVyTGlzdGVuZXIpO1xuICB9XG4gIGdldCBpc0RhcmsoKSB7XG4gICAgcmV0dXJuIHRoaXMudWlDb25maWcubW9kZSA9PT0gXCJkYXJrXCIgfHwgdGhpcy51aUNvbmZpZy5tb2RlID09PSBcImF1dG9cIiAmJiB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaylcIikubWF0Y2hlcztcbiAgfVxufVxuXG52YXIgY3NzXzI0OHogPSBcIkBmb250LWZhY2V7Zm9udC1mYW1pbHk6UG9wcGlucztmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo2MDA7c3JjOnVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvcG9wcGlucy92MTUvcHhpQnlwOGt2OEpIZ0ZWckxFajZaMTFsRmQySlFFbDhxdy53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6dSswOTAwLTA5N2YsdSsxY2QwLTFjZjYsdSsxY2Y4LTFjZjksdSsyMDBjLTIwMGQsdSsyMGE4LHUrMjBiOSx1KzI1Y2MsdSthODMwLWE4MzksdSthOGUwLWE4ZmJ9QGZvbnQtZmFjZXtmb250LWZhbWlseTpQb3BwaW5zO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjYwMDtzcmM6dXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9wb3BwaW5zL3YxNS9weGlCeXA4a3Y4SkhnRlZyTEVqNloxSmxGZDJKUUVsOHF3LndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTp1KzAxMDAtMDI0Zix1KzAyNTksdSsxZT8/LHUrMjAyMCx1KzIwYTAtMjBhYix1KzIwYWQtMjBjZix1KzIxMTMsdSsyYzYwLTJjN2YsdSthNzIwLWE3ZmZ9QGZvbnQtZmFjZXtmb250LWZhbWlseTpQb3BwaW5zO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjYwMDtzcmM6dXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9wb3BwaW5zL3YxNS9weGlCeXA4a3Y4SkhnRlZyTEVqNloxeGxGZDJKUUVrLndvZmYyKSBmb3JtYXQoXFxcIndvZmYyXFxcIik7dW5pY29kZS1yYW5nZTp1KzAwPz8sdSswMTMxLHUrMDE1Mi0wMTUzLHUrMDJiYi0wMmJjLHUrMDJjNix1KzAyZGEsdSswMmRjLHUrMjAwMC0yMDZmLHUrMjA3NCx1KzIwYWMsdSsyMTIyLHUrMjE5MSx1KzIxOTMsdSsyMjEyLHUrMjIxNSx1K2ZlZmYsdStmZmZkfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6RE0gU2Fucztmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo0MDA7c3JjOnVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvZG1zYW5zL3Y2L3JQMkhwMnl3eGcwODlVcmlDWjJJSFRXRUJsd3U4US53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6dSswMTAwLTAyNGYsdSswMjU5LHUrMWU/Pyx1KzIwMjAsdSsyMGEwLTIwYWIsdSsyMGFkLTIwY2YsdSsyMTEzLHUrMmM2MC0yYzdmLHUrYTcyMC1hN2ZmfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6RE0gU2Fucztmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo0MDA7c3JjOnVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvZG1zYW5zL3Y2L3JQMkhwMnl3eGcwODlVcmlDWk9JSFRXRUJsdy53b2ZmMikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpO3VuaWNvZGUtcmFuZ2U6dSswMD8/LHUrMDEzMSx1KzAxNTItMDE1Myx1KzAyYmItMDJiYyx1KzAyYzYsdSswMmRhLHUrMDJkYyx1KzIwMDAtMjA2Zix1KzIwNzQsdSsyMGFjLHUrMjEyMix1KzIxOTEsdSsyMTkzLHUrMjIxMix1KzIyMTUsdStmZWZmLHUrZmZmZH0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1uZXR3b3JrLW1vZGFsey0tYmcxOiNmZmY7LS1iZzI6I2Y5ZjlmYjstLXRleHQtY29sb3IxOiNhMmE1YjU7LS10ZXh0LWNvbG9yMjojNWM2YzdmOy0tdGV4dC1oZWFkZXI6XFxcIlBvcHBpbnNcXFwiLEhlbHZldGljYSxzYW5zLXNlcmlmOy0tdGV4dC1ib2R5OlxcXCJETSBTYW5zXFxcIixIZWx2ZXRpY2Esc2Fucy1zZXJpZjtiYWNrZ3JvdW5kOiMwMDA7Y29sb3I6dmFyKC0tdGV4dC1jb2xvcjEpO2hlaWdodDoxMDB2aDtsZWZ0OjA7cGFkZGluZzoxNXB4O3Bvc2l0aW9uOmZpeGVkO3RvcDowO3dpZHRoOjEwMHZ3fS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW5ldHdvcmstbW9kYWwsLnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbmV0d29yay1tb2RhbCBidXR0b24udzNhLWJ1dHRvbnthbGlnbi1pdGVtczpjZW50ZXI7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6ZmxleDtmb250LWZhbWlseTp2YXIoLS10ZXh0LWJvZHkpO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbmV0d29yay1tb2RhbCBidXR0b24udzNhLWJ1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjZjNmM2Y0O2JvcmRlci1yYWRpdXM6MjRweDtib3gtc2hhZG93Om5vbmU7Y29sb3I6I2I3YjhiZDtjdXJzb3I6cG9pbnRlcjtmb250LXNpemU6MTZweDtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo0MDA7aGVpZ2h0OjQ4cHg7cGFkZGluZzo4cHg7d2lkdGg6MTAwJX0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1uZXR3b3JrLW1vZGFsIC53M2Etc3dpdGNoLW5ldHdvcmt7YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQ6I2Y5ZjlmYjtib3JkZXItcmFkaXVzOjEwcHg7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Zm9udC1mYW1pbHk6dmFyKC0tdGV4dC1ib2R5KTtwYWRkaW5nOjIwcHg7d2lkdGg6Mzc1cHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbmV0d29yay1tb2RhbCAudzNhLXN3aXRjaC1uZXR3b3JrX190aXRsZXtjb2xvcjp2YXIoLS10ZXh0LWNvbG9yMik7Zm9udC1mYW1pbHk6dmFyKC0tdGV4dC1oZWFkZXIpO2ZvbnQtc2l6ZToyMHB4O21hcmdpbi1ib3R0b206MTZweDt0ZXh0LWFsaWduOmNlbnRlcn0udzNhLXBhcmVudC1jb250YWluZXIgI3czYS1uZXR3b3JrLW1vZGFsIC53M2Etc3dpdGNoLW5ldHdvcmtfX2xpbmt7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlci1yYWRpdXM6MTJweDtjb2xvcjojYjdiOGJkO2ZvbnQtc2l6ZToxMnB4O2hlaWdodDoyNHB4O3BhZGRpbmc6NHB4IDE2cHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbmV0d29yay1tb2RhbCAudzNhLXN3aXRjaC1uZXR3b3JrX19jb25uZWN0e2Rpc3BsYXk6ZmxleDttYXJnaW46NDBweCBhdXRvIDB9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbmV0d29yay1tb2RhbCAudzNhLXN3aXRjaC1uZXR3b3JrX19jb25uZWN0PmRpdntjb2xvcjp2YXIoLS10ZXh0LWNvbG9yMik7Zm9udC1zaXplOjEwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LnczYS1wYXJlbnQtY29udGFpbmVyIC53M2Etc3dpdGNoLW5ldHdvcmtfX2Nvbm5lY3QtZGl2aWRlcnttYXJnaW4tdG9wOjIwcHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbmV0d29yay1tb2RhbCAudzNhLXN3aXRjaC1uZXR3b3JrX19sb2dve2FsaWduLWl0ZW1zOmNlbnRlcjtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyLXJhZGl1czo1MCU7Ym94LXNoYWRvdzoycHggMnB4IDEycHggIzAzNjRmZjBkO2Rpc3BsYXk6ZmxleDtoZWlnaHQ6NThweDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21hcmdpbjowIGF1dG8gNnB4O3dpZHRoOjU4cHh9LnczYS1wYXJlbnQtY29udGFpbmVyICN3M2EtbmV0d29yay1tb2RhbCAudzNhLXN3aXRjaC1uZXR3b3JrX19sb2dvIGltZ3toZWlnaHQ6MzRweDt3aWR0aDozNHB4fS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW5ldHdvcmstbW9kYWwgLnczYS1zd2l0Y2gtbmV0d29ya19fYnV0dG9uc3tjb2x1bW4tZ2FwOjE2cHg7ZGlzcGxheTpmbGV4O21hcmdpbi10b3A6NjBweDt3aWR0aDoxMDAlfS53M2EtcGFyZW50LWNvbnRhaW5lciAjdzNhLW5ldHdvcmstbW9kYWwgLnczYS1idXR0b24udzNhLWJ1dHRvbi0tcHJpbWFyeXtiYWNrZ3JvdW5kLWNvbG9yOiMwMzY0ZmY7Y29sb3I6I2ZmZn1cIjtcbnN0eWxlSW5qZWN0KGNzc18yNDh6KTtcblxuZnVuY3Rpb24gQWRkTmV0d29yayhwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2hhaW5Db25maWcsXG4gICAgYXBwT3JpZ2luLFxuICAgIG9uQWRkTmV0d29yayxcbiAgICBvbkNhbmNlbE5ldHdvcmtcbiAgfSA9IHByb3BzO1xuICBjb25zdCBbc2hvd01vZGFsLCBzZXRTaG93TW9kYWxdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFtuZXR3b3JrSWNvbklkLCBzZXROZXR3b3JrSWNvbklkXSA9IHVzZVN0YXRlKFwibmV0d29yay1kZWZhdWx0XCIpO1xuICBjb25zdCBbdF0gPSB1c2VUcmFuc2xhdGlvbih1bmRlZmluZWQsIHtcbiAgICBpMThuOiBpMThuSW5zdGFuY2VcbiAgfSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZ2V0TmV0d29ya0ljb25JZChjaGFpbkNvbmZpZy50aWNrZXIpLnRoZW4oaWQgPT4ge1xuICAgICAgcmV0dXJuIHNldE5ldHdvcmtJY29uSWQoaWQpO1xuICAgIH0pLmNhdGNoKCgpID0+IHt9KTtcbiAgfSwgW2NoYWluQ29uZmlnLnRpY2tlcl0pO1xuICByZXR1cm4gc2hvd01vZGFsICYmIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgIGlkOiBcInczYS1tb2RhbC1uZXR3b3JrXCIsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3hzKFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJ3M2Etc3dpdGNoLW5ldHdvcmtcIixcbiAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ3M2Etc3dpdGNoLW5ldHdvcmtfX3RpdGxlXCIsXG4gICAgICAgIGNoaWxkcmVuOiB0KFwibW9kYWwubmV0d29yay5hZGQtcmVxdWVzdFwiKVxuICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL2pzeChcImFcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2Etc3dpdGNoLW5ldHdvcmtfX2xpbmtcIixcbiAgICAgICAgICBocmVmOiBhcHBPcmlnaW4sXG4gICAgICAgICAgY2hpbGRyZW46IGFwcE9yaWdpblxuICAgICAgICB9KVxuICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwidzNhLXN3aXRjaC1uZXR3b3JrX19jb25uZWN0XCIsXG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2Etc3dpdGNoLW5ldHdvcmtfX2xvZ29cIixcbiAgICAgICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4KEltYWdlJDEsIHtcbiAgICAgICAgICAgICAgaW1hZ2VJZDogbmV0d29ya0ljb25JZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KSwgLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuOiBjaGFpbkNvbmZpZy5kaXNwbGF5TmFtZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KV1cbiAgICAgICAgfSlcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ3M2Etc3dpdGNoLW5ldHdvcmtfX2J1dHRvbnNcIixcbiAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2EtYnV0dG9uXCIsXG4gICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgc2V0U2hvd01vZGFsKGZhbHNlKTtcbiAgICAgICAgICAgIG9uQ2FuY2VsTmV0d29yaygpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hpbGRyZW46IHQoXCJtb2RhbC5uZXR3b3JrLmNhbmNlbFwiKVxuICAgICAgICB9KSwgLyojX19QVVJFX18qL2pzeChcImJ1dHRvblwiLCB7XG4gICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICBjbGFzc05hbWU6IFwidzNhLWJ1dHRvbiB3M2EtYnV0dG9uLS1wcmltYXJ5XCIsXG4gICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgc2V0U2hvd01vZGFsKGZhbHNlKTtcbiAgICAgICAgICAgIG9uQWRkTmV0d29yayhjaGFpbkNvbmZpZy5jaGFpbklkKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkcmVuOiB0KFwibW9kYWwubmV0d29yay5wcm9jZWVkXCIpXG4gICAgICAgIH0pXVxuICAgICAgfSldXG4gICAgfSlcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIFN3aXRjaE5ldHdvcmsocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnRDaGFpbkNvbmZpZyxcbiAgICBuZXdDaGFpbkNvbmZpZyxcbiAgICBhcHBPcmlnaW4sXG4gICAgb25Td2l0Y2hOZXR3b3JrLFxuICAgIG9uQ2FuY2VsTmV0d29ya1xuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtzaG93TW9kYWwsIHNldFNob3dNb2RhbF0gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgW2Zyb21OZXR3b3JrSWNvbklkLCBzZXRGcm9tTmV0d29ya0ljb25JZF0gPSB1c2VTdGF0ZShcIm5ldHdvcmstZGVmYXVsdFwiKTtcbiAgY29uc3QgW3RvTmV0d29ya0ljb25JZCwgc2V0VG9OZXR3b3JrSWNvbklkXSA9IHVzZVN0YXRlKFwibmV0d29yay1kZWZhdWx0XCIpO1xuICBjb25zdCBbdF0gPSB1c2VUcmFuc2xhdGlvbih1bmRlZmluZWQsIHtcbiAgICBpMThuOiBpMThuSW5zdGFuY2VcbiAgfSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZ2V0TmV0d29ya0ljb25JZChjdXJyZW50Q2hhaW5Db25maWcudGlja2VyKS50aGVuKGlkID0+IHtcbiAgICAgIHJldHVybiBzZXRGcm9tTmV0d29ya0ljb25JZChpZCk7XG4gICAgfSkuY2F0Y2goKCkgPT4ge30pO1xuICAgIGdldE5ldHdvcmtJY29uSWQobmV3Q2hhaW5Db25maWcudGlja2VyKS50aGVuKGlkID0+IHtcbiAgICAgIHJldHVybiBzZXRUb05ldHdvcmtJY29uSWQoaWQpO1xuICAgIH0pLmNhdGNoKCgpID0+IHt9KTtcbiAgfSwgW2N1cnJlbnRDaGFpbkNvbmZpZy5jaGFpbklkLCBjdXJyZW50Q2hhaW5Db25maWcudGlja2VyLCBuZXdDaGFpbkNvbmZpZy5jaGFpbklkLCBuZXdDaGFpbkNvbmZpZy50aWNrZXJdKTtcbiAgcmV0dXJuIHNob3dNb2RhbCAmJiAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICBpZDogXCJ3M2EtbW9kYWwtbmV0d29ya1wiLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwidzNhLXN3aXRjaC1uZXR3b3JrXCIsXG4gICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwidzNhLXN3aXRjaC1uZXR3b3JrX190aXRsZVwiLFxuICAgICAgICBjaGlsZHJlbjogdChcIm1vZGFsLm5ldHdvcmsuc3dpdGNoLXJlcXVlc3RcIilcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3goXCJhXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwidzNhLXN3aXRjaC1uZXR3b3JrX19saW5rXCIsXG4gICAgICAgICAgaHJlZjogYXBwT3JpZ2luLFxuICAgICAgICAgIGNoaWxkcmVuOiBhcHBPcmlnaW5cbiAgICAgICAgfSlcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ3M2Etc3dpdGNoLW5ldHdvcmtfX2Nvbm5lY3RcIixcbiAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2Etc3dpdGNoLW5ldHdvcmtfX2xvZ29cIixcbiAgICAgICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4KEltYWdlJDEsIHtcbiAgICAgICAgICAgICAgaW1hZ2VJZDogZnJvbU5ldHdvcmtJY29uSWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3hzKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjaGlsZHJlbjogW3QoXCJtb2RhbC5uZXR3b3JrLmZyb21cIiksIFwiOlwiXVxuICAgICAgICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjaGlsZHJlbjogY3VycmVudENoYWluQ29uZmlnLmRpc3BsYXlOYW1lXG4gICAgICAgICAgICB9KV1cbiAgICAgICAgICB9KV1cbiAgICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovanN4KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2Etc3dpdGNoLW5ldHdvcmtfX2Nvbm5lY3QtZGl2aWRlclwiLFxuICAgICAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3goSW1hZ2UkMSwge1xuICAgICAgICAgICAgICBpbWFnZUlkOiBcIm5ldHdvcmstYXJyb3dcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KSwgLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidzNhLXN3aXRjaC1uZXR3b3JrX19sb2dvXCIsXG4gICAgICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL2pzeChJbWFnZSQxLCB7XG4gICAgICAgICAgICAgIGltYWdlSWQ6IHRvTmV0d29ya0ljb25JZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KSwgLyojX19QVVJFX18qL2pzeHMoXCJkaXZcIiwge1xuICAgICAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuOiBbdChcIm1vZGFsLm5ldHdvcmsudG9cIiksIFwiOlwiXVxuICAgICAgICAgICAgfSksIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjaGlsZHJlbjogbmV3Q2hhaW5Db25maWcuZGlzcGxheU5hbWVcbiAgICAgICAgICAgIH0pXVxuICAgICAgICAgIH0pXVxuICAgICAgICB9KV1cbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovanN4cyhcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ3M2Etc3dpdGNoLW5ldHdvcmtfX2J1dHRvbnNcIixcbiAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovanN4KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJ3M2EtYnV0dG9uXCIsXG4gICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgc2V0U2hvd01vZGFsKGZhbHNlKTtcbiAgICAgICAgICAgIG9uQ2FuY2VsTmV0d29yaygpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hpbGRyZW46IHQoXCJtb2RhbC5uZXR3b3JrLmNhbmNlbFwiKVxuICAgICAgICB9KSwgLyojX19QVVJFX18qL2pzeChcImJ1dHRvblwiLCB7XG4gICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICBjbGFzc05hbWU6IFwidzNhLWJ1dHRvbiB3M2EtYnV0dG9uLS1wcmltYXJ5XCIsXG4gICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgc2V0U2hvd01vZGFsKGZhbHNlKTtcbiAgICAgICAgICAgIG9uU3dpdGNoTmV0d29yayhjdXJyZW50Q2hhaW5Db25maWcuY2hhaW5JZCwgbmV3Q2hhaW5Db25maWcuY2hhaW5JZCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGlsZHJlbjogdChcIm1vZGFsLm5ldHdvcmsucHJvY2VlZFwiKVxuICAgICAgICB9KV1cbiAgICAgIH0pXVxuICAgIH0pXG4gIH0pO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG5mdW5jdGlvbiBjcmVhdGVXcmFwcGVyKGlkKSB7XG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCB8fCBcInczYS1uZXR3b3JrLWNvbnRhaW5lclwiKTtcbiAgaWYgKGVsZW1lbnQpIHJldHVybiBlbGVtZW50O1xuICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIik7XG4gIHdyYXBwZXIuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQgfHwgXCJ3M2EtbmV0d29yay1jb250YWluZXJcIik7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG4gIHJldHVybiB3cmFwcGVyO1xufVxuY2xhc3MgTmV0d29ya1N3aXRjaCBleHRlbmRzIEJhc2VOZXR3b3JrU3dpdGNoIHtcbiAgYXN5bmMgYWRkTmV0d29yayhwYXJhbXMpIHtcbiAgICBjb25zdCB7XG4gICAgICBjaGFpbkNvbmZpZyxcbiAgICAgIGFwcE9yaWdpblxuICAgIH0gPSBwYXJhbXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGFkZE5ldHdvcmtDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG4gICAgICB9O1xuICAgICAgY29uc3QgY2FuY2VsQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKFwiVXNlciBjYW5jZWxsZWQgcmVxdWVzdCBmb3IgYWRkaW5nIG5ldyBuZXR3b3JrXCIpKTtcbiAgICAgIH07XG4gICAgICBjb25zdCBjb250YWluZXIgPSBjcmVhdGVXcmFwcGVyKFwidzNhLWFkZC1uZXR3b3JrLWNvbnRhaW5lclwiKTtcbiAgICAgIGNvbnN0IG5ldHdvcmtSb290ID0gY3JlYXRlUm9vdChjb250YWluZXIpO1xuICAgICAgbmV0d29ya1Jvb3QucmVuZGVyKCAvKiNfX1BVUkVfXyovanN4KEFkZE5ldHdvcmssIHtcbiAgICAgICAgYXBwT3JpZ2luOiBhcHBPcmlnaW4sXG4gICAgICAgIGNoYWluQ29uZmlnOiBjaGFpbkNvbmZpZyxcbiAgICAgICAgb25BZGROZXR3b3JrOiBhZGROZXR3b3JrQ2FsbGJhY2ssXG4gICAgICAgIG9uQ2FuY2VsTmV0d29yazogY2FuY2VsQ2FsbGJhY2tcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBzd2l0Y2hOZXR3b3JrKHBhcmFtcykge1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnRDaGFpbkNvbmZpZyxcbiAgICAgIGFwcE9yaWdpbixcbiAgICAgIG5ld0NoYWluQ29uZmlnXG4gICAgfSA9IHBhcmFtcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3Qgc3dpdGNoTmV0d29ya0NhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcbiAgICAgIH07XG4gICAgICBjb25zdCBjYW5jZWxDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJVc2VyIGNhbmNlbGxlZCByZXF1ZXN0IGZvciBhZGRpbmcgbmV3IG5ldHdvcmtcIikpO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IG5ldHdvcmtTd2l0Y2hDb250YWluZXIgPSBjcmVhdGVXcmFwcGVyKFwidzNhLXN3aXRjaC1uZXR3b3JrLWNvbnRhaW5lclwiKTtcbiAgICAgIGNvbnN0IG5ldHdvcmtSb290ID0gY3JlYXRlUm9vdChuZXR3b3JrU3dpdGNoQ29udGFpbmVyKTtcbiAgICAgIG5ldHdvcmtSb290LnJlbmRlciggLyojX19QVVJFX18qL2pzeChTd2l0Y2hOZXR3b3JrLCB7XG4gICAgICAgIGFwcE9yaWdpbjogYXBwT3JpZ2luLFxuICAgICAgICBjdXJyZW50Q2hhaW5Db25maWc6IGN1cnJlbnRDaGFpbkNvbmZpZyxcbiAgICAgICAgbmV3Q2hhaW5Db25maWc6IG5ld0NoYWluQ29uZmlnLFxuICAgICAgICBvblN3aXRjaE5ldHdvcms6IHN3aXRjaE5ldHdvcmtDYWxsYmFjayxcbiAgICAgICAgb25DYW5jZWxOZXR3b3JrOiBjYW5jZWxDYWxsYmFja1xuICAgICAgfSkpO1xuICAgIH0pO1xuICB9XG4gIGNhbmNlbCgpIHt9XG59XG5cbmV4cG9ydCB7IERFRkFVTFRfTE9HT19EQVJLLCBERUZBVUxUX0xPR09fTElHSFQsIExPR0lOX01PREFMX0VWRU5UUywgTG9naW5Nb2RhbCwgTU9EQUxfU1RBVFVTLCBOZXR3b3JrU3dpdGNoLCBPUEVOTE9HSU5fUFJPVklERVJTLCBPUEVOTE9HSU5fUFJPVklERVJTX05BTUVTLCBXQUxMRVRfQ09OTkVDVF9MT0dPLCBjYXBpdGFsaXplRmlyc3RMZXR0ZXIsIExvZ2luTW9kYWwgYXMgZGVmYXVsdCwgZ2V0QWRhcHRlclNvY2lhbExvZ2lucywgZ2V0TmV0d29ya0ljb25JZCwgZ2V0VXNlckNvdW50cnksIGdldFVzZXJMYW5ndWFnZSwgbGFuZ3VhZ2VNYXAsIHBhc3N3b3JkbGVzc0JhY2tlbmRVcmwsIHZhbGlkYXRlSW1hZ2VVcmwsIHZhbGlkYXRlUGhvbmVOdW1iZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIkxPR0lOX1BST1ZJREVSIiwiX2RlZmluZVByb3BlcnR5IiwiU2FmZUV2ZW50RW1pdHRlciIsImxvZyIsIkFEQVBURVJfU1RBVFVTIiwiV0FMTEVUX0FEQVBURVJTIiwiQURBUFRFUl9OQU1FUyIsIkFEQVBURVJfRVZFTlRTIiwiQmFzZU5ldHdvcmtTd2l0Y2giLCJjcmVhdGVSb290IiwiX29iamVjdFNwcmVhZCIsImNsb25lRGVlcCIsImRlZXBtZXJnZSIsImNyZWF0ZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJtZW1vIiwidXNlU3RhdGUiLCJ1c2VNZW1vIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwiaW5pdFJlYWN0STE4bmV4dCIsInVzZVRyYW5zbGF0aW9uIiwiaTE4biIsImpzeCIsImpzeHMiLCJGcmFnbWVudCIsImJvd3NlciIsImNvcHlUb0NsaXBib2FyZCIsIlFSQ29kZSIsImdldCIsInBvc3QiLCJjbGFzc05hbWVzIiwiY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIiwic3RyaW5nIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsIk9QRU5MT0dJTl9QUk9WSURFUlMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmaWx0ZXIiLCJ4IiwiV0VCQVVUSE4iLCJKV1QiLCJPUEVOTE9HSU5fUFJPVklERVJTX05BTUVTIiwicmVkdWNlIiwiYWNjIiwiTE9HSU5fTU9EQUxfRVZFTlRTIiwiSU5JVF9FWFRFUk5BTF9XQUxMRVRTIiwiTE9HSU4iLCJESVNDT05ORUNUIiwiTU9EQUxfVklTSUJJTElUWSIsIk1PREFMX1NUQVRVUyIsIklOSVRJQUxJWkVEIiwiQ09OTkVDVEVEIiwiQ09OTkVDVElORyIsIkVSUk9SRUQiLCJERUZBVUxUX0xPR09fTElHSFQiLCJERUZBVUxUX0xPR09fREFSSyIsIldBTExFVF9DT05ORUNUX0xPR08iLCJzdHlsZUluamVjdCIsImNzcyIsInJlZiIsImluc2VydEF0IiwiZG9jdW1lbnQiLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiZmlyc3RDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsImNzc18yNDh6JDEiLCJUaGVtZWRDb250ZXh0IiwiaXNEYXJrIiwibW9kYWwiLCJlbiIsImkxOG5JbnN0YW5jZSIsImNyZWF0ZUluc3RhbmNlIiwidXNlIiwiaW5pdCIsInJlc291cmNlcyIsInRyYW5zbGF0aW9uIiwibG5nIiwiZmFsbGJhY2tMbmciLCJpbnRlcnBvbGF0aW9uIiwiZXNjYXBlVmFsdWUiLCJkZWJ1ZyIsInJlYWN0IiwidXNlU3VzcGVuc2UiLCJDaXJjbGVBcnJvd0xlZnQiLCJDbG9zZSIsIkNvbm5lY3RlZCIsIkV4cGFuZCIsIkV4cGFuZExpZ2h0IiwiSW5mb0NpcmNsZSIsIkluZm9DaXJjbGVMaWdodCIsImljb25zIiwiaW1hZ2UiLCJjbG9zZSIsImV4cGFuZCIsImNvbm5lY3RlZCIsIkljb24iLCJwcm9wcyIsImljb25OYW1lIiwiaWNvblRpdGxlIiwiaGVpZ2h0Iiwid2lkdGgiLCJjbGFzc05hbWUiLCJzcmMiLCJhbHQiLCJ0aXRsZSIsIkltYWdlJDEiLCJob3ZlckltYWdlSWQiLCJpbWFnZUlkIiwiaXNCdXR0b24iLCJjaGlsZHJlbiIsImNsb3NlSWNvbiQxIiwiRGV0YWlsZWRMb2FkZXIiLCJhZGFwdGVyIiwiYXBwTG9nbyIsIm1lc3NhZ2UiLCJtb2RhbFN0YXR1cyIsImFkYXB0ZXJOYW1lIiwib25DbG9zZSIsIndlYjNhdXRoSWNvbiIsInByb3ZpZGVySWNvbiIsInQiLCJ1bmRlZmluZWQiLCJpc0RlZmF1bHRMb2dvIiwiaW5jbHVkZXMiLCJzZXRUaW1lb3V0Iiwiam9pbiIsIm9uQ2xpY2siLCJjbG9zZUljb24iLCJMb2FkZXIiLCJsYWJlbCIsImNhbkVtaXQiLCJXYWxsZXRDb25uZWN0Iiwid2FsbGV0Q29ubmVjdFVyaSIsInRhYkluZGV4Iiwicm9sZSIsIm9uS2V5RG93biIsInNpemUiLCJleWVSYWRpdXMiLCJxclN0eWxlIiwicmVtb3ZlUXJDb2RlQmVoaW5kTG9nbyIsImxvZ29JbWFnZSIsInZhbHVlIiwiV2FsbGV0Q29ubmVjdCQxIiwiZm9ybWF0SU9TTW9iaWxlIiwicGFyYW1zIiwiZW5jb2RlZFVyaSIsImVuY29kZVVSSUNvbXBvbmVudCIsInVyaSIsInVuaXZlcnNhbExpbmsiLCJkZWVwTGluayIsImVuZHNXaXRoIiwiZm9ybWF0TW9iaWxlUmVnaXN0cnlFbnRyeSIsImVudHJ5Iiwib3MiLCJwbGF0Zm9ybSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuaXZlcnNhbCIsIm5hdGl2ZSIsIm5hbWUiLCJsb2dvIiwiaHJlZiIsIk9TX01BUCIsImlPUyIsImZvcm1hdE1vYmlsZVJlZ2lzdHJ5IiwicmVnaXN0cnkiLCJtYXAiLCJFeHRlcm5hbFdhbGxldCIsImhpZGVFeHRlcm5hbFdhbGxldHMiLCJoYW5kbGVFeHRlcm5hbFdhbGxldENsaWNrIiwiY29uZmlnIiwic2hvd0JhY2tCdXR0b24iLCJ3Y0FkYXB0ZXJzIiwiaXNMb2FkZWQiLCJzZXRJc0xvYWRlZCIsImFkYXB0ZXJWaXNpYmlsaXR5TWFwIiwic2V0QWRhcHRlclZpc2liaWxpdHlNYXAiLCJleHRlcm5hbEJ1dHRvbnMiLCJzZXRFeHRlcm5hbEJ1dHRvbnMiLCJkZXZpY2VUeXBlIiwiYnJvd3NlciIsImdldFBhcnNlciIsIndpbmRvdyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImdldFBsYXRmb3JtVHlwZSIsImRldmljZURldGFpbHMiLCJnZXRPU05hbWUiLCJfY29uZmlnJHdhbGxldENvbm5lY3QiLCJ3YWxsZXRDb25uZWN0QWRhcHRlck5hbWUiLCJXQUxMRVRfQ09OTkVDVF9WMiIsIndjQXZhaWxhYmxlIiwic2hvd09uTW9kYWwiLCJrZXlzIiwiY2FuU2hvd01hcCIsImZvckVhY2giLCJhZGFwdGVyQ29uZmlnIiwic2hvd09uRGVza3RvcCIsInNob3dPbk1vYmlsZSIsImJ1dHRvbnMiLCJQTEFURk9STVNfTUFQIiwibW9iaWxlIiwibW9iaWxlTGlua3MiLCJfd2luZG93JGV0aGVyZXVtIiwiZXRoZXJldW0iLCJpc01ldGFNYXNrIiwicHVzaCIsImxpbmsiLCJpc0xpbmsiLCJibG9jayIsImFkYXB0ZXJCdG5zIiwiZGVza3RvcCIsImJ1dHRvbiIsIl9jb25maWckYnV0dG9uJG5hbWUiLCJfY29uZmlnJGJ1dHRvbiRuYW1lMiIsImlzQmxvY2siLCJyZWwiLCJ0YXJnZXQiLCJGb290ZXIiLCJwcml2YWN5UG9saWN5IiwidG5jTGluayIsImRlZmF1bHRMYW5ndWFnZSIsImdldFByaXZhY3lVcmwiLCJnZXRUbmNVcmwiLCJGb290ZXIkMSIsIkhlYWRlciIsImFwcE5hbWUiLCJoZWFkZXJMb2dvIiwibWVtb2l6ZWRIZWFkZXIiLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldEFkYXB0ZXJTb2NpYWxMb2dpbnMiLCJsb2dpbk1ldGhvZHNDb25maWciLCJmaW5hbExvZ2luTWV0aG9kc0NvbmZpZyIsIk9QRU5MT0dJTiIsImxvZ2luTWV0aG9kIiwiY3VycmVudExvZ2luTWV0aG9kQ29uZmlnIiwiRXJyb3IiLCJ2YWxpZGF0ZUltYWdlVXJsIiwidXJsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpbWciLCJJbWFnZSIsImNvbXBsZXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldE5ldHdvcmtJY29uSWQiLCJ0aWNrZXIiLCJmYWxsYmFja0lkIiwidG9Mb3dlckNhc2UiLCJpc1ZhbGlkIiwicGFzc3dvcmRsZXNzQmFja2VuZFVybCIsImdldFVzZXJDb3VudHJ5IiwicmVzdWx0IiwiZGF0YSIsImNvdW50cnkiLCJkaWFsQ29kZSIsImRpYWxfY29kZSIsImVycm9yIiwidmFsaWRhdGVQaG9uZU51bWJlciIsInBob25lTnVtYmVyIiwicGhvbmVfbnVtYmVyIiwic3VjY2VzcyIsInBhcnNlZF9udW1iZXIiLCJzdGF0dXMiLCJsYW5ndWFnZU1hcCIsImRlIiwiamEiLCJrbyIsInpoIiwiZXMiLCJmciIsInB0IiwibmwiLCJnZXRVc2VyTGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJicm93c2VyTGFuZ3VhZ2UiLCJsYW5ndWFnZSIsInNwbGl0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU29jaWFsTG9naW5QYXNzd29yZGxlc3MiLCJoYW5kbGVTb2NpYWxMb2dpbkNsaWNrIiwiaXNQcmltYXJ5QnRuIiwiaXNFbWFpbFZpc2libGUiLCJpc1Ntc1Zpc2libGUiLCJwcmltYXJ5Q29sb3IiLCJmaWVsZFZhbHVlIiwic2V0RmllbGRWYWx1ZSIsImNvdW50cnlDb2RlIiwic2V0Q291bnRyeUNvZGUiLCJpc1ZhbGlkSW5wdXQiLCJzZXRJc1ZhbGlkSW5wdXQiLCJoYW5kbGVGb3JtU3VibWl0IiwiZSIsInByZXZlbnREZWZhdWx0IiwiaXNFbWFpbFZhbGlkIiwibWF0Y2giLCJsb2dpblBhcmFtcyIsImxvZ2luUHJvdmlkZXIiLCJFTUFJTF9QQVNTV09SRExFU1MiLCJsb2dpbl9oaW50IiwibnVtYmVyIiwic3RhcnRzV2l0aCIsIlNNU19QQVNTV09SRExFU1MiLCJnZXRMb2NhdGlvbiIsImhhbmRsZUlucHV0Q2hhbmdlIiwicGxhY2Vob2xkZXIiLCJvblN1Ym1pdCIsInJlcXVpcmVkIiwib25Gb2N1cyIsIm9uQmx1ciIsIm9uQ2hhbmdlIiwiZGlzYWJsZWQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJTb2NpYWxMb2dpbnMiLCJjYW5TaG93TW9yZSIsInNldENhblNob3dNb3JlIiwiaXNFeHBhbmRlZCIsInNldElzRXhwYW5kZWQiLCJzb2NpYWxMb2dpbnNDb25maWciLCJsb2dpbk1ldGhvZHMiLCJsb2dpbk1ldGhvZHNPcmRlciIsInVpQ29uZmlnIiwiZXhwYW5kQ2xpY2tIYW5kbGVyIiwibWF4T3B0aW9ucyIsImxvZ2luTWV0aG9kS2V5IiwiYWRhcHRlckxpc3RDbGFzcyIsImFkYXB0ZXJCdXR0b25DbGFzcyIsImFkYXB0ZXJFeHBhbmRUZXh0IiwibG9naW5NZXRob2RzQ291bnQiLCJyZXN0cmljdGVkTG9naW5NZXRob2RzIiwibWV0aG9kIiwiX3NvY2lhbExvZ2luc0NvbmZpZyR1IiwiX3NvY2lhbExvZ2luc0NvbmZpZyR1MiIsIl9zb2NpYWxMb2dpbnNDb25maWckdTMiLCJvcmRlckluZGV4IiwiaW5kZXhPZiIsIm9yZGVyIiwiaXNNYWluT3B0aW9uIiwibWFpbk9wdGlvbiIsInByaW1hcnlCdXR0b24iLCJ0aGVtZSIsInByaW1hcnkiLCJob3ZlcklkIiwiaG92ZXJJbWFnZSIsIkFQUExFIiwiR0lUSFVCIiwibG9naW5NZXRob2RTcGFuIiwibG9naW5HcmlkQ29sIiwiZW5hYmxlQWxsIiwiTW9kYWwiLCJfbW9kYWxTdGF0ZSRzb2NpYWxMb2ciLCJfbW9kYWxTdGF0ZSRzb2NpYWxMb2cyIiwiX3doaXRlTGFiZWwkdGhlbWUiLCJfbW9kYWxTdGF0ZSRzb2NpYWxMb2c1IiwiX21vZGFsU3RhdGUkc29jaWFsTG9nNyIsIl9tb2RhbFN0YXRlJHNvY2lhbExvZzkiLCJfbW9kYWxTdGF0ZSRzb2NpYWxMb2cxMCIsIm1vZGFsVHJhbnNpdGlvbkNsYXNzZXMiLCJzZXRNb2RhbFRyYW5zaXRpb25DbGFzc2VzIiwibW9kYWxTdGF0ZSIsInNldE1vZGFsU3RhdGUiLCJleHRlcm5hbFdhbGxldHNWaXNpYmlsaXR5IiwiaGFzRXh0ZXJuYWxXYWxsZXRzIiwiZXh0ZXJuYWxXYWxsZXRzSW5pdGlhbGl6ZWQiLCJtb2RhbFZpc2liaWxpdHkiLCJtb2RhbFZpc2liaWxpdHlEZWxheWVkIiwicG9zdExvYWRpbmdNZXNzYWdlIiwiZXh0ZXJuYWxXYWxsZXRzQ29uZmlnIiwiZGV0YWlsZWRMb2FkZXJBZGFwdGVyIiwiZGV0YWlsZWRMb2FkZXJBZGFwdGVyTmFtZSIsInNob3dFeHRlcm5hbFdhbGxldHNPbmx5Iiwic3RhdGVMaXN0ZW5lciIsImhhbmRsZVNob3dFeHRlcm5hbFdhbGxldHMiLCJjbG9zZU1vZGFsIiwid2hpdGVMYWJlbCIsImVtaXQiLCJvbiIsIm5ld01vZGFsU3RhdGUiLCJwcmV2U3RhdGUiLCJtZXJnZWRTdGF0ZSIsInRpbWVPdXRJZCIsImNsZWFyVGltZW91dCIsIm9uQ2xvc2VMb2FkZXIiLCJwcmVIYW5kbGVFeHRlcm5hbFdhbGxldENsaWNrIiwicHJlSGFuZGxlU29jaWFsV2FsbGV0Q2xpY2siLCJpc0VtYWlsUHJpbWFyeSIsImlzRXh0ZXJuYWxQcmltYXJ5IiwiZXh0ZXJuYWxXYWxsZXRCdXR0b24iLCJhcmVTb2NpYWxMb2dpbnNWaXNpYmxlIiwiX21vZGFsU3RhdGUkc29jaWFsTG9nMyIsIl9tb2RhbFN0YXRlJHNvY2lhbExvZzQiLCJpc0FueVNvY2lhbExvZ2luVmlzaWJsZSIsImVudHJpZXMiLCJzb21lIiwiX3JlZiIsImsiLCJ2IiwiaW5mbyIsImlzRW1haWxQYXNzd29yZGxlc3NMb2dpblZpc2libGUiLCJfbW9kYWxTdGF0ZSRzb2NpYWxMb2c2IiwiaXNTbXNQYXNzd29yZGxlc3NMb2dpblZpc2libGUiLCJfbW9kYWxTdGF0ZSRzb2NpYWxMb2c4IiwibW9kYWxDbGFzc05hbWUiLCJpZCIsImNyZWF0ZVdyYXBwZXIkMSIsInBhcmVudFpJbmRleCIsImV4aXN0aW5nV3JhcHBlciIsImdldEVsZW1lbnRCeUlkIiwicmVtb3ZlIiwicGFyZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwic2V0QXR0cmlidXRlIiwiekluZGV4IiwicG9zaXRpb24iLCJ3cmFwcGVyIiwiYm9keSIsIkxvZ2luTW9kYWwiLCJjb25zdHJ1Y3RvciIsIl91aUNvbmZpZyIsImRhcmtTdGF0ZSIsInVzZUxhbmciLCJ0aGVuIiwibWVzc2FnZXMiLCJhZGRSZXNvdXJjZUJ1bmRsZSIsImRlZmF1bHQiLCJjaGFuZ2VMYW5ndWFnZSIsImNhdGNoIiwic3RhdGVFbWl0dGVyIiwib25jZSIsInNldFN0YXRlIiwiY29udGFpbmVyIiwibW9kYWxaSW5kZXgiLCJyb290IiwicmVuZGVyIiwiUHJvdmlkZXIiLCJsb2dvRGFyayIsImxvZ29MaWdodCIsIm9wdGlvbnMiLCJuZXdTdGF0ZSIsImFkYXB0ZXJEYXRhIiwid2FsbGV0Q29ubmVjdERhdGEiLCJ1cGRhdGVXYWxsZXRDb25uZWN0IiwiZXh0ZW5zaW9uQWRhcHRlcnMiLCJsaXN0ZW5lciIsInJlY29ubmVjdGVkIiwiY29kZSIsImRpc3BsYXlFcnJvcnNPbk1vZGFsIiwiRElTQ09OTkVDVEVEIiwiQURBUFRFUl9EQVRBX1VQREFURUQiLCJoYW5kbGVBZGFwdGVyRGF0YSIsIm1vZGUiLCJzdWJzY3JpYmVDb3JlRXZlbnRzIiwiYWRhcHRlckxpc3RlbmVyIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJjc3NfMjQ4eiIsIkFkZE5ldHdvcmsiLCJjaGFpbkNvbmZpZyIsImFwcE9yaWdpbiIsIm9uQWRkTmV0d29yayIsIm9uQ2FuY2VsTmV0d29yayIsInNob3dNb2RhbCIsInNldFNob3dNb2RhbCIsIm5ldHdvcmtJY29uSWQiLCJzZXROZXR3b3JrSWNvbklkIiwiY2hhaW5JZCIsIlN3aXRjaE5ldHdvcmsiLCJjdXJyZW50Q2hhaW5Db25maWciLCJuZXdDaGFpbkNvbmZpZyIsIm9uU3dpdGNoTmV0d29yayIsImZyb21OZXR3b3JrSWNvbklkIiwic2V0RnJvbU5ldHdvcmtJY29uSWQiLCJ0b05ldHdvcmtJY29uSWQiLCJzZXRUb05ldHdvcmtJY29uSWQiLCJjcmVhdGVXcmFwcGVyIiwiZWxlbWVudCIsIk5ldHdvcmtTd2l0Y2giLCJhZGROZXR3b3JrIiwiYWRkTmV0d29ya0NhbGxiYWNrIiwiY2FuY2VsQ2FsbGJhY2siLCJuZXR3b3JrUm9vdCIsInN3aXRjaE5ldHdvcmsiLCJzd2l0Y2hOZXR3b3JrQ2FsbGJhY2siLCJuZXR3b3JrU3dpdGNoQ29udGFpbmVyIiwiY2FuY2VsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ui/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ui/dist/japanese-e1a7a06c.js":
/*!*************************************************************!*\
  !*** ./node_modules/@web3auth/ui/dist/japanese-e1a7a06c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ japanese),\n/* harmony export */   modal: () => (/* binding */ modal)\n/* harmony export */ });\nvar modal = {\n    \"adapter-loader.message\": \"{{adapter}} アカウントを確認して続行する\",\n    \"adapter-loader.message1\": \"{{adapter}} を確認する\",\n    \"adapter-loader.message2\": \"続行するアカウント\",\n    \"errors-invalid-number-email\": \"無効なメールアドレスまたは電話番号\",\n    \"errors-required\": \"必須\",\n    \"external.back\": \"戻る\",\n    \"external.connect\": \"ウォレットと接続\",\n    \"external.title\": \"外部ウォレット\",\n    \"external.walletconnect-connect\": \"接続する\",\n    \"external.walletconnect-copy\": \"QRコードをクリックしてクリップボードにコピー\",\n    \"external.walletconnect-subtitle\": \"WalletConnect対応ウォレットでQRコードをスキャンしてください\",\n    \"footer.message\": \"自己保管ログイン by\",\n    \"footer.message-new\": \"Web3Authによる自己保管ログイン\",\n    \"footer.policy\": \"プライバシーポリシー\",\n    \"footer.terms\": \"利用規約\",\n    \"footer.terms-service\": \"利用規約\",\n    \"footer.version\": \"バージョン\",\n    \"header-subtitle\": \"続行するために以下のオプションのいずれかを選択してください\",\n    \"header-subtitle-name\": \"ワンクリックで {{appName}} ウォレット\",\n    \"header-subtitle-new\": \"ワンクリックであなたのブロックチェーンウォレット\",\n    \"header-title\": \"ログイン\",\n    \"header-tooltip-desc\": \"ウォレットは、ブロックチェーン上でデジタル資産を保存および管理するためのアカウントとして機能します。\",\n    \"header-tooltip-title\": \"ウォレット\",\n    \"network.add-request\": \"このサイトはネットワークの追加をリクエストしています\",\n    \"network.cancel\": \"キャンセル\",\n    \"network.from\": \"から\",\n    \"network.proceed\": \"進む\",\n    \"network.switch-request\": \"このサイトはネットワークの切り替えを要求しています\",\n    \"network.to\": \"へ\",\n    \"popup.phone-body\": \"国コードは自動的に検出されますが、異なる国の電話番号を使用する場合は、正しい国コードを手動で入力する必要があります。\",\n    \"popup.phone-header\": \"電話番号と国コード\",\n    \"social.continue\": \"続ける\",\n    \"social.continueCustom\": \"{{adapter}}を続けます\",\n    \"social.email\": \"Eメール\",\n    \"social.email-continue\": \"メールで続行\",\n    \"social.email-new\": \"name@example.com\",\n    \"social.passwordless-cta\": \"続ける\",\n    \"social.passwordless-title\": \"メールまたは電話\",\n    \"social.phone\": \"電話\",\n    \"social.policy\": \"ソーシャルログインに関連するデータは保存されません。\",\n    \"social.sms\": \"モバイル\",\n    \"social.sms-continue\": \"モバイルで続行\",\n    \"social.sms-invalid-number\": \"無効な電話番号\",\n    \"social.sms-placeholder-text\": \"例:\",\n    \"social.view-less\": \"オプションを少なく表示\",\n    \"social.view-less-new\": \"表示を減らす\",\n    \"social.view-more\": \"その他のオプションを表示\",\n    \"social.view-more-new\": \"もっと見る\",\n    \"post-loading.connected\": \"アカウントに接続されています\",\n    \"post-loading.something-wrong\": \"何かがうまくいかなかった！\"\n};\nvar japanese = {\n    modal: modal\n};\n //# sourceMappingURL=japanese-e1a7a06c.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3VpL2Rpc3QvamFwYW5lc2UtZTFhN2EwNmMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxRQUFRO0lBQ1YsMEJBQTBCO0lBQzFCLDJCQUEyQjtJQUMzQiwyQkFBMkI7SUFDM0IsK0JBQStCO0lBQy9CLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixrQ0FBa0M7SUFDbEMsK0JBQStCO0lBQy9CLG1DQUFtQztJQUNuQyxrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsd0JBQXdCO0lBQ3hCLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsd0JBQXdCO0lBQ3hCLHVCQUF1QjtJQUN2QixnQkFBZ0I7SUFDaEIsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4Qix1QkFBdUI7SUFDdkIsa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsMEJBQTBCO0lBQzFCLGNBQWM7SUFDZCxvQkFBb0I7SUFDcEIsc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQix5QkFBeUI7SUFDekIsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixvQkFBb0I7SUFDcEIsMkJBQTJCO0lBQzNCLDZCQUE2QjtJQUM3QixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCx1QkFBdUI7SUFDdkIsNkJBQTZCO0lBQzdCLCtCQUErQjtJQUMvQixvQkFBb0I7SUFDcEIsd0JBQXdCO0lBQ3hCLG9CQUFvQjtJQUNwQix3QkFBd0I7SUFDeEIsMEJBQTBCO0lBQzFCLGdDQUFnQztBQUNsQztBQUNBLElBQUlDLFdBQVc7SUFDYkQsT0FBT0E7QUFDVDtBQUVzQyxDQUN0Qyw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC91aS9kaXN0L2phcGFuZXNlLWUxYTdhMDZjLmpzP2U5MWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG1vZGFsID0ge1xuICBcImFkYXB0ZXItbG9hZGVyLm1lc3NhZ2VcIjogXCJ7e2FkYXB0ZXJ9fSDjgqLjgqvjgqbjg7Pjg4jjgpLnorroqo3jgZfjgabntprooYzjgZnjgotcIixcbiAgXCJhZGFwdGVyLWxvYWRlci5tZXNzYWdlMVwiOiBcInt7YWRhcHRlcn19IOOCkueiuuiqjeOBmeOCi1wiLFxuICBcImFkYXB0ZXItbG9hZGVyLm1lc3NhZ2UyXCI6IFwi57aa6KGM44GZ44KL44Ki44Kr44Km44Oz44OIXCIsXG4gIFwiZXJyb3JzLWludmFsaWQtbnVtYmVyLWVtYWlsXCI6IFwi54Sh5Yq544Gq44Oh44O844Or44Ki44OJ44Os44K544G+44Gf44Gv6Zu76Kmx55Wq5Y+3XCIsXG4gIFwiZXJyb3JzLXJlcXVpcmVkXCI6IFwi5b+F6aCIXCIsXG4gIFwiZXh0ZXJuYWwuYmFja1wiOiBcIuaIu+OCi1wiLFxuICBcImV4dGVybmFsLmNvbm5lY3RcIjogXCLjgqbjgqnjg6zjg4Pjg4jjgajmjqXntppcIixcbiAgXCJleHRlcm5hbC50aXRsZVwiOiBcIuWklumDqOOCpuOCqeODrOODg+ODiFwiLFxuICBcImV4dGVybmFsLndhbGxldGNvbm5lY3QtY29ubmVjdFwiOiBcIuaOpee2muOBmeOCi1wiLFxuICBcImV4dGVybmFsLndhbGxldGNvbm5lY3QtY29weVwiOiBcIlFS44Kz44O844OJ44KS44Kv44Oq44OD44Kv44GX44Gm44Kv44Oq44OD44OX44Oc44O844OJ44Gr44Kz44OU44O8XCIsXG4gIFwiZXh0ZXJuYWwud2FsbGV0Y29ubmVjdC1zdWJ0aXRsZVwiOiBcIldhbGxldENvbm5lY3Tlr77lv5zjgqbjgqnjg6zjg4Pjg4jjgadRUuOCs+ODvOODieOCkuOCueOCreODo+ODs+OBl+OBpuOBj+OBoOOBleOBhFwiLFxuICBcImZvb3Rlci5tZXNzYWdlXCI6IFwi6Ieq5bex5L+d566h44Ot44Kw44Kk44OzIGJ5XCIsXG4gIFwiZm9vdGVyLm1lc3NhZ2UtbmV3XCI6IFwiV2ViM0F1dGjjgavjgojjgovoh6rlt7Hkv53nrqHjg63jgrDjgqTjg7NcIixcbiAgXCJmb290ZXIucG9saWN5XCI6IFwi44OX44Op44Kk44OQ44K344O844Od44Oq44K344O8XCIsXG4gIFwiZm9vdGVyLnRlcm1zXCI6IFwi5Yip55So6KaP57SEXCIsXG4gIFwiZm9vdGVyLnRlcm1zLXNlcnZpY2VcIjogXCLliKnnlKjopo/ntIRcIixcbiAgXCJmb290ZXIudmVyc2lvblwiOiBcIuODkOODvOOCuOODp+ODs1wiLFxuICBcImhlYWRlci1zdWJ0aXRsZVwiOiBcIue2muihjOOBmeOCi+OBn+OCgeOBq+S7peS4i+OBruOCquODl+OCt+ODp+ODs+OBruOBhOOBmuOCjOOBi+OCkumBuOaKnuOBl+OBpuOBj+OBoOOBleOBhFwiLFxuICBcImhlYWRlci1zdWJ0aXRsZS1uYW1lXCI6IFwi44Ov44Oz44Kv44Oq44OD44Kv44GnIHt7YXBwTmFtZX19IOOCpuOCqeODrOODg+ODiFwiLFxuICBcImhlYWRlci1zdWJ0aXRsZS1uZXdcIjogXCLjg6/jg7Pjgq/jg6rjg4Pjgq/jgafjgYLjgarjgZ/jga7jg5bjg63jg4Pjgq/jg4Hjgqfjg7zjg7Pjgqbjgqnjg6zjg4Pjg4hcIixcbiAgXCJoZWFkZXItdGl0bGVcIjogXCLjg63jgrDjgqTjg7NcIixcbiAgXCJoZWFkZXItdG9vbHRpcC1kZXNjXCI6IFwi44Km44Kp44Os44OD44OI44Gv44CB44OW44Ot44OD44Kv44OB44Kn44O844Oz5LiK44Gn44OH44K444K/44Or6LOH55Sj44KS5L+d5a2Y44GK44KI44Gz566h55CG44GZ44KL44Gf44KB44Gu44Ki44Kr44Km44Oz44OI44Go44GX44Gm5qmf6IO944GX44G+44GZ44CCXCIsXG4gIFwiaGVhZGVyLXRvb2x0aXAtdGl0bGVcIjogXCLjgqbjgqnjg6zjg4Pjg4hcIixcbiAgXCJuZXR3b3JrLmFkZC1yZXF1ZXN0XCI6IFwi44GT44Gu44K144Kk44OI44Gv44ON44OD44OI44Ov44O844Kv44Gu6L+95Yqg44KS44Oq44Kv44Ko44K544OI44GX44Gm44GE44G+44GZXCIsXG4gIFwibmV0d29yay5jYW5jZWxcIjogXCLjgq3jg6Pjg7Pjgrvjg6tcIixcbiAgXCJuZXR3b3JrLmZyb21cIjogXCLjgYvjgolcIixcbiAgXCJuZXR3b3JrLnByb2NlZWRcIjogXCLpgLLjgoBcIixcbiAgXCJuZXR3b3JrLnN3aXRjaC1yZXF1ZXN0XCI6IFwi44GT44Gu44K144Kk44OI44Gv44ON44OD44OI44Ov44O844Kv44Gu5YiH44KK5pu/44GI44KS6KaB5rGC44GX44Gm44GE44G+44GZXCIsXG4gIFwibmV0d29yay50b1wiOiBcIuOBuFwiLFxuICBcInBvcHVwLnBob25lLWJvZHlcIjogXCLlm73jgrPjg7zjg4njga/oh6rli5XnmoTjgavmpJzlh7rjgZXjgozjgb7jgZnjgYzjgIHnlbDjgarjgovlm73jga7pm7voqbHnlarlj7fjgpLkvb/nlKjjgZnjgovloLTlkIjjga/jgIHmraPjgZfjgYTlm73jgrPjg7zjg4njgpLmiYvli5XjgaflhaXlipvjgZnjgovlv4XopoHjgYzjgYLjgorjgb7jgZnjgIJcIixcbiAgXCJwb3B1cC5waG9uZS1oZWFkZXJcIjogXCLpm7voqbHnlarlj7fjgajlm73jgrPjg7zjg4lcIixcbiAgXCJzb2NpYWwuY29udGludWVcIjogXCLntprjgZHjgotcIixcbiAgXCJzb2NpYWwuY29udGludWVDdXN0b21cIjogXCJ7e2FkYXB0ZXJ9feOCkue2muOBkeOBvuOBmVwiLFxuICBcInNvY2lhbC5lbWFpbFwiOiBcIkXjg6Hjg7zjg6tcIixcbiAgXCJzb2NpYWwuZW1haWwtY29udGludWVcIjogXCLjg6Hjg7zjg6vjgafntprooYxcIixcbiAgXCJzb2NpYWwuZW1haWwtbmV3XCI6IFwibmFtZUBleGFtcGxlLmNvbVwiLFxuICBcInNvY2lhbC5wYXNzd29yZGxlc3MtY3RhXCI6IFwi57aa44GR44KLXCIsXG4gIFwic29jaWFsLnBhc3N3b3JkbGVzcy10aXRsZVwiOiBcIuODoeODvOODq+OBvuOBn+OBr+mbu+ipsVwiLFxuICBcInNvY2lhbC5waG9uZVwiOiBcIumbu+ipsVwiLFxuICBcInNvY2lhbC5wb2xpY3lcIjogXCLjgr3jg7zjgrfjg6Pjg6vjg63jgrDjgqTjg7PjgavplqLpgKPjgZnjgovjg4fjg7zjgr/jga/kv53lrZjjgZXjgozjgb7jgZvjgpPjgIJcIixcbiAgXCJzb2NpYWwuc21zXCI6IFwi44Oi44OQ44Kk44OrXCIsXG4gIFwic29jaWFsLnNtcy1jb250aW51ZVwiOiBcIuODouODkOOCpOODq+OBp+e2muihjFwiLFxuICBcInNvY2lhbC5zbXMtaW52YWxpZC1udW1iZXJcIjogXCLnhKHlirnjgarpm7voqbHnlarlj7dcIixcbiAgXCJzb2NpYWwuc21zLXBsYWNlaG9sZGVyLXRleHRcIjogXCLkvos6XCIsXG4gIFwic29jaWFsLnZpZXctbGVzc1wiOiBcIuOCquODl+OCt+ODp+ODs+OCkuWwkeOBquOBj+ihqOekulwiLFxuICBcInNvY2lhbC52aWV3LWxlc3MtbmV3XCI6IFwi6KGo56S644KS5rib44KJ44GZXCIsXG4gIFwic29jaWFsLnZpZXctbW9yZVwiOiBcIuOBneOBruS7luOBruOCquODl+OCt+ODp+ODs+OCkuihqOekulwiLFxuICBcInNvY2lhbC52aWV3LW1vcmUtbmV3XCI6IFwi44KC44Gj44Go6KaL44KLXCIsXG4gIFwicG9zdC1sb2FkaW5nLmNvbm5lY3RlZFwiOiBcIuOCouOCq+OCpuODs+ODiOOBq+aOpee2muOBleOCjOOBpuOBhOOBvuOBmVwiLFxuICBcInBvc3QtbG9hZGluZy5zb21ldGhpbmctd3JvbmdcIjogXCLkvZXjgYvjgYzjgYbjgb7jgY/jgYTjgYvjgarjgYvjgaPjgZ/vvIFcIlxufTtcbnZhciBqYXBhbmVzZSA9IHtcbiAgbW9kYWw6IG1vZGFsXG59O1xuXG5leHBvcnQgeyBqYXBhbmVzZSBhcyBkZWZhdWx0LCBtb2RhbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9amFwYW5lc2UtZTFhN2EwNmMuanMubWFwXG4iXSwibmFtZXMiOlsibW9kYWwiLCJqYXBhbmVzZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ui/dist/japanese-e1a7a06c.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ui/dist/korean-95658e12.js":
/*!***********************************************************!*\
  !*** ./node_modules/@web3auth/ui/dist/korean-95658e12.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ korean),\n/* harmony export */   modal: () => (/* binding */ modal)\n/* harmony export */ });\nvar modal = {\n    \"adapter-loader.message\": \"{{adapter}} 계정을 확인하여 계속 진행하세요\",\n    \"adapter-loader.message1\": \"{{adapter}} 확인\",\n    \"adapter-loader.message2\": \"계속할 계정\",\n    \"errors-invalid-number-email\": \"잘못된 이메일 또는 전화번호\",\n    \"errors-required\": \"필수\",\n    \"external.back\": \"뒤로\",\n    \"external.connect\": \"지갑에 연결\",\n    \"external.title\": \"외부 지갑\",\n    \"external.walletconnect-connect\": \"연결\",\n    \"external.walletconnect-copy\": \"클립보드에 복사하려면 QR 코드를 클릭하세요\",\n    \"external.walletconnect-subtitle\": \"WalletConnect 호환 지갑으로 QR 코드를 스캔하세요\",\n    \"footer.message\": \"자기 보관 로그인\",\n    \"footer.message-new\": \"Web3Auth를 통한 자기 보관 로그인\",\n    \"footer.policy\": \"개인정보 처리방침\",\n    \"footer.terms\": \"이용 약관\",\n    \"footer.terms-service\": \"서비스 약관\",\n    \"footer.version\": \"버전\",\n    \"header-subtitle\": \"계속하려면 다음 중 하나를 선택하세요\",\n    \"header-subtitle-name\": \"한 번의 클릭으로 {{appName}} 지갑\",\n    \"header-subtitle-new\": \"한 번의 클릭으로 블록체인 지갑\",\n    \"header-title\": \"로그인\",\n    \"header-tooltip-desc\": \"지갑은 블록체인에서 디지털 자산을 저장하고 관리하는 데 사용되는 계정입니다.\",\n    \"header-tooltip-title\": \"지갑\",\n    \"network.add-request\": \"이 사이트는 네트워크 추가를 요청하고 있습니다\",\n    \"network.cancel\": \"취소\",\n    \"network.from\": \"보낸 사람\",\n    \"network.proceed\": \"진행\",\n    \"network.switch-request\": \"이 사이트는 네트워크 전환을 요청하고 있습니다\",\n    \"network.to\": \"에게\",\n    \"popup.phone-body\": \"국가 코드는 자동으로 감지됩니다. 그러나 다른 국가의 전화 번호를 사용하는 경우 올바른 국가 코드를 수동으로 입력해야 합니다.\",\n    \"popup.phone-header\": \"전화 번호 및 국가 코드\",\n    \"social.continue\": \"계속하기\",\n    \"social.continueCustom\": \"{{adapter}}을 계속하십시오\",\n    \"social.email\": \"이메일\",\n    \"social.email-continue\": \"이메일로 계속하기\",\n    \"social.email-new\": \"name@example.com\",\n    \"social.passwordless-cta\": \"계속\",\n    \"social.passwordless-title\": \"이메일 또는 전화\",\n    \"social.phone\": \"핸드폰\",\n    \"social.policy\": \"우리는 귀하의 소셜 로그인과 관련된 데이터를 저장하지 않습니다.\",\n    \"social.sms\": \"모바일\",\n    \"social.sms-continue\": \"모바일로 계속하기\",\n    \"social.sms-invalid-number\": \"유효하지 않은 전화 번호\",\n    \"social.sms-placeholder-text\": \"예시:\",\n    \"social.view-less\": \"더 적은 옵션 보기\",\n    \"social.view-less-new\": \"더 적게 보기\",\n    \"social.view-more\": \"더 많은 옵션 보기\",\n    \"social.view-more-new\": \"더보기\",\n    \"post-loading.connected\": \"귀하는 귀하의 계정과 연결되어 있습니다\",\n    \"post-loading.something-wrong\": \"뭔가 잘못되었습니다!\"\n};\nvar korean = {\n    modal: modal\n};\n //# sourceMappingURL=korean-95658e12.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3VpL2Rpc3Qva29yZWFuLTk1NjU4ZTEyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsUUFBUTtJQUNWLDBCQUEwQjtJQUMxQiwyQkFBMkI7SUFDM0IsMkJBQTJCO0lBQzNCLCtCQUErQjtJQUMvQixtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQixrQkFBa0I7SUFDbEIsa0NBQWtDO0lBQ2xDLCtCQUErQjtJQUMvQixtQ0FBbUM7SUFDbkMsa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0QixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLHdCQUF3QjtJQUN4QixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLHdCQUF3QjtJQUN4Qix1QkFBdUI7SUFDdkIsZ0JBQWdCO0lBQ2hCLHVCQUF1QjtJQUN2Qix3QkFBd0I7SUFDeEIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLDBCQUEwQjtJQUMxQixjQUFjO0lBQ2Qsb0JBQW9CO0lBQ3BCLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIseUJBQXlCO0lBQ3pCLGdCQUFnQjtJQUNoQix5QkFBeUI7SUFDekIsb0JBQW9CO0lBQ3BCLDJCQUEyQjtJQUMzQiw2QkFBNkI7SUFDN0IsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QsdUJBQXVCO0lBQ3ZCLDZCQUE2QjtJQUM3QiwrQkFBK0I7SUFDL0Isb0JBQW9CO0lBQ3BCLHdCQUF3QjtJQUN4QixvQkFBb0I7SUFDcEIsd0JBQXdCO0lBQ3hCLDBCQUEwQjtJQUMxQixnQ0FBZ0M7QUFDbEM7QUFDQSxJQUFJQyxTQUFTO0lBQ1hELE9BQU9BO0FBQ1Q7QUFFb0MsQ0FDcEMsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvdWkvZGlzdC9rb3JlYW4tOTU2NThlMTIuanM/MTcyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbW9kYWwgPSB7XG4gIFwiYWRhcHRlci1sb2FkZXIubWVzc2FnZVwiOiBcInt7YWRhcHRlcn19IOqzhOygleydhCDtmZXsnbjtlZjsl6wg6rOE7IaNIOynhO2Wie2VmOyEuOyalFwiLFxuICBcImFkYXB0ZXItbG9hZGVyLm1lc3NhZ2UxXCI6IFwie3thZGFwdGVyfX0g7ZmV7J24XCIsXG4gIFwiYWRhcHRlci1sb2FkZXIubWVzc2FnZTJcIjogXCLqs4Tsho3tlaAg6rOE7KCVXCIsXG4gIFwiZXJyb3JzLWludmFsaWQtbnVtYmVyLWVtYWlsXCI6IFwi7J6Y66q765CcIOydtOuplOydvCDrmJDripQg7KCE7ZmU67KI7Zi4XCIsXG4gIFwiZXJyb3JzLXJlcXVpcmVkXCI6IFwi7ZWE7IiYXCIsXG4gIFwiZXh0ZXJuYWwuYmFja1wiOiBcIuuSpOuhnFwiLFxuICBcImV4dGVybmFsLmNvbm5lY3RcIjogXCLsp4DqsJHsl5Ag7Jew6rKwXCIsXG4gIFwiZXh0ZXJuYWwudGl0bGVcIjogXCLsmbjrtoAg7KeA6rCRXCIsXG4gIFwiZXh0ZXJuYWwud2FsbGV0Y29ubmVjdC1jb25uZWN0XCI6IFwi7Jew6rKwXCIsXG4gIFwiZXh0ZXJuYWwud2FsbGV0Y29ubmVjdC1jb3B5XCI6IFwi7YG066a967O065Oc7JeQIOuzteyCrO2VmOugpOuptCBRUiDsvZTrk5zrpbwg7YG066at7ZWY7IS47JqUXCIsXG4gIFwiZXh0ZXJuYWwud2FsbGV0Y29ubmVjdC1zdWJ0aXRsZVwiOiBcIldhbGxldENvbm5lY3Qg7Zi47ZmYIOyngOqwkeycvOuhnCBRUiDsvZTrk5zrpbwg7Iqk7LqU7ZWY7IS47JqUXCIsXG4gIFwiZm9vdGVyLm1lc3NhZ2VcIjogXCLsnpDquLAg67O06rSAIOuhnOq3uOyduFwiLFxuICBcImZvb3Rlci5tZXNzYWdlLW5ld1wiOiBcIldlYjNBdXRo66W8IO2Gte2VnCDsnpDquLAg67O06rSAIOuhnOq3uOyduFwiLFxuICBcImZvb3Rlci5wb2xpY3lcIjogXCLqsJzsnbjsoJXrs7Qg7LKY66as67Cp7LmoXCIsXG4gIFwiZm9vdGVyLnRlcm1zXCI6IFwi7J207JqpIOyVveq0gFwiLFxuICBcImZvb3Rlci50ZXJtcy1zZXJ2aWNlXCI6IFwi7ISc67mE7IqkIOyVveq0gFwiLFxuICBcImZvb3Rlci52ZXJzaW9uXCI6IFwi67KE7KCEXCIsXG4gIFwiaGVhZGVyLXN1YnRpdGxlXCI6IFwi6rOE7IaN7ZWY66Ck66m0IOuLpOydjCDspJEg7ZWY64KY66W8IOyEoO2Dne2VmOyEuOyalFwiLFxuICBcImhlYWRlci1zdWJ0aXRsZS1uYW1lXCI6IFwi7ZWcIOuyiOydmCDtgbTrpq3snLzroZwge3thcHBOYW1lfX0g7KeA6rCRXCIsXG4gIFwiaGVhZGVyLXN1YnRpdGxlLW5ld1wiOiBcIu2VnCDrsojsnZgg7YG066at7Jy866GcIOu4lOuhneyytOyduCDsp4DqsJFcIixcbiAgXCJoZWFkZXItdGl0bGVcIjogXCLroZzqt7jsnbhcIixcbiAgXCJoZWFkZXItdG9vbHRpcC1kZXNjXCI6IFwi7KeA6rCR7J2AIOu4lOuhneyytOyduOyXkOyEnCDrlJTsp4DthLgg7J6Q7IKw7J2EIOyggOyepe2VmOqzoCDqtIDrpqztlZjripQg642wIOyCrOyaqeuQmOuKlCDqs4TsoJXsnoXri4jri6QuXCIsXG4gIFwiaGVhZGVyLXRvb2x0aXAtdGl0bGVcIjogXCLsp4DqsJFcIixcbiAgXCJuZXR3b3JrLmFkZC1yZXF1ZXN0XCI6IFwi7J20IOyCrOydtO2KuOuKlCDrhKTtirjsm4ztgawg7LaU6rCA66W8IOyalOyyre2VmOqzoCDsnojsirXri4jri6RcIixcbiAgXCJuZXR3b3JrLmNhbmNlbFwiOiBcIuy3qOyGjFwiLFxuICBcIm5ldHdvcmsuZnJvbVwiOiBcIuuztOuCuCDsgqzrnoxcIixcbiAgXCJuZXR3b3JrLnByb2NlZWRcIjogXCLsp4TtlolcIixcbiAgXCJuZXR3b3JrLnN3aXRjaC1yZXF1ZXN0XCI6IFwi7J20IOyCrOydtO2KuOuKlCDrhKTtirjsm4ztgawg7KCE7ZmY7J2EIOyalOyyre2VmOqzoCDsnojsirXri4jri6RcIixcbiAgXCJuZXR3b3JrLnRvXCI6IFwi7JeQ6rKMXCIsXG4gIFwicG9wdXAucGhvbmUtYm9keVwiOiBcIuq1reqwgCDsvZTrk5zripQg7J6Q64+Z7Jy866GcIOqwkOyngOuQqeuLiOuLpC4g6re465+s64KYIOuLpOuluCDqta3qsIDsnZgg7KCE7ZmUIOuyiO2YuOulvCDsgqzsmqntlZjripQg6rK97JqwIOyYrOuwlOuluCDqta3qsIAg7L2U65Oc66W8IOyImOuPmeycvOuhnCDsnoXroKXtlbTslbwg7ZWp64uI64ukLlwiLFxuICBcInBvcHVwLnBob25lLWhlYWRlclwiOiBcIuyghO2ZlCDrsojtmLgg67CPIOq1reqwgCDsvZTrk5xcIixcbiAgXCJzb2NpYWwuY29udGludWVcIjogXCLqs4Tsho3tlZjquLBcIixcbiAgXCJzb2NpYWwuY29udGludWVDdXN0b21cIjogXCJ7e2FkYXB0ZXJ9feydhCDqs4Tsho3tlZjsi63si5zsmKRcIixcbiAgXCJzb2NpYWwuZW1haWxcIjogXCLsnbTrqZTsnbxcIixcbiAgXCJzb2NpYWwuZW1haWwtY29udGludWVcIjogXCLsnbTrqZTsnbzroZwg6rOE7IaN7ZWY6riwXCIsXG4gIFwic29jaWFsLmVtYWlsLW5ld1wiOiBcIm5hbWVAZXhhbXBsZS5jb21cIixcbiAgXCJzb2NpYWwucGFzc3dvcmRsZXNzLWN0YVwiOiBcIuqzhOyGjVwiLFxuICBcInNvY2lhbC5wYXNzd29yZGxlc3MtdGl0bGVcIjogXCLsnbTrqZTsnbwg65iQ64qUIOyghO2ZlFwiLFxuICBcInNvY2lhbC5waG9uZVwiOiBcIu2VuOuTnO2PsFwiLFxuICBcInNvY2lhbC5wb2xpY3lcIjogXCLsmrDrpqzripQg6reA7ZWY7J2YIOyGjOyFnCDroZzqt7jsnbjqs7wg6rSA66Co65CcIOuNsOydtO2EsOulvCDsoIDsnqXtlZjsp4Ag7JWK7Iq164uI64ukLlwiLFxuICBcInNvY2lhbC5zbXNcIjogXCLrqqjrsJTsnbxcIixcbiAgXCJzb2NpYWwuc21zLWNvbnRpbnVlXCI6IFwi66qo67CU7J2866GcIOqzhOyGje2VmOq4sFwiLFxuICBcInNvY2lhbC5zbXMtaW52YWxpZC1udW1iZXJcIjogXCLsnKDtmqjtlZjsp4Ag7JWK7J2AIOyghO2ZlCDrsojtmLhcIixcbiAgXCJzb2NpYWwuc21zLXBsYWNlaG9sZGVyLXRleHRcIjogXCLsmIjsi5w6XCIsXG4gIFwic29jaWFsLnZpZXctbGVzc1wiOiBcIuuNlCDsoIHsnYAg7Ji17IWYIOuztOq4sFwiLFxuICBcInNvY2lhbC52aWV3LWxlc3MtbmV3XCI6IFwi642UIOyggeqyjCDrs7TquLBcIixcbiAgXCJzb2NpYWwudmlldy1tb3JlXCI6IFwi642UIOunjuydgCDsmLXshZgg67O06riwXCIsXG4gIFwic29jaWFsLnZpZXctbW9yZS1uZXdcIjogXCLrjZTrs7TquLBcIixcbiAgXCJwb3N0LWxvYWRpbmcuY29ubmVjdGVkXCI6IFwi6reA7ZWY64qUIOq3gO2VmOydmCDqs4TsoJXqs7wg7Jew6rKw65CY7Ja0IOyeiOyKteuLiOuLpFwiLFxuICBcInBvc3QtbG9hZGluZy5zb21ldGhpbmctd3JvbmdcIjogXCLrrZTqsIAg7J6Y66q765CY7JeI7Iq164uI64ukIVwiXG59O1xudmFyIGtvcmVhbiA9IHtcbiAgbW9kYWw6IG1vZGFsXG59O1xuXG5leHBvcnQgeyBrb3JlYW4gYXMgZGVmYXVsdCwgbW9kYWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtvcmVhbi05NTY1OGUxMi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJtb2RhbCIsImtvcmVhbiIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ui/dist/korean-95658e12.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ui/dist/mandarin-1e325876.js":
/*!*************************************************************!*\
  !*** ./node_modules/@web3auth/ui/dist/mandarin-1e325876.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ mandarin),\n/* harmony export */   modal: () => (/* binding */ modal)\n/* harmony export */ });\nvar modal = {\n    \"adapter-loader.message\": \"验证您的{{adapter}}帐户以继续\",\n    \"adapter-loader.message1\": \"在您的{{adapter}}上验证\",\n    \"adapter-loader.message2\": \"帐号继续\",\n    \"errors-invalid-number-email\": \"无效的电子邮件或电话号码\",\n    \"errors-required\": \"必填\",\n    \"external.back\": \"返回\",\n    \"external.connect\": \"使用钱包连接\",\n    \"external.title\": \"外部钱包\",\n    \"external.walletconnect-connect\": \"连接\",\n    \"external.walletconnect-copy\": \"点击二维码复制到剪贴板\",\n    \"external.walletconnect-subtitle\": \"使用兼容 WalletConnect 的钱包扫描 QR 码\",\n    \"footer.message\": \"自托管登录由\",\n    \"footer.message-new\": \"Web3Auth 的自托管登录\",\n    \"footer.policy\": \"隐私政策\",\n    \"footer.terms\": \"使用条款\",\n    \"footer.terms-service\": \"服务条款\",\n    \"footer.version\": \"版本\",\n    \"header-subtitle\": \"选择以下选项以继续\",\n    \"header-subtitle-name\": \"一键点击您的 {{appName}} 钱包\",\n    \"header-subtitle-new\": \"一键点击您的区块链钱包\",\n    \"header-title\": \"登录\",\n    \"header-tooltip-desc\": \"钱包作为一个账户用于在区块链上存储和管理您的数字资产。\",\n    \"header-tooltip-title\": \"钱包\",\n    \"network.add-request\": \"此站点正在请求添加网络\",\n    \"network.cancel\": \"取消\",\n    \"network.from\": \"从\",\n    \"network.proceed\": \"继续\",\n    \"network.switch-request\": \"此站点正在请求切换网络\",\n    \"network.to\": \"至\",\n    \"popup.phone-body\": \"您的国家代码将自动检测到，但如果您使用其他国家/地区的电话号码，您需要手动输入正确的国家代码。\",\n    \"popup.phone-header\": \"电话号码和国家代码\",\n    \"social.continue\": \"继续\",\n    \"social.continueCustom\": \"继续使用{{adapter}}\",\n    \"social.email\": \"电子邮件\",\n    \"social.email-continue\": \"继续使用电子邮件\",\n    \"social.email-new\": \"name@example.com\",\n    \"social.passwordless-cta\": \"继续\",\n    \"social.passwordless-title\": \"邮件或电话\",\n    \"social.phone\": \"电话\",\n    \"social.policy\": \"我们不存储与您的社交登录相关的任何数据。\",\n    \"social.sms\": \"移动\",\n    \"social.sms-continue\": \"继续使用移动设备\",\n    \"social.sms-invalid-number\": \"无效的电话号码\",\n    \"social.sms-placeholder-text\": \"例如：\",\n    \"social.view-less\": \"查看较少选项\",\n    \"social.view-less-new\": \"查看较少\",\n    \"social.view-more\": \"查看更多选项\",\n    \"social.view-more-new\": \"查看更多\",\n    \"post-loading.connected\": \"您与您的帐户有联系\",\n    \"post-loading.something-wrong\": \"出了些问题！\"\n};\nvar mandarin = {\n    modal: modal\n};\n //# sourceMappingURL=mandarin-1e325876.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3VpL2Rpc3QvbWFuZGFyaW4tMWUzMjU4NzYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxRQUFRO0lBQ1YsMEJBQTBCO0lBQzFCLDJCQUEyQjtJQUMzQiwyQkFBMkI7SUFDM0IsK0JBQStCO0lBQy9CLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixrQ0FBa0M7SUFDbEMsK0JBQStCO0lBQy9CLG1DQUFtQztJQUNuQyxrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsd0JBQXdCO0lBQ3hCLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsd0JBQXdCO0lBQ3hCLHVCQUF1QjtJQUN2QixnQkFBZ0I7SUFDaEIsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4Qix1QkFBdUI7SUFDdkIsa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsMEJBQTBCO0lBQzFCLGNBQWM7SUFDZCxvQkFBb0I7SUFDcEIsc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQix5QkFBeUI7SUFDekIsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixvQkFBb0I7SUFDcEIsMkJBQTJCO0lBQzNCLDZCQUE2QjtJQUM3QixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCx1QkFBdUI7SUFDdkIsNkJBQTZCO0lBQzdCLCtCQUErQjtJQUMvQixvQkFBb0I7SUFDcEIsd0JBQXdCO0lBQ3hCLG9CQUFvQjtJQUNwQix3QkFBd0I7SUFDeEIsMEJBQTBCO0lBQzFCLGdDQUFnQztBQUNsQztBQUNBLElBQUlDLFdBQVc7SUFDYkQsT0FBT0E7QUFDVDtBQUVzQyxDQUN0Qyw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC91aS9kaXN0L21hbmRhcmluLTFlMzI1ODc2LmpzPzMzZWMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG1vZGFsID0ge1xuICBcImFkYXB0ZXItbG9hZGVyLm1lc3NhZ2VcIjogXCLpqozor4HmgqjnmoR7e2FkYXB0ZXJ9feW4kOaIt+S7pee7p+e7rVwiLFxuICBcImFkYXB0ZXItbG9hZGVyLm1lc3NhZ2UxXCI6IFwi5Zyo5oKo55qEe3thZGFwdGVyfX3kuIrpqozor4FcIixcbiAgXCJhZGFwdGVyLWxvYWRlci5tZXNzYWdlMlwiOiBcIuW4kOWPt+e7p+e7rVwiLFxuICBcImVycm9ycy1pbnZhbGlkLW51bWJlci1lbWFpbFwiOiBcIuaXoOaViOeahOeUteWtkOmCruS7tuaIlueUteivneWPt+eggVwiLFxuICBcImVycm9ycy1yZXF1aXJlZFwiOiBcIuW/heWhq1wiLFxuICBcImV4dGVybmFsLmJhY2tcIjogXCLov5Tlm55cIixcbiAgXCJleHRlcm5hbC5jb25uZWN0XCI6IFwi5L2/55So6ZKx5YyF6L+e5o6lXCIsXG4gIFwiZXh0ZXJuYWwudGl0bGVcIjogXCLlpJbpg6jpkrHljIVcIixcbiAgXCJleHRlcm5hbC53YWxsZXRjb25uZWN0LWNvbm5lY3RcIjogXCLov57mjqVcIixcbiAgXCJleHRlcm5hbC53YWxsZXRjb25uZWN0LWNvcHlcIjogXCLngrnlh7vkuoznu7TnoIHlpI3liLbliLDliarotLTmnb9cIixcbiAgXCJleHRlcm5hbC53YWxsZXRjb25uZWN0LXN1YnRpdGxlXCI6IFwi5L2/55So5YW85a65IFdhbGxldENvbm5lY3Qg55qE6ZKx5YyF5omr5o+PIFFSIOeggVwiLFxuICBcImZvb3Rlci5tZXNzYWdlXCI6IFwi6Ieq5omY566h55m75b2V55SxXCIsXG4gIFwiZm9vdGVyLm1lc3NhZ2UtbmV3XCI6IFwiV2ViM0F1dGgg55qE6Ieq5omY566h55m75b2VXCIsXG4gIFwiZm9vdGVyLnBvbGljeVwiOiBcIumakOengeaUv+etllwiLFxuICBcImZvb3Rlci50ZXJtc1wiOiBcIuS9v+eUqOadoeasvlwiLFxuICBcImZvb3Rlci50ZXJtcy1zZXJ2aWNlXCI6IFwi5pyN5Yqh5p2h5qy+XCIsXG4gIFwiZm9vdGVyLnZlcnNpb25cIjogXCLniYjmnKxcIixcbiAgXCJoZWFkZXItc3VidGl0bGVcIjogXCLpgInmi6nku6XkuIvpgInpobnku6Xnu6fnu61cIixcbiAgXCJoZWFkZXItc3VidGl0bGUtbmFtZVwiOiBcIuS4gOmUrueCueWHu+aCqOeahCB7e2FwcE5hbWV9fSDpkrHljIVcIixcbiAgXCJoZWFkZXItc3VidGl0bGUtbmV3XCI6IFwi5LiA6ZSu54K55Ye75oKo55qE5Yy65Z2X6ZO+6ZKx5YyFXCIsXG4gIFwiaGVhZGVyLXRpdGxlXCI6IFwi55m75b2VXCIsXG4gIFwiaGVhZGVyLXRvb2x0aXAtZGVzY1wiOiBcIumSseWMheS9nOS4uuS4gOS4qui0puaIt+eUqOS6juWcqOWMuuWdl+mTvuS4iuWtmOWCqOWSjOeuoeeQhuaCqOeahOaVsOWtl+i1hOS6p+OAglwiLFxuICBcImhlYWRlci10b29sdGlwLXRpdGxlXCI6IFwi6ZKx5YyFXCIsXG4gIFwibmV0d29yay5hZGQtcmVxdWVzdFwiOiBcIuatpOermeeCueato+WcqOivt+axgua3u+WKoOe9kee7nFwiLFxuICBcIm5ldHdvcmsuY2FuY2VsXCI6IFwi5Y+W5raIXCIsXG4gIFwibmV0d29yay5mcm9tXCI6IFwi5LuOXCIsXG4gIFwibmV0d29yay5wcm9jZWVkXCI6IFwi57un57utXCIsXG4gIFwibmV0d29yay5zd2l0Y2gtcmVxdWVzdFwiOiBcIuatpOermeeCueato+WcqOivt+axguWIh+aNoue9kee7nFwiLFxuICBcIm5ldHdvcmsudG9cIjogXCLoh7NcIixcbiAgXCJwb3B1cC5waG9uZS1ib2R5XCI6IFwi5oKo55qE5Zu95a625Luj56CB5bCG6Ieq5Yqo5qOA5rWL5Yiw77yM5L2G5aaC5p6c5oKo5L2/55So5YW25LuW5Zu95a62L+WcsOWMuueahOeUteivneWPt+egge+8jOaCqOmcgOimgeaJi+WKqOi+k+WFpeato+ehrueahOWbveWutuS7o+eggeOAglwiLFxuICBcInBvcHVwLnBob25lLWhlYWRlclwiOiBcIueUteivneWPt+eggeWSjOWbveWutuS7o+eggVwiLFxuICBcInNvY2lhbC5jb250aW51ZVwiOiBcIue7p+e7rVwiLFxuICBcInNvY2lhbC5jb250aW51ZUN1c3RvbVwiOiBcIue7p+e7reS9v+eUqHt7YWRhcHRlcn19XCIsXG4gIFwic29jaWFsLmVtYWlsXCI6IFwi55S15a2Q6YKu5Lu2XCIsXG4gIFwic29jaWFsLmVtYWlsLWNvbnRpbnVlXCI6IFwi57un57ut5L2/55So55S15a2Q6YKu5Lu2XCIsXG4gIFwic29jaWFsLmVtYWlsLW5ld1wiOiBcIm5hbWVAZXhhbXBsZS5jb21cIixcbiAgXCJzb2NpYWwucGFzc3dvcmRsZXNzLWN0YVwiOiBcIue7p+e7rVwiLFxuICBcInNvY2lhbC5wYXNzd29yZGxlc3MtdGl0bGVcIjogXCLpgq7ku7bmiJbnlLXor51cIixcbiAgXCJzb2NpYWwucGhvbmVcIjogXCLnlLXor51cIixcbiAgXCJzb2NpYWwucG9saWN5XCI6IFwi5oiR5Lus5LiN5a2Y5YKo5LiO5oKo55qE56S+5Lqk55m75b2V55u45YWz55qE5Lu75L2V5pWw5o2u44CCXCIsXG4gIFwic29jaWFsLnNtc1wiOiBcIuenu+WKqFwiLFxuICBcInNvY2lhbC5zbXMtY29udGludWVcIjogXCLnu6fnu63kvb/nlKjnp7vliqjorr7lpIdcIixcbiAgXCJzb2NpYWwuc21zLWludmFsaWQtbnVtYmVyXCI6IFwi5peg5pWI55qE55S16K+d5Y+356CBXCIsXG4gIFwic29jaWFsLnNtcy1wbGFjZWhvbGRlci10ZXh0XCI6IFwi5L6L5aaC77yaXCIsXG4gIFwic29jaWFsLnZpZXctbGVzc1wiOiBcIuafpeeci+i+g+WwkemAiemhuVwiLFxuICBcInNvY2lhbC52aWV3LWxlc3MtbmV3XCI6IFwi5p+l55yL6L6D5bCRXCIsXG4gIFwic29jaWFsLnZpZXctbW9yZVwiOiBcIuafpeeci+abtOWkmumAiemhuVwiLFxuICBcInNvY2lhbC52aWV3LW1vcmUtbmV3XCI6IFwi5p+l55yL5pu05aSaXCIsXG4gIFwicG9zdC1sb2FkaW5nLmNvbm5lY3RlZFwiOiBcIuaCqOS4juaCqOeahOW4kOaIt+acieiBlOezu1wiLFxuICBcInBvc3QtbG9hZGluZy5zb21ldGhpbmctd3JvbmdcIjogXCLlh7rkuobkupvpl67popjvvIFcIlxufTtcbnZhciBtYW5kYXJpbiA9IHtcbiAgbW9kYWw6IG1vZGFsXG59O1xuXG5leHBvcnQgeyBtYW5kYXJpbiBhcyBkZWZhdWx0LCBtb2RhbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFuZGFyaW4tMWUzMjU4NzYuanMubWFwXG4iXSwibmFtZXMiOlsibW9kYWwiLCJtYW5kYXJpbiIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ui/dist/mandarin-1e325876.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ui/dist/portuguese-c1293d6a.js":
/*!***************************************************************!*\
  !*** ./node_modules/@web3auth/ui/dist/portuguese-c1293d6a.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ portuguese),\n/* harmony export */   modal: () => (/* binding */ modal)\n/* harmony export */ });\nvar modal = {\n    \"adapter-loader.message\": \"Verifique a sua conta {{adapter}} para continuar\",\n    \"adapter-loader.message1\": \"Verifique o(a) seu/sua {{adapter}}\",\n    \"adapter-loader.message2\": \"conta para continuar\",\n    \"errors-invalid-number-email\": \"Email ou n\\xfamero de telefone inv\\xe1lido\",\n    \"errors-required\": \"Obrigat\\xf3rio\",\n    \"external.back\": \"Voltar\",\n    \"external.connect\": \"Conectar com carteira\",\n    \"external.title\": \"Carteira Externa\",\n    \"external.walletconnect-connect\": \"Conectar\",\n    \"external.walletconnect-copy\": \"Clique no c\\xf3digo QR para copiar para a \\xe1rea de transfer\\xeancia\",\n    \"external.walletconnect-subtitle\": \"Digitalize o c\\xf3digo QR com uma carteira compat\\xedvel com WalletConnect\",\n    \"footer.message\": \"Login de autocust\\xf3dia por\",\n    \"footer.message-new\": \"Login de autocust\\xf3dia por Web3Auth\",\n    \"footer.policy\": \"Pol\\xedtica de Privacidade\",\n    \"footer.terms\": \"Termos de Uso\",\n    \"footer.terms-service\": \"Termos de Servi\\xe7o\",\n    \"footer.version\": \"Vers\\xe3o\",\n    \"header-subtitle\": \"Selecione uma das seguintes op\\xe7\\xf5es para continuar\",\n    \"header-subtitle-name\": \"Sua carteira {{appName}} com um clique\",\n    \"header-subtitle-new\": \"Sua carteira de blockchain com um clique\",\n    \"header-title\": \"Entrar\",\n    \"header-tooltip-desc\": \"A carteira serve como uma conta para armazenar e gerenciar seus ativos digitais na blockchain.\",\n    \"header-tooltip-title\": \"Carteira\",\n    \"network.add-request\": \"Este site est\\xe1 solicitando adicionar uma rede\",\n    \"network.cancel\": \"Cancelar\",\n    \"network.from\": \"De\",\n    \"network.proceed\": \"Prosseguir\",\n    \"network.switch-request\": \"Este site est\\xe1 solicitando trocar de rede\",\n    \"network.to\": \"Para\",\n    \"popup.phone-body\": \"O c\\xf3digo do seu pa\\xeds ser\\xe1 detectado automaticamente, mas se estiver usando um n\\xfamero de telefone de um pa\\xeds diferente, voc\\xea precisar\\xe1 inserir manualmente o c\\xf3digo correto do pa\\xeds.\",\n    \"popup.phone-header\": \"N\\xfamero de telefone e c\\xf3digo do pa\\xeds\",\n    \"social.continue\": \"Continuar com\",\n    \"social.continueCustom\": \"Continue com o {{adapter}}\",\n    \"social.email\": \"Email\",\n    \"social.email-continue\": \"Continuar com email\",\n    \"social.email-new\": \"nome@exemplo.com\",\n    \"social.passwordless-cta\": \"Continuar\",\n    \"social.passwordless-title\": \"Email ou telefone\",\n    \"social.phone\": \"Telefone\",\n    \"social.policy\": \"N\\xe3o armazenamos nenhum dado relacionado ao seu login por rede social.\",\n    \"social.sms\": \"M\\xf3vel\",\n    \"social.sms-continue\": \"Continuar com o celular\",\n    \"social.sms-invalid-number\": \"N\\xfamero de telefone inv\\xe1lido\",\n    \"social.sms-placeholder-text\": \"Por exemplo:\",\n    \"social.view-less\": \"Ver menos op\\xe7\\xf5es\",\n    \"social.view-less-new\": \"Ver menos\",\n    \"social.view-more\": \"Ver mais op\\xe7\\xf5es\",\n    \"social.view-more-new\": \"Ver mais\",\n    \"post-loading.connected\": \"Voc\\xea est\\xe1 conectado com sua conta\",\n    \"post-loading.something-wrong\": \"Algo deu errado!\"\n};\nvar portuguese = {\n    modal: modal\n};\n //# sourceMappingURL=portuguese-c1293d6a.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3VpL2Rpc3QvcG9ydHVndWVzZS1jMTI5M2Q2YS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUlBLFFBQVE7SUFDViwwQkFBMEI7SUFDMUIsMkJBQTJCO0lBQzNCLDJCQUEyQjtJQUMzQiwrQkFBK0I7SUFDL0IsbUJBQW1CO0lBQ25CLGlCQUFpQjtJQUNqQixvQkFBb0I7SUFDcEIsa0JBQWtCO0lBQ2xCLGtDQUFrQztJQUNsQywrQkFBK0I7SUFDL0IsbUNBQW1DO0lBQ25DLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQix3QkFBd0I7SUFDeEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQix3QkFBd0I7SUFDeEIsdUJBQXVCO0lBQ3ZCLGdCQUFnQjtJQUNoQix1QkFBdUI7SUFDdkIsd0JBQXdCO0lBQ3hCLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQiwwQkFBMEI7SUFDMUIsY0FBYztJQUNkLG9CQUFvQjtJQUNwQixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLHlCQUF5QjtJQUN6QixnQkFBZ0I7SUFDaEIseUJBQXlCO0lBQ3pCLG9CQUFvQjtJQUNwQiwyQkFBMkI7SUFDM0IsNkJBQTZCO0lBQzdCLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsY0FBYztJQUNkLHVCQUF1QjtJQUN2Qiw2QkFBNkI7SUFDN0IsK0JBQStCO0lBQy9CLG9CQUFvQjtJQUNwQix3QkFBd0I7SUFDeEIsb0JBQW9CO0lBQ3BCLHdCQUF3QjtJQUN4QiwwQkFBMEI7SUFDMUIsZ0NBQWdDO0FBQ2xDO0FBQ0EsSUFBSUMsYUFBYTtJQUNmRCxPQUFPQTtBQUNUO0FBRXdDLENBQ3hDLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3VpL2Rpc3QvcG9ydHVndWVzZS1jMTI5M2Q2YS5qcz9lYjQ5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBtb2RhbCA9IHtcbiAgXCJhZGFwdGVyLWxvYWRlci5tZXNzYWdlXCI6IFwiVmVyaWZpcXVlIGEgc3VhIGNvbnRhIHt7YWRhcHRlcn19IHBhcmEgY29udGludWFyXCIsXG4gIFwiYWRhcHRlci1sb2FkZXIubWVzc2FnZTFcIjogXCJWZXJpZmlxdWUgbyhhKSBzZXUvc3VhIHt7YWRhcHRlcn19XCIsXG4gIFwiYWRhcHRlci1sb2FkZXIubWVzc2FnZTJcIjogXCJjb250YSBwYXJhIGNvbnRpbnVhclwiLFxuICBcImVycm9ycy1pbnZhbGlkLW51bWJlci1lbWFpbFwiOiBcIkVtYWlsIG91IG7Dum1lcm8gZGUgdGVsZWZvbmUgaW52w6FsaWRvXCIsXG4gIFwiZXJyb3JzLXJlcXVpcmVkXCI6IFwiT2JyaWdhdMOzcmlvXCIsXG4gIFwiZXh0ZXJuYWwuYmFja1wiOiBcIlZvbHRhclwiLFxuICBcImV4dGVybmFsLmNvbm5lY3RcIjogXCJDb25lY3RhciBjb20gY2FydGVpcmFcIixcbiAgXCJleHRlcm5hbC50aXRsZVwiOiBcIkNhcnRlaXJhIEV4dGVybmFcIixcbiAgXCJleHRlcm5hbC53YWxsZXRjb25uZWN0LWNvbm5lY3RcIjogXCJDb25lY3RhclwiLFxuICBcImV4dGVybmFsLndhbGxldGNvbm5lY3QtY29weVwiOiBcIkNsaXF1ZSBubyBjw7NkaWdvIFFSIHBhcmEgY29waWFyIHBhcmEgYSDDoXJlYSBkZSB0cmFuc2ZlcsOqbmNpYVwiLFxuICBcImV4dGVybmFsLndhbGxldGNvbm5lY3Qtc3VidGl0bGVcIjogXCJEaWdpdGFsaXplIG8gY8OzZGlnbyBRUiBjb20gdW1hIGNhcnRlaXJhIGNvbXBhdMOtdmVsIGNvbSBXYWxsZXRDb25uZWN0XCIsXG4gIFwiZm9vdGVyLm1lc3NhZ2VcIjogXCJMb2dpbiBkZSBhdXRvY3VzdMOzZGlhIHBvclwiLFxuICBcImZvb3Rlci5tZXNzYWdlLW5ld1wiOiBcIkxvZ2luIGRlIGF1dG9jdXN0w7NkaWEgcG9yIFdlYjNBdXRoXCIsXG4gIFwiZm9vdGVyLnBvbGljeVwiOiBcIlBvbMOtdGljYSBkZSBQcml2YWNpZGFkZVwiLFxuICBcImZvb3Rlci50ZXJtc1wiOiBcIlRlcm1vcyBkZSBVc29cIixcbiAgXCJmb290ZXIudGVybXMtc2VydmljZVwiOiBcIlRlcm1vcyBkZSBTZXJ2acOnb1wiLFxuICBcImZvb3Rlci52ZXJzaW9uXCI6IFwiVmVyc8Ojb1wiLFxuICBcImhlYWRlci1zdWJ0aXRsZVwiOiBcIlNlbGVjaW9uZSB1bWEgZGFzIHNlZ3VpbnRlcyBvcMOnw7VlcyBwYXJhIGNvbnRpbnVhclwiLFxuICBcImhlYWRlci1zdWJ0aXRsZS1uYW1lXCI6IFwiU3VhIGNhcnRlaXJhIHt7YXBwTmFtZX19IGNvbSB1bSBjbGlxdWVcIixcbiAgXCJoZWFkZXItc3VidGl0bGUtbmV3XCI6IFwiU3VhIGNhcnRlaXJhIGRlIGJsb2NrY2hhaW4gY29tIHVtIGNsaXF1ZVwiLFxuICBcImhlYWRlci10aXRsZVwiOiBcIkVudHJhclwiLFxuICBcImhlYWRlci10b29sdGlwLWRlc2NcIjogXCJBIGNhcnRlaXJhIHNlcnZlIGNvbW8gdW1hIGNvbnRhIHBhcmEgYXJtYXplbmFyIGUgZ2VyZW5jaWFyIHNldXMgYXRpdm9zIGRpZ2l0YWlzIG5hIGJsb2NrY2hhaW4uXCIsXG4gIFwiaGVhZGVyLXRvb2x0aXAtdGl0bGVcIjogXCJDYXJ0ZWlyYVwiLFxuICBcIm5ldHdvcmsuYWRkLXJlcXVlc3RcIjogXCJFc3RlIHNpdGUgZXN0w6Egc29saWNpdGFuZG8gYWRpY2lvbmFyIHVtYSByZWRlXCIsXG4gIFwibmV0d29yay5jYW5jZWxcIjogXCJDYW5jZWxhclwiLFxuICBcIm5ldHdvcmsuZnJvbVwiOiBcIkRlXCIsXG4gIFwibmV0d29yay5wcm9jZWVkXCI6IFwiUHJvc3NlZ3VpclwiLFxuICBcIm5ldHdvcmsuc3dpdGNoLXJlcXVlc3RcIjogXCJFc3RlIHNpdGUgZXN0w6Egc29saWNpdGFuZG8gdHJvY2FyIGRlIHJlZGVcIixcbiAgXCJuZXR3b3JrLnRvXCI6IFwiUGFyYVwiLFxuICBcInBvcHVwLnBob25lLWJvZHlcIjogXCJPIGPDs2RpZ28gZG8gc2V1IHBhw61zIHNlcsOhIGRldGVjdGFkbyBhdXRvbWF0aWNhbWVudGUsIG1hcyBzZSBlc3RpdmVyIHVzYW5kbyB1bSBuw7ptZXJvIGRlIHRlbGVmb25lIGRlIHVtIHBhw61zIGRpZmVyZW50ZSwgdm9jw6ogcHJlY2lzYXLDoSBpbnNlcmlyIG1hbnVhbG1lbnRlIG8gY8OzZGlnbyBjb3JyZXRvIGRvIHBhw61zLlwiLFxuICBcInBvcHVwLnBob25lLWhlYWRlclwiOiBcIk7Dum1lcm8gZGUgdGVsZWZvbmUgZSBjw7NkaWdvIGRvIHBhw61zXCIsXG4gIFwic29jaWFsLmNvbnRpbnVlXCI6IFwiQ29udGludWFyIGNvbVwiLFxuICBcInNvY2lhbC5jb250aW51ZUN1c3RvbVwiOiBcIkNvbnRpbnVlIGNvbSBvIHt7YWRhcHRlcn19XCIsXG4gIFwic29jaWFsLmVtYWlsXCI6IFwiRW1haWxcIixcbiAgXCJzb2NpYWwuZW1haWwtY29udGludWVcIjogXCJDb250aW51YXIgY29tIGVtYWlsXCIsXG4gIFwic29jaWFsLmVtYWlsLW5ld1wiOiBcIm5vbWVAZXhlbXBsby5jb21cIixcbiAgXCJzb2NpYWwucGFzc3dvcmRsZXNzLWN0YVwiOiBcIkNvbnRpbnVhclwiLFxuICBcInNvY2lhbC5wYXNzd29yZGxlc3MtdGl0bGVcIjogXCJFbWFpbCBvdSB0ZWxlZm9uZVwiLFxuICBcInNvY2lhbC5waG9uZVwiOiBcIlRlbGVmb25lXCIsXG4gIFwic29jaWFsLnBvbGljeVwiOiBcIk7Do28gYXJtYXplbmFtb3MgbmVuaHVtIGRhZG8gcmVsYWNpb25hZG8gYW8gc2V1IGxvZ2luIHBvciByZWRlIHNvY2lhbC5cIixcbiAgXCJzb2NpYWwuc21zXCI6IFwiTcOzdmVsXCIsXG4gIFwic29jaWFsLnNtcy1jb250aW51ZVwiOiBcIkNvbnRpbnVhciBjb20gbyBjZWx1bGFyXCIsXG4gIFwic29jaWFsLnNtcy1pbnZhbGlkLW51bWJlclwiOiBcIk7Dum1lcm8gZGUgdGVsZWZvbmUgaW52w6FsaWRvXCIsXG4gIFwic29jaWFsLnNtcy1wbGFjZWhvbGRlci10ZXh0XCI6IFwiUG9yIGV4ZW1wbG86XCIsXG4gIFwic29jaWFsLnZpZXctbGVzc1wiOiBcIlZlciBtZW5vcyBvcMOnw7Vlc1wiLFxuICBcInNvY2lhbC52aWV3LWxlc3MtbmV3XCI6IFwiVmVyIG1lbm9zXCIsXG4gIFwic29jaWFsLnZpZXctbW9yZVwiOiBcIlZlciBtYWlzIG9ww6fDtWVzXCIsXG4gIFwic29jaWFsLnZpZXctbW9yZS1uZXdcIjogXCJWZXIgbWFpc1wiLFxuICBcInBvc3QtbG9hZGluZy5jb25uZWN0ZWRcIjogXCJWb2PDqiBlc3TDoSBjb25lY3RhZG8gY29tIHN1YSBjb250YVwiLFxuICBcInBvc3QtbG9hZGluZy5zb21ldGhpbmctd3JvbmdcIjogXCJBbGdvIGRldSBlcnJhZG8hXCJcbn07XG52YXIgcG9ydHVndWVzZSA9IHtcbiAgbW9kYWw6IG1vZGFsXG59O1xuXG5leHBvcnQgeyBwb3J0dWd1ZXNlIGFzIGRlZmF1bHQsIG1vZGFsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3J0dWd1ZXNlLWMxMjkzZDZhLmpzLm1hcFxuIl0sIm5hbWVzIjpbIm1vZGFsIiwicG9ydHVndWVzZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ui/dist/portuguese-c1293d6a.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ui/dist/spanish-54ba83ea.js":
/*!************************************************************!*\
  !*** ./node_modules/@web3auth/ui/dist/spanish-54ba83ea.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ spanish),\n/* harmony export */   modal: () => (/* binding */ modal)\n/* harmony export */ });\nvar modal = {\n    \"adapter-loader.message\": \"Verifica tu cuenta {{adapter}} para continuar\",\n    \"adapter-loader.message1\": \"Verifique su {{adapter}}\",\n    \"adapter-loader.message2\": \"cuenta para continuar\",\n    \"errors-invalid-number-email\": \"Correo electr\\xf3nico o n\\xfamero de tel\\xe9fono inv\\xe1lido\",\n    \"errors-required\": \"Campo obligatorio\",\n    \"external.back\": \"Atr\\xe1s\",\n    \"external.connect\": \"Conectar con billetera\",\n    \"external.title\": \"Billetera Externa\",\n    \"external.walletconnect-connect\": \"Conectar\",\n    \"external.walletconnect-copy\": \"Haz clic en el c\\xf3digo QR para copiarlo al portapapeles\",\n    \"external.walletconnect-subtitle\": \"Escanear el c\\xf3digo QR con una billetera compatible con WalletConnect\",\n    \"footer.message\": \"Inicio de sesi\\xf3n con autogesti\\xf3n por\",\n    \"footer.message-new\": \"Inicio de sesi\\xf3n con autogesti\\xf3n por Web3Auth\",\n    \"footer.policy\": \"Pol\\xedtica de privacidad\",\n    \"footer.terms\": \"T\\xe9rminos de Uso\",\n    \"footer.terms-service\": \"T\\xe9rminos de servicio\",\n    \"footer.version\": \"Versi\\xf3n\",\n    \"header-subtitle\": \"Seleccione una de las siguientes opciones para continuar\",\n    \"header-subtitle-name\": \"Su billetera {{appName}} con un solo clic\",\n    \"header-subtitle-new\": \"Su billetera blockchain con un solo clic\",\n    \"header-title\": \"Iniciar sesi\\xf3n\",\n    \"header-tooltip-desc\": \"La billetera sirve como una cuenta para almacenar y administrar sus activos digitales en la cadena de bloques.\",\n    \"header-tooltip-title\": \"Billetera\",\n    \"network.add-request\": \"Este sitio est\\xe1 solicitando agregar una red\",\n    \"network.cancel\": \"Cancelar\",\n    \"network.from\": \"De\",\n    \"network.proceed\": \"Continuar\",\n    \"network.switch-request\": \"Este sitio est\\xe1 solicitando cambiar de red\",\n    \"network.to\": \"A\",\n    \"popup.phone-body\": \"Su c\\xf3digo de pa\\xeds se detectar\\xe1 autom\\xe1ticamente, pero si est\\xe1 utilizando un n\\xfamero de tel\\xe9fono de otro pa\\xeds, deber\\xe1 ingresar manualmente el c\\xf3digo de pa\\xeds correcto.\",\n    \"popup.phone-header\": \"N\\xfamero de tel\\xe9fono y c\\xf3digo de pa\\xeds\",\n    \"social.continue\": \"Continuar con\",\n    \"social.continueCustom\": \"Continuar con {{adapter}}\",\n    \"social.email\": \"Correo electr\\xf3nico\",\n    \"social.email-continue\": \"Continuar con correo electr\\xf3nico\",\n    \"social.email-new\": \"nombre@ejemplo.com\",\n    \"social.passwordless-cta\": \"Continuar\",\n    \"social.passwordless-title\": \"Email o tel\\xe9fono\",\n    \"social.phone\": \"Tel\\xe9fono\",\n    \"social.policy\": \"No almacenamos ning\\xfan dato relacionado con sus inicios de sesi\\xf3n sociales.\",\n    \"social.sms\": \"M\\xf3vil\",\n    \"social.sms-continue\": \"Continuar con m\\xf3vil\",\n    \"social.sms-invalid-number\": \"N\\xfamero de tel\\xe9fono inv\\xe1lido\",\n    \"social.sms-placeholder-text\": \"Por ej.:\",\n    \"social.view-less\": \"Ver menos opciones\",\n    \"social.view-less-new\": \"Ver menos\",\n    \"social.view-more\": \"Ver m\\xe1s opciones\",\n    \"social.view-more-new\": \"Ver m\\xe1s\",\n    \"post-loading.connected\": \"Est\\xe1s conectado con tu cuenta\",\n    \"post-loading.something-wrong\": \"\\xa1Algo sali\\xf3 mal!\"\n};\nvar spanish = {\n    modal: modal\n};\n //# sourceMappingURL=spanish-54ba83ea.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3VpL2Rpc3Qvc3BhbmlzaC01NGJhODNlYS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUlBLFFBQVE7SUFDViwwQkFBMEI7SUFDMUIsMkJBQTJCO0lBQzNCLDJCQUEyQjtJQUMzQiwrQkFBK0I7SUFDL0IsbUJBQW1CO0lBQ25CLGlCQUFpQjtJQUNqQixvQkFBb0I7SUFDcEIsa0JBQWtCO0lBQ2xCLGtDQUFrQztJQUNsQywrQkFBK0I7SUFDL0IsbUNBQW1DO0lBQ25DLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQix3QkFBd0I7SUFDeEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQix3QkFBd0I7SUFDeEIsdUJBQXVCO0lBQ3ZCLGdCQUFnQjtJQUNoQix1QkFBdUI7SUFDdkIsd0JBQXdCO0lBQ3hCLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQiwwQkFBMEI7SUFDMUIsY0FBYztJQUNkLG9CQUFvQjtJQUNwQixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLHlCQUF5QjtJQUN6QixnQkFBZ0I7SUFDaEIseUJBQXlCO0lBQ3pCLG9CQUFvQjtJQUNwQiwyQkFBMkI7SUFDM0IsNkJBQTZCO0lBQzdCLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsY0FBYztJQUNkLHVCQUF1QjtJQUN2Qiw2QkFBNkI7SUFDN0IsK0JBQStCO0lBQy9CLG9CQUFvQjtJQUNwQix3QkFBd0I7SUFDeEIsb0JBQW9CO0lBQ3BCLHdCQUF3QjtJQUN4QiwwQkFBMEI7SUFDMUIsZ0NBQWdDO0FBQ2xDO0FBQ0EsSUFBSUMsVUFBVTtJQUNaRCxPQUFPQTtBQUNUO0FBRXFDLENBQ3JDLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL3VpL2Rpc3Qvc3BhbmlzaC01NGJhODNlYS5qcz85ZWY2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBtb2RhbCA9IHtcbiAgXCJhZGFwdGVyLWxvYWRlci5tZXNzYWdlXCI6IFwiVmVyaWZpY2EgdHUgY3VlbnRhIHt7YWRhcHRlcn19IHBhcmEgY29udGludWFyXCIsXG4gIFwiYWRhcHRlci1sb2FkZXIubWVzc2FnZTFcIjogXCJWZXJpZmlxdWUgc3Uge3thZGFwdGVyfX1cIixcbiAgXCJhZGFwdGVyLWxvYWRlci5tZXNzYWdlMlwiOiBcImN1ZW50YSBwYXJhIGNvbnRpbnVhclwiLFxuICBcImVycm9ycy1pbnZhbGlkLW51bWJlci1lbWFpbFwiOiBcIkNvcnJlbyBlbGVjdHLDs25pY28gbyBuw7ptZXJvIGRlIHRlbMOpZm9ubyBpbnbDoWxpZG9cIixcbiAgXCJlcnJvcnMtcmVxdWlyZWRcIjogXCJDYW1wbyBvYmxpZ2F0b3Jpb1wiLFxuICBcImV4dGVybmFsLmJhY2tcIjogXCJBdHLDoXNcIixcbiAgXCJleHRlcm5hbC5jb25uZWN0XCI6IFwiQ29uZWN0YXIgY29uIGJpbGxldGVyYVwiLFxuICBcImV4dGVybmFsLnRpdGxlXCI6IFwiQmlsbGV0ZXJhIEV4dGVybmFcIixcbiAgXCJleHRlcm5hbC53YWxsZXRjb25uZWN0LWNvbm5lY3RcIjogXCJDb25lY3RhclwiLFxuICBcImV4dGVybmFsLndhbGxldGNvbm5lY3QtY29weVwiOiBcIkhheiBjbGljIGVuIGVsIGPDs2RpZ28gUVIgcGFyYSBjb3BpYXJsbyBhbCBwb3J0YXBhcGVsZXNcIixcbiAgXCJleHRlcm5hbC53YWxsZXRjb25uZWN0LXN1YnRpdGxlXCI6IFwiRXNjYW5lYXIgZWwgY8OzZGlnbyBRUiBjb24gdW5hIGJpbGxldGVyYSBjb21wYXRpYmxlIGNvbiBXYWxsZXRDb25uZWN0XCIsXG4gIFwiZm9vdGVyLm1lc3NhZ2VcIjogXCJJbmljaW8gZGUgc2VzacOzbiBjb24gYXV0b2dlc3Rpw7NuIHBvclwiLFxuICBcImZvb3Rlci5tZXNzYWdlLW5ld1wiOiBcIkluaWNpbyBkZSBzZXNpw7NuIGNvbiBhdXRvZ2VzdGnDs24gcG9yIFdlYjNBdXRoXCIsXG4gIFwiZm9vdGVyLnBvbGljeVwiOiBcIlBvbMOtdGljYSBkZSBwcml2YWNpZGFkXCIsXG4gIFwiZm9vdGVyLnRlcm1zXCI6IFwiVMOpcm1pbm9zIGRlIFVzb1wiLFxuICBcImZvb3Rlci50ZXJtcy1zZXJ2aWNlXCI6IFwiVMOpcm1pbm9zIGRlIHNlcnZpY2lvXCIsXG4gIFwiZm9vdGVyLnZlcnNpb25cIjogXCJWZXJzacOzblwiLFxuICBcImhlYWRlci1zdWJ0aXRsZVwiOiBcIlNlbGVjY2lvbmUgdW5hIGRlIGxhcyBzaWd1aWVudGVzIG9wY2lvbmVzIHBhcmEgY29udGludWFyXCIsXG4gIFwiaGVhZGVyLXN1YnRpdGxlLW5hbWVcIjogXCJTdSBiaWxsZXRlcmEge3thcHBOYW1lfX0gY29uIHVuIHNvbG8gY2xpY1wiLFxuICBcImhlYWRlci1zdWJ0aXRsZS1uZXdcIjogXCJTdSBiaWxsZXRlcmEgYmxvY2tjaGFpbiBjb24gdW4gc29sbyBjbGljXCIsXG4gIFwiaGVhZGVyLXRpdGxlXCI6IFwiSW5pY2lhciBzZXNpw7NuXCIsXG4gIFwiaGVhZGVyLXRvb2x0aXAtZGVzY1wiOiBcIkxhIGJpbGxldGVyYSBzaXJ2ZSBjb21vIHVuYSBjdWVudGEgcGFyYSBhbG1hY2VuYXIgeSBhZG1pbmlzdHJhciBzdXMgYWN0aXZvcyBkaWdpdGFsZXMgZW4gbGEgY2FkZW5hIGRlIGJsb3F1ZXMuXCIsXG4gIFwiaGVhZGVyLXRvb2x0aXAtdGl0bGVcIjogXCJCaWxsZXRlcmFcIixcbiAgXCJuZXR3b3JrLmFkZC1yZXF1ZXN0XCI6IFwiRXN0ZSBzaXRpbyBlc3TDoSBzb2xpY2l0YW5kbyBhZ3JlZ2FyIHVuYSByZWRcIixcbiAgXCJuZXR3b3JrLmNhbmNlbFwiOiBcIkNhbmNlbGFyXCIsXG4gIFwibmV0d29yay5mcm9tXCI6IFwiRGVcIixcbiAgXCJuZXR3b3JrLnByb2NlZWRcIjogXCJDb250aW51YXJcIixcbiAgXCJuZXR3b3JrLnN3aXRjaC1yZXF1ZXN0XCI6IFwiRXN0ZSBzaXRpbyBlc3TDoSBzb2xpY2l0YW5kbyBjYW1iaWFyIGRlIHJlZFwiLFxuICBcIm5ldHdvcmsudG9cIjogXCJBXCIsXG4gIFwicG9wdXAucGhvbmUtYm9keVwiOiBcIlN1IGPDs2RpZ28gZGUgcGHDrXMgc2UgZGV0ZWN0YXLDoSBhdXRvbcOhdGljYW1lbnRlLCBwZXJvIHNpIGVzdMOhIHV0aWxpemFuZG8gdW4gbsO6bWVybyBkZSB0ZWzDqWZvbm8gZGUgb3RybyBwYcOtcywgZGViZXLDoSBpbmdyZXNhciBtYW51YWxtZW50ZSBlbCBjw7NkaWdvIGRlIHBhw61zIGNvcnJlY3RvLlwiLFxuICBcInBvcHVwLnBob25lLWhlYWRlclwiOiBcIk7Dum1lcm8gZGUgdGVsw6lmb25vIHkgY8OzZGlnbyBkZSBwYcOtc1wiLFxuICBcInNvY2lhbC5jb250aW51ZVwiOiBcIkNvbnRpbnVhciBjb25cIixcbiAgXCJzb2NpYWwuY29udGludWVDdXN0b21cIjogXCJDb250aW51YXIgY29uIHt7YWRhcHRlcn19XCIsXG4gIFwic29jaWFsLmVtYWlsXCI6IFwiQ29ycmVvIGVsZWN0csOzbmljb1wiLFxuICBcInNvY2lhbC5lbWFpbC1jb250aW51ZVwiOiBcIkNvbnRpbnVhciBjb24gY29ycmVvIGVsZWN0csOzbmljb1wiLFxuICBcInNvY2lhbC5lbWFpbC1uZXdcIjogXCJub21icmVAZWplbXBsby5jb21cIixcbiAgXCJzb2NpYWwucGFzc3dvcmRsZXNzLWN0YVwiOiBcIkNvbnRpbnVhclwiLFxuICBcInNvY2lhbC5wYXNzd29yZGxlc3MtdGl0bGVcIjogXCJFbWFpbCBvIHRlbMOpZm9ub1wiLFxuICBcInNvY2lhbC5waG9uZVwiOiBcIlRlbMOpZm9ub1wiLFxuICBcInNvY2lhbC5wb2xpY3lcIjogXCJObyBhbG1hY2VuYW1vcyBuaW5nw7puIGRhdG8gcmVsYWNpb25hZG8gY29uIHN1cyBpbmljaW9zIGRlIHNlc2nDs24gc29jaWFsZXMuXCIsXG4gIFwic29jaWFsLnNtc1wiOiBcIk3Ds3ZpbFwiLFxuICBcInNvY2lhbC5zbXMtY29udGludWVcIjogXCJDb250aW51YXIgY29uIG3Ds3ZpbFwiLFxuICBcInNvY2lhbC5zbXMtaW52YWxpZC1udW1iZXJcIjogXCJOw7ptZXJvIGRlIHRlbMOpZm9ubyBpbnbDoWxpZG9cIixcbiAgXCJzb2NpYWwuc21zLXBsYWNlaG9sZGVyLXRleHRcIjogXCJQb3IgZWouOlwiLFxuICBcInNvY2lhbC52aWV3LWxlc3NcIjogXCJWZXIgbWVub3Mgb3BjaW9uZXNcIixcbiAgXCJzb2NpYWwudmlldy1sZXNzLW5ld1wiOiBcIlZlciBtZW5vc1wiLFxuICBcInNvY2lhbC52aWV3LW1vcmVcIjogXCJWZXIgbcOhcyBvcGNpb25lc1wiLFxuICBcInNvY2lhbC52aWV3LW1vcmUtbmV3XCI6IFwiVmVyIG3DoXNcIixcbiAgXCJwb3N0LWxvYWRpbmcuY29ubmVjdGVkXCI6IFwiRXN0w6FzIGNvbmVjdGFkbyBjb24gdHUgY3VlbnRhXCIsXG4gIFwicG9zdC1sb2FkaW5nLnNvbWV0aGluZy13cm9uZ1wiOiBcIsKhQWxnbyBzYWxpw7MgbWFsIVwiXG59O1xudmFyIHNwYW5pc2ggPSB7XG4gIG1vZGFsOiBtb2RhbFxufTtcblxuZXhwb3J0IHsgc3BhbmlzaCBhcyBkZWZhdWx0LCBtb2RhbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BhbmlzaC01NGJhODNlYS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJtb2RhbCIsInNwYW5pc2giLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ui/dist/spanish-54ba83ea.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/wallet-connect-v2-adapter/dist/walletConnectV2Adapter.esm.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@web3auth/wallet-connect-v2-adapter/dist/walletConnectV2Adapter.esm.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_EIP155_METHODS: () => (/* binding */ DEFAULT_EIP155_METHODS),\n/* harmony export */   DEFAULT_EIP_155_EVENTS: () => (/* binding */ DEFAULT_EIP_155_EVENTS),\n/* harmony export */   WALLET_CONNECT_EXTENSION_ADAPTERS: () => (/* binding */ WALLET_CONNECT_EXTENSION_ADAPTERS),\n/* harmony export */   WalletConnectV2Adapter: () => (/* binding */ WalletConnectV2Adapter),\n/* harmony export */   getNamespacesFromChains: () => (/* binding */ getNamespacesFromChains),\n/* harmony export */   getRequiredNamespaces: () => (/* binding */ getRequiredNamespaces),\n/* harmony export */   getSupportedEventsByNamespace: () => (/* binding */ getSupportedEventsByNamespace),\n/* harmony export */   getSupportedMethodsByNamespace: () => (/* binding */ getSupportedMethodsByNamespace),\n/* harmony export */   getWalletConnectV2Settings: () => (/* binding */ getWalletConnectV2Settings)\n/* harmony export */ });\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @web3auth/base */ \"(ssr)/./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/sign-client */ \"(ssr)/./node_modules/@walletconnect/sign-client/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _web3auth_base_evm_adapter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/base-evm-adapter */ \"(ssr)/./node_modules/@web3auth/base-evm-adapter/dist/baseEvmAdapter.esm.js\");\n/* harmony import */ var _web3auth_ethereum_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @web3auth/ethereum-provider */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/dist/ethereumProvider.esm.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash.merge */ \"(ssr)/./node_modules/lodash.merge/index.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\n\nconst WALLET_CONNECT_EXTENSION_ADAPTERS = [\n    {\n        name: \"Rainbow\",\n        chains: [\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155\n        ],\n        logo: \"https://images.web3auth.io/login-rainbow.svg\",\n        mobile: {\n            native: \"rainbow:\",\n            universal: \"https://rnbwapp.com\"\n        },\n        desktop: {\n            native: \"\",\n            universal: \"\"\n        }\n    },\n    {\n        name: \"MetaMask\",\n        chains: [\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155\n        ],\n        logo: \"https://images.web3auth.io/login-metamask.svg\",\n        mobile: {\n            native: \"metamask:\",\n            universal: \"https://metamask.app.link\"\n        },\n        desktop: {\n            native: \"\",\n            universal: \"\"\n        }\n    },\n    {\n        name: \"Argent\",\n        chains: [\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155\n        ],\n        logo: \"https://images.web3auth.io/login-argent.svg\",\n        mobile: {\n            native: \"argent://\",\n            universal: \"https://www.argent.xyz/app\"\n        },\n        desktop: {\n            native: \"\",\n            universal: \"\"\n        }\n    },\n    {\n        name: \"Trust Wallet\",\n        chains: [\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155\n        ],\n        logo: \"https://images.web3auth.io/login-trust.svg\",\n        mobile: {\n            native: \"trust:\",\n            universal: \"https://link.trustwallet.com\"\n        },\n        desktop: {\n            native: \"\",\n            universal: \"\"\n        }\n    },\n    {\n        name: \"Zerion\",\n        chains: [\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155\n        ],\n        logo: \"https://images.web3auth.io/login-zerion.svg\",\n        mobile: {\n            native: \"zerion://\",\n            universal: \"https://wallet.zerion.io\"\n        },\n        desktop: {\n            native: \"\",\n            universal: \"\"\n        }\n    }\n];\nlet DEFAULT_EIP155_METHODS = /*#__PURE__*/ function(DEFAULT_EIP155_METHODS) {\n    DEFAULT_EIP155_METHODS[\"ETH_SEND_TRANSACTION\"] = \"eth_sendTransaction\";\n    DEFAULT_EIP155_METHODS[\"ETH_SIGN\"] = \"eth_sign\";\n    DEFAULT_EIP155_METHODS[\"PERSONAL_SIGN\"] = \"personal_sign\";\n    DEFAULT_EIP155_METHODS[\"ETH_SIGN_TYPED_DATA\"] = \"eth_signTypedData\";\n    return DEFAULT_EIP155_METHODS;\n}({});\nlet DEFAULT_EIP_155_EVENTS = /*#__PURE__*/ function(DEFAULT_EIP_155_EVENTS) {\n    DEFAULT_EIP_155_EVENTS[\"ETH_CHAIN_CHANGED\"] = \"chainChanged\";\n    DEFAULT_EIP_155_EVENTS[\"ETH_ACCOUNTS_CHANGED\"] = \"accountsChanged\";\n    return DEFAULT_EIP_155_EVENTS;\n}({});\n/**\n * Extracts a name for the site from the DOM\n */ const getSiteName = (window1)=>{\n    const { document: document1 } = window1;\n    const siteName = document1.querySelector('head > meta[property=\"og:site_name\"]');\n    if (siteName) {\n        return siteName.content;\n    }\n    const metaTitle = document1.querySelector('head > meta[name=\"title\"]');\n    if (metaTitle) {\n        return metaTitle.content;\n    }\n    if (document1.title && document1.title.length > 0) {\n        return document1.title;\n    }\n    return window1.location.hostname;\n};\n/**\n * Returns whether the given image URL exists\n * @param url - the url of the image\n * @returns - whether the image exists\n */ function imgExists(url) {\n    return new Promise((resolve, reject)=>{\n        try {\n            const img = document.createElement(\"img\");\n            img.onload = ()=>resolve(true);\n            img.onerror = ()=>resolve(false);\n            img.src = url;\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n/**\n * Extracts an icon for the site from the DOM\n */ async function getSiteIcon(window1) {\n    const { document: document1 } = window1;\n    // Use the site's favicon if it exists\n    let icon = document1.querySelector('head > link[rel=\"shortcut icon\"]');\n    if (icon && await imgExists(icon.href)) {\n        return icon.href;\n    }\n    // Search through available icons in no particular order\n    icon = Array.from(document1.querySelectorAll('head > link[rel=\"icon\"]')).find((_icon)=>Boolean(_icon.href)) || null;\n    if (icon && await imgExists(icon.href)) {\n        return icon.href;\n    }\n    return null;\n}\n/**\n * Gets site metadata and returns it\n *\n */ const getSiteMetadata = async ()=>({\n        name: getSiteName(window),\n        icon: await getSiteIcon(window)\n    });\nconst getNamespacesFromChains = (chains)=>{\n    const supportedNamespaces = [];\n    chains.forEach((chainId)=>{\n        const [namespace] = chainId.split(\":\");\n        if (!supportedNamespaces.includes(namespace)) {\n            supportedNamespaces.push(namespace);\n        }\n    });\n    return supportedNamespaces;\n};\nconst getSupportedMethodsByNamespace = (namespace)=>{\n    switch(namespace){\n        case _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155:\n            return Object.values(DEFAULT_EIP155_METHODS);\n        default:\n            throw new Error(`No default methods for namespace: ${namespace}`);\n    }\n};\nconst getSupportedEventsByNamespace = (namespace)=>{\n    switch(namespace){\n        case _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155:\n            return Object.values(DEFAULT_EIP_155_EVENTS);\n        default:\n            throw new Error(`No default events for namespace: ${namespace}`);\n    }\n};\nconst getRequiredNamespaces = (chains)=>{\n    const selectedNamespaces = getNamespacesFromChains(chains);\n    return Object.fromEntries(selectedNamespaces.map((namespace)=>[\n            namespace,\n            {\n                methods: getSupportedMethodsByNamespace(namespace),\n                chains: chains.filter((chain)=>chain.startsWith(namespace)),\n                events: getSupportedEventsByNamespace(namespace)\n            }\n        ]));\n};\nconst getWalletConnectV2Settings = async (namespace, chainIds, projectID)=>{\n    if (namespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155) {\n        const appMetadata = await getSiteMetadata();\n        const adapterSettings = {\n            walletConnectInitOptions: {\n                projectId: projectID,\n                relayUrl: \"wss://relay.walletconnect.com\",\n                metadata: {\n                    name: appMetadata.name,\n                    description: appMetadata.name,\n                    url: window.location.origin,\n                    icons: [\n                        appMetadata.icon || \"\"\n                    ]\n                }\n            }\n        };\n        const chainNamespaces = chainIds.map((chainId)=>{\n            return `${namespace}:${chainId}`;\n        });\n        const loginSettings = {\n            requiredNamespaces: getRequiredNamespaces(chainNamespaces)\n        };\n        return {\n            adapterSettings,\n            loginSettings\n        };\n    }\n    throw new Error(`Unsupported chain namespace: ${namespace}`);\n};\nconst isChainIdSupported = (chainNamespace, chainID, loginSettings)=>{\n    var _supportedNamespaces$, _supportedNamespaces$2;\n    const supportedNamespaces = (loginSettings === null || loginSettings === void 0 ? void 0 : loginSettings.requiredNamespaces) || {};\n    const wcChainNamespace = `${chainNamespace}:${chainID}`;\n    if (!supportedNamespaces[chainNamespace].chains || ((_supportedNamespaces$ = supportedNamespaces[chainNamespace].chains) === null || _supportedNamespaces$ === void 0 ? void 0 : _supportedNamespaces$.length) === 0) {\n        return false;\n    }\n    const isSupported = (_supportedNamespaces$2 = supportedNamespaces[chainNamespace].chains) === null || _supportedNamespaces$2 === void 0 ? void 0 : _supportedNamespaces$2.includes(wcChainNamespace);\n    return !!isSupported;\n};\nclass WalletConnectV2Adapter extends _web3auth_base_evm_adapter__WEBPACK_IMPORTED_MODULE_3__.BaseEvmAdapter {\n    constructor(){\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super(options);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"name\", _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.WALLET_CONNECT_V2);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"adapterNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_NAMESPACES.EIP155);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"currentChainNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.CHAIN_NAMESPACES.EIP155);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"type\", _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_CATEGORY.EXTERNAL);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"adapterOptions\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"status\", _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.NOT_READY);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"adapterData\", {\n            uri: \"\",\n            extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"connector\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"activeSession\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, \"wcProvider\", null);\n        this.adapterOptions = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, options);\n    }\n    get connected() {\n        return !!this.activeSession;\n    }\n    get provider() {\n        if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.NOT_READY && this.wcProvider) {\n            return this.wcProvider;\n        }\n        return null;\n    }\n    set provider(_) {\n        throw new Error(\"Not implemented\");\n    }\n    async init(options) {\n        var _this$adapterOptions$, _this$chainConfig, _this$chainConfig2;\n        await super.init();\n        super.checkInitializationRequirements();\n        const projectId = (_this$adapterOptions$ = this.adapterOptions.adapterSettings) === null || _this$adapterOptions$ === void 0 || (_this$adapterOptions$ = _this$adapterOptions$.walletConnectInitOptions) === null || _this$adapterOptions$ === void 0 ? void 0 : _this$adapterOptions$.projectId;\n        if (!projectId) {\n            throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletInitializationError.invalidParams(\"Wallet connect project id is required in wallet connect v2 adapter\");\n        }\n        const wc2Settings = await getWalletConnectV2Settings((_this$chainConfig = this.chainConfig) === null || _this$chainConfig === void 0 ? void 0 : _this$chainConfig.chainNamespace, [\n            parseInt((_this$chainConfig2 = this.chainConfig) === null || _this$chainConfig2 === void 0 ? void 0 : _this$chainConfig2.chainId, 16)\n        ], projectId);\n        if (!this.adapterOptions.loginSettings) {\n            this.adapterOptions.loginSettings = wc2Settings.loginSettings;\n        }\n        this.adapterOptions.adapterSettings = lodash_merge__WEBPACK_IMPORTED_MODULE_5___default()(wc2Settings.adapterSettings, this.adapterOptions.adapterSettings);\n        const { adapterSettings } = this.adapterOptions;\n        this.connector = await _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__[\"default\"].init(adapterSettings === null || adapterSettings === void 0 ? void 0 : adapterSettings.walletConnectInitOptions);\n        this.wcProvider = new _web3auth_ethereum_provider__WEBPACK_IMPORTED_MODULE_4__.WalletConnectV2Provider({\n            config: {\n                chainConfig: this.chainConfig\n            },\n            connector: this.connector\n        });\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.WALLET_CONNECT_V2);\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.READY;\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.debug(\"initializing wallet connect v2 adapter\");\n        if (options.autoConnect) {\n            await this.checkForPersistedSession();\n            if (this.connected) {\n                this.rehydrated = true;\n                try {\n                    await this.onConnectHandler();\n                } catch (error) {\n                    _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.error(\"wallet auto connect\", error);\n                    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.ERRORED, error);\n                }\n            } else {\n                this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.NOT_READY;\n                this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.CACHE_CLEAR);\n            }\n        }\n    }\n    async connect() {\n        super.checkConnectionRequirements();\n        if (!this.connector) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n        try {\n            // if already connected\n            if (this.connected) {\n                await this.onConnectHandler();\n                return this.provider;\n            }\n            if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.CONNECTING) {\n                await this.createNewSession();\n            }\n            return this.provider;\n        } catch (error) {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.error(\"Wallet connect v2 adapter error while connecting\", error);\n            // ready again to be connected\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.READY;\n            this.rehydrated = true;\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.ERRORED, error);\n            const finalError = error instanceof _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.Web3AuthError ? error : _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletLoginError.connectionError(`Failed to login with wallet connect: ${(error === null || error === void 0 ? void 0 : error.message) || \"\"}`);\n            throw finalError;\n        }\n    }\n    async addChain(chainConfig) {\n        var _this$wcProvider;\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkAddChainRequirements(chainConfig, init);\n        if (!isChainIdSupported(this.currentChainNamespace, parseInt(chainConfig.chainId, 16), this.adapterOptions.loginSettings)) {\n            throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletOperationsError.chainIDNotAllowed(`Unsupported chainID: ${chainConfig.chainId}`);\n        }\n        await ((_this$wcProvider = this.wcProvider) === null || _this$wcProvider === void 0 ? void 0 : _this$wcProvider.addChain(chainConfig));\n        this.addChainConfig(chainConfig);\n    }\n    async switchChain(params) {\n        var _this$wcProvider2;\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        super.checkSwitchChainRequirements(params, init);\n        if (!isChainIdSupported(this.currentChainNamespace, parseInt(params.chainId, 16), this.adapterOptions.loginSettings)) {\n            throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletOperationsError.chainIDNotAllowed(`Unsupported chainID: ${params.chainId}`);\n        }\n        await ((_this$wcProvider2 = this.wcProvider) === null || _this$wcProvider2 === void 0 ? void 0 : _this$wcProvider2.switchChain({\n            chainId: params.chainId\n        }));\n        this.setAdapterSettings({\n            chainConfig: this.getChainConfig(params.chainId)\n        });\n    }\n    async getUserInfo() {\n        if (!this.connected) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n        return {};\n    }\n    async disconnect() {\n        var _this$activeSession, _this$activeSession2;\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            cleanup: false\n        };\n        await super.disconnectSession();\n        const { cleanup } = options;\n        if (!this.connector || !this.connected || !((_this$activeSession = this.activeSession) !== null && _this$activeSession !== void 0 && _this$activeSession.topic)) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletLoginError.notConnectedError(\"Not connected with wallet\");\n        await this.connector.disconnect({\n            topic: (_this$activeSession2 = this.activeSession) === null || _this$activeSession2 === void 0 ? void 0 : _this$activeSession2.topic,\n            reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_7__.getSdkError)(\"USER_DISCONNECTED\")\n        });\n        this.rehydrated = false;\n        if (cleanup) {\n            this.connector = null;\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.NOT_READY;\n            this.wcProvider = null;\n        } else {\n            // ready to connect again\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.READY;\n        }\n        this.activeSession = null;\n        await super.disconnect();\n    }\n    cleanupPendingPairings() {\n        if (!this.connector) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n        const inactivePairings = this.connector.pairing.getAll({\n            active: false\n        });\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_7__.isValidArray)(inactivePairings)) return;\n        inactivePairings.forEach((pairing)=>{\n            if (this.connector) {\n                this.connector.pairing.delete(pairing.topic, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_7__.getSdkError)(\"USER_DISCONNECTED\"));\n            }\n        });\n    }\n    async checkForPersistedSession() {\n        if (!this.connector) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n        if (this.connector.session.length) {\n            const lastKeyIndex = this.connector.session.keys.length - 1;\n            this.activeSession = this.connector.session.get(this.connector.session.keys[lastKeyIndex]);\n        }\n        return this.activeSession;\n    }\n    async createNewSession() {\n        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            forceNewSession: false\n        };\n        try {\n            var _this$activeSession3, _this$adapterOptions;\n            if (!this.connector) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n            if (!this.adapterOptions.loginSettings) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletInitializationError.notReady(\"login settings are not set yet\");\n            this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.CONNECTING;\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.CONNECTING, {\n                adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.WALLET_CONNECT_V2\n            });\n            if (opts.forceNewSession && (_this$activeSession3 = this.activeSession) !== null && _this$activeSession3 !== void 0 && _this$activeSession3.topic) {\n                var _this$activeSession4;\n                await this.connector.disconnect({\n                    topic: (_this$activeSession4 = this.activeSession) === null || _this$activeSession4 === void 0 ? void 0 : _this$activeSession4.topic,\n                    reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_7__.getSdkError)(\"USER_DISCONNECTED\")\n                });\n            }\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.debug(\"creating new session for web3auth wallet connect\");\n            const { uri, approval } = await this.connector.connect(this.adapterOptions.loginSettings);\n            const qrcodeModal = (_this$adapterOptions = this.adapterOptions) === null || _this$adapterOptions === void 0 || (_this$adapterOptions = _this$adapterOptions.adapterSettings) === null || _this$adapterOptions === void 0 ? void 0 : _this$adapterOptions.qrcodeModal;\n            // Open QRCode modal if a URI was returned (i.e. we're not connecting with an existing pairing).\n            if (uri) {\n                if (qrcodeModal) {\n                    try {\n                        await qrcodeModal.openModal({\n                            uri\n                        });\n                        _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.debug(\"EVENT\", \"QR Code Modal closed\");\n                        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.READY;\n                        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.WALLET_CONNECT_V2);\n                    } catch (error) {\n                        _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.error(\"unable to open qr code modal\");\n                    }\n                } else {\n                    this.updateAdapterData({\n                        uri,\n                        extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS\n                    });\n                }\n            }\n            this.connector.events.once(\"proposal_expire\", (args)=>{\n                _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.info(\"proposal expired\", args);\n                // Handle proposal expiration\n                this.createNewSession({\n                    forceNewSession: true\n                });\n            });\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.info(\"awaiting session approval from wallet\");\n            // Await session approval from the wallet.\n            const session = await approval();\n            this.activeSession = session;\n            // Handle the returned session (e.g. update UI to \"connected\" state).\n            await this.onConnectHandler();\n            if (qrcodeModal) {\n                qrcodeModal.closeModal();\n            }\n        } catch (error) {\n            _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.log.error(\"error while creating new wallet connect session\", error);\n            this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.ERRORED, error);\n            throw error;\n        }\n    }\n    async onConnectHandler() {\n        var _this$adapterOptions$2;\n        if (!this.connector || !this.wcProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n        if (!this.chainConfig) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletInitializationError.invalidParams(\"Chain config is not set\");\n        if ((_this$adapterOptions$2 = this.adapterOptions.adapterSettings) !== null && _this$adapterOptions$2 !== void 0 && _this$adapterOptions$2.qrcodeModal) {\n            this.wcProvider = new _web3auth_ethereum_provider__WEBPACK_IMPORTED_MODULE_4__.WalletConnectV2Provider({\n                config: {\n                    chainConfig: this.chainConfig,\n                    skipLookupNetwork: true\n                },\n                connector: this.connector\n            });\n        }\n        await this.wcProvider.setupProvider(this.connector);\n        this.subscribeEvents();\n        this.cleanupPendingPairings();\n        this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_STATUS.CONNECTED;\n        this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.ADAPTER_EVENTS.CONNECTED, {\n            adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WALLET_ADAPTERS.WALLET_CONNECT_V2,\n            reconnected: this.rehydrated\n        });\n    }\n    subscribeEvents() {\n        if (!this.connector) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n        this.connector.events.on(\"session_update\", (_ref)=>{\n            let { topic, params } = _ref;\n            if (!this.connector) return;\n            const { namespaces } = params;\n            const _session = this.connector.session.get(topic);\n            // Overwrite the `namespaces` of the existing session with the incoming one.\n            const updatedSession = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_1___default()({}, _session), {}, {\n                namespaces\n            });\n            // Integrate the updated session state into your dapp state.\n            this.activeSession = updatedSession;\n        });\n        this.connector.events.on(\"session_delete\", ()=>{\n            // Session was deleted -> reset the dapp state, clean up from user session, etc.\n            this.disconnect();\n        });\n    }\n}\n //# sourceMappingURL=walletConnectV2Adapter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/wallet-connect-v2-adapter/dist/walletConnectV2Adapter.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/chains.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/chains.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chains: () => (/* binding */ chains)\n/* harmony export */ });\nconst chains = {\n    mainnet: {\n        name: \"mainnet\",\n        chainId: 1,\n        networkId: 1,\n        defaultHardfork: \"shanghai\",\n        consensus: {\n            type: \"pow\",\n            algorithm: \"ethash\",\n            ethash: {}\n        },\n        comment: \"The Ethereum main chain\",\n        url: \"https://ethstats.net/\",\n        genesis: {\n            gasLimit: 5000,\n            difficulty: 17179869184,\n            nonce: \"0x0000000000000042\",\n            extraData: \"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa\"\n        },\n        hardforks: [\n            {\n                name: \"chainstart\",\n                block: 0,\n                forkHash: \"0xfc64ec04\"\n            },\n            {\n                name: \"homestead\",\n                block: 1150000,\n                forkHash: \"0x97c2c34c\"\n            },\n            {\n                name: \"dao\",\n                block: 1920000,\n                forkHash: \"0x91d1f948\"\n            },\n            {\n                name: \"tangerineWhistle\",\n                block: 2463000,\n                forkHash: \"0x7a64da13\"\n            },\n            {\n                name: \"spuriousDragon\",\n                block: 2675000,\n                forkHash: \"0x3edd5b10\"\n            },\n            {\n                name: \"byzantium\",\n                block: 4370000,\n                forkHash: \"0xa00bc324\"\n            },\n            {\n                name: \"constantinople\",\n                block: 7280000,\n                forkHash: \"0x668db0af\"\n            },\n            {\n                name: \"petersburg\",\n                block: 7280000,\n                forkHash: \"0x668db0af\"\n            },\n            {\n                name: \"istanbul\",\n                block: 9069000,\n                forkHash: \"0x879d6e30\"\n            },\n            {\n                name: \"muirGlacier\",\n                block: 9200000,\n                forkHash: \"0xe029e991\"\n            },\n            {\n                name: \"berlin\",\n                block: 12244000,\n                forkHash: \"0x0eb440f6\"\n            },\n            {\n                name: \"london\",\n                block: 12965000,\n                forkHash: \"0xb715077d\"\n            },\n            {\n                name: \"arrowGlacier\",\n                block: 13773000,\n                forkHash: \"0x20c327fc\"\n            },\n            {\n                name: \"grayGlacier\",\n                block: 15050000,\n                forkHash: \"0xf0afd0e3\"\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge\n                // terminal block: https://etherscan.io/block/15537393\n                name: \"paris\",\n                ttd: \"58750000000000000000000\",\n                block: 15537394,\n                forkHash: \"0xf0afd0e3\"\n            },\n            {\n                name: \"mergeForkIdTransition\",\n                block: null,\n                forkHash: null\n            },\n            {\n                name: \"shanghai\",\n                block: null,\n                timestamp: \"1681338455\",\n                forkHash: \"0xdce96c2d\"\n            },\n            {\n                name: \"cancun\",\n                block: null,\n                forkHash: null\n            }\n        ],\n        bootstrapNodes: [\n            {\n                ip: \"18.138.108.67\",\n                port: 30303,\n                id: \"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666\",\n                location: \"ap-southeast-1-001\",\n                comment: \"bootnode-aws-ap-southeast-1-001\"\n            },\n            {\n                ip: \"3.209.45.79\",\n                port: 30303,\n                id: \"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de\",\n                location: \"us-east-1-001\",\n                comment: \"bootnode-aws-us-east-1-001\"\n            },\n            {\n                ip: \"65.108.70.101\",\n                port: 30303,\n                id: \"2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc\",\n                location: \"eu-west-1-001\",\n                comment: \"bootnode-hetzner-hel\"\n            },\n            {\n                ip: \"157.90.35.166\",\n                port: 30303,\n                id: \"4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052\",\n                location: \"eu-central-1-001\",\n                comment: \"bootnode-hetzner-fsn\"\n            }\n        ],\n        dnsNetworks: [\n            \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net\"\n        ]\n    },\n    goerli: {\n        name: \"goerli\",\n        chainId: 5,\n        networkId: 5,\n        defaultHardfork: \"shanghai\",\n        consensus: {\n            type: \"poa\",\n            algorithm: \"clique\",\n            clique: {\n                period: 15,\n                epoch: 30000\n            }\n        },\n        comment: \"Cross-client PoA test network\",\n        url: \"https://github.com/goerli/testnet\",\n        genesis: {\n            timestamp: \"0x5c51a607\",\n            gasLimit: 10485760,\n            difficulty: 1,\n            nonce: \"0x0000000000000000\",\n            extraData: \"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n        },\n        hardforks: [\n            {\n                name: \"chainstart\",\n                block: 0,\n                forkHash: \"0xa3f5ab08\"\n            },\n            {\n                name: \"homestead\",\n                block: 0,\n                forkHash: \"0xa3f5ab08\"\n            },\n            {\n                name: \"tangerineWhistle\",\n                block: 0,\n                forkHash: \"0xa3f5ab08\"\n            },\n            {\n                name: \"spuriousDragon\",\n                block: 0,\n                forkHash: \"0xa3f5ab08\"\n            },\n            {\n                name: \"byzantium\",\n                block: 0,\n                forkHash: \"0xa3f5ab08\"\n            },\n            {\n                name: \"constantinople\",\n                block: 0,\n                forkHash: \"0xa3f5ab08\"\n            },\n            {\n                name: \"petersburg\",\n                block: 0,\n                forkHash: \"0xa3f5ab08\"\n            },\n            {\n                name: \"istanbul\",\n                block: 1561651,\n                forkHash: \"0xc25efa5c\"\n            },\n            {\n                name: \"berlin\",\n                block: 4460644,\n                forkHash: \"0x757a1c47\"\n            },\n            {\n                name: \"london\",\n                block: 5062605,\n                forkHash: \"0xb8c6299d\"\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge,\n                // terminal block: https://goerli.etherscan.io/block/7382818\n                name: \"paris\",\n                ttd: \"10790000\",\n                block: 7382819,\n                forkHash: \"0xb8c6299d\"\n            },\n            {\n                name: \"mergeForkIdTransition\",\n                block: null,\n                forkHash: null\n            },\n            {\n                name: \"shanghai\",\n                block: null,\n                timestamp: \"1678832736\",\n                forkHash: \"0xf9843abf\"\n            },\n            {\n                name: \"cancun\",\n                block: null,\n                forkHash: null\n            }\n        ],\n        bootstrapNodes: [\n            {\n                ip: \"51.141.78.53\",\n                port: 30303,\n                id: \"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a\",\n                location: \"\",\n                comment: \"Upstream bootnode 1\"\n            },\n            {\n                ip: \"13.93.54.137\",\n                port: 30303,\n                id: \"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b\",\n                location: \"\",\n                comment: \"Upstream bootnode 2\"\n            },\n            {\n                ip: \"94.237.54.114\",\n                port: 30313,\n                id: \"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291\",\n                location: \"\",\n                comment: \"Upstream bootnode 3\"\n            },\n            {\n                ip: \"18.218.250.66\",\n                port: 30313,\n                id: \"b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949\",\n                location: \"\",\n                comment: \"Upstream bootnode 4\"\n            },\n            {\n                ip: \"3.11.147.67\",\n                port: 30303,\n                id: \"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91\",\n                location: \"\",\n                comment: \"Ethereum Foundation bootnode\"\n            },\n            {\n                ip: \"51.15.116.226\",\n                port: 30303,\n                id: \"a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd\",\n                location: \"\",\n                comment: \"Goerli Initiative bootnode\"\n            },\n            {\n                ip: \"51.15.119.157\",\n                port: 30303,\n                id: \"807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33\",\n                location: \"\",\n                comment: \"Goerli Initiative bootnode\"\n            },\n            {\n                ip: \"51.15.119.157\",\n                port: 40303,\n                id: \"a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd\",\n                location: \"\",\n                comment: \"Goerli Initiative bootnode\"\n            }\n        ],\n        dnsNetworks: [\n            \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net\"\n        ]\n    },\n    sepolia: {\n        name: \"sepolia\",\n        chainId: 11155111,\n        networkId: 11155111,\n        defaultHardfork: \"shanghai\",\n        consensus: {\n            type: \"pow\",\n            algorithm: \"ethash\",\n            ethash: {}\n        },\n        comment: \"PoW test network to replace Ropsten\",\n        url: \"https://github.com/ethereum/go-ethereum/pull/23730\",\n        genesis: {\n            timestamp: \"0x6159af19\",\n            gasLimit: 30000000,\n            difficulty: 131072,\n            nonce: \"0x0000000000000000\",\n            extraData: \"0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521\"\n        },\n        hardforks: [\n            {\n                name: \"chainstart\",\n                block: 0,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                name: \"homestead\",\n                block: 0,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                name: \"tangerineWhistle\",\n                block: 0,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                name: \"spuriousDragon\",\n                block: 0,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                name: \"byzantium\",\n                block: 0,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                name: \"constantinople\",\n                block: 0,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                name: \"petersburg\",\n                block: 0,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                name: \"istanbul\",\n                block: 0,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                name: \"muirGlacier\",\n                block: 0,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                name: \"berlin\",\n                block: 0,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                name: \"london\",\n                block: 0,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge,\n                // terminal block: https://sepolia.etherscan.io/block/1450408\n                name: \"paris\",\n                ttd: \"17000000000000000\",\n                block: 1450409,\n                forkHash: \"0xfe3366e7\"\n            },\n            {\n                name: \"mergeForkIdTransition\",\n                block: 1735371,\n                forkHash: \"0xb96cbd13\"\n            },\n            {\n                name: \"shanghai\",\n                block: null,\n                timestamp: \"1677557088\",\n                forkHash: \"0xf7f9bc08\"\n            },\n            {\n                name: \"cancun\",\n                block: null,\n                forkHash: null\n            }\n        ],\n        bootstrapNodes: [\n            {\n                ip: \"18.168.182.86\",\n                port: 30303,\n                id: \"9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066\",\n                location: \"\",\n                comment: \"geth\"\n            },\n            {\n                ip: \"52.14.151.177\",\n                port: 30303,\n                id: \"ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7\",\n                location: \"\",\n                comment: \"besu\"\n            },\n            {\n                ip: \"165.22.196.173\",\n                port: 30303,\n                id: \"ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6\",\n                location: \"\",\n                comment: \"EF\"\n            },\n            {\n                ip: \"65.108.95.67\",\n                port: 30303,\n                id: \"075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6\",\n                location: \"\",\n                comment: \"lodestar\"\n            }\n        ],\n        dnsNetworks: [\n            \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net\"\n        ]\n    },\n    holesky: {\n        name: \"holesky\",\n        chainId: 17000,\n        networkId: 17000,\n        defaultHardfork: \"paris\",\n        consensus: {\n            type: \"pos\",\n            algorithm: \"casper\"\n        },\n        comment: \"PoS test network to replace Goerli\",\n        url: \"https://github.com/eth-clients/holesky/\",\n        genesis: {\n            baseFeePerGas: \"0x3B9ACA00\",\n            difficulty: \"0x01\",\n            extraData: \"0x\",\n            gasLimit: \"0x17D7840\",\n            nonce: \"0x0000000000001234\",\n            timestamp: \"0x65156994\"\n        },\n        hardforks: [\n            {\n                name: \"chainstart\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"homestead\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"tangerineWhistle\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"spuriousDragon\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"byzantium\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"constantinople\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"petersburg\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"istanbul\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"muirGlacier\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"berlin\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"london\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"paris\",\n                ttd: \"0\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"mergeForkIdTransition\",\n                block: 0,\n                forkHash: \"0xc61a6098\"\n            },\n            {\n                name: \"shanghai\",\n                block: null,\n                timestamp: \"1696000704\",\n                forkHash: \"0xfd4f016b\"\n            },\n            {\n                name: \"cancun\",\n                block: null,\n                forkHash: null\n            }\n        ],\n        bootstrapNodes: [\n            {\n                ip: \"146.190.13.128\",\n                port: 30303,\n                id: \"ac906289e4b7f12df423d654c5a962b6ebe5b3a74cc9e06292a85221f9a64a6f1cfdd6b714ed6dacef51578f92b34c60ee91e9ede9c7f8fadc4d347326d95e2b\",\n                location: \"\",\n                comment: \"bootnode 1\"\n            },\n            {\n                ip: \"178.128.136.233\",\n                port: 30303,\n                id: \"a3435a0155a3e837c02f5e7f5662a2f1fbc25b48e4dc232016e1c51b544cb5b4510ef633ea3278c0e970fa8ad8141e2d4d0f9f95456c537ff05fdf9b31c15072\",\n                location: \"\",\n                comment: \"bootnode 2\"\n            }\n        ],\n        dnsNetworks: [\n            \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.holesky.ethdisco.net\"\n        ]\n    }\n}; //# sourceMappingURL=chains.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/chains.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/common.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/common.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Common: () => (/* binding */ Common)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var crc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crc */ \"(ssr)/./node_modules/crc/mjs/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var _chains_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chains.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/chains.js\");\n/* harmony import */ var _eips_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./eips.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/eips.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./enums.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js\");\n/* harmony import */ var _hardforks_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hardforks.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/hardforks.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/utils.js\");\n\n\n\n\n\n\n\n\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */ class Common {\n    constructor(opts){\n        this._eips = [];\n        this._paramsCache = {};\n        this._activatedEIPsCache = [];\n        this.events = new events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();\n        this._customChains = opts.customChains ?? [];\n        this._chainParams = this.setChain(opts.chain);\n        this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Shanghai;\n        // Assign hardfork changes in the sequence of the applied hardforks\n        this.HARDFORK_CHANGES = this.hardforks().map((hf)=>[\n                hf.name,\n                _hardforks_js__WEBPACK_IMPORTED_MODULE_6__.hardforks[hf.name]\n            ]);\n        this._hardfork = this.DEFAULT_HARDFORK;\n        if (opts.hardfork !== undefined) {\n            this.setHardfork(opts.hardfork);\n        }\n        if (opts.eips) {\n            this.setEIPs(opts.eips);\n        }\n        if (Object.keys(this._paramsCache).length === 0) {\n            this._buildParamsCache();\n            this._buildActivatedEIPsCache();\n        }\n    }\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one.\n     *\n     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n     * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n     *\n     * ```javascript\n     * Common.custom({chainId: 123})\n     * ```\n     *\n     * There are also selected supported custom chains which can be initialized by using one of the\n     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n     *\n     * ```javascript\n     * Common.custom(CustomChains.MaticMumbai)\n     * ```\n     *\n     * Note that these supported custom chains only provide some base parameters (usually the chain and\n     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n     * the `@ethereumjs/tx` library to a Layer-2 chain).\n     *\n     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n     */ static custom(chainParamsOrName, opts = {}) {\n        const baseChain = opts.baseChain ?? \"mainnet\";\n        const standardChainParams = {\n            ...Common._getChainParams(baseChain)\n        };\n        standardChainParams[\"name\"] = \"custom-chain\";\n        if (typeof chainParamsOrName !== \"string\") {\n            return new Common({\n                chain: {\n                    ...standardChainParams,\n                    ...chainParamsOrName\n                },\n                ...opts\n            });\n        } else {\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMainnet) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMainnet,\n                    chainId: 137,\n                    networkId: 137\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMumbai) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMumbai,\n                    chainId: 80001,\n                    networkId: 80001\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.ArbitrumOne) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.ArbitrumOne,\n                    chainId: 42161,\n                    networkId: 42161\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.xDaiChain) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.xDaiChain,\n                    chainId: 100,\n                    networkId: 100\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticKovan) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticKovan,\n                    chainId: 69,\n                    networkId: 69\n                }, // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n                {\n                    hardfork: _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Berlin,\n                    ...opts\n                });\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticEthereum) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticEthereum,\n                    chainId: 10,\n                    networkId: 10\n                }, // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n                {\n                    hardfork: _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Berlin,\n                    ...opts\n                });\n            }\n            throw new Error(`Custom chain ${chainParamsOrName} not supported`);\n        }\n    }\n    /**\n     * Static method to load and set common from a geth genesis json\n     * @param genesisJson json of geth configuration\n     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n     * @returns Common\n     */ static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }) {\n        const genesisParams = (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.parseGethGenesis)(genesisJson, chain, mergeForkIdPostMerge);\n        const common = new Common({\n            chain: genesisParams.name ?? \"custom\",\n            customChains: [\n                genesisParams\n            ],\n            eips,\n            hardfork: hardfork ?? genesisParams.hardfork\n        });\n        if (genesisHash !== undefined) {\n            common.setForkHashes(genesisHash);\n        }\n        return common;\n    }\n    /**\n     * Static method to determine if a {@link chainId} is supported as a standard chain\n     * @param chainId bigint id (`1`) of a standard chain\n     * @returns boolean\n     */ static isSupportedChainId(chainId) {\n        const initializedChains = this.getInitializedChains();\n        return Boolean(initializedChains[\"names\"][chainId.toString()]);\n    }\n    static _getChainParams(chain, customChains) {\n        const initializedChains = this.getInitializedChains(customChains);\n        if (typeof chain === \"number\" || typeof chain === \"bigint\") {\n            chain = chain.toString();\n            if (initializedChains[\"names\"][chain]) {\n                const name = initializedChains[\"names\"][chain];\n                return initializedChains[name];\n            }\n            throw new Error(`Chain with ID ${chain} not supported`);\n        }\n        if (initializedChains[chain] !== undefined) {\n            return initializedChains[chain];\n        }\n        throw new Error(`Chain with name ${chain} not supported`);\n    }\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain representation.\n     *              Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */ setChain(chain) {\n        if (typeof chain === \"number\" || typeof chain === \"bigint\" || typeof chain === \"string\") {\n            this._chainParams = Common._getChainParams(chain, this._customChains);\n        } else if (typeof chain === \"object\") {\n            if (this._customChains.length > 0) {\n                throw new Error(\"Chain must be a string, number, or bigint when initialized with customChains passed in\");\n            }\n            const required = [\n                \"networkId\",\n                \"genesis\",\n                \"hardforks\",\n                \"bootstrapNodes\"\n            ];\n            for (const param of required){\n                if (!(param in chain)) {\n                    throw new Error(`Missing required chain parameter: ${param}`);\n                }\n            }\n            this._chainParams = chain;\n        } else {\n            throw new Error(\"Wrong input format\");\n        }\n        for (const hf of this.hardforks()){\n            if (hf.block === undefined) {\n                throw new Error(`Hardfork cannot have undefined block number`);\n            }\n        }\n        return this._chainParams;\n    }\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n     */ setHardfork(hardfork) {\n        let existing = false;\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            if (hfChanges[0] === hardfork) {\n                if (this._hardfork !== hardfork) {\n                    this._hardfork = hardfork;\n                    this._buildParamsCache();\n                    this._buildActivatedEIPsCache();\n                    this.events.emit(\"hardforkChanged\", hardfork);\n                }\n                existing = true;\n            }\n        }\n        if (!existing) {\n            throw new Error(`Hardfork with name ${hardfork} not supported`);\n        }\n    }\n    /**\n     * Returns the hardfork either based on block numer (older HFs) or\n     * timestamp (Shanghai upwards).\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param Opts Block number, timestamp or TD (all optional)\n     * @returns The name of the HF\n     */ getHardforkBy(opts) {\n        let { blockNumber, timestamp, td } = opts;\n        blockNumber = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(blockNumber, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        td = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(td, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        timestamp = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(timestamp, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n        const hfs = this.hardforks().filter((hf)=>hf.block !== null || hf.ttd !== null && hf.ttd !== undefined || hf.timestamp !== undefined);\n        const mergeIndex = hfs.findIndex((hf)=>hf.ttd !== null && hf.ttd !== undefined);\n        const doubleTTDHF = hfs.slice(mergeIndex + 1).findIndex((hf)=>hf.ttd !== null && hf.ttd !== undefined);\n        if (doubleTTDHF >= 0) {\n            throw Error(`More than one merge hardforks found with ttd specified`);\n        }\n        // Find the first hardfork that has a block number greater than `blockNumber`\n        // (skips the merge hardfork since it cannot have a block number specified).\n        // If timestamp is not provided, it also skips timestamps hardforks to continue\n        // discovering/checking number hardforks.\n        let hfIndex = hfs.findIndex((hf)=>blockNumber !== undefined && hf.block !== null && BigInt(hf.block) > blockNumber || timestamp !== undefined && hf.timestamp !== undefined && hf.timestamp > timestamp);\n        if (hfIndex === -1) {\n            // all hardforks apply, set hfIndex to the last one as that's the candidate\n            hfIndex = hfs.length;\n        } else if (hfIndex === 0) {\n            // cannot have a case where a block number is before all applied hardforks\n            // since the chain has to start with a hardfork\n            throw Error(\"Must have at least one hardfork at block 0\");\n        }\n        // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n        if (timestamp === undefined) {\n            const stepBack = hfs.slice(0, hfIndex).reverse().findIndex((hf)=>hf.block !== null || hf.ttd !== undefined);\n            hfIndex = hfIndex - stepBack;\n        }\n        // Move hfIndex one back to arrive at candidate hardfork\n        hfIndex = hfIndex - 1;\n        // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n        // hardforks. so it will now be needed to rollback\n        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n            // We're on the merge hardfork.  Let's check the TTD\n            if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {\n                // Merge ttd greater than current td so we're on hardfork before merge\n                hfIndex -= 1;\n            }\n        } else {\n            if (mergeIndex >= 0 && td !== undefined && td !== null) {\n                if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {\n                    throw Error(\"Maximum HF determined by total difficulty is lower than the block number HF\");\n                } else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) < td) {\n                    throw Error(\"HF determined by block number is lower than the minimum total difficulty HF\");\n                }\n            }\n        }\n        const hfStartIndex = hfIndex;\n        // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n        // This won't anyway be the case with Merge hfs\n        for(; hfIndex < hfs.length - 1; hfIndex++){\n            // break out if hfIndex + 1 is not scheduled at hfIndex\n            if (hfs[hfIndex].block !== hfs[hfIndex + 1].block || hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {\n                break;\n            }\n        }\n        if (timestamp !== undefined) {\n            const minTimeStamp = hfs.slice(0, hfStartIndex).reduce((acc, hf)=>Math.max(Number(hf.timestamp ?? \"0\"), acc), 0);\n            if (minTimeStamp > timestamp) {\n                throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);\n            }\n            const maxTimeStamp = hfs.slice(hfIndex + 1).reduce((acc, hf)=>Math.min(Number(hf.timestamp ?? timestamp), acc), Number(timestamp));\n            if (maxTimeStamp < timestamp) {\n                throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n            }\n        }\n        const hardfork = hfs[hfIndex];\n        return hardfork.name;\n    }\n    /**\n     * Sets a new hardfork either based on block numer (older HFs) or\n     * timestamp (Shanghai upwards).\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param Opts Block number, timestamp or TD (all optional)\n     * @returns The name of the HF set\n     */ setHardforkBy(opts) {\n        const hardfork = this.getHardforkBy(opts);\n        this.setHardfork(hardfork);\n        return hardfork;\n    }\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params or null if hardfork not on chain\n     */ _getHardfork(hardfork) {\n        const hfs = this.hardforks();\n        for (const hf of hfs){\n            if (hf[\"name\"] === hardfork) return hf;\n        }\n        return null;\n    }\n    /**\n     * Sets the active EIPs\n     * @param eips\n     */ setEIPs(eips = []) {\n        for (const eip of eips){\n            if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n                throw new Error(`${eip} not supported`);\n            }\n            const minHF = this.gteHardfork(_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip][\"minimumHardfork\"]);\n            if (!minHF) {\n                throw new Error(`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);\n            }\n        }\n        this._eips = eips;\n        this._buildParamsCache();\n        this._buildActivatedEIPsCache();\n        for (const eip of eips){\n            if (_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip].requiredEIPs !== undefined) {\n                for (const elem of _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip].requiredEIPs){\n                    if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n                        throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Internal helper for _buildParamsCache()\n     */ _mergeWithParamsCache(params) {\n        this._paramsCache[\"gasConfig\"] = {\n            ...this._paramsCache[\"gasConfig\"],\n            ...params[\"gasConfig\"]\n        };\n        this._paramsCache[\"gasPrices\"] = {\n            ...this._paramsCache[\"gasPrices\"],\n            ...params[\"gasPrices\"]\n        };\n        this._paramsCache[\"pow\"] = {\n            ...this._paramsCache[\"pow\"],\n            ...params[\"pow\"]\n        };\n        this._paramsCache[\"sharding\"] = {\n            ...this._paramsCache[\"sharding\"],\n            ...params[\"sharding\"]\n        };\n        this._paramsCache[\"vm\"] = {\n            ...this._paramsCache[\"vm\"],\n            ...params[\"vm\"]\n        };\n    }\n    /**\n     * Build up a cache for all parameter values for the current HF and all activated EIPs\n     */ _buildParamsCache() {\n        this._paramsCache = {};\n        // Iterate through all hardforks up to hardfork set\n        const hardfork = this.hardfork();\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            // EIP-referencing HF config (e.g. for berlin)\n            if (\"eips\" in hfChanges[1]) {\n                const hfEIPs = hfChanges[1][\"eips\"];\n                for (const eip of hfEIPs){\n                    if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n                        throw new Error(`${eip} not supported`);\n                    }\n                    this._mergeWithParamsCache(_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip]);\n                }\n            // Parameter-inlining HF config (e.g. for istanbul)\n            } else {\n                this._mergeWithParamsCache(hfChanges[1]);\n            }\n            if (hfChanges[0] === hardfork) break;\n        }\n        // Iterate through all additionally activated EIPs\n        for (const eip of this._eips){\n            if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n                throw new Error(`${eip} not supported`);\n            }\n            this._mergeWithParamsCache(_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip]);\n        }\n    }\n    _buildActivatedEIPsCache() {\n        this._activatedEIPsCache = [];\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            const hf = hfChanges[1];\n            if (this.gteHardfork(hf[\"name\"]) && \"eips\" in hf) {\n                this._activatedEIPsCache = this._activatedEIPsCache.concat(hf[\"eips\"]);\n            }\n        }\n        this._activatedEIPsCache = this._activatedEIPsCache.concat(this._eips);\n    }\n    /**\n     * Returns a parameter for the current chain setup\n     *\n     * If the parameter is present in an EIP, the EIP always takes precedence.\n     * Otherwise the parameter is taken from the latest applied HF with\n     * a change on the respective parameter.\n     *\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @returns The value requested or `BigInt(0)` if not found\n     */ param(topic, name) {\n        // TODO: consider the case that different active EIPs\n        // can change the same parameter\n        let value = null;\n        if (this._paramsCache[topic] !== undefined && this._paramsCache[topic][name] !== undefined) {\n            value = this._paramsCache[topic][name].v;\n        }\n        return BigInt(value ?? 0);\n    }\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name\n     * @returns The value requested or `BigInt(0)` if not found\n     */ paramByHardfork(topic, name, hardfork) {\n        let value = null;\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            // EIP-referencing HF config (e.g. for berlin)\n            if (\"eips\" in hfChanges[1]) {\n                const hfEIPs = hfChanges[1][\"eips\"];\n                for (const eip of hfEIPs){\n                    const valueEIP = this.paramByEIP(topic, name, eip);\n                    value = typeof valueEIP === \"bigint\" ? valueEIP : value;\n                }\n            // Parameter-inlining HF config (e.g. for istanbul)\n            } else {\n                if (hfChanges[1][topic] !== undefined && hfChanges[1][topic][name] !== undefined) {\n                    value = hfChanges[1][topic][name].v;\n                }\n            }\n            if (hfChanges[0] === hardfork) break;\n        }\n        return BigInt(value ?? 0);\n    }\n    /**\n     * Returns a parameter corresponding to an EIP\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param eip Number of the EIP\n     * @returns The value requested or `undefined` if not found\n     */ paramByEIP(topic, name, eip) {\n        if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n            throw new Error(`${eip} not supported`);\n        }\n        const eipParams = _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip];\n        if (!(topic in eipParams)) {\n            return undefined;\n        }\n        if (eipParams[topic][name] === undefined) {\n            return undefined;\n        }\n        const value = eipParams[topic][name].v;\n        return BigInt(value);\n    }\n    /**\n     * Returns a parameter for the hardfork active on block number or\n     * optional provided total difficulty (Merge HF)\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     * @param td Total difficulty\n     *    * @returns The value requested or `BigInt(0)` if not found\n     */ paramByBlock(topic, name, blockNumber, td, timestamp) {\n        const hardfork = this.getHardforkBy({\n            blockNumber,\n            td,\n            timestamp\n        });\n        return this.paramByHardfork(topic, name, hardfork);\n    }\n    /**\n     * Checks if an EIP is activated by either being included in the EIPs\n     * manually passed in with the {@link CommonOpts.eips} or in a\n     * hardfork currently being active\n     *\n     * Note: this method only works for EIPs being supported\n     * by the {@link CommonOpts.eips} constructor option\n     * @param eip\n     */ isActivatedEIP(eip) {\n        if (this._activatedEIPsCache.includes(eip)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */ hardforkIsActiveOnBlock(hardfork, blockNumber) {\n        blockNumber = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(blockNumber, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        hardfork = hardfork ?? this._hardfork;\n        const hfBlock = this.hardforkBlock(hardfork);\n        if (typeof hfBlock === \"bigint\" && hfBlock !== _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0 && blockNumber >= hfBlock) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */ activeOnBlock(blockNumber) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber);\n    }\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */ hardforkGteHardfork(hardfork1, hardfork2) {\n        hardfork1 = hardfork1 ?? this._hardfork;\n        const hardforks = this.hardforks();\n        let posHf1 = -1, posHf2 = -1;\n        let index = 0;\n        for (const hf of hardforks){\n            if (hf[\"name\"] === hardfork1) posHf1 = index;\n            if (hf[\"name\"] === hardfork2) posHf2 = index;\n            index += 1;\n        }\n        return posHf1 >= posHf2 && posHf2 !== -1;\n    }\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @returns True if hardfork set is greater than hardfork provided\n     */ gteHardfork(hardfork) {\n        return this.hardforkGteHardfork(null, hardfork);\n    }\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     */ hardforkBlock(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const block = this._getHardfork(hardfork)?.[\"block\"];\n        if (block === undefined || block === null) {\n            return null;\n        }\n        return BigInt(block);\n    }\n    hardforkTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const timestamp = this._getHardfork(hardfork)?.[\"timestamp\"];\n        if (timestamp === undefined || timestamp === null) {\n            return null;\n        }\n        return BigInt(timestamp);\n    }\n    /**\n     * Returns the hardfork change block for eip\n     * @param eip EIP number\n     * @returns Block number or null if unscheduled\n     */ eipBlock(eip) {\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            const hf = hfChanges[1];\n            if (\"eips\" in hf) {\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                if (hf[\"eips\"].includes(eip)) {\n                    return this.hardforkBlock(hfChanges[0]);\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Total difficulty or null if no set\n     */ hardforkTTD(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const ttd = this._getHardfork(hardfork)?.[\"ttd\"];\n        if (ttd === undefined || ttd === null) {\n            return null;\n        }\n        return BigInt(ttd);\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block timestamp, number or null if not available\n     */ nextHardforkBlockOrTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const hfs = this.hardforks();\n        let hfIndex = hfs.findIndex((hf)=>hf.name === hardfork);\n        // If the current hardfork is merge, go one behind as merge hf is not part of these\n        // calcs even if the merge hf block is set\n        if (hardfork === _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Paris) {\n            hfIndex -= 1;\n        }\n        // Hardfork not found\n        if (hfIndex < 0) {\n            return null;\n        }\n        let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;\n        currHfTimeOrBlock = currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined ? Number(currHfTimeOrBlock) : null;\n        const nextHf = hfs.slice(hfIndex + 1).find((hf)=>{\n            let hfTimeOrBlock = hf.timestamp ?? hf.block;\n            hfTimeOrBlock = hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null;\n            return hf.name !== _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Paris && hfTimeOrBlock !== null && hfTimeOrBlock !== undefined && hfTimeOrBlock !== currHfTimeOrBlock;\n        });\n        // If no next hf found with valid block or timestamp return null\n        if (nextHf === undefined) {\n            return null;\n        }\n        const nextHfBlock = nextHf.timestamp ?? nextHf.block;\n        if (nextHfBlock === null || nextHfBlock === undefined) {\n            return null;\n        }\n        return BigInt(nextHfBlock);\n    }\n    /**\n     * Internal helper function to calculate a fork hash\n     * @param hardfork Hardfork name\n     * @param genesisHash Genesis block hash of the chain\n     * @returns Fork hash as hex string\n     */ _calcForkHash(hardfork, genesisHash) {\n        let hfBytes = new Uint8Array(0);\n        let prevBlockOrTime = 0;\n        for (const hf of this.hardforks()){\n            const { block, timestamp, name } = hf;\n            // Timestamp to be used for timestamp based hfs even if we may bundle\n            // block number with them retrospectively\n            let blockOrTime = timestamp ?? block;\n            blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n            // Skip for chainstart (0), not applied HFs (null) and\n            // when already applied on same blockOrTime HFs\n            // and on the merge since forkhash doesn't change on merge hf\n            if (typeof blockOrTime === \"number\" && blockOrTime !== 0 && blockOrTime !== prevBlockOrTime && name !== _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Paris) {\n                const hfBlockBytes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(\"0x\" + blockOrTime.toString(16).padStart(16, \"0\"));\n                hfBytes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(hfBytes, hfBlockBytes);\n                prevBlockOrTime = blockOrTime;\n            }\n            if (hf.name === hardfork) break;\n        }\n        const inputBytes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(genesisHash, hfBytes);\n        // CRC32 delivers result as signed (negative) 32-bit integer,\n        // convert to hex string\n        const forkhash = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.intToBytes)((0,crc__WEBPACK_IMPORTED_MODULE_1__.crc32)(inputBytes) >>> 0));\n        return forkhash;\n    }\n    /**\n     * Returns an eth/64 compliant fork hash (EIP-2124)\n     * @param hardfork Hardfork name, optional if HF set\n     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n     */ forkHash(hardfork, genesisHash) {\n        hardfork = hardfork ?? this._hardfork;\n        const data = this._getHardfork(hardfork);\n        if (data === null || data?.block === null && data?.timestamp === undefined && data?.ttd === undefined) {\n            const msg = \"No fork hash calculation possible for future hardfork\";\n            throw new Error(msg);\n        }\n        if (data?.forkHash !== null && data?.forkHash !== undefined) {\n            return data.forkHash;\n        }\n        if (!genesisHash) throw new Error(\"genesisHash required for forkHash calculation\");\n        return this._calcForkHash(hardfork, genesisHash);\n    }\n    /**\n     *\n     * @param forkHash Fork hash as a hex string\n     * @returns Array with hardfork data (name, block, forkHash)\n     */ hardforkForForkHash(forkHash) {\n        const resArray = this.hardforks().filter((hf)=>{\n            return hf.forkHash === forkHash;\n        });\n        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n    }\n    /**\n     * Sets any missing forkHashes on the passed-in {@link Common} instance\n     * @param common The {@link Common} to set the forkHashes for\n     * @param genesisHash The genesis block hash\n     */ setForkHashes(genesisHash) {\n        for (const hf of this.hardforks()){\n            const blockOrTime = hf.timestamp ?? hf.block;\n            if ((hf.forkHash === null || hf.forkHash === undefined) && (blockOrTime !== null && blockOrTime !== undefined || typeof hf.ttd !== \"undefined\")) {\n                hf.forkHash = this.forkHash(hf.name, genesisHash);\n            }\n        }\n    }\n    /**\n     * Returns the Genesis parameters of the current chain\n     * @returns Genesis dictionary\n     */ genesis() {\n        return this._chainParams.genesis;\n    }\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */ hardforks() {\n        return this._chainParams.hardforks;\n    }\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */ bootstrapNodes() {\n        return this._chainParams.bootstrapNodes;\n    }\n    /**\n     * Returns DNS networks for the current chain\n     * @returns {String[]} Array of DNS ENR urls\n     */ dnsNetworks() {\n        return this._chainParams.dnsNetworks;\n    }\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */ hardfork() {\n        return this._hardfork;\n    }\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */ chainId() {\n        return BigInt(this._chainParams.chainId);\n    }\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */ chainName() {\n        return this._chainParams.name;\n    }\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */ networkId() {\n        return BigInt(this._chainParams.networkId);\n    }\n    /**\n     * Returns the additionally activated EIPs\n     * (by using the `eips` constructor option)\n     * @returns List of EIPs\n     */ eips() {\n        return this._eips;\n    }\n    /**\n     * Returns the consensus type of the network\n     * Possible values: \"pow\"|\"poa\"|\"pos\"\n     *\n     * Note: This value can update along a Hardfork.\n     */ consensusType() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            if (\"consensus\" in hfChanges[1]) {\n                value = hfChanges[1][\"consensus\"][\"type\"];\n            }\n            if (hfChanges[0] === hardfork) break;\n        }\n        return value ?? this._chainParams[\"consensus\"][\"type\"];\n    }\n    /**\n     * Returns the concrete consensus implementation\n     * algorithm or protocol for the network\n     * e.g. \"ethash\" for \"pow\" consensus type,\n     * \"clique\" for \"poa\" consensus type or\n     * \"casper\" for \"pos\" consensus type.\n     *\n     * Note: This value can update along a Hardfork.\n     */ consensusAlgorithm() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            if (\"consensus\" in hfChanges[1]) {\n                value = hfChanges[1][\"consensus\"][\"algorithm\"];\n            }\n            if (hfChanges[0] === hardfork) break;\n        }\n        return value ?? this._chainParams[\"consensus\"][\"algorithm\"];\n    }\n    /**\n     * Returns a dictionary with consensus configuration\n     * parameters based on the consensus algorithm\n     *\n     * Expected returns (parameters must be present in\n     * the respective chain json files):\n     *\n     * ethash: empty object\n     * clique: period, epoch\n     * casper: empty object\n     *\n     * Note: This value can update along a Hardfork.\n     */ consensusConfig() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            if (\"consensus\" in hfChanges[1]) {\n                // The config parameter is named after the respective consensus algorithm\n                const config = hfChanges[1];\n                const algorithm = config[\"consensus\"][\"algorithm\"];\n                value = config[\"consensus\"][algorithm];\n            }\n            if (hfChanges[0] === hardfork) break;\n        }\n        return value ?? this._chainParams[\"consensus\"][this.consensusAlgorithm()] ?? {};\n    }\n    /**\n     * Returns a deep copy of this {@link Common} instance.\n     */ copy() {\n        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n        copy.events = new events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();\n        return copy;\n    }\n    static getInitializedChains(customChains) {\n        const names = {};\n        for (const [name, id] of Object.entries(_enums_js__WEBPACK_IMPORTED_MODULE_5__.Chain)){\n            names[id] = name.toLowerCase();\n        }\n        const chains = {\n            ..._chains_js__WEBPACK_IMPORTED_MODULE_3__.chains\n        };\n        if (customChains) {\n            for (const chain of customChains){\n                const { name } = chain;\n                names[chain.chainId.toString()] = name;\n                chains[name] = chain;\n            }\n        }\n        chains.names = names;\n        return chains;\n    }\n} //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/eips.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/eips.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EIPs: () => (/* binding */ EIPs)\n/* harmony export */ });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js\");\n\nvar Status;\n(function(Status) {\n    Status[\"Draft\"] = \"draft\";\n    Status[\"Review\"] = \"review\";\n    Status[\"Final\"] = \"final\";\n})(Status || (Status = {}));\nconst EIPs = {\n    1153: {\n        comment: \"Transient storage opcodes\",\n        url: \"https://eips.ethereum.org/EIPS/eip-1153\",\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            tstore: {\n                v: 100,\n                d: \"Base fee of the TSTORE opcode\"\n            },\n            tload: {\n                v: 100,\n                d: \"Base fee of the TLOAD opcode\"\n            }\n        }\n    },\n    1559: {\n        comment: \"Fee market change for ETH 1.0 chain\",\n        url: \"https://eips.ethereum.org/EIPS/eip-1559\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Berlin,\n        requiredEIPs: [\n            2930\n        ],\n        gasConfig: {\n            baseFeeMaxChangeDenominator: {\n                v: 8,\n                d: \"Maximum base fee change denominator\"\n            },\n            elasticityMultiplier: {\n                v: 2,\n                d: \"Maximum block gas target elasticity\"\n            },\n            initialBaseFee: {\n                v: 1000000000,\n                d: \"Initial base fee on first EIP1559 block\"\n            }\n        }\n    },\n    2315: {\n        comment: \"Simple subroutines for the EVM\",\n        url: \"https://eips.ethereum.org/EIPS/eip-2315\",\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Istanbul,\n        requiredEIPs: [],\n        gasPrices: {\n            beginsub: {\n                v: 2,\n                d: \"Base fee of the BEGINSUB opcode\"\n            },\n            returnsub: {\n                v: 5,\n                d: \"Base fee of the RETURNSUB opcode\"\n            },\n            jumpsub: {\n                v: 10,\n                d: \"Base fee of the JUMPSUB opcode\"\n            }\n        }\n    },\n    2565: {\n        comment: \"ModExp gas cost\",\n        url: \"https://eips.ethereum.org/EIPS/eip-2565\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Byzantium,\n        requiredEIPs: [],\n        gasPrices: {\n            modexpGquaddivisor: {\n                v: 3,\n                d: \"Gquaddivisor from modexp precompile for gas calculation\"\n            }\n        }\n    },\n    2718: {\n        comment: \"Typed Transaction Envelope\",\n        url: \"https://eips.ethereum.org/EIPS/eip-2718\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: []\n    },\n    2929: {\n        comment: \"Gas cost increases for state access opcodes\",\n        url: \"https://eips.ethereum.org/EIPS/eip-2929\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            coldsload: {\n                v: 2100,\n                d: \"Gas cost of the first read of storage from a given location (per transaction)\"\n            },\n            coldaccountaccess: {\n                v: 2600,\n                d: \"Gas cost of the first read of a given address (per transaction)\"\n            },\n            warmstorageread: {\n                v: 100,\n                d: \"Gas cost of reading storage locations which have already loaded 'cold'\"\n            },\n            sstoreCleanGasEIP2200: {\n                v: 2900,\n                d: \"Once per SSTORE operation from clean non-zero to something else\"\n            },\n            sstoreNoopGasEIP2200: {\n                v: 100,\n                d: \"Once per SSTORE operation if the value doesn't change\"\n            },\n            sstoreDirtyGasEIP2200: {\n                v: 100,\n                d: \"Once per SSTORE operation if a dirty value is changed\"\n            },\n            sstoreInitRefundEIP2200: {\n                v: 19900,\n                d: \"Once per SSTORE operation for resetting to the original zero value\"\n            },\n            sstoreCleanRefundEIP2200: {\n                v: 4900,\n                d: \"Once per SSTORE operation for resetting to the original non-zero value\"\n            },\n            call: {\n                v: 0,\n                d: \"Base fee of the CALL opcode\"\n            },\n            callcode: {\n                v: 0,\n                d: \"Base fee of the CALLCODE opcode\"\n            },\n            delegatecall: {\n                v: 0,\n                d: \"Base fee of the DELEGATECALL opcode\"\n            },\n            staticcall: {\n                v: 0,\n                d: \"Base fee of the STATICCALL opcode\"\n            },\n            balance: {\n                v: 0,\n                d: \"Base fee of the BALANCE opcode\"\n            },\n            extcodesize: {\n                v: 0,\n                d: \"Base fee of the EXTCODESIZE opcode\"\n            },\n            extcodecopy: {\n                v: 0,\n                d: \"Base fee of the EXTCODECOPY opcode\"\n            },\n            extcodehash: {\n                v: 0,\n                d: \"Base fee of the EXTCODEHASH opcode\"\n            },\n            sload: {\n                v: 0,\n                d: \"Base fee of the SLOAD opcode\"\n            },\n            sstore: {\n                v: 0,\n                d: \"Base fee of the SSTORE opcode\"\n            }\n        }\n    },\n    2930: {\n        comment: \"Optional access lists\",\n        url: \"https://eips.ethereum.org/EIPS/eip-2930\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Istanbul,\n        requiredEIPs: [\n            2718,\n            2929\n        ],\n        gasPrices: {\n            accessListStorageKeyCost: {\n                v: 1900,\n                d: \"Gas cost per storage key in an Access List transaction\"\n            },\n            accessListAddressCost: {\n                v: 2400,\n                d: \"Gas cost per storage key in an Access List transaction\"\n            }\n        }\n    },\n    3074: {\n        comment: \"AUTH and AUTHCALL opcodes\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3074\",\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            auth: {\n                v: 3100,\n                d: \"Gas cost of the AUTH opcode\"\n            },\n            authcall: {\n                v: 0,\n                d: \"Gas cost of the AUTHCALL opcode\"\n            },\n            authcallValueTransfer: {\n                v: 6700,\n                d: \"Paid for CALL when the value transfer is non-zero\"\n            }\n        }\n    },\n    3198: {\n        comment: \"BASEFEE opcode\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3198\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            basefee: {\n                v: 2,\n                d: \"Gas cost of the BASEFEE opcode\"\n            }\n        }\n    },\n    3529: {\n        comment: \"Reduction in refunds\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3529\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Berlin,\n        requiredEIPs: [\n            2929\n        ],\n        gasConfig: {\n            maxRefundQuotient: {\n                v: 5,\n                d: \"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)\"\n            }\n        },\n        gasPrices: {\n            selfdestructRefund: {\n                v: 0,\n                d: \"Refunded following a selfdestruct operation\"\n            },\n            sstoreClearRefundEIP2200: {\n                v: 4800,\n                d: \"Once per SSTORE operation for clearing an originally existing storage slot\"\n            }\n        }\n    },\n    3540: {\n        comment: \"EVM Object Format (EOF) v1\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3540\",\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [\n            3541\n        ]\n    },\n    3541: {\n        comment: \"Reject new contracts starting with the 0xEF byte\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3541\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Berlin,\n        requiredEIPs: []\n    },\n    3554: {\n        comment: \"Difficulty Bomb Delay to December 1st 2021\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3554\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.MuirGlacier,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 9500000,\n                d: \"the amount of blocks to delay the difficulty bomb with\"\n            }\n        }\n    },\n    3607: {\n        comment: \"Reject transactions from senders with deployed code\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3607\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: []\n    },\n    3651: {\n        comment: \"Warm COINBASE\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3651\",\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [\n            2929\n        ]\n    },\n    3670: {\n        comment: \"EOF - Code Validation\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3670\",\n        status: \"Review\",\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [\n            3540\n        ],\n        gasConfig: {},\n        gasPrices: {},\n        vm: {},\n        pow: {}\n    },\n    3675: {\n        comment: \"Upgrade consensus to Proof-of-Stake\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3675\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: []\n    },\n    3855: {\n        comment: \"PUSH0 instruction\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3855\",\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            push0: {\n                v: 2,\n                d: \"Base fee of the PUSH0 opcode\"\n            }\n        }\n    },\n    3860: {\n        comment: \"Limit and meter initcode\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3860\",\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.SpuriousDragon,\n        requiredEIPs: [],\n        gasPrices: {\n            initCodeWordCost: {\n                v: 2,\n                d: \"Gas to pay for each word (32 bytes) of initcode when creating a contract\"\n            }\n        },\n        vm: {\n            maxInitCodeSize: {\n                v: 49152,\n                d: \"Maximum length of initialization code when creating a contract\"\n            }\n        }\n    },\n    4345: {\n        comment: \"Difficulty Bomb Delay to June 2022\",\n        url: \"https://eips.ethereum.org/EIPS/eip-4345\",\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 10700000,\n                d: \"the amount of blocks to delay the difficulty bomb with\"\n            }\n        }\n    },\n    4399: {\n        comment: \"Supplant DIFFICULTY opcode with PREVRANDAO\",\n        url: \"https://eips.ethereum.org/EIPS/eip-4399\",\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            prevrandao: {\n                v: 2,\n                d: \"Base fee of the PREVRANDAO opcode (previously DIFFICULTY)\"\n            }\n        }\n    },\n    4788: {\n        comment: \"Beacon block root in the EVM\",\n        url: \"https://eips.ethereum.org/EIPS/eip-4788\",\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Cancun,\n        requiredEIPs: [],\n        gasPrices: {},\n        vm: {\n            historicalRootsLength: {\n                v: 8191,\n                d: \"The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile\"\n            }\n        }\n    },\n    4844: {\n        comment: \"Shard Blob Transactions\",\n        url: \"https://eips.ethereum.org/EIPS/eip-4844\",\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Paris,\n        requiredEIPs: [\n            1559,\n            2718,\n            2930,\n            4895\n        ],\n        gasConfig: {\n            blobGasPerBlob: {\n                v: 131072,\n                d: \"The base fee for blob gas per blob\"\n            },\n            targetBlobGasPerBlock: {\n                v: 393216,\n                d: \"The target blob gas consumed per block\"\n            },\n            maxblobGasPerBlock: {\n                v: 786432,\n                d: \"The max blob gas allowable per block\"\n            },\n            blobGasPriceUpdateFraction: {\n                v: 3338477,\n                d: \"The denominator used in the exponential when calculating a blob gas price\"\n            }\n        },\n        gasPrices: {\n            simpleGasPerBlob: {\n                v: 12000,\n                d: \"The basic gas fee for each blob\"\n            },\n            minBlobGasPrice: {\n                v: 1,\n                d: \"The minimum fee per blob gas\"\n            },\n            kzgPointEvaluationGasPrecompilePrice: {\n                v: 50000,\n                d: \"The fee associated with the point evaluation precompile\"\n            },\n            blobhash: {\n                v: 3,\n                d: \"Base fee of the BLOBHASH opcode\"\n            }\n        },\n        sharding: {\n            blobCommitmentVersionKzg: {\n                v: 1,\n                d: \"The number indicated a versioned hash is a KZG commitment\"\n            },\n            fieldElementsPerBlob: {\n                v: 4096,\n                d: \"The number of field elements allowed per blob\"\n            }\n        }\n    },\n    4895: {\n        comment: \"Beacon chain push withdrawals as operations\",\n        url: \"https://eips.ethereum.org/EIPS/eip-4895\",\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Paris,\n        requiredEIPs: []\n    },\n    5133: {\n        comment: \"Delaying Difficulty Bomb to mid-September 2022\",\n        url: \"https://eips.ethereum.org/EIPS/eip-5133\",\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.GrayGlacier,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 11400000,\n                d: \"the amount of blocks to delay the difficulty bomb with\"\n            }\n        }\n    },\n    5656: {\n        comment: \"MCOPY - Memory copying instruction\",\n        url: \"https://eips.ethereum.org/EIPS/eip-5656\",\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Shanghai,\n        requiredEIPs: [],\n        gasPrices: {\n            mcopy: {\n                v: 3,\n                d: \"Base fee of the MCOPY opcode\"\n            }\n        }\n    },\n    6780: {\n        comment: \"SELFDESTRUCT only in same transaction\",\n        url: \"https://eips.ethereum.org/EIPS/eip-6780\",\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: []\n    },\n    7516: {\n        comment: \"BLOBBASEFEE opcode\",\n        url: \"https://eips.ethereum.org/EIPS/eip-7516\",\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Paris,\n        requiredEIPs: [\n            4844\n        ],\n        gasPrices: {\n            blobbasefee: {\n                v: 2,\n                d: \"Gas cost of the BLOBBASEFEE opcode\"\n            }\n        }\n    }\n}; //# sourceMappingURL=eips.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vZWlwcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUN0QyxJQUFJQztBQUNILFVBQVVBLE1BQU07SUFDYkEsTUFBTSxDQUFDLFFBQVEsR0FBRztJQUNsQkEsTUFBTSxDQUFDLFNBQVMsR0FBRztJQUNuQkEsTUFBTSxDQUFDLFFBQVEsR0FBRztBQUN0QixHQUFHQSxVQUFXQSxDQUFBQSxTQUFTLENBQUM7QUFDakIsTUFBTUMsT0FBTztJQUNoQixNQUFNO1FBQ0ZDLFNBQVM7UUFDVEMsS0FBSztRQUNMQyxRQUFRSixPQUFPSyxNQUFNO1FBQ3JCQyxpQkFBaUJQLCtDQUFRQSxDQUFDUSxVQUFVO1FBQ3BDQyxjQUFjLEVBQUU7UUFDaEJDLFdBQVc7WUFDUEMsUUFBUTtnQkFDSkMsR0FBRztnQkFDSEMsR0FBRztZQUNQO1lBQ0FDLE9BQU87Z0JBQ0hGLEdBQUc7Z0JBQ0hDLEdBQUc7WUFDUDtRQUNKO0lBQ0o7SUFDQSxNQUFNO1FBQ0ZWLFNBQVM7UUFDVEMsS0FBSztRQUNMQyxRQUFRSixPQUFPYyxLQUFLO1FBQ3BCUixpQkFBaUJQLCtDQUFRQSxDQUFDZ0IsTUFBTTtRQUNoQ1AsY0FBYztZQUFDO1NBQUs7UUFDcEJRLFdBQVc7WUFDUEMsNkJBQTZCO2dCQUN6Qk4sR0FBRztnQkFDSEMsR0FBRztZQUNQO1lBQ0FNLHNCQUFzQjtnQkFDbEJQLEdBQUc7Z0JBQ0hDLEdBQUc7WUFDUDtZQUNBTyxnQkFBZ0I7Z0JBQ1pSLEdBQUc7Z0JBQ0hDLEdBQUc7WUFDUDtRQUNKO0lBQ0o7SUFDQSxNQUFNO1FBQ0ZWLFNBQVM7UUFDVEMsS0FBSztRQUNMQyxRQUFRSixPQUFPb0IsS0FBSztRQUNwQmQsaUJBQWlCUCwrQ0FBUUEsQ0FBQ3NCLFFBQVE7UUFDbENiLGNBQWMsRUFBRTtRQUNoQkMsV0FBVztZQUNQYSxVQUFV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QUFjO1lBQUM7U0FBSztRQUNwQkMsV0FBVztZQUNQd0UsYUFBYTtnQkFDVHRFLEdBQUc7Z0JBQ0hDLEdBQUc7WUFDUDtRQUNKO0lBQ0o7QUFDSixFQUFFLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL2NvbW1vbi9kaXN0L2VzbS9laXBzLmpzP2M3NTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGFyZGZvcmsgfSBmcm9tICcuL2VudW1zLmpzJztcbnZhciBTdGF0dXM7XG4oZnVuY3Rpb24gKFN0YXR1cykge1xuICAgIFN0YXR1c1tcIkRyYWZ0XCJdID0gXCJkcmFmdFwiO1xuICAgIFN0YXR1c1tcIlJldmlld1wiXSA9IFwicmV2aWV3XCI7XG4gICAgU3RhdHVzW1wiRmluYWxcIl0gPSBcImZpbmFsXCI7XG59KShTdGF0dXMgfHwgKFN0YXR1cyA9IHt9KSk7XG5leHBvcnQgY29uc3QgRUlQcyA9IHtcbiAgICAxMTUzOiB7XG4gICAgICAgIGNvbW1lbnQ6ICdUcmFuc2llbnQgc3RvcmFnZSBvcGNvZGVzJyxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xMTUzJyxcbiAgICAgICAgc3RhdHVzOiBTdGF0dXMuUmV2aWV3LFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLkNoYWluc3RhcnQsXG4gICAgICAgIHJlcXVpcmVkRUlQczogW10sXG4gICAgICAgIGdhc1ByaWNlczoge1xuICAgICAgICAgICAgdHN0b3JlOiB7XG4gICAgICAgICAgICAgICAgdjogMTAwLFxuICAgICAgICAgICAgICAgIGQ6ICdCYXNlIGZlZSBvZiB0aGUgVFNUT1JFIG9wY29kZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGxvYWQ6IHtcbiAgICAgICAgICAgICAgICB2OiAxMDAsXG4gICAgICAgICAgICAgICAgZDogJ0Jhc2UgZmVlIG9mIHRoZSBUTE9BRCBvcGNvZGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIDE1NTk6IHtcbiAgICAgICAgY29tbWVudDogJ0ZlZSBtYXJrZXQgY2hhbmdlIGZvciBFVEggMS4wIGNoYWluJyxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xNTU5JyxcbiAgICAgICAgc3RhdHVzOiBTdGF0dXMuRmluYWwsXG4gICAgICAgIG1pbmltdW1IYXJkZm9yazogSGFyZGZvcmsuQmVybGluLFxuICAgICAgICByZXF1aXJlZEVJUHM6IFsyOTMwXSxcbiAgICAgICAgZ2FzQ29uZmlnOiB7XG4gICAgICAgICAgICBiYXNlRmVlTWF4Q2hhbmdlRGVub21pbmF0b3I6IHtcbiAgICAgICAgICAgICAgICB2OiA4LFxuICAgICAgICAgICAgICAgIGQ6ICdNYXhpbXVtIGJhc2UgZmVlIGNoYW5nZSBkZW5vbWluYXRvcicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZWxhc3RpY2l0eU11bHRpcGxpZXI6IHtcbiAgICAgICAgICAgICAgICB2OiAyLFxuICAgICAgICAgICAgICAgIGQ6ICdNYXhpbXVtIGJsb2NrIGdhcyB0YXJnZXQgZWxhc3RpY2l0eScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5pdGlhbEJhc2VGZWU6IHtcbiAgICAgICAgICAgICAgICB2OiAxMDAwMDAwMDAwLFxuICAgICAgICAgICAgICAgIGQ6ICdJbml0aWFsIGJhc2UgZmVlIG9uIGZpcnN0IEVJUDE1NTkgYmxvY2snLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIDIzMTU6IHtcbiAgICAgICAgY29tbWVudDogJ1NpbXBsZSBzdWJyb3V0aW5lcyBmb3IgdGhlIEVWTScsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMjMxNScsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLkRyYWZ0LFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLklzdGFuYnVsLFxuICAgICAgICByZXF1aXJlZEVJUHM6IFtdLFxuICAgICAgICBnYXNQcmljZXM6IHtcbiAgICAgICAgICAgIGJlZ2luc3ViOiB7XG4gICAgICAgICAgICAgICAgdjogMixcbiAgICAgICAgICAgICAgICBkOiAnQmFzZSBmZWUgb2YgdGhlIEJFR0lOU1VCIG9wY29kZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuc3ViOiB7XG4gICAgICAgICAgICAgICAgdjogNSxcbiAgICAgICAgICAgICAgICBkOiAnQmFzZSBmZWUgb2YgdGhlIFJFVFVSTlNVQiBvcGNvZGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGp1bXBzdWI6IHtcbiAgICAgICAgICAgICAgICB2OiAxMCxcbiAgICAgICAgICAgICAgICBkOiAnQmFzZSBmZWUgb2YgdGhlIEpVTVBTVUIgb3Bjb2RlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAyNTY1OiB7XG4gICAgICAgIGNvbW1lbnQ6ICdNb2RFeHAgZ2FzIGNvc3QnLFxuICAgICAgICB1cmw6ICdodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTI1NjUnLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5GaW5hbCxcbiAgICAgICAgbWluaW11bUhhcmRmb3JrOiBIYXJkZm9yay5CeXphbnRpdW0sXG4gICAgICAgIHJlcXVpcmVkRUlQczogW10sXG4gICAgICAgIGdhc1ByaWNlczoge1xuICAgICAgICAgICAgbW9kZXhwR3F1YWRkaXZpc29yOiB7XG4gICAgICAgICAgICAgICAgdjogMyxcbiAgICAgICAgICAgICAgICBkOiAnR3F1YWRkaXZpc29yIGZyb20gbW9kZXhwIHByZWNvbXBpbGUgZm9yIGdhcyBjYWxjdWxhdGlvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgMjcxODoge1xuICAgICAgICBjb21tZW50OiAnVHlwZWQgVHJhbnNhY3Rpb24gRW52ZWxvcGUnLFxuICAgICAgICB1cmw6ICdodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTI3MTgnLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5GaW5hbCxcbiAgICAgICAgbWluaW11bUhhcmRmb3JrOiBIYXJkZm9yay5DaGFpbnN0YXJ0LFxuICAgICAgICByZXF1aXJlZEVJUHM6IFtdLFxuICAgIH0sXG4gICAgMjkyOToge1xuICAgICAgICBjb21tZW50OiAnR2FzIGNvc3QgaW5jcmVhc2VzIGZvciBzdGF0ZSBhY2Nlc3Mgb3Bjb2RlcycsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMjkyOScsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLkZpbmFsLFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLkNoYWluc3RhcnQsXG4gICAgICAgIHJlcXVpcmVkRUlQczogW10sXG4gICAgICAgIGdhc1ByaWNlczoge1xuICAgICAgICAgICAgY29sZHNsb2FkOiB7XG4gICAgICAgICAgICAgICAgdjogMjEwMCxcbiAgICAgICAgICAgICAgICBkOiAnR2FzIGNvc3Qgb2YgdGhlIGZpcnN0IHJlYWQgb2Ygc3RvcmFnZSBmcm9tIGEgZ2l2ZW4gbG9jYXRpb24gKHBlciB0cmFuc2FjdGlvbiknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbGRhY2NvdW50YWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdjogMjYwMCxcbiAgICAgICAgICAgICAgICBkOiAnR2FzIGNvc3Qgb2YgdGhlIGZpcnN0IHJlYWQgb2YgYSBnaXZlbiBhZGRyZXNzIChwZXIgdHJhbnNhY3Rpb24pJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3YXJtc3RvcmFnZXJlYWQ6IHtcbiAgICAgICAgICAgICAgICB2OiAxMDAsXG4gICAgICAgICAgICAgICAgZDogXCJHYXMgY29zdCBvZiByZWFkaW5nIHN0b3JhZ2UgbG9jYXRpb25zIHdoaWNoIGhhdmUgYWxyZWFkeSBsb2FkZWQgJ2NvbGQnXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3N0b3JlQ2xlYW5HYXNFSVAyMjAwOiB7XG4gICAgICAgICAgICAgICAgdjogMjkwMCxcbiAgICAgICAgICAgICAgICBkOiAnT25jZSBwZXIgU1NUT1JFIG9wZXJhdGlvbiBmcm9tIGNsZWFuIG5vbi16ZXJvIHRvIHNvbWV0aGluZyBlbHNlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzc3RvcmVOb29wR2FzRUlQMjIwMDoge1xuICAgICAgICAgICAgICAgIHY6IDEwMCxcbiAgICAgICAgICAgICAgICBkOiBcIk9uY2UgcGVyIFNTVE9SRSBvcGVyYXRpb24gaWYgdGhlIHZhbHVlIGRvZXNuJ3QgY2hhbmdlXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3N0b3JlRGlydHlHYXNFSVAyMjAwOiB7XG4gICAgICAgICAgICAgICAgdjogMTAwLFxuICAgICAgICAgICAgICAgIGQ6ICdPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGlmIGEgZGlydHkgdmFsdWUgaXMgY2hhbmdlZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3N0b3JlSW5pdFJlZnVuZEVJUDIyMDA6IHtcbiAgICAgICAgICAgICAgICB2OiAxOTkwMCxcbiAgICAgICAgICAgICAgICBkOiAnT25jZSBwZXIgU1NUT1JFIG9wZXJhdGlvbiBmb3IgcmVzZXR0aW5nIHRvIHRoZSBvcmlnaW5hbCB6ZXJvIHZhbHVlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzc3RvcmVDbGVhblJlZnVuZEVJUDIyMDA6IHtcbiAgICAgICAgICAgICAgICB2OiA0OTAwLFxuICAgICAgICAgICAgICAgIGQ6ICdPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGZvciByZXNldHRpbmcgdG8gdGhlIG9yaWdpbmFsIG5vbi16ZXJvIHZhbHVlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsOiB7XG4gICAgICAgICAgICAgICAgdjogMCxcbiAgICAgICAgICAgICAgICBkOiAnQmFzZSBmZWUgb2YgdGhlIENBTEwgb3Bjb2RlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsY29kZToge1xuICAgICAgICAgICAgICAgIHY6IDAsXG4gICAgICAgICAgICAgICAgZDogJ0Jhc2UgZmVlIG9mIHRoZSBDQUxMQ09ERSBvcGNvZGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlbGVnYXRlY2FsbDoge1xuICAgICAgICAgICAgICAgIHY6IDAsXG4gICAgICAgICAgICAgICAgZDogJ0Jhc2UgZmVlIG9mIHRoZSBERUxFR0FURUNBTEwgb3Bjb2RlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0aWNjYWxsOiB7XG4gICAgICAgICAgICAgICAgdjogMCxcbiAgICAgICAgICAgICAgICBkOiAnQmFzZSBmZWUgb2YgdGhlIFNUQVRJQ0NBTEwgb3Bjb2RlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiYWxhbmNlOiB7XG4gICAgICAgICAgICAgICAgdjogMCxcbiAgICAgICAgICAgICAgICBkOiAnQmFzZSBmZWUgb2YgdGhlIEJBTEFOQ0Ugb3Bjb2RlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleHRjb2Rlc2l6ZToge1xuICAgICAgICAgICAgICAgIHY6IDAsXG4gICAgICAgICAgICAgICAgZDogJ0Jhc2UgZmVlIG9mIHRoZSBFWFRDT0RFU0laRSBvcGNvZGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4dGNvZGVjb3B5OiB7XG4gICAgICAgICAgICAgICAgdjogMCxcbiAgICAgICAgICAgICAgICBkOiAnQmFzZSBmZWUgb2YgdGhlIEVYVENPREVDT1BZIG9wY29kZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXh0Y29kZWhhc2g6IHtcbiAgICAgICAgICAgICAgICB2OiAwLFxuICAgICAgICAgICAgICAgIGQ6ICdCYXNlIGZlZSBvZiB0aGUgRVhUQ09ERUhBU0ggb3Bjb2RlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbG9hZDoge1xuICAgICAgICAgICAgICAgIHY6IDAsXG4gICAgICAgICAgICAgICAgZDogJ0Jhc2UgZmVlIG9mIHRoZSBTTE9BRCBvcGNvZGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNzdG9yZToge1xuICAgICAgICAgICAgICAgIHY6IDAsXG4gICAgICAgICAgICAgICAgZDogJ0Jhc2UgZmVlIG9mIHRoZSBTU1RPUkUgb3Bjb2RlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAyOTMwOiB7XG4gICAgICAgIGNvbW1lbnQ6ICdPcHRpb25hbCBhY2Nlc3MgbGlzdHMnLFxuICAgICAgICB1cmw6ICdodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTI5MzAnLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5GaW5hbCxcbiAgICAgICAgbWluaW11bUhhcmRmb3JrOiBIYXJkZm9yay5Jc3RhbmJ1bCxcbiAgICAgICAgcmVxdWlyZWRFSVBzOiBbMjcxOCwgMjkyOV0sXG4gICAgICAgIGdhc1ByaWNlczoge1xuICAgICAgICAgICAgYWNjZXNzTGlzdFN0b3JhZ2VLZXlDb3N0OiB7XG4gICAgICAgICAgICAgICAgdjogMTkwMCxcbiAgICAgICAgICAgICAgICBkOiAnR2FzIGNvc3QgcGVyIHN0b3JhZ2Uga2V5IGluIGFuIEFjY2VzcyBMaXN0IHRyYW5zYWN0aW9uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY2Nlc3NMaXN0QWRkcmVzc0Nvc3Q6IHtcbiAgICAgICAgICAgICAgICB2OiAyNDAwLFxuICAgICAgICAgICAgICAgIGQ6ICdHYXMgY29zdCBwZXIgc3RvcmFnZSBrZXkgaW4gYW4gQWNjZXNzIExpc3QgdHJhbnNhY3Rpb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIDMwNzQ6IHtcbiAgICAgICAgY29tbWVudDogJ0FVVEggYW5kIEFVVEhDQUxMIG9wY29kZXMnLFxuICAgICAgICB1cmw6ICdodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTMwNzQnLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5SZXZpZXcsXG4gICAgICAgIG1pbmltdW1IYXJkZm9yazogSGFyZGZvcmsuTG9uZG9uLFxuICAgICAgICByZXF1aXJlZEVJUHM6IFtdLFxuICAgICAgICBnYXNQcmljZXM6IHtcbiAgICAgICAgICAgIGF1dGg6IHtcbiAgICAgICAgICAgICAgICB2OiAzMTAwLFxuICAgICAgICAgICAgICAgIGQ6ICdHYXMgY29zdCBvZiB0aGUgQVVUSCBvcGNvZGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF1dGhjYWxsOiB7XG4gICAgICAgICAgICAgICAgdjogMCxcbiAgICAgICAgICAgICAgICBkOiAnR2FzIGNvc3Qgb2YgdGhlIEFVVEhDQUxMIG9wY29kZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXV0aGNhbGxWYWx1ZVRyYW5zZmVyOiB7XG4gICAgICAgICAgICAgICAgdjogNjcwMCxcbiAgICAgICAgICAgICAgICBkOiAnUGFpZCBmb3IgQ0FMTCB3aGVuIHRoZSB2YWx1ZSB0cmFuc2ZlciBpcyBub24temVybycsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgMzE5ODoge1xuICAgICAgICBjb21tZW50OiAnQkFTRUZFRSBvcGNvZGUnLFxuICAgICAgICB1cmw6ICdodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTMxOTgnLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5GaW5hbCxcbiAgICAgICAgbWluaW11bUhhcmRmb3JrOiBIYXJkZm9yay5Mb25kb24sXG4gICAgICAgIHJlcXVpcmVkRUlQczogW10sXG4gICAgICAgIGdhc1ByaWNlczoge1xuICAgICAgICAgICAgYmFzZWZlZToge1xuICAgICAgICAgICAgICAgIHY6IDIsXG4gICAgICAgICAgICAgICAgZDogJ0dhcyBjb3N0IG9mIHRoZSBCQVNFRkVFIG9wY29kZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgMzUyOToge1xuICAgICAgICBjb21tZW50OiAnUmVkdWN0aW9uIGluIHJlZnVuZHMnLFxuICAgICAgICB1cmw6ICdodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTM1MjknLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5GaW5hbCxcbiAgICAgICAgbWluaW11bUhhcmRmb3JrOiBIYXJkZm9yay5CZXJsaW4sXG4gICAgICAgIHJlcXVpcmVkRUlQczogWzI5MjldLFxuICAgICAgICBnYXNDb25maWc6IHtcbiAgICAgICAgICAgIG1heFJlZnVuZFF1b3RpZW50OiB7XG4gICAgICAgICAgICAgICAgdjogNSxcbiAgICAgICAgICAgICAgICBkOiAnTWF4aW11bSByZWZ1bmQgcXVvdGllbnQ7IG1heCB0eCByZWZ1bmQgaXMgbWluKHR4Lmdhc1VzZWQvbWF4UmVmdW5kUXVvdGllbnQsIHR4Lmdhc1JlZnVuZCknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgZ2FzUHJpY2VzOiB7XG4gICAgICAgICAgICBzZWxmZGVzdHJ1Y3RSZWZ1bmQ6IHtcbiAgICAgICAgICAgICAgICB2OiAwLFxuICAgICAgICAgICAgICAgIGQ6ICdSZWZ1bmRlZCBmb2xsb3dpbmcgYSBzZWxmZGVzdHJ1Y3Qgb3BlcmF0aW9uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzc3RvcmVDbGVhclJlZnVuZEVJUDIyMDA6IHtcbiAgICAgICAgICAgICAgICB2OiA0ODAwLFxuICAgICAgICAgICAgICAgIGQ6ICdPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGZvciBjbGVhcmluZyBhbiBvcmlnaW5hbGx5IGV4aXN0aW5nIHN0b3JhZ2Ugc2xvdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgMzU0MDoge1xuICAgICAgICBjb21tZW50OiAnRVZNIE9iamVjdCBGb3JtYXQgKEVPRikgdjEnLFxuICAgICAgICB1cmw6ICdodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTM1NDAnLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5SZXZpZXcsXG4gICAgICAgIG1pbmltdW1IYXJkZm9yazogSGFyZGZvcmsuTG9uZG9uLFxuICAgICAgICByZXF1aXJlZEVJUHM6IFszNTQxXSxcbiAgICB9LFxuICAgIDM1NDE6IHtcbiAgICAgICAgY29tbWVudDogJ1JlamVjdCBuZXcgY29udHJhY3RzIHN0YXJ0aW5nIHdpdGggdGhlIDB4RUYgYnl0ZScsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMzU0MScsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLkZpbmFsLFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLkJlcmxpbixcbiAgICAgICAgcmVxdWlyZWRFSVBzOiBbXSxcbiAgICB9LFxuICAgIDM1NTQ6IHtcbiAgICAgICAgY29tbWVudDogJ0RpZmZpY3VsdHkgQm9tYiBEZWxheSB0byBEZWNlbWJlciAxc3QgMjAyMScsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMzU1NCcsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLkZpbmFsLFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLk11aXJHbGFjaWVyLFxuICAgICAgICByZXF1aXJlZEVJUHM6IFtdLFxuICAgICAgICBwb3c6IHtcbiAgICAgICAgICAgIGRpZmZpY3VsdHlCb21iRGVsYXk6IHtcbiAgICAgICAgICAgICAgICB2OiA5NTAwMDAwLFxuICAgICAgICAgICAgICAgIGQ6ICd0aGUgYW1vdW50IG9mIGJsb2NrcyB0byBkZWxheSB0aGUgZGlmZmljdWx0eSBib21iIHdpdGgnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIDM2MDc6IHtcbiAgICAgICAgY29tbWVudDogJ1JlamVjdCB0cmFuc2FjdGlvbnMgZnJvbSBzZW5kZXJzIHdpdGggZGVwbG95ZWQgY29kZScsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMzYwNycsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLkZpbmFsLFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLkNoYWluc3RhcnQsXG4gICAgICAgIHJlcXVpcmVkRUlQczogW10sXG4gICAgfSxcbiAgICAzNjUxOiB7XG4gICAgICAgIGNvbW1lbnQ6ICdXYXJtIENPSU5CQVNFJyxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0zNjUxJyxcbiAgICAgICAgc3RhdHVzOiBTdGF0dXMuUmV2aWV3LFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLkxvbmRvbixcbiAgICAgICAgcmVxdWlyZWRFSVBzOiBbMjkyOV0sXG4gICAgfSxcbiAgICAzNjcwOiB7XG4gICAgICAgIGNvbW1lbnQ6ICdFT0YgLSBDb2RlIFZhbGlkYXRpb24nLFxuICAgICAgICB1cmw6ICdodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTM2NzAnLFxuICAgICAgICBzdGF0dXM6ICdSZXZpZXcnLFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLkxvbmRvbixcbiAgICAgICAgcmVxdWlyZWRFSVBzOiBbMzU0MF0sXG4gICAgICAgIGdhc0NvbmZpZzoge30sXG4gICAgICAgIGdhc1ByaWNlczoge30sXG4gICAgICAgIHZtOiB7fSxcbiAgICAgICAgcG93OiB7fSxcbiAgICB9LFxuICAgIDM2NzU6IHtcbiAgICAgICAgY29tbWVudDogJ1VwZ3JhZGUgY29uc2Vuc3VzIHRvIFByb29mLW9mLVN0YWtlJyxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0zNjc1JyxcbiAgICAgICAgc3RhdHVzOiBTdGF0dXMuRmluYWwsXG4gICAgICAgIG1pbmltdW1IYXJkZm9yazogSGFyZGZvcmsuTG9uZG9uLFxuICAgICAgICByZXF1aXJlZEVJUHM6IFtdLFxuICAgIH0sXG4gICAgMzg1NToge1xuICAgICAgICBjb21tZW50OiAnUFVTSDAgaW5zdHJ1Y3Rpb24nLFxuICAgICAgICB1cmw6ICdodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTM4NTUnLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5SZXZpZXcsXG4gICAgICAgIG1pbmltdW1IYXJkZm9yazogSGFyZGZvcmsuQ2hhaW5zdGFydCxcbiAgICAgICAgcmVxdWlyZWRFSVBzOiBbXSxcbiAgICAgICAgZ2FzUHJpY2VzOiB7XG4gICAgICAgICAgICBwdXNoMDoge1xuICAgICAgICAgICAgICAgIHY6IDIsXG4gICAgICAgICAgICAgICAgZDogJ0Jhc2UgZmVlIG9mIHRoZSBQVVNIMCBvcGNvZGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIDM4NjA6IHtcbiAgICAgICAgY29tbWVudDogJ0xpbWl0IGFuZCBtZXRlciBpbml0Y29kZScsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMzg2MCcsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLlJldmlldyxcbiAgICAgICAgbWluaW11bUhhcmRmb3JrOiBIYXJkZm9yay5TcHVyaW91c0RyYWdvbixcbiAgICAgICAgcmVxdWlyZWRFSVBzOiBbXSxcbiAgICAgICAgZ2FzUHJpY2VzOiB7XG4gICAgICAgICAgICBpbml0Q29kZVdvcmRDb3N0OiB7XG4gICAgICAgICAgICAgICAgdjogMixcbiAgICAgICAgICAgICAgICBkOiAnR2FzIHRvIHBheSBmb3IgZWFjaCB3b3JkICgzMiBieXRlcykgb2YgaW5pdGNvZGUgd2hlbiBjcmVhdGluZyBhIGNvbnRyYWN0JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHZtOiB7XG4gICAgICAgICAgICBtYXhJbml0Q29kZVNpemU6IHtcbiAgICAgICAgICAgICAgICB2OiA0OTE1MixcbiAgICAgICAgICAgICAgICBkOiAnTWF4aW11bSBsZW5ndGggb2YgaW5pdGlhbGl6YXRpb24gY29kZSB3aGVuIGNyZWF0aW5nIGEgY29udHJhY3QnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIDQzNDU6IHtcbiAgICAgICAgY29tbWVudDogJ0RpZmZpY3VsdHkgQm9tYiBEZWxheSB0byBKdW5lIDIwMjInLFxuICAgICAgICB1cmw6ICdodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTQzNDUnLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5GaW5hbCxcbiAgICAgICAgbWluaW11bUhhcmRmb3JrOiBIYXJkZm9yay5Mb25kb24sXG4gICAgICAgIHJlcXVpcmVkRUlQczogW10sXG4gICAgICAgIHBvdzoge1xuICAgICAgICAgICAgZGlmZmljdWx0eUJvbWJEZWxheToge1xuICAgICAgICAgICAgICAgIHY6IDEwNzAwMDAwLFxuICAgICAgICAgICAgICAgIGQ6ICd0aGUgYW1vdW50IG9mIGJsb2NrcyB0byBkZWxheSB0aGUgZGlmZmljdWx0eSBib21iIHdpdGgnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIDQzOTk6IHtcbiAgICAgICAgY29tbWVudDogJ1N1cHBsYW50IERJRkZJQ1VMVFkgb3Bjb2RlIHdpdGggUFJFVlJBTkRBTycsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNDM5OScsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLlJldmlldyxcbiAgICAgICAgbWluaW11bUhhcmRmb3JrOiBIYXJkZm9yay5Mb25kb24sXG4gICAgICAgIHJlcXVpcmVkRUlQczogW10sXG4gICAgICAgIGdhc1ByaWNlczoge1xuICAgICAgICAgICAgcHJldnJhbmRhbzoge1xuICAgICAgICAgICAgICAgIHY6IDIsXG4gICAgICAgICAgICAgICAgZDogJ0Jhc2UgZmVlIG9mIHRoZSBQUkVWUkFOREFPIG9wY29kZSAocHJldmlvdXNseSBESUZGSUNVTFRZKScsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgNDc4ODoge1xuICAgICAgICBjb21tZW50OiAnQmVhY29uIGJsb2NrIHJvb3QgaW4gdGhlIEVWTScsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNDc4OCcsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLkRyYWZ0LFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLkNhbmN1bixcbiAgICAgICAgcmVxdWlyZWRFSVBzOiBbXSxcbiAgICAgICAgZ2FzUHJpY2VzOiB7fSxcbiAgICAgICAgdm06IHtcbiAgICAgICAgICAgIGhpc3RvcmljYWxSb290c0xlbmd0aDoge1xuICAgICAgICAgICAgICAgIHY6IDgxOTEsXG4gICAgICAgICAgICAgICAgZDogJ1RoZSBtb2R1bG8gcGFyYW1ldGVyIG9mIHRoZSBiZWFjb25yb290IHJpbmcgYnVmZmVyIGluIHRoZSBiZWFjb25yb290IHN0YXRlZnVsbCBwcmVjb21waWxlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICA0ODQ0OiB7XG4gICAgICAgIGNvbW1lbnQ6ICdTaGFyZCBCbG9iIFRyYW5zYWN0aW9ucycsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNDg0NCcsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLkRyYWZ0LFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLlBhcmlzLFxuICAgICAgICByZXF1aXJlZEVJUHM6IFsxNTU5LCAyNzE4LCAyOTMwLCA0ODk1XSxcbiAgICAgICAgZ2FzQ29uZmlnOiB7XG4gICAgICAgICAgICBibG9iR2FzUGVyQmxvYjoge1xuICAgICAgICAgICAgICAgIHY6IDEzMTA3MixcbiAgICAgICAgICAgICAgICBkOiAnVGhlIGJhc2UgZmVlIGZvciBibG9iIGdhcyBwZXIgYmxvYicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFyZ2V0QmxvYkdhc1BlckJsb2NrOiB7XG4gICAgICAgICAgICAgICAgdjogMzkzMjE2LFxuICAgICAgICAgICAgICAgIGQ6ICdUaGUgdGFyZ2V0IGJsb2IgZ2FzIGNvbnN1bWVkIHBlciBibG9jaycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF4YmxvYkdhc1BlckJsb2NrOiB7XG4gICAgICAgICAgICAgICAgdjogNzg2NDMyLFxuICAgICAgICAgICAgICAgIGQ6ICdUaGUgbWF4IGJsb2IgZ2FzIGFsbG93YWJsZSBwZXIgYmxvY2snLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2JHYXNQcmljZVVwZGF0ZUZyYWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgdjogMzMzODQ3NyxcbiAgICAgICAgICAgICAgICBkOiAnVGhlIGRlbm9taW5hdG9yIHVzZWQgaW4gdGhlIGV4cG9uZW50aWFsIHdoZW4gY2FsY3VsYXRpbmcgYSBibG9iIGdhcyBwcmljZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBnYXNQcmljZXM6IHtcbiAgICAgICAgICAgIHNpbXBsZUdhc1BlckJsb2I6IHtcbiAgICAgICAgICAgICAgICB2OiAxMjAwMCxcbiAgICAgICAgICAgICAgICBkOiAnVGhlIGJhc2ljIGdhcyBmZWUgZm9yIGVhY2ggYmxvYicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWluQmxvYkdhc1ByaWNlOiB7XG4gICAgICAgICAgICAgICAgdjogMSxcbiAgICAgICAgICAgICAgICBkOiAnVGhlIG1pbmltdW0gZmVlIHBlciBibG9iIGdhcycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAga3pnUG9pbnRFdmFsdWF0aW9uR2FzUHJlY29tcGlsZVByaWNlOiB7XG4gICAgICAgICAgICAgICAgdjogNTAwMDAsXG4gICAgICAgICAgICAgICAgZDogJ1RoZSBmZWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBwb2ludCBldmFsdWF0aW9uIHByZWNvbXBpbGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2JoYXNoOiB7XG4gICAgICAgICAgICAgICAgdjogMyxcbiAgICAgICAgICAgICAgICBkOiAnQmFzZSBmZWUgb2YgdGhlIEJMT0JIQVNIIG9wY29kZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBzaGFyZGluZzoge1xuICAgICAgICAgICAgYmxvYkNvbW1pdG1lbnRWZXJzaW9uS3pnOiB7XG4gICAgICAgICAgICAgICAgdjogMSxcbiAgICAgICAgICAgICAgICBkOiAnVGhlIG51bWJlciBpbmRpY2F0ZWQgYSB2ZXJzaW9uZWQgaGFzaCBpcyBhIEtaRyBjb21taXRtZW50JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWVsZEVsZW1lbnRzUGVyQmxvYjoge1xuICAgICAgICAgICAgICAgIHY6IDQwOTYsXG4gICAgICAgICAgICAgICAgZDogJ1RoZSBudW1iZXIgb2YgZmllbGQgZWxlbWVudHMgYWxsb3dlZCBwZXIgYmxvYicsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgNDg5NToge1xuICAgICAgICBjb21tZW50OiAnQmVhY29uIGNoYWluIHB1c2ggd2l0aGRyYXdhbHMgYXMgb3BlcmF0aW9ucycsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNDg5NScsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLlJldmlldyxcbiAgICAgICAgbWluaW11bUhhcmRmb3JrOiBIYXJkZm9yay5QYXJpcyxcbiAgICAgICAgcmVxdWlyZWRFSVBzOiBbXSxcbiAgICB9LFxuICAgIDUxMzM6IHtcbiAgICAgICAgY29tbWVudDogJ0RlbGF5aW5nIERpZmZpY3VsdHkgQm9tYiB0byBtaWQtU2VwdGVtYmVyIDIwMjInLFxuICAgICAgICB1cmw6ICdodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTUxMzMnLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5EcmFmdCxcbiAgICAgICAgbWluaW11bUhhcmRmb3JrOiBIYXJkZm9yay5HcmF5R2xhY2llcixcbiAgICAgICAgcmVxdWlyZWRFSVBzOiBbXSxcbiAgICAgICAgcG93OiB7XG4gICAgICAgICAgICBkaWZmaWN1bHR5Qm9tYkRlbGF5OiB7XG4gICAgICAgICAgICAgICAgdjogMTE0MDAwMDAsXG4gICAgICAgICAgICAgICAgZDogJ3RoZSBhbW91bnQgb2YgYmxvY2tzIHRvIGRlbGF5IHRoZSBkaWZmaWN1bHR5IGJvbWIgd2l0aCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgNTY1Njoge1xuICAgICAgICBjb21tZW50OiAnTUNPUFkgLSBNZW1vcnkgY29weWluZyBpbnN0cnVjdGlvbicsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNTY1NicsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLkRyYWZ0LFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLlNoYW5naGFpLFxuICAgICAgICByZXF1aXJlZEVJUHM6IFtdLFxuICAgICAgICBnYXNQcmljZXM6IHtcbiAgICAgICAgICAgIG1jb3B5OiB7XG4gICAgICAgICAgICAgICAgdjogMyxcbiAgICAgICAgICAgICAgICBkOiAnQmFzZSBmZWUgb2YgdGhlIE1DT1BZIG9wY29kZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgNjc4MDoge1xuICAgICAgICBjb21tZW50OiAnU0VMRkRFU1RSVUNUIG9ubHkgaW4gc2FtZSB0cmFuc2FjdGlvbicsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNjc4MCcsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLkRyYWZ0LFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLkxvbmRvbixcbiAgICAgICAgcmVxdWlyZWRFSVBzOiBbXSxcbiAgICB9LFxuICAgIDc1MTY6IHtcbiAgICAgICAgY29tbWVudDogJ0JMT0JCQVNFRkVFIG9wY29kZScsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNzUxNicsXG4gICAgICAgIHN0YXR1czogU3RhdHVzLkRyYWZ0LFxuICAgICAgICBtaW5pbXVtSGFyZGZvcms6IEhhcmRmb3JrLlBhcmlzLFxuICAgICAgICByZXF1aXJlZEVJUHM6IFs0ODQ0XSxcbiAgICAgICAgZ2FzUHJpY2VzOiB7XG4gICAgICAgICAgICBibG9iYmFzZWZlZToge1xuICAgICAgICAgICAgICAgIHY6IDIsXG4gICAgICAgICAgICAgICAgZDogJ0dhcyBjb3N0IG9mIHRoZSBCTE9CQkFTRUZFRSBvcGNvZGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVpcHMuanMubWFwIl0sIm5hbWVzIjpbIkhhcmRmb3JrIiwiU3RhdHVzIiwiRUlQcyIsImNvbW1lbnQiLCJ1cmwiLCJzdGF0dXMiLCJSZXZpZXciLCJtaW5pbXVtSGFyZGZvcmsiLCJDaGFpbnN0YXJ0IiwicmVxdWlyZWRFSVBzIiwiZ2FzUHJpY2VzIiwidHN0b3JlIiwidiIsImQiLCJ0bG9hZCIsIkZpbmFsIiwiQmVybGluIiwiZ2FzQ29uZmlnIiwiYmFzZUZlZU1heENoYW5nZURlbm9taW5hdG9yIiwiZWxhc3RpY2l0eU11bHRpcGxpZXIiLCJpbml0aWFsQmFzZUZlZSIsIkRyYWZ0IiwiSXN0YW5idWwiLCJiZWdpbnN1YiIsInJldHVybnN1YiIsImp1bXBzdWIiLCJCeXphbnRpdW0iLCJtb2RleHBHcXVhZGRpdmlzb3IiLCJjb2xkc2xvYWQiLCJjb2xkYWNjb3VudGFjY2VzcyIsIndhcm1zdG9yYWdlcmVhZCIsInNzdG9yZUNsZWFuR2FzRUlQMjIwMCIsInNzdG9yZU5vb3BHYXNFSVAyMjAwIiwic3N0b3JlRGlydHlHYXNFSVAyMjAwIiwic3N0b3JlSW5pdFJlZnVuZEVJUDIyMDAiLCJzc3RvcmVDbGVhblJlZnVuZEVJUDIyMDAiLCJjYWxsIiwiY2FsbGNvZGUiLCJkZWxlZ2F0ZWNhbGwiLCJzdGF0aWNjYWxsIiwiYmFsYW5jZSIsImV4dGNvZGVzaXplIiwiZXh0Y29kZWNvcHkiLCJleHRjb2RlaGFzaCIsInNsb2FkIiwic3N0b3JlIiwiYWNjZXNzTGlzdFN0b3JhZ2VLZXlDb3N0IiwiYWNjZXNzTGlzdEFkZHJlc3NDb3N0IiwiTG9uZG9uIiwiYXV0aCIsImF1dGhjYWxsIiwiYXV0aGNhbGxWYWx1ZVRyYW5zZmVyIiwiYmFzZWZlZSIsIm1heFJlZnVuZFF1b3RpZW50Iiwic2VsZmRlc3RydWN0UmVmdW5kIiwic3N0b3JlQ2xlYXJSZWZ1bmRFSVAyMjAwIiwiTXVpckdsYWNpZXIiLCJwb3ciLCJkaWZmaWN1bHR5Qm9tYkRlbGF5Iiwidm0iLCJwdXNoMCIsIlNwdXJpb3VzRHJhZ29uIiwiaW5pdENvZGVXb3JkQ29zdCIsIm1heEluaXRDb2RlU2l6ZSIsInByZXZyYW5kYW8iLCJDYW5jdW4iLCJoaXN0b3JpY2FsUm9vdHNMZW5ndGgiLCJQYXJpcyIsImJsb2JHYXNQZXJCbG9iIiwidGFyZ2V0QmxvYkdhc1BlckJsb2NrIiwibWF4YmxvYkdhc1BlckJsb2NrIiwiYmxvYkdhc1ByaWNlVXBkYXRlRnJhY3Rpb24iLCJzaW1wbGVHYXNQZXJCbG9iIiwibWluQmxvYkdhc1ByaWNlIiwia3pnUG9pbnRFdmFsdWF0aW9uR2FzUHJlY29tcGlsZVByaWNlIiwiYmxvYmhhc2giLCJzaGFyZGluZyIsImJsb2JDb21taXRtZW50VmVyc2lvbkt6ZyIsImZpZWxkRWxlbWVudHNQZXJCbG9iIiwiR3JheUdsYWNpZXIiLCJTaGFuZ2hhaSIsIm1jb3B5IiwiYmxvYmJhc2VmZWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/eips.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chain: () => (/* binding */ Chain),\n/* harmony export */   ChainGenesis: () => (/* binding */ ChainGenesis),\n/* harmony export */   ConsensusAlgorithm: () => (/* binding */ ConsensusAlgorithm),\n/* harmony export */   ConsensusType: () => (/* binding */ ConsensusType),\n/* harmony export */   CustomChain: () => (/* binding */ CustomChain),\n/* harmony export */   Hardfork: () => (/* binding */ Hardfork)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n\nvar Chain;\n(function(Chain) {\n    Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n    Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n    Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n    Chain[Chain[\"Holesky\"] = 17000] = \"Holesky\";\n})(Chain || (Chain = {}));\n// Having this info as record will force typescript to make sure no chain is missed\n/**\n * GenesisState info about well known ethereum chains\n */ const ChainGenesis = {\n    [Chain.Mainnet]: {\n        name: \"mainnet\",\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(\"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544\")\n    },\n    [Chain.Goerli]: {\n        name: \"goerli\",\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(\"0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008\")\n    },\n    [Chain.Sepolia]: {\n        name: \"sepolia\",\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(\"0x5eb6e371a698b8d68f665192350ffcecbbbf322916f4b51bd79bb6887da3f494\")\n    },\n    [Chain.Holesky]: {\n        name: \"holesky\",\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(\"0x69d8c9d72f6fa4ad42d4702b433707212f90db395eb54dc20bc85de253788783\")\n    }\n};\nvar Hardfork;\n(function(Hardfork) {\n    Hardfork[\"Chainstart\"] = \"chainstart\";\n    Hardfork[\"Homestead\"] = \"homestead\";\n    Hardfork[\"Dao\"] = \"dao\";\n    Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n    Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n    Hardfork[\"Byzantium\"] = \"byzantium\";\n    Hardfork[\"Constantinople\"] = \"constantinople\";\n    Hardfork[\"Petersburg\"] = \"petersburg\";\n    Hardfork[\"Istanbul\"] = \"istanbul\";\n    Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n    Hardfork[\"Berlin\"] = \"berlin\";\n    Hardfork[\"London\"] = \"london\";\n    Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n    Hardfork[\"GrayGlacier\"] = \"grayGlacier\";\n    Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n    Hardfork[\"Paris\"] = \"paris\";\n    Hardfork[\"Shanghai\"] = \"shanghai\";\n    Hardfork[\"Cancun\"] = \"cancun\";\n})(Hardfork || (Hardfork = {}));\nvar ConsensusType;\n(function(ConsensusType) {\n    ConsensusType[\"ProofOfStake\"] = \"pos\";\n    ConsensusType[\"ProofOfWork\"] = \"pow\";\n    ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType || (ConsensusType = {}));\nvar ConsensusAlgorithm;\n(function(ConsensusAlgorithm) {\n    ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n    ConsensusAlgorithm[\"Clique\"] = \"clique\";\n    ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm || (ConsensusAlgorithm = {}));\nvar CustomChain;\n(function(CustomChain) {\n    /**\n     * Polygon (Matic) Mainnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */ CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n    /**\n     * Polygon (Matic) Mumbai Testnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */ CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n    /**\n     * Arbitrum One - mainnet for Arbitrum roll-up\n     *\n     * - [Documentation](https://developer.offchainlabs.com/public-chains)\n     */ CustomChain[\"ArbitrumOne\"] = \"arbitrum-one\";\n    /**\n     * xDai EVM sidechain with a native stable token\n     *\n     * - [Documentation](https://www.xdaichain.com/)\n     */ CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n    /**\n     * Optimistic Kovan - testnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */ CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n    /**\n     * Optimistic Ethereum - mainnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */ CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain || (CustomChain = {})); //# sourceMappingURL=enums.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vZW51bXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF3RDtBQUNqRCxJQUFJRSxNQUFNO0FBQ2hCLFVBQVVBLEtBQUs7SUFDWkEsS0FBSyxDQUFDQSxLQUFLLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5QkEsS0FBSyxDQUFDQSxLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUM3QkEsS0FBSyxDQUFDQSxLQUFLLENBQUMsVUFBVSxHQUFHLFNBQVMsR0FBRztJQUNyQ0EsS0FBSyxDQUFDQSxLQUFLLENBQUMsVUFBVSxHQUFHLE1BQU0sR0FBRztBQUN0QyxHQUFHQSxTQUFVQSxDQUFBQSxRQUFRLENBQUM7QUFDdEIsbUZBQW1GO0FBQ25GOztDQUVDLEdBQ00sTUFBTUMsZUFBZTtJQUN4QixDQUFDRCxNQUFNRSxPQUFPLENBQUMsRUFBRTtRQUNiQyxNQUFNO1FBQ05DLGFBQWFOLHNEQUFRQTtRQUNyQk8sV0FBV04sNERBQVVBLENBQUM7SUFDMUI7SUFDQSxDQUFDQyxNQUFNTSxNQUFNLENBQUMsRUFBRTtRQUNaSCxNQUFNO1FBQ05DLGFBQWFOLHNEQUFRQTtRQUNyQk8sV0FBV04sNERBQVVBLENBQUM7SUFDMUI7SUFDQSxDQUFDQyxNQUFNTyxPQUFPLENBQUMsRUFBRTtRQUNiSixNQUFNO1FBQ05DLGFBQWFOLHNEQUFRQTtRQUNyQk8sV0FBV04sNERBQVVBLENBQUM7SUFDMUI7SUFDQSxDQUFDQyxNQUFNUSxPQUFPLENBQUMsRUFBRTtRQUNiTCxNQUFNO1FBQ05DLGFBQWFOLHNEQUFRQTtRQUNyQk8sV0FBV04sNERBQVVBLENBQUM7SUFDMUI7QUFDSixFQUFFO0FBQ0ssSUFBSVUsU0FBUztBQUNuQixVQUFVQSxRQUFRO0lBQ2ZBLFFBQVEsQ0FBQyxhQUFhLEdBQUc7SUFDekJBLFFBQVEsQ0FBQyxZQUFZLEdBQUc7SUFDeEJBLFFBQVEsQ0FBQyxNQUFNLEdBQUc7SUFDbEJBLFFBQVEsQ0FBQyxtQkFBbUIsR0FBRztJQUMvQkEsUUFBUSxDQUFDLGlCQUFpQixHQUFHO0lBQzdCQSxRQUFRLENBQUMsWUFBWSxHQUFHO0lBQ3hCQSxRQUFRLENBQUMsaUJBQWlCLEdBQUc7SUFDN0JBLFFBQVEsQ0FBQyxhQUFhLEdBQUc7SUFDekJBLFFBQVEsQ0FBQyxXQUFXLEdBQUc7SUFDdkJBLFFBQVEsQ0FBQyxjQUFjLEdBQUc7SUFDMUJBLFFBQVEsQ0FBQyxTQUFTLEdBQUc7SUFDckJBLFFBQVEsQ0FBQyxTQUFTLEdBQUc7SUFDckJBLFFBQVEsQ0FBQyxlQUFlLEdBQUc7SUFDM0JBLFFBQVEsQ0FBQyxjQUFjLEdBQUc7SUFDMUJBLFFBQVEsQ0FBQyx3QkFBd0IsR0FBRztJQUNwQ0EsUUFBUSxDQUFDLFFBQVEsR0FBRztJQUNwQkEsUUFBUSxDQUFDLFdBQVcsR0FBRztJQUN2QkEsUUFBUSxDQUFDLFNBQVMsR0FBRztBQUN6QixHQUFHQSxZQUFhQSxDQUFBQSxXQUFXLENBQUM7QUFDckIsSUFBSUMsY0FBYztBQUN4QixVQUFVQSxhQUFhO0lBQ3BCQSxhQUFhLENBQUMsZUFBZSxHQUFHO0lBQ2hDQSxhQUFhLENBQUMsY0FBYyxHQUFHO0lBQy9CQSxhQUFhLENBQUMsbUJBQW1CLEdBQUc7QUFDeEMsR0FBR0EsaUJBQWtCQSxDQUFBQSxnQkFBZ0IsQ0FBQztBQUMvQixJQUFJQyxtQkFBbUI7QUFDN0IsVUFBVUEsa0JBQWtCO0lBQ3pCQSxrQkFBa0IsQ0FBQyxTQUFTLEdBQUc7SUFDL0JBLGtCQUFrQixDQUFDLFNBQVMsR0FBRztJQUMvQkEsa0JBQWtCLENBQUMsU0FBUyxHQUFHO0FBQ25DLEdBQUdBLHNCQUF1QkEsQ0FBQUEscUJBQXFCLENBQUM7QUFDekMsSUFBSUMsWUFBWTtBQUN0QixVQUFVQSxXQUFXO0lBQ2xCOzs7O0tBSUMsR0FDREEsV0FBVyxDQUFDLGlCQUFpQixHQUFHO0lBQ2hDOzs7O0tBSUMsR0FDREEsV0FBVyxDQUFDLGdCQUFnQixHQUFHO0lBQy9COzs7O0tBSUMsR0FDREEsV0FBVyxDQUFDLGNBQWMsR0FBRztJQUM3Qjs7OztLQUlDLEdBQ0RBLFdBQVcsQ0FBQyxZQUFZLEdBQUc7SUFDM0I7Ozs7S0FJQyxHQUNEQSxXQUFXLENBQUMsa0JBQWtCLEdBQUc7SUFDakM7Ozs7S0FJQyxHQUNEQSxXQUFXLENBQUMscUJBQXFCLEdBQUc7QUFDeEMsR0FBR0EsZUFBZ0JBLENBQUFBLGNBQWMsQ0FBQyxLQUNsQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL2Rpc3QvZXNtL2VudW1zLmpzPzcwZDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQklHSU5UXzAsIGhleFRvQnl0ZXMgfSBmcm9tICdAZXRoZXJldW1qcy91dGlsJztcbmV4cG9ydCB2YXIgQ2hhaW47XG4oZnVuY3Rpb24gKENoYWluKSB7XG4gICAgQ2hhaW5bQ2hhaW5bXCJNYWlubmV0XCJdID0gMV0gPSBcIk1haW5uZXRcIjtcbiAgICBDaGFpbltDaGFpbltcIkdvZXJsaVwiXSA9IDVdID0gXCJHb2VybGlcIjtcbiAgICBDaGFpbltDaGFpbltcIlNlcG9saWFcIl0gPSAxMTE1NTExMV0gPSBcIlNlcG9saWFcIjtcbiAgICBDaGFpbltDaGFpbltcIkhvbGVza3lcIl0gPSAxNzAwMF0gPSBcIkhvbGVza3lcIjtcbn0pKENoYWluIHx8IChDaGFpbiA9IHt9KSk7XG4vLyBIYXZpbmcgdGhpcyBpbmZvIGFzIHJlY29yZCB3aWxsIGZvcmNlIHR5cGVzY3JpcHQgdG8gbWFrZSBzdXJlIG5vIGNoYWluIGlzIG1pc3NlZFxuLyoqXG4gKiBHZW5lc2lzU3RhdGUgaW5mbyBhYm91dCB3ZWxsIGtub3duIGV0aGVyZXVtIGNoYWluc1xuICovXG5leHBvcnQgY29uc3QgQ2hhaW5HZW5lc2lzID0ge1xuICAgIFtDaGFpbi5NYWlubmV0XToge1xuICAgICAgICBuYW1lOiAnbWFpbm5ldCcsXG4gICAgICAgIGJsb2NrTnVtYmVyOiBCSUdJTlRfMCxcbiAgICAgICAgc3RhdGVSb290OiBoZXhUb0J5dGVzKCcweGQ3Zjg5NzRmYjVhYzc4ZDlhYzA5OWI5YWQ1MDE4YmVkYzJjZTBhNzJkYWQxODI3YTE3MDlkYTMwNTgwZjA1NDQnKSxcbiAgICB9LFxuICAgIFtDaGFpbi5Hb2VybGldOiB7XG4gICAgICAgIG5hbWU6ICdnb2VybGknLFxuICAgICAgICBibG9ja051bWJlcjogQklHSU5UXzAsXG4gICAgICAgIHN0YXRlUm9vdDogaGV4VG9CeXRlcygnMHg1ZDZjZGVkNTg1ZTczYzRlMzIyYzMwYzJmNzgyYTMzNjMxNmYxN2RkODVhNDg2M2I5ZDgzOGQyZDRiOGIzMDA4JyksXG4gICAgfSxcbiAgICBbQ2hhaW4uU2Vwb2xpYV06IHtcbiAgICAgICAgbmFtZTogJ3NlcG9saWEnLFxuICAgICAgICBibG9ja051bWJlcjogQklHSU5UXzAsXG4gICAgICAgIHN0YXRlUm9vdDogaGV4VG9CeXRlcygnMHg1ZWI2ZTM3MWE2OThiOGQ2OGY2NjUxOTIzNTBmZmNlY2JiYmYzMjI5MTZmNGI1MWJkNzliYjY4ODdkYTNmNDk0JyksXG4gICAgfSxcbiAgICBbQ2hhaW4uSG9sZXNreV06IHtcbiAgICAgICAgbmFtZTogJ2hvbGVza3knLFxuICAgICAgICBibG9ja051bWJlcjogQklHSU5UXzAsXG4gICAgICAgIHN0YXRlUm9vdDogaGV4VG9CeXRlcygnMHg2OWQ4YzlkNzJmNmZhNGFkNDJkNDcwMmI0MzM3MDcyMTJmOTBkYjM5NWViNTRkYzIwYmM4NWRlMjUzNzg4NzgzJyksXG4gICAgfSxcbn07XG5leHBvcnQgdmFyIEhhcmRmb3JrO1xuKGZ1bmN0aW9uIChIYXJkZm9yaykge1xuICAgIEhhcmRmb3JrW1wiQ2hhaW5zdGFydFwiXSA9IFwiY2hhaW5zdGFydFwiO1xuICAgIEhhcmRmb3JrW1wiSG9tZXN0ZWFkXCJdID0gXCJob21lc3RlYWRcIjtcbiAgICBIYXJkZm9ya1tcIkRhb1wiXSA9IFwiZGFvXCI7XG4gICAgSGFyZGZvcmtbXCJUYW5nZXJpbmVXaGlzdGxlXCJdID0gXCJ0YW5nZXJpbmVXaGlzdGxlXCI7XG4gICAgSGFyZGZvcmtbXCJTcHVyaW91c0RyYWdvblwiXSA9IFwic3B1cmlvdXNEcmFnb25cIjtcbiAgICBIYXJkZm9ya1tcIkJ5emFudGl1bVwiXSA9IFwiYnl6YW50aXVtXCI7XG4gICAgSGFyZGZvcmtbXCJDb25zdGFudGlub3BsZVwiXSA9IFwiY29uc3RhbnRpbm9wbGVcIjtcbiAgICBIYXJkZm9ya1tcIlBldGVyc2J1cmdcIl0gPSBcInBldGVyc2J1cmdcIjtcbiAgICBIYXJkZm9ya1tcIklzdGFuYnVsXCJdID0gXCJpc3RhbmJ1bFwiO1xuICAgIEhhcmRmb3JrW1wiTXVpckdsYWNpZXJcIl0gPSBcIm11aXJHbGFjaWVyXCI7XG4gICAgSGFyZGZvcmtbXCJCZXJsaW5cIl0gPSBcImJlcmxpblwiO1xuICAgIEhhcmRmb3JrW1wiTG9uZG9uXCJdID0gXCJsb25kb25cIjtcbiAgICBIYXJkZm9ya1tcIkFycm93R2xhY2llclwiXSA9IFwiYXJyb3dHbGFjaWVyXCI7XG4gICAgSGFyZGZvcmtbXCJHcmF5R2xhY2llclwiXSA9IFwiZ3JheUdsYWNpZXJcIjtcbiAgICBIYXJkZm9ya1tcIk1lcmdlRm9ya0lkVHJhbnNpdGlvblwiXSA9IFwibWVyZ2VGb3JrSWRUcmFuc2l0aW9uXCI7XG4gICAgSGFyZGZvcmtbXCJQYXJpc1wiXSA9IFwicGFyaXNcIjtcbiAgICBIYXJkZm9ya1tcIlNoYW5naGFpXCJdID0gXCJzaGFuZ2hhaVwiO1xuICAgIEhhcmRmb3JrW1wiQ2FuY3VuXCJdID0gXCJjYW5jdW5cIjtcbn0pKEhhcmRmb3JrIHx8IChIYXJkZm9yayA9IHt9KSk7XG5leHBvcnQgdmFyIENvbnNlbnN1c1R5cGU7XG4oZnVuY3Rpb24gKENvbnNlbnN1c1R5cGUpIHtcbiAgICBDb25zZW5zdXNUeXBlW1wiUHJvb2ZPZlN0YWtlXCJdID0gXCJwb3NcIjtcbiAgICBDb25zZW5zdXNUeXBlW1wiUHJvb2ZPZldvcmtcIl0gPSBcInBvd1wiO1xuICAgIENvbnNlbnN1c1R5cGVbXCJQcm9vZk9mQXV0aG9yaXR5XCJdID0gXCJwb2FcIjtcbn0pKENvbnNlbnN1c1R5cGUgfHwgKENvbnNlbnN1c1R5cGUgPSB7fSkpO1xuZXhwb3J0IHZhciBDb25zZW5zdXNBbGdvcml0aG07XG4oZnVuY3Rpb24gKENvbnNlbnN1c0FsZ29yaXRobSkge1xuICAgIENvbnNlbnN1c0FsZ29yaXRobVtcIkV0aGFzaFwiXSA9IFwiZXRoYXNoXCI7XG4gICAgQ29uc2Vuc3VzQWxnb3JpdGhtW1wiQ2xpcXVlXCJdID0gXCJjbGlxdWVcIjtcbiAgICBDb25zZW5zdXNBbGdvcml0aG1bXCJDYXNwZXJcIl0gPSBcImNhc3BlclwiO1xufSkoQ29uc2Vuc3VzQWxnb3JpdGhtIHx8IChDb25zZW5zdXNBbGdvcml0aG0gPSB7fSkpO1xuZXhwb3J0IHZhciBDdXN0b21DaGFpbjtcbihmdW5jdGlvbiAoQ3VzdG9tQ2hhaW4pIHtcbiAgICAvKipcbiAgICAgKiBQb2x5Z29uIChNYXRpYykgTWFpbm5ldFxuICAgICAqXG4gICAgICogLSBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLm1hdGljLm5ldHdvcmsvZG9jcy9kZXZlbG9wL25ldHdvcmstZGV0YWlscy9uZXR3b3JrKVxuICAgICAqL1xuICAgIEN1c3RvbUNoYWluW1wiUG9seWdvbk1haW5uZXRcIl0gPSBcInBvbHlnb24tbWFpbm5ldFwiO1xuICAgIC8qKlxuICAgICAqIFBvbHlnb24gKE1hdGljKSBNdW1iYWkgVGVzdG5ldFxuICAgICAqXG4gICAgICogLSBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLm1hdGljLm5ldHdvcmsvZG9jcy9kZXZlbG9wL25ldHdvcmstZGV0YWlscy9uZXR3b3JrKVxuICAgICAqL1xuICAgIEN1c3RvbUNoYWluW1wiUG9seWdvbk11bWJhaVwiXSA9IFwicG9seWdvbi1tdW1iYWlcIjtcbiAgICAvKipcbiAgICAgKiBBcmJpdHJ1bSBPbmUgLSBtYWlubmV0IGZvciBBcmJpdHJ1bSByb2xsLXVwXG4gICAgICpcbiAgICAgKiAtIFtEb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5vZmZjaGFpbmxhYnMuY29tL3B1YmxpYy1jaGFpbnMpXG4gICAgICovXG4gICAgQ3VzdG9tQ2hhaW5bXCJBcmJpdHJ1bU9uZVwiXSA9IFwiYXJiaXRydW0tb25lXCI7XG4gICAgLyoqXG4gICAgICogeERhaSBFVk0gc2lkZWNoYWluIHdpdGggYSBuYXRpdmUgc3RhYmxlIHRva2VuXG4gICAgICpcbiAgICAgKiAtIFtEb2N1bWVudGF0aW9uXShodHRwczovL3d3dy54ZGFpY2hhaW4uY29tLylcbiAgICAgKi9cbiAgICBDdXN0b21DaGFpbltcInhEYWlDaGFpblwiXSA9IFwieC1kYWktY2hhaW5cIjtcbiAgICAvKipcbiAgICAgKiBPcHRpbWlzdGljIEtvdmFuIC0gdGVzdG5ldCBmb3IgT3B0aW1pc20gcm9sbC11cFxuICAgICAqXG4gICAgICogLSBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9jb21tdW5pdHkub3B0aW1pc20uaW8vZG9jcy9kZXZlbG9wZXJzL3R1dG9yaWFscy5odG1sKVxuICAgICAqL1xuICAgIEN1c3RvbUNoYWluW1wiT3B0aW1pc3RpY0tvdmFuXCJdID0gXCJvcHRpbWlzdGljLWtvdmFuXCI7XG4gICAgLyoqXG4gICAgICogT3B0aW1pc3RpYyBFdGhlcmV1bSAtIG1haW5uZXQgZm9yIE9wdGltaXNtIHJvbGwtdXBcbiAgICAgKlxuICAgICAqIC0gW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vY29tbXVuaXR5Lm9wdGltaXNtLmlvL2RvY3MvZGV2ZWxvcGVycy90dXRvcmlhbHMuaHRtbClcbiAgICAgKi9cbiAgICBDdXN0b21DaGFpbltcIk9wdGltaXN0aWNFdGhlcmV1bVwiXSA9IFwib3B0aW1pc3RpYy1ldGhlcmV1bVwiO1xufSkoQ3VzdG9tQ2hhaW4gfHwgKEN1c3RvbUNoYWluID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudW1zLmpzLm1hcCJdLCJuYW1lcyI6WyJCSUdJTlRfMCIsImhleFRvQnl0ZXMiLCJDaGFpbiIsIkNoYWluR2VuZXNpcyIsIk1haW5uZXQiLCJuYW1lIiwiYmxvY2tOdW1iZXIiLCJzdGF0ZVJvb3QiLCJHb2VybGkiLCJTZXBvbGlhIiwiSG9sZXNreSIsIkhhcmRmb3JrIiwiQ29uc2Vuc3VzVHlwZSIsIkNvbnNlbnN1c0FsZ29yaXRobSIsIkN1c3RvbUNoYWluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/hardforks.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/hardforks.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hardforks: () => (/* binding */ hardforks)\n/* harmony export */ });\nvar Status;\n(function(Status) {\n    Status[\"Draft\"] = \"draft\";\n    Status[\"Review\"] = \"review\";\n    Status[\"Final\"] = \"final\";\n})(Status || (Status = {}));\nconst hardforks = {\n    chainstart: {\n        name: \"chainstart\",\n        comment: \"Start of the Ethereum main chain\",\n        url: \"\",\n        status: Status.Final,\n        gasConfig: {\n            minGasLimit: {\n                v: 5000,\n                d: \"Minimum the gas limit may ever be\"\n            },\n            gasLimitBoundDivisor: {\n                v: 1024,\n                d: \"The bound divisor of the gas limit, used in update calculations\"\n            },\n            maxRefundQuotient: {\n                v: 2,\n                d: \"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)\"\n            }\n        },\n        gasPrices: {\n            base: {\n                v: 2,\n                d: \"Gas base cost, used e.g. for ChainID opcode (Istanbul)\"\n            },\n            exp: {\n                v: 10,\n                d: \"Base fee of the EXP opcode\"\n            },\n            expByte: {\n                v: 10,\n                d: \"Times ceil(log256(exponent)) for the EXP instruction\"\n            },\n            keccak256: {\n                v: 30,\n                d: \"Base fee of the SHA3 opcode\"\n            },\n            keccak256Word: {\n                v: 6,\n                d: \"Once per word of the SHA3 operation's data\"\n            },\n            sload: {\n                v: 50,\n                d: \"Base fee of the SLOAD opcode\"\n            },\n            sstoreSet: {\n                v: 20000,\n                d: \"Once per SSTORE operation if the zeroness changes from zero\"\n            },\n            sstoreReset: {\n                v: 5000,\n                d: \"Once per SSTORE operation if the zeroness does not change from zero\"\n            },\n            sstoreRefund: {\n                v: 15000,\n                d: \"Once per SSTORE operation if the zeroness changes to zero\"\n            },\n            jumpdest: {\n                v: 1,\n                d: \"Base fee of the JUMPDEST opcode\"\n            },\n            log: {\n                v: 375,\n                d: \"Base fee of the LOG opcode\"\n            },\n            logData: {\n                v: 8,\n                d: \"Per byte in a LOG* operation's data\"\n            },\n            logTopic: {\n                v: 375,\n                d: \"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas\"\n            },\n            create: {\n                v: 32000,\n                d: \"Base fee of the CREATE opcode\"\n            },\n            call: {\n                v: 40,\n                d: \"Base fee of the CALL opcode\"\n            },\n            callStipend: {\n                v: 2300,\n                d: \"Free gas given at beginning of call\"\n            },\n            callValueTransfer: {\n                v: 9000,\n                d: \"Paid for CALL when the value transfor is non-zero\"\n            },\n            callNewAccount: {\n                v: 25000,\n                d: \"Paid for CALL when the destination address didn't exist prior\"\n            },\n            selfdestructRefund: {\n                v: 24000,\n                d: \"Refunded following a selfdestruct operation\"\n            },\n            memory: {\n                v: 3,\n                d: \"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL\"\n            },\n            quadCoeffDiv: {\n                v: 512,\n                d: \"Divisor for the quadratic particle of the memory cost equation\"\n            },\n            createData: {\n                v: 200,\n                d: \"\"\n            },\n            tx: {\n                v: 21000,\n                d: \"Per transaction. NOTE: Not payable on data of calls between transactions\"\n            },\n            txCreation: {\n                v: 32000,\n                d: \"The cost of creating a contract via tx\"\n            },\n            txDataZero: {\n                v: 4,\n                d: \"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions\"\n            },\n            txDataNonZero: {\n                v: 68,\n                d: \"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions\"\n            },\n            copy: {\n                v: 3,\n                d: \"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added\"\n            },\n            ecRecover: {\n                v: 3000,\n                d: \"\"\n            },\n            sha256: {\n                v: 60,\n                d: \"\"\n            },\n            sha256Word: {\n                v: 12,\n                d: \"\"\n            },\n            ripemd160: {\n                v: 600,\n                d: \"\"\n            },\n            ripemd160Word: {\n                v: 120,\n                d: \"\"\n            },\n            identity: {\n                v: 15,\n                d: \"\"\n            },\n            identityWord: {\n                v: 3,\n                d: \"\"\n            },\n            stop: {\n                v: 0,\n                d: \"Base fee of the STOP opcode\"\n            },\n            add: {\n                v: 3,\n                d: \"Base fee of the ADD opcode\"\n            },\n            mul: {\n                v: 5,\n                d: \"Base fee of the MUL opcode\"\n            },\n            sub: {\n                v: 3,\n                d: \"Base fee of the SUB opcode\"\n            },\n            div: {\n                v: 5,\n                d: \"Base fee of the DIV opcode\"\n            },\n            sdiv: {\n                v: 5,\n                d: \"Base fee of the SDIV opcode\"\n            },\n            mod: {\n                v: 5,\n                d: \"Base fee of the MOD opcode\"\n            },\n            smod: {\n                v: 5,\n                d: \"Base fee of the SMOD opcode\"\n            },\n            addmod: {\n                v: 8,\n                d: \"Base fee of the ADDMOD opcode\"\n            },\n            mulmod: {\n                v: 8,\n                d: \"Base fee of the MULMOD opcode\"\n            },\n            signextend: {\n                v: 5,\n                d: \"Base fee of the SIGNEXTEND opcode\"\n            },\n            lt: {\n                v: 3,\n                d: \"Base fee of the LT opcode\"\n            },\n            gt: {\n                v: 3,\n                d: \"Base fee of the GT opcode\"\n            },\n            slt: {\n                v: 3,\n                d: \"Base fee of the SLT opcode\"\n            },\n            sgt: {\n                v: 3,\n                d: \"Base fee of the SGT opcode\"\n            },\n            eq: {\n                v: 3,\n                d: \"Base fee of the EQ opcode\"\n            },\n            iszero: {\n                v: 3,\n                d: \"Base fee of the ISZERO opcode\"\n            },\n            and: {\n                v: 3,\n                d: \"Base fee of the AND opcode\"\n            },\n            or: {\n                v: 3,\n                d: \"Base fee of the OR opcode\"\n            },\n            xor: {\n                v: 3,\n                d: \"Base fee of the XOR opcode\"\n            },\n            not: {\n                v: 3,\n                d: \"Base fee of the NOT opcode\"\n            },\n            byte: {\n                v: 3,\n                d: \"Base fee of the BYTE opcode\"\n            },\n            address: {\n                v: 2,\n                d: \"Base fee of the ADDRESS opcode\"\n            },\n            balance: {\n                v: 20,\n                d: \"Base fee of the BALANCE opcode\"\n            },\n            origin: {\n                v: 2,\n                d: \"Base fee of the ORIGIN opcode\"\n            },\n            caller: {\n                v: 2,\n                d: \"Base fee of the CALLER opcode\"\n            },\n            callvalue: {\n                v: 2,\n                d: \"Base fee of the CALLVALUE opcode\"\n            },\n            calldataload: {\n                v: 3,\n                d: \"Base fee of the CALLDATALOAD opcode\"\n            },\n            calldatasize: {\n                v: 2,\n                d: \"Base fee of the CALLDATASIZE opcode\"\n            },\n            calldatacopy: {\n                v: 3,\n                d: \"Base fee of the CALLDATACOPY opcode\"\n            },\n            codesize: {\n                v: 2,\n                d: \"Base fee of the CODESIZE opcode\"\n            },\n            codecopy: {\n                v: 3,\n                d: \"Base fee of the CODECOPY opcode\"\n            },\n            gasprice: {\n                v: 2,\n                d: \"Base fee of the GASPRICE opcode\"\n            },\n            extcodesize: {\n                v: 20,\n                d: \"Base fee of the EXTCODESIZE opcode\"\n            },\n            extcodecopy: {\n                v: 20,\n                d: \"Base fee of the EXTCODECOPY opcode\"\n            },\n            blockhash: {\n                v: 20,\n                d: \"Base fee of the BLOCKHASH opcode\"\n            },\n            coinbase: {\n                v: 2,\n                d: \"Base fee of the COINBASE opcode\"\n            },\n            timestamp: {\n                v: 2,\n                d: \"Base fee of the TIMESTAMP opcode\"\n            },\n            number: {\n                v: 2,\n                d: \"Base fee of the NUMBER opcode\"\n            },\n            difficulty: {\n                v: 2,\n                d: \"Base fee of the DIFFICULTY opcode\"\n            },\n            gaslimit: {\n                v: 2,\n                d: \"Base fee of the GASLIMIT opcode\"\n            },\n            pop: {\n                v: 2,\n                d: \"Base fee of the POP opcode\"\n            },\n            mload: {\n                v: 3,\n                d: \"Base fee of the MLOAD opcode\"\n            },\n            mstore: {\n                v: 3,\n                d: \"Base fee of the MSTORE opcode\"\n            },\n            mstore8: {\n                v: 3,\n                d: \"Base fee of the MSTORE8 opcode\"\n            },\n            sstore: {\n                v: 0,\n                d: \"Base fee of the SSTORE opcode\"\n            },\n            jump: {\n                v: 8,\n                d: \"Base fee of the JUMP opcode\"\n            },\n            jumpi: {\n                v: 10,\n                d: \"Base fee of the JUMPI opcode\"\n            },\n            pc: {\n                v: 2,\n                d: \"Base fee of the PC opcode\"\n            },\n            msize: {\n                v: 2,\n                d: \"Base fee of the MSIZE opcode\"\n            },\n            gas: {\n                v: 2,\n                d: \"Base fee of the GAS opcode\"\n            },\n            push: {\n                v: 3,\n                d: \"Base fee of the PUSH opcode\"\n            },\n            dup: {\n                v: 3,\n                d: \"Base fee of the DUP opcode\"\n            },\n            swap: {\n                v: 3,\n                d: \"Base fee of the SWAP opcode\"\n            },\n            callcode: {\n                v: 40,\n                d: \"Base fee of the CALLCODE opcode\"\n            },\n            return: {\n                v: 0,\n                d: \"Base fee of the RETURN opcode\"\n            },\n            invalid: {\n                v: 0,\n                d: \"Base fee of the INVALID opcode\"\n            },\n            selfdestruct: {\n                v: 0,\n                d: \"Base fee of the SELFDESTRUCT opcode\"\n            }\n        },\n        vm: {\n            stackLimit: {\n                v: 1024,\n                d: \"Maximum size of VM stack allowed\"\n            },\n            callCreateDepth: {\n                v: 1024,\n                d: \"Maximum depth of call/create stack\"\n            },\n            maxExtraDataSize: {\n                v: 32,\n                d: \"Maximum size extra data may be after Genesis\"\n            }\n        },\n        pow: {\n            minimumDifficulty: {\n                v: 131072,\n                d: \"The minimum that the difficulty may ever be\"\n            },\n            difficultyBoundDivisor: {\n                v: 2048,\n                d: \"The bound divisor of the difficulty, used in the update calculations\"\n            },\n            durationLimit: {\n                v: 13,\n                d: \"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not\"\n            },\n            epochDuration: {\n                v: 30000,\n                d: \"Duration between proof-of-work epochs\"\n            },\n            timebombPeriod: {\n                v: 100000,\n                d: \"Exponential difficulty timebomb period\"\n            },\n            minerReward: {\n                v: BigInt(\"5000000000000000000\"),\n                d: \"the amount a miner get rewarded for mining a block\"\n            },\n            difficultyBombDelay: {\n                v: 0,\n                d: \"the amount of blocks to delay the difficulty bomb with\"\n            }\n        }\n    },\n    homestead: {\n        name: \"homestead\",\n        comment: \"Homestead hardfork with protocol and network changes\",\n        url: \"https://eips.ethereum.org/EIPS/eip-606\",\n        status: Status.Final,\n        gasPrices: {\n            delegatecall: {\n                v: 40,\n                d: \"Base fee of the DELEGATECALL opcode\"\n            }\n        }\n    },\n    dao: {\n        name: \"dao\",\n        comment: \"DAO rescue hardfork\",\n        url: \"https://eips.ethereum.org/EIPS/eip-779\",\n        status: Status.Final\n    },\n    tangerineWhistle: {\n        name: \"tangerineWhistle\",\n        comment: \"Hardfork with gas cost changes for IO-heavy operations\",\n        url: \"https://eips.ethereum.org/EIPS/eip-608\",\n        status: Status.Final,\n        gasPrices: {\n            sload: {\n                v: 200,\n                d: \"Once per SLOAD operation\"\n            },\n            call: {\n                v: 700,\n                d: \"Once per CALL operation & message call transaction\"\n            },\n            extcodesize: {\n                v: 700,\n                d: \"Base fee of the EXTCODESIZE opcode\"\n            },\n            extcodecopy: {\n                v: 700,\n                d: \"Base fee of the EXTCODECOPY opcode\"\n            },\n            balance: {\n                v: 400,\n                d: \"Base fee of the BALANCE opcode\"\n            },\n            delegatecall: {\n                v: 700,\n                d: \"Base fee of the DELEGATECALL opcode\"\n            },\n            callcode: {\n                v: 700,\n                d: \"Base fee of the CALLCODE opcode\"\n            },\n            selfdestruct: {\n                v: 5000,\n                d: \"Base fee of the SELFDESTRUCT opcode\"\n            }\n        }\n    },\n    spuriousDragon: {\n        name: \"spuriousDragon\",\n        comment: \"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit\",\n        url: \"https://eips.ethereum.org/EIPS/eip-607\",\n        status: Status.Final,\n        gasPrices: {\n            expByte: {\n                v: 50,\n                d: \"Times ceil(log256(exponent)) for the EXP instruction\"\n            }\n        },\n        vm: {\n            maxCodeSize: {\n                v: 24576,\n                d: \"Maximum length of contract code\"\n            }\n        }\n    },\n    byzantium: {\n        name: \"byzantium\",\n        comment: \"Hardfork with new precompiles, instructions and other protocol changes\",\n        url: \"https://eips.ethereum.org/EIPS/eip-609\",\n        status: Status.Final,\n        gasPrices: {\n            modexpGquaddivisor: {\n                v: 20,\n                d: \"Gquaddivisor from modexp precompile for gas calculation\"\n            },\n            ecAdd: {\n                v: 500,\n                d: \"Gas costs for curve addition precompile\"\n            },\n            ecMul: {\n                v: 40000,\n                d: \"Gas costs for curve multiplication precompile\"\n            },\n            ecPairing: {\n                v: 100000,\n                d: \"Base gas costs for curve pairing precompile\"\n            },\n            ecPairingWord: {\n                v: 80000,\n                d: \"Gas costs regarding curve pairing precompile input length\"\n            },\n            revert: {\n                v: 0,\n                d: \"Base fee of the REVERT opcode\"\n            },\n            staticcall: {\n                v: 700,\n                d: \"Base fee of the STATICCALL opcode\"\n            },\n            returndatasize: {\n                v: 2,\n                d: \"Base fee of the RETURNDATASIZE opcode\"\n            },\n            returndatacopy: {\n                v: 3,\n                d: \"Base fee of the RETURNDATACOPY opcode\"\n            }\n        },\n        pow: {\n            minerReward: {\n                v: BigInt(\"3000000000000000000\"),\n                d: \"the amount a miner get rewarded for mining a block\"\n            },\n            difficultyBombDelay: {\n                v: 3000000,\n                d: \"the amount of blocks to delay the difficulty bomb with\"\n            }\n        }\n    },\n    constantinople: {\n        name: \"constantinople\",\n        comment: \"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)\",\n        url: \"https://eips.ethereum.org/EIPS/eip-1013\",\n        status: Status.Final,\n        gasPrices: {\n            netSstoreNoopGas: {\n                v: 200,\n                d: \"Once per SSTORE operation if the value doesn't change\"\n            },\n            netSstoreInitGas: {\n                v: 20000,\n                d: \"Once per SSTORE operation from clean zero\"\n            },\n            netSstoreCleanGas: {\n                v: 5000,\n                d: \"Once per SSTORE operation from clean non-zero\"\n            },\n            netSstoreDirtyGas: {\n                v: 200,\n                d: \"Once per SSTORE operation from dirty\"\n            },\n            netSstoreClearRefund: {\n                v: 15000,\n                d: \"Once per SSTORE operation for clearing an originally existing storage slot\"\n            },\n            netSstoreResetRefund: {\n                v: 4800,\n                d: \"Once per SSTORE operation for resetting to the original non-zero value\"\n            },\n            netSstoreResetClearRefund: {\n                v: 19800,\n                d: \"Once per SSTORE operation for resetting to the original zero value\"\n            },\n            shl: {\n                v: 3,\n                d: \"Base fee of the SHL opcode\"\n            },\n            shr: {\n                v: 3,\n                d: \"Base fee of the SHR opcode\"\n            },\n            sar: {\n                v: 3,\n                d: \"Base fee of the SAR opcode\"\n            },\n            extcodehash: {\n                v: 400,\n                d: \"Base fee of the EXTCODEHASH opcode\"\n            },\n            create2: {\n                v: 32000,\n                d: \"Base fee of the CREATE2 opcode\"\n            }\n        },\n        pow: {\n            minerReward: {\n                v: BigInt(\"2000000000000000000\"),\n                d: \"The amount a miner gets rewarded for mining a block\"\n            },\n            difficultyBombDelay: {\n                v: 5000000,\n                d: \"the amount of blocks to delay the difficulty bomb with\"\n            }\n        }\n    },\n    petersburg: {\n        name: \"petersburg\",\n        comment: \"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople\",\n        url: \"https://eips.ethereum.org/EIPS/eip-1716\",\n        status: Status.Final,\n        gasPrices: {\n            netSstoreNoopGas: {\n                v: null,\n                d: \"Removed along EIP-1283\"\n            },\n            netSstoreInitGas: {\n                v: null,\n                d: \"Removed along EIP-1283\"\n            },\n            netSstoreCleanGas: {\n                v: null,\n                d: \"Removed along EIP-1283\"\n            },\n            netSstoreDirtyGas: {\n                v: null,\n                d: \"Removed along EIP-1283\"\n            },\n            netSstoreClearRefund: {\n                v: null,\n                d: \"Removed along EIP-1283\"\n            },\n            netSstoreResetRefund: {\n                v: null,\n                d: \"Removed along EIP-1283\"\n            },\n            netSstoreResetClearRefund: {\n                v: null,\n                d: \"Removed along EIP-1283\"\n            }\n        }\n    },\n    istanbul: {\n        name: \"istanbul\",\n        comment: \"HF targeted for December 2019 following the Constantinople/Petersburg HF\",\n        url: \"https://eips.ethereum.org/EIPS/eip-1679\",\n        status: Status.Final,\n        gasConfig: {},\n        gasPrices: {\n            blake2Round: {\n                v: 1,\n                d: \"Gas cost per round for the Blake2 F precompile\"\n            },\n            ecAdd: {\n                v: 150,\n                d: \"Gas costs for curve addition precompile\"\n            },\n            ecMul: {\n                v: 6000,\n                d: \"Gas costs for curve multiplication precompile\"\n            },\n            ecPairing: {\n                v: 45000,\n                d: \"Base gas costs for curve pairing precompile\"\n            },\n            ecPairingWord: {\n                v: 34000,\n                d: \"Gas costs regarding curve pairing precompile input length\"\n            },\n            txDataNonZero: {\n                v: 16,\n                d: \"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions\"\n            },\n            sstoreSentryGasEIP2200: {\n                v: 2300,\n                d: \"Minimum gas required to be present for an SSTORE call, not consumed\"\n            },\n            sstoreNoopGasEIP2200: {\n                v: 800,\n                d: \"Once per SSTORE operation if the value doesn't change\"\n            },\n            sstoreDirtyGasEIP2200: {\n                v: 800,\n                d: \"Once per SSTORE operation if a dirty value is changed\"\n            },\n            sstoreInitGasEIP2200: {\n                v: 20000,\n                d: \"Once per SSTORE operation from clean zero to non-zero\"\n            },\n            sstoreInitRefundEIP2200: {\n                v: 19200,\n                d: \"Once per SSTORE operation for resetting to the original zero value\"\n            },\n            sstoreCleanGasEIP2200: {\n                v: 5000,\n                d: \"Once per SSTORE operation from clean non-zero to something else\"\n            },\n            sstoreCleanRefundEIP2200: {\n                v: 4200,\n                d: \"Once per SSTORE operation for resetting to the original non-zero value\"\n            },\n            sstoreClearRefundEIP2200: {\n                v: 15000,\n                d: \"Once per SSTORE operation for clearing an originally existing storage slot\"\n            },\n            balance: {\n                v: 700,\n                d: \"Base fee of the BALANCE opcode\"\n            },\n            extcodehash: {\n                v: 700,\n                d: \"Base fee of the EXTCODEHASH opcode\"\n            },\n            chainid: {\n                v: 2,\n                d: \"Base fee of the CHAINID opcode\"\n            },\n            selfbalance: {\n                v: 5,\n                d: \"Base fee of the SELFBALANCE opcode\"\n            },\n            sload: {\n                v: 800,\n                d: \"Base fee of the SLOAD opcode\"\n            }\n        }\n    },\n    muirGlacier: {\n        name: \"muirGlacier\",\n        comment: \"HF to delay the difficulty bomb\",\n        url: \"https://eips.ethereum.org/EIPS/eip-2384\",\n        status: Status.Final,\n        pow: {\n            difficultyBombDelay: {\n                v: 9000000,\n                d: \"the amount of blocks to delay the difficulty bomb with\"\n            }\n        }\n    },\n    berlin: {\n        name: \"berlin\",\n        comment: \"HF targeted for July 2020 following the Muir Glacier HF\",\n        url: \"https://eips.ethereum.org/EIPS/eip-2070\",\n        status: Status.Final,\n        eips: [\n            2565,\n            2929,\n            2718,\n            2930\n        ]\n    },\n    london: {\n        name: \"london\",\n        comment: \"HF targeted for July 2021 following the Berlin fork\",\n        url: \"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md\",\n        status: Status.Final,\n        eips: [\n            1559,\n            3198,\n            3529,\n            3541\n        ]\n    },\n    arrowGlacier: {\n        name: \"arrowGlacier\",\n        comment: \"HF to delay the difficulty bomb\",\n        url: \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md\",\n        status: Status.Final,\n        eips: [\n            4345\n        ]\n    },\n    grayGlacier: {\n        name: \"grayGlacier\",\n        comment: \"Delaying the difficulty bomb to Mid September 2022\",\n        url: \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md\",\n        status: Status.Final,\n        eips: [\n            5133\n        ]\n    },\n    paris: {\n        name: \"paris\",\n        comment: \"Hardfork to upgrade the consensus mechanism to Proof-of-Stake\",\n        url: \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md\",\n        status: Status.Final,\n        consensus: {\n            type: \"pos\",\n            algorithm: \"casper\",\n            casper: {}\n        },\n        eips: [\n            3675,\n            4399\n        ]\n    },\n    mergeForkIdTransition: {\n        name: \"mergeForkIdTransition\",\n        comment: \"Pre-merge hardfork to fork off non-upgraded clients\",\n        url: \"https://eips.ethereum.org/EIPS/eip-3675\",\n        status: Status.Final,\n        eips: []\n    },\n    shanghai: {\n        name: \"shanghai\",\n        comment: \"Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode\",\n        url: \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md\",\n        status: Status.Final,\n        eips: [\n            3651,\n            3855,\n            3860,\n            4895\n        ]\n    },\n    cancun: {\n        name: \"cancun\",\n        comment: \"Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode\",\n        url: \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md\",\n        status: Status.Final,\n        eips: [\n            1153,\n            4844,\n            4788,\n            5656,\n            6780,\n            7516\n        ]\n    }\n}; //# sourceMappingURL=hardforks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/hardforks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chain: () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.Chain),\n/* harmony export */   ChainGenesis: () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.ChainGenesis),\n/* harmony export */   Common: () => (/* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_0__.Common),\n/* harmony export */   ConsensusAlgorithm: () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.ConsensusAlgorithm),\n/* harmony export */   ConsensusType: () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.ConsensusType),\n/* harmony export */   CustomChain: () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.CustomChain),\n/* harmony export */   Hardfork: () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork),\n/* harmony export */   parseGethGenesis: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.parseGethGenesis)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/common.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js\");\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interfaces.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/interfaces.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/types.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/utils.js\");\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUE0QjtBQUNEO0FBQ0s7QUFDTDtBQUNBLENBQzNCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vaW5kZXguanM/MmM0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2NvbW1vbi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2VudW1zLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/interfaces.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/interfaces.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * External Interfaces for other EthereumJS libraries\n */  //# sourceMappingURL=interfaces.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vaW50ZXJmYWNlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7O0NBRUMsR0FDUyxDQUNWLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vaW50ZXJmYWNlcy5qcz9jNDgzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgSW50ZXJmYWNlcyBmb3Igb3RoZXIgRXRoZXJldW1KUyBsaWJyYXJpZXNcbiAqL1xuZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/interfaces.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/types.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/types.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vdHlwZXMuanMiLCJtYXBwaW5ncyI6IjtBQUFVLENBQ1YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL2NvbW1vbi9kaXN0L2VzbS90eXBlcy5qcz82MGMyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/utils.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/utils.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseGethGenesis: () => (/* binding */ parseGethGenesis)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js\");\n\n\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */ function formatNonce(nonce) {\n    if (!nonce || nonce === \"0x0\") {\n        return \"0x0000000000000000\";\n    }\n    if ((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.isHexPrefixed)(nonce)) {\n        return \"0x\" + (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.stripHexPrefix)(nonce).padStart(16, \"0\");\n    }\n    return \"0x\" + nonce.padStart(16, \"0\");\n}\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */ function parseGethParams(json, mergeForkIdPostMerge = true) {\n    const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas, excessBlobGas } = json;\n    let { extraData, timestamp, nonce } = json;\n    const genesisTimestamp = Number(timestamp);\n    const { chainId } = config;\n    // geth is not strictly putting empty fields with a 0x prefix\n    if (extraData === \"\") {\n        extraData = \"0x\";\n    }\n    // geth may use number for timestamp\n    if (!(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.isHexPrefixed)(timestamp)) {\n        timestamp = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.intToHex)(parseInt(timestamp));\n    }\n    // geth may not give us a nonce strictly formatted to an 8 byte hex string\n    if (nonce.length !== 18) {\n        nonce = formatNonce(nonce);\n    }\n    // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n    // but have different configuration parameters in geth genesis parameters\n    if (config.eip155Block !== config.eip158Block) {\n        throw new Error(\"EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork\");\n    }\n    const params = {\n        name,\n        chainId,\n        networkId: chainId,\n        genesis: {\n            timestamp,\n            gasLimit,\n            difficulty,\n            nonce,\n            extraData,\n            mixHash,\n            coinbase,\n            baseFeePerGas,\n            excessBlobGas\n        },\n        hardfork: undefined,\n        hardforks: [],\n        bootstrapNodes: [],\n        consensus: config.clique !== undefined ? {\n            type: \"poa\",\n            algorithm: \"clique\",\n            clique: {\n                // The recent geth genesis seems to be using blockperiodseconds\n                // and epochlength for clique specification\n                // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n                period: config.clique.period ?? config.clique.blockperiodseconds,\n                epoch: config.clique.epoch ?? config.clique.epochlength\n            }\n        } : {\n            type: \"pow\",\n            algorithm: \"ethash\",\n            ethash: {}\n        }\n    };\n    const forkMap = {\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Homestead]: {\n            name: \"homesteadBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Dao]: {\n            name: \"daoForkBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.TangerineWhistle]: {\n            name: \"eip150Block\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.SpuriousDragon]: {\n            name: \"eip155Block\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Byzantium]: {\n            name: \"byzantiumBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Constantinople]: {\n            name: \"constantinopleBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Petersburg]: {\n            name: \"petersburgBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Istanbul]: {\n            name: \"istanbulBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.MuirGlacier]: {\n            name: \"muirGlacierBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Berlin]: {\n            name: \"berlinBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.London]: {\n            name: \"londonBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.MergeForkIdTransition]: {\n            name: \"mergeForkBlock\",\n            postMerge: mergeForkIdPostMerge\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Shanghai]: {\n            name: \"shanghaiTime\",\n            postMerge: true,\n            isTimestamp: true\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Cancun]: {\n            name: \"cancunTime\",\n            postMerge: true,\n            isTimestamp: true\n        }\n    };\n    // forkMapRev is the map from config field name to Hardfork\n    const forkMapRev = Object.keys(forkMap).reduce((acc, elem)=>{\n        acc[forkMap[elem].name] = elem;\n        return acc;\n    }, {});\n    const configHardforkNames = Object.keys(config).filter((key)=>forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n    params.hardforks = configHardforkNames.map((nameBlock)=>({\n            name: forkMapRev[nameBlock],\n            block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== \"number\" ? null : config[nameBlock],\n            timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === \"number\" ? config[nameBlock] : undefined\n        })).filter((fork)=>fork.block !== null || fork.timestamp !== undefined);\n    for (const hf of params.hardforks){\n        if (hf.timestamp === genesisTimestamp) {\n            hf.timestamp = 0;\n        }\n    }\n    params.hardforks.sort(function(a, b) {\n        return (a.block ?? Infinity) - (b.block ?? Infinity);\n    });\n    params.hardforks.sort(function(a, b) {\n        return (a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp);\n    });\n    if (config.terminalTotalDifficulty !== undefined) {\n        // Following points need to be considered for placement of merge hf\n        // - Merge hardfork can't be placed at genesis\n        // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n        // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n        //   necessary for e.g. withdrawals\n        const mergeConfig = {\n            name: _enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Paris,\n            ttd: config.terminalTotalDifficulty,\n            block: null\n        };\n        // Merge hardfork has to be placed before first hardfork that is dependent on merge\n        const postMergeIndex = params.hardforks.findIndex((hf)=>forkMap[hf.name]?.postMerge === true);\n        if (postMergeIndex !== -1) {\n            params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n        } else {\n            params.hardforks.push(mergeConfig);\n        }\n    }\n    const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n    params.hardfork = latestHardfork?.name;\n    params.hardforks.unshift({\n        name: _enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Chainstart,\n        block: 0\n    });\n    return params;\n}\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */ function parseGethGenesis(json, name, mergeForkIdPostMerge) {\n    try {\n        const required = [\n            \"config\",\n            \"difficulty\",\n            \"gasLimit\",\n            \"nonce\",\n            \"alloc\"\n        ];\n        if (required.some((field)=>!(field in json))) {\n            const missingField = required.filter((field)=>!(field in json));\n            throw new Error(`Invalid format, expected geth genesis field \"${missingField}\" missing`);\n        }\n        if (name !== undefined) {\n            json.name = name;\n        }\n        return parseGethParams(json, mergeForkIdPostMerge);\n    } catch (e) {\n        throw new Error(`Error parsing parameters file: ${e.message}`);\n    }\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RLP: () => (/* binding */ RLP),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   utils: () => (/* binding */ utils)\n/* harmony export */ });\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/ function encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for(let i = 0; i < input.length; i++){\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */ function safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error(\"invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds\");\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */ function decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error(\"invalid RLP: extra zeros\");\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([\n            len + offset\n        ]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (typeof input === \"undefined\" || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error(\"invalid RLP: remainder must be zero\");\n    }\n    return decoded.data;\n}\n/** Decode an input with RLP */ function _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1)\n        };\n    } else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        } else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error(\"invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed\");\n        }\n        return {\n            data,\n            remainder: input.slice(length)\n        };\n    } else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error(\"invalid RLP: not enough bytes for string length\");\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error(\"invalid RLP: expected string length to be greater than 55\");\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.slice(length + llength)\n        };\n    } else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while(innerRemainder.length){\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length)\n        };\n    } else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error(\"invalid RLP: encoded list too short\");\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error(\"invalid RLP: total length is larger than the data\");\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while(innerRemainder.length){\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength)\n        };\n    }\n}\nconst cachedHexes = Array.from({\n    length: 256\n}, (_v, i)=>i.toString(16).padStart(2, \"0\"));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = \"\";\n    for(let i = 0; i < uint8a.length; i++){\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte)) throw new Error(\"Invalid byte sequence\");\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== \"string\") {\n        throw new TypeError(\"hexToBytes: expected string, got \" + typeof hex);\n    }\n    if (hex.length % 2) throw new Error(\"hexToBytes: received invalid unpadded hex\");\n    const array = new Uint8Array(hex.length / 2);\n    for(let i = 0; i < array.length; i++){\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */ function concatBytes(...arrays) {\n    if (arrays.length === 1) return arrays[0];\n    const length = arrays.reduce((a, arr)=>a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */ function numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error(\"Invalid integer as argument, must be unsigned!\");\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */ function padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */ function isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === \"0\" && str[1] === \"x\";\n}\n/** Removes 0x from a given String */ function stripHexPrefix(str) {\n    if (typeof str !== \"string\") {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */ function toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === \"string\") {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === \"number\" || typeof v === \"bigint\") {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error(\"toBytes: received unsupported type \" + typeof v);\n}\nconst utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes\n};\nconst RLP = {\n    encode,\n    decode\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTransaction: () => (/* binding */ BaseTransaction)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/common */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n\n\n\n\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */ class BaseTransaction {\n    constructor(txData, opts){\n        this.cache = {\n            hash: undefined,\n            dataFee: undefined,\n            senderPubKey: undefined\n        };\n        /**\n         * List of tx type defining EIPs,\n         * e.g. 1559 (fee market) and 2930 (access lists)\n         * for FeeMarketEIP1559Transaction objects\n         */ this.activeCapabilities = [];\n        /**\n         * The default chain the tx falls back to if no Common\n         * is provided and if the chain can't be derived from\n         * a passed in chainId (only EIP-2718 typed txs) or\n         * EIP-155 signature (legacy txs).\n         *\n         * @hidden\n         */ this.DEFAULT_CHAIN = _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__.Chain.Mainnet;\n        const { nonce, gasLimit, to, value, data, v, r, s, type } = txData;\n        this._type = Number((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(type)));\n        this.txOptions = opts;\n        const toB = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(to === \"\" ? \"0x\" : to);\n        const vB = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(v === \"\" ? \"0x\" : v);\n        const rB = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(r === \"\" ? \"0x\" : r);\n        const sB = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(s === \"\" ? \"0x\" : s);\n        this.nonce = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(nonce === \"\" ? \"0x\" : nonce));\n        this.gasLimit = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(gasLimit === \"\" ? \"0x\" : gasLimit));\n        this.to = toB.length > 0 ? new _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.Address(toB) : undefined;\n        this.value = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(value === \"\" ? \"0x\" : value));\n        this.data = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data === \"\" ? \"0x\" : data);\n        this.v = vB.length > 0 ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(vB) : undefined;\n        this.r = rB.length > 0 ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(rB) : undefined;\n        this.s = sB.length > 0 ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(sB) : undefined;\n        this._validateCannotExceedMaxInteger({\n            value: this.value,\n            r: this.r,\n            s: this.s\n        });\n        // geth limits gasLimit to 2^64-1\n        this._validateCannotExceedMaxInteger({\n            gasLimit: this.gasLimit\n        }, 64);\n        // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n        this._validateCannotExceedMaxInteger({\n            nonce: this.nonce\n        }, 64, true);\n        const createContract = this.to === undefined || this.to === null;\n        const allowUnlimitedInitCodeSize = opts.allowUnlimitedInitCodeSize ?? false;\n        const common = opts.common ?? this._getCommon();\n        if (createContract && common.isActivatedEIP(3860) && allowUnlimitedInitCodeSize === false) {\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.checkMaxInitCodeSize)(common, this.data.length);\n        }\n    }\n    /**\n     * Returns the transaction type.\n     *\n     * Note: legacy txs will return tx type `0`.\n     */ get type() {\n        return this._type;\n    }\n    /**\n     * Checks if a tx type defining capability is active\n     * on a tx, for example the EIP-1559 fee market mechanism\n     * or the EIP-2930 access list feature.\n     *\n     * Note that this is different from the tx type itself,\n     * so EIP-2930 access lists can very well be active\n     * on an EIP-1559 tx for example.\n     *\n     * This method can be useful for feature checks if the\n     * tx type is unknown (e.g. when instantiated with\n     * the tx factory).\n     *\n     * See `Capabilities` in the `types` module for a reference\n     * on all supported capabilities.\n     */ supports(capability) {\n        return this.activeCapabilities.includes(capability);\n    }\n    /**\n     * Validates the transaction signature and minimum gas requirements.\n     * @returns {string[]} an array of error strings\n     */ getValidationErrors() {\n        const errors = [];\n        if (this.isSigned() && !this.verifySignature()) {\n            errors.push(\"Invalid Signature\");\n        }\n        if (this.getBaseFee() > this.gasLimit) {\n            errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);\n        }\n        return errors;\n    }\n    /**\n     * Validates the transaction signature and minimum gas requirements.\n     * @returns {boolean} true if the transaction is valid, false otherwise\n     */ isValid() {\n        const errors = this.getValidationErrors();\n        return errors.length === 0;\n    }\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */ getBaseFee() {\n        const txFee = this.common.param(\"gasPrices\", \"tx\");\n        let fee = this.getDataFee();\n        if (txFee) fee += txFee;\n        if (this.common.gteHardfork(\"homestead\") && this.toCreationAddress()) {\n            const txCreationFee = this.common.param(\"gasPrices\", \"txCreation\");\n            if (txCreationFee) fee += txCreationFee;\n        }\n        return fee;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */ getDataFee() {\n        const txDataZero = this.common.param(\"gasPrices\", \"txDataZero\");\n        const txDataNonZero = this.common.param(\"gasPrices\", \"txDataNonZero\");\n        let cost = _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_0;\n        for(let i = 0; i < this.data.length; i++){\n            this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;\n        }\n        if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n            const dataLength = BigInt(Math.ceil(this.data.length / 32));\n            const initCodeCost = this.common.param(\"gasPrices\", \"initCodeWordCost\") * dataLength;\n            cost += initCodeCost;\n        }\n        return cost;\n    }\n    /**\n     * If the tx's `to` is to the creation address\n     */ toCreationAddress() {\n        return this.to === undefined || this.to.bytes.length === 0;\n    }\n    isSigned() {\n        const { v, r, s } = this;\n        if (v === undefined || r === undefined || s === undefined) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    /**\n     * Determines if the signature is valid\n     */ verifySignature() {\n        try {\n            // Main signature verification is done in `getSenderPublicKey()`\n            const publicKey = this.getSenderPublicKey();\n            return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.unpadBytes)(publicKey).length !== 0;\n        } catch (e) {\n            return false;\n        }\n    }\n    /**\n     * Returns the sender's address\n     */ getSenderAddress() {\n        return new _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.Address((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.publicToAddress)(this.getSenderPublicKey()));\n    }\n    /**\n     * Signs a transaction.\n     *\n     * Note that the signed tx is returned as a new object,\n     * use as follows:\n     * ```javascript\n     * const signedTx = tx.sign(privateKey)\n     * ```\n     */ sign(privateKey) {\n        if (privateKey.length !== 32) {\n            const msg = this._errorMsg(\"Private key must be 32 bytes in length.\");\n            throw new Error(msg);\n        }\n        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n        // and want to recreate a signature (where EIP155 should be applied)\n        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n        // 2021-06-23\n        let hackApplied = false;\n        if (this.type === _types_js__WEBPACK_IMPORTED_MODULE_2__.TransactionType.Legacy && this.common.gteHardfork(\"spuriousDragon\") && !this.supports(_types_js__WEBPACK_IMPORTED_MODULE_2__.Capability.EIP155ReplayProtection)) {\n            this.activeCapabilities.push(_types_js__WEBPACK_IMPORTED_MODULE_2__.Capability.EIP155ReplayProtection);\n            hackApplied = true;\n        }\n        const msgHash = this.getHashedMessageToSign();\n        const { v, r, s } = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.ecsign)(msgHash, privateKey);\n        const tx = this._processSignature(v, r, s);\n        // Hack part 2\n        if (hackApplied) {\n            const index = this.activeCapabilities.indexOf(_types_js__WEBPACK_IMPORTED_MODULE_2__.Capability.EIP155ReplayProtection);\n            if (index > -1) {\n                this.activeCapabilities.splice(index, 1);\n            }\n        }\n        return tx;\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */ toJSON() {\n        return {\n            type: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(BigInt(this.type)),\n            nonce: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.nonce),\n            gasLimit: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.value),\n            data: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.data),\n            v: this.v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.s) : undefined\n        };\n    }\n    /**\n     * Does chain ID checks on common and returns a common\n     * to be used on instantiation\n     * @hidden\n     *\n     * @param common - {@link Common} instance from tx options\n     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n     */ _getCommon(common, chainId) {\n        // Chain ID provided\n        if (chainId !== undefined) {\n            const chainIdBigInt = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(chainId));\n            if (common) {\n                if (common.chainId() !== chainIdBigInt) {\n                    const msg = this._errorMsg(\"The chain ID does not match the chain ID of Common\");\n                    throw new Error(msg);\n                }\n                // Common provided, chain ID does match\n                // -> Return provided Common\n                return common.copy();\n            } else {\n                if (_ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__.Common.isSupportedChainId(chainIdBigInt)) {\n                    // No Common, chain ID supported by Common\n                    // -> Instantiate Common with chain ID\n                    return new _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__.Common({\n                        chain: chainIdBigInt\n                    });\n                } else {\n                    // No Common, chain ID not supported by Common\n                    // -> Instantiate custom Common derived from DEFAULT_CHAIN\n                    return _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__.Common.custom({\n                        name: \"custom-chain\",\n                        networkId: chainIdBigInt,\n                        chainId: chainIdBigInt\n                    }, {\n                        baseChain: this.DEFAULT_CHAIN\n                    });\n                }\n            }\n        } else {\n            // No chain ID provided\n            // -> return Common provided or create new default Common\n            return common?.copy() ?? new _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__.Common({\n                chain: this.DEFAULT_CHAIN\n            });\n        }\n    }\n    /**\n     * Validates that an object with BigInt values cannot exceed the specified bit limit.\n     * @param values Object containing string keys and BigInt values\n     * @param bits Number of bits to check (64 or 256)\n     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n     */ _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {\n        for (const [key, value] of Object.entries(values)){\n            switch(bits){\n                case 64:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_UINT64) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    } else {\n                        if (value !== undefined && value > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_UINT64) {\n                            const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    break;\n                case 256:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    } else {\n                        if (value !== undefined && value > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n                            const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    break;\n                default:\n                    {\n                        const msg = this._errorMsg(\"unimplemented bits value\");\n                        throw new Error(msg);\n                    }\n            }\n        }\n    }\n    static _validateNotArray(values) {\n        const txDataKeys = [\n            \"nonce\",\n            \"gasPrice\",\n            \"gasLimit\",\n            \"to\",\n            \"value\",\n            \"data\",\n            \"v\",\n            \"r\",\n            \"s\",\n            \"type\",\n            \"baseFee\",\n            \"maxFeePerGas\",\n            \"chainId\"\n        ];\n        for (const [key, value] of Object.entries(values)){\n            if (txDataKeys.includes(key)) {\n                if (Array.isArray(value)) {\n                    throw new Error(`${key} cannot be an array`);\n                }\n            }\n        }\n    }\n    /**\n     * Returns the shared error postfix part for _error() method\n     * tx type implementations.\n     */ _getSharedErrorPostfix() {\n        let hash = \"\";\n        try {\n            hash = this.isSigned() ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.hash()) : \"not available (unsigned)\";\n        } catch (e) {\n            hash = \"error\";\n        }\n        let isSigned = \"\";\n        try {\n            isSigned = this.isSigned().toString();\n        } catch (e) {\n            hash = \"error\";\n        }\n        let hf = \"\";\n        try {\n            hf = this.common.hardfork();\n        } catch (e) {\n            hf = \"error\";\n        }\n        let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n        postfix += `signed=${isSigned} hf=${hf}`;\n        return postfix;\n    }\n} //# sourceMappingURL=baseTransaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip1559.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip1559.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUpfrontCost: () => (/* binding */ getUpfrontCost)\n/* harmony export */ });\nfunction getUpfrontCost(tx, baseFee) {\n    const prio = tx.maxPriorityFeePerGas;\n    const maxBase = tx.maxFeePerGas - baseFee;\n    const inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n    const gasPrice = inclusionFeePerGas + baseFee;\n    return tx.gasLimit * gasPrice + tx.value;\n} //# sourceMappingURL=eip1559.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvZWlwMTU1OS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsZUFBZUMsRUFBRSxFQUFFQyxPQUFPO0lBQ3RDLE1BQU1DLE9BQU9GLEdBQUdHLG9CQUFvQjtJQUNwQyxNQUFNQyxVQUFVSixHQUFHSyxZQUFZLEdBQUdKO0lBQ2xDLE1BQU1LLHFCQUFxQkosT0FBT0UsVUFBVUYsT0FBT0U7SUFDbkQsTUFBTUcsV0FBV0QscUJBQXFCTDtJQUN0QyxPQUFPRCxHQUFHUSxRQUFRLEdBQUdELFdBQVdQLEdBQUdTLEtBQUs7QUFDNUMsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdHgvZGlzdC9lc20vY2FwYWJpbGl0aWVzL2VpcDE1NTkuanM/MTIzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0VXBmcm9udENvc3QodHgsIGJhc2VGZWUpIHtcbiAgICBjb25zdCBwcmlvID0gdHgubWF4UHJpb3JpdHlGZWVQZXJHYXM7XG4gICAgY29uc3QgbWF4QmFzZSA9IHR4Lm1heEZlZVBlckdhcyAtIGJhc2VGZWU7XG4gICAgY29uc3QgaW5jbHVzaW9uRmVlUGVyR2FzID0gcHJpbyA8IG1heEJhc2UgPyBwcmlvIDogbWF4QmFzZTtcbiAgICBjb25zdCBnYXNQcmljZSA9IGluY2x1c2lvbkZlZVBlckdhcyArIGJhc2VGZWU7XG4gICAgcmV0dXJuIHR4Lmdhc0xpbWl0ICogZ2FzUHJpY2UgKyB0eC52YWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVpcDE1NTkuanMubWFwIl0sIm5hbWVzIjpbImdldFVwZnJvbnRDb3N0IiwidHgiLCJiYXNlRmVlIiwicHJpbyIsIm1heFByaW9yaXR5RmVlUGVyR2FzIiwibWF4QmFzZSIsIm1heEZlZVBlckdhcyIsImluY2x1c2lvbkZlZVBlckdhcyIsImdhc1ByaWNlIiwiZ2FzTGltaXQiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip1559.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHashedMessageToSign: () => (/* binding */ getHashedMessageToSign),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   validateYParity: () => (/* binding */ validateYParity)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./legacy.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n\n\n\n\n\nfunction getHashedMessageToSign(tx) {\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)(tx.getMessageToSign());\n}\nfunction serialize(tx, base) {\n    return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.concatBytes)((0,_util_js__WEBPACK_IMPORTED_MODULE_3__.txTypeBytes)(tx.type), _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(base ?? tx.raw()));\n}\nfunction validateYParity(tx) {\n    const { v } = tx;\n    if (v !== undefined && v !== _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_0 && v !== _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_1) {\n        const msg = (0,_legacy_js__WEBPACK_IMPORTED_MODULE_4__.errorMsg)(tx, \"The y-parity of the transaction should either be 0 or 1\");\n        throw new Error(msg);\n    }\n} //# sourceMappingURL=eip2718.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvZWlwMjcxOC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzQztBQUM2QjtBQUNQO0FBQ25CO0FBQ0Y7QUFDaEMsU0FBU08sdUJBQXVCQyxFQUFFO0lBQ3JDLE9BQU9KLDBFQUFTQSxDQUFDSSxHQUFHQyxnQkFBZ0I7QUFDeEM7QUFDTyxTQUFTQyxVQUFVRixFQUFFLEVBQUVHLElBQUk7SUFDOUIsT0FBT1IsNkRBQVdBLENBQUNFLHFEQUFXQSxDQUFDRyxHQUFHSSxJQUFJLEdBQUdaLGdEQUFHQSxDQUFDYSxNQUFNLENBQUNGLFFBQVFILEdBQUdNLEdBQUc7QUFDdEU7QUFDTyxTQUFTQyxnQkFBZ0JQLEVBQUU7SUFDOUIsTUFBTSxFQUFFUSxDQUFDLEVBQUUsR0FBR1I7SUFDZCxJQUFJUSxNQUFNQyxhQUFhRCxNQUFNZixzREFBUUEsSUFBSWUsTUFBTWQsc0RBQVFBLEVBQUU7UUFDckQsTUFBTWdCLE1BQU1aLG9EQUFRQSxDQUFDRSxJQUFJO1FBQ3pCLE1BQU0sSUFBSVcsTUFBTUQ7SUFDcEI7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvZWlwMjcxOC5qcz83NzM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJMUCB9IGZyb20gJ0BldGhlcmV1bWpzL3JscCc7XG5pbXBvcnQgeyBCSUdJTlRfMCwgQklHSU5UXzEsIGNvbmNhdEJ5dGVzIH0gZnJvbSAnQGV0aGVyZXVtanMvdXRpbCc7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tICdldGhlcmV1bS1jcnlwdG9ncmFwaHkva2VjY2FrLmpzJztcbmltcG9ydCB7IHR4VHlwZUJ5dGVzIH0gZnJvbSAnLi4vdXRpbC5qcyc7XG5pbXBvcnQgeyBlcnJvck1zZyB9IGZyb20gJy4vbGVnYWN5LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRIYXNoZWRNZXNzYWdlVG9TaWduKHR4KSB7XG4gICAgcmV0dXJuIGtlY2NhazI1Nih0eC5nZXRNZXNzYWdlVG9TaWduKCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZSh0eCwgYmFzZSkge1xuICAgIHJldHVybiBjb25jYXRCeXRlcyh0eFR5cGVCeXRlcyh0eC50eXBlKSwgUkxQLmVuY29kZShiYXNlID8/IHR4LnJhdygpKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVZUGFyaXR5KHR4KSB7XG4gICAgY29uc3QgeyB2IH0gPSB0eDtcbiAgICBpZiAodiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IEJJR0lOVF8wICYmIHYgIT09IEJJR0lOVF8xKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGVycm9yTXNnKHR4LCAnVGhlIHktcGFyaXR5IG9mIHRoZSB0cmFuc2FjdGlvbiBzaG91bGQgZWl0aGVyIGJlIDAgb3IgMScpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1laXAyNzE4LmpzLm1hcCJdLCJuYW1lcyI6WyJSTFAiLCJCSUdJTlRfMCIsIkJJR0lOVF8xIiwiY29uY2F0Qnl0ZXMiLCJrZWNjYWsyNTYiLCJ0eFR5cGVCeXRlcyIsImVycm9yTXNnIiwiZ2V0SGFzaGVkTWVzc2FnZVRvU2lnbiIsInR4IiwiZ2V0TWVzc2FnZVRvU2lnbiIsInNlcmlhbGl6ZSIsImJhc2UiLCJ0eXBlIiwiZW5jb2RlIiwicmF3IiwidmFsaWRhdGVZUGFyaXR5IiwidiIsInVuZGVmaW5lZCIsIm1zZyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDataFee: () => (/* binding */ getDataFee)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legacy.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n\n\n/**\n * The amount of gas paid for the data in this tx\n */ function getDataFee(tx) {\n    return _legacy_js__WEBPACK_IMPORTED_MODULE_1__.getDataFee(tx, BigInt(_util_js__WEBPACK_IMPORTED_MODULE_0__.AccessLists.getDataFeeEIP2930(tx.accessList, tx.common)));\n} //# sourceMappingURL=eip2930.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvZWlwMjkzMC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUM7QUFDSDtBQUN0Qzs7Q0FFQyxHQUNNLFNBQVNFLFdBQVdDLEVBQUU7SUFDekIsT0FBT0Ysa0RBQWlCLENBQUNFLElBQUlDLE9BQU9KLGlEQUFXQSxDQUFDSyxpQkFBaUIsQ0FBQ0YsR0FBR0csVUFBVSxFQUFFSCxHQUFHSSxNQUFNO0FBQzlGLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3R4L2Rpc3QvZXNtL2NhcGFiaWxpdGllcy9laXAyOTMwLmpzPzE5NDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWNjZXNzTGlzdHMgfSBmcm9tICcuLi91dGlsLmpzJztcbmltcG9ydCAqIGFzIExlZ2FjeSBmcm9tICcuL2xlZ2FjeS5qcyc7XG4vKipcbiAqIFRoZSBhbW91bnQgb2YgZ2FzIHBhaWQgZm9yIHRoZSBkYXRhIGluIHRoaXMgdHhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGFGZWUodHgpIHtcbiAgICByZXR1cm4gTGVnYWN5LmdldERhdGFGZWUodHgsIEJpZ0ludChBY2Nlc3NMaXN0cy5nZXREYXRhRmVlRUlQMjkzMCh0eC5hY2Nlc3NMaXN0LCB0eC5jb21tb24pKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1laXAyOTMwLmpzLm1hcCJdLCJuYW1lcyI6WyJBY2Nlc3NMaXN0cyIsIkxlZ2FjeSIsImdldERhdGFGZWUiLCJ0eCIsIkJpZ0ludCIsImdldERhdGFGZWVFSVAyOTMwIiwiYWNjZXNzTGlzdCIsImNvbW1vbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorMsg: () => (/* binding */ errorMsg),\n/* harmony export */   getDataFee: () => (/* binding */ getDataFee),\n/* harmony export */   getSenderPublicKey: () => (/* binding */ getSenderPublicKey),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isSigned: () => (/* binding */ isSigned),\n/* harmony export */   validateHighS: () => (/* binding */ validateHighS)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../baseTransaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n\n\n\n\nfunction errorMsg(tx, msg) {\n    return `${msg} (${tx.errorStr()})`;\n}\nfunction isSigned(tx) {\n    const { v, r, s } = tx;\n    if (v === undefined || r === undefined || s === undefined) {\n        return false;\n    } else {\n        return true;\n    }\n}\n/**\n * The amount of gas paid for the data in this tx\n */ function getDataFee(tx, extraCost) {\n    if (tx.cache.dataFee && tx.cache.dataFee.hardfork === tx.common.hardfork()) {\n        return tx.cache.dataFee.value;\n    }\n    const cost = _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction.prototype.getDataFee.bind(tx)() + (extraCost ?? 0n);\n    if (Object.isFrozen(tx)) {\n        tx.cache.dataFee = {\n            value: cost,\n            hardfork: tx.common.hardfork()\n        };\n    }\n    return cost;\n}\nfunction hash(tx) {\n    if (!tx.isSigned()) {\n        const msg = errorMsg(tx, \"Cannot call hash method if transaction is not signed\");\n        throw new Error(msg);\n    }\n    if (Object.isFrozen(tx)) {\n        if (!tx.cache.hash) {\n            tx.cache.hash = (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(tx.serialize());\n        }\n        return tx.cache.hash;\n    }\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(tx.serialize());\n}\n/**\n * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n * Reasoning: https://ethereum.stackexchange.com/a/55728\n */ function validateHighS(tx) {\n    const { s } = tx;\n    if (tx.common.gteHardfork(\"homestead\") && s !== undefined && s > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER_DIV_2) {\n        const msg = errorMsg(tx, \"Invalid Signature: s-values greater than secp256k1n/2 are considered invalid\");\n        throw new Error(msg);\n    }\n}\nfunction getSenderPublicKey(tx) {\n    if (tx.cache.senderPubKey !== undefined) {\n        return tx.cache.senderPubKey;\n    }\n    const msgHash = tx.getMessageToVerifySignature();\n    const { v, r, s } = tx;\n    validateHighS(tx);\n    try {\n        const sender = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.ecrecover)(msgHash, v, (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bigIntToUnpaddedBytes)(r), (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bigIntToUnpaddedBytes)(s), tx.supports(_types_js__WEBPACK_IMPORTED_MODULE_3__.Capability.EIP155ReplayProtection) ? tx.common.chainId() : undefined);\n        if (Object.isFrozen(tx)) {\n            tx.cache.senderPubKey = sender;\n        }\n        return sender;\n    } catch (e) {\n        const msg = errorMsg(tx, \"Invalid Signature\");\n        throw new Error(msg);\n    }\n} //# sourceMappingURL=legacy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvbGVnYWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBMkY7QUFDL0I7QUFDSjtBQUNmO0FBQ2xDLFNBQVNNLFNBQVNDLEVBQUUsRUFBRUMsR0FBRztJQUM1QixPQUFPLENBQUMsRUFBRUEsSUFBSSxFQUFFLEVBQUVELEdBQUdFLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFDdEM7QUFDTyxTQUFTQyxTQUFTSCxFQUFFO0lBQ3ZCLE1BQU0sRUFBRUksQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRSxHQUFHTjtJQUNwQixJQUFJSSxNQUFNRyxhQUFhRixNQUFNRSxhQUFhRCxNQUFNQyxXQUFXO1FBQ3ZELE9BQU87SUFDWCxPQUNLO1FBQ0QsT0FBTztJQUNYO0FBQ0o7QUFDQTs7Q0FFQyxHQUNNLFNBQVNDLFdBQVdSLEVBQUUsRUFBRVMsU0FBUztJQUNwQyxJQUFJVCxHQUFHVSxLQUFLLENBQUNDLE9BQU8sSUFBSVgsR0FBR1UsS0FBSyxDQUFDQyxPQUFPLENBQUNDLFFBQVEsS0FBS1osR0FBR2EsTUFBTSxDQUFDRCxRQUFRLElBQUk7UUFDeEUsT0FBT1osR0FBR1UsS0FBSyxDQUFDQyxPQUFPLENBQUNHLEtBQUs7SUFDakM7SUFDQSxNQUFNQyxPQUFPbEIsZ0VBQWVBLENBQUNtQixTQUFTLENBQUNSLFVBQVUsQ0FBQ1MsSUFBSSxDQUFDakIsUUFBU1MsQ0FBQUEsYUFBYSxFQUFFO0lBQy9FLElBQUlTLE9BQU9DLFFBQVEsQ0FBQ25CLEtBQUs7UUFDckJBLEdBQUdVLEtBQUssQ0FBQ0MsT0FBTyxHQUFHO1lBQ2ZHLE9BQU9DO1lBQ1BILFVBQVVaLEdBQUdhLE1BQU0sQ0FBQ0QsUUFBUTtRQUNoQztJQUNKO0lBQ0EsT0FBT0c7QUFDWDtBQUNPLFNBQVNLLEtBQUtwQixFQUFFO0lBQ25CLElBQUksQ0FBQ0EsR0FBR0csUUFBUSxJQUFJO1FBQ2hCLE1BQU1GLE1BQU1GLFNBQVNDLElBQUk7UUFDekIsTUFBTSxJQUFJcUIsTUFBTXBCO0lBQ3BCO0lBQ0EsSUFBSWlCLE9BQU9DLFFBQVEsQ0FBQ25CLEtBQUs7UUFDckIsSUFBSSxDQUFDQSxHQUFHVSxLQUFLLENBQUNVLElBQUksRUFBRTtZQUNoQnBCLEdBQUdVLEtBQUssQ0FBQ1UsSUFBSSxHQUFHeEIsMEVBQVNBLENBQUNJLEdBQUdzQixTQUFTO1FBQzFDO1FBQ0EsT0FBT3RCLEdBQUdVLEtBQUssQ0FBQ1UsSUFBSTtJQUN4QjtJQUNBLE9BQU94QiwwRUFBU0EsQ0FBQ0ksR0FBR3NCLFNBQVM7QUFDakM7QUFDQTs7O0NBR0MsR0FDTSxTQUFTQyxjQUFjdkIsRUFBRTtJQUM1QixNQUFNLEVBQUVNLENBQUMsRUFBRSxHQUFHTjtJQUNkLElBQUlBLEdBQUdhLE1BQU0sQ0FBQ1csV0FBVyxDQUFDLGdCQUFnQmxCLE1BQU1DLGFBQWFELElBQUliLG1FQUFxQkEsRUFBRTtRQUNwRixNQUFNUSxNQUFNRixTQUFTQyxJQUFJO1FBQ3pCLE1BQU0sSUFBSXFCLE1BQU1wQjtJQUNwQjtBQUNKO0FBQ08sU0FBU3dCLG1CQUFtQnpCLEVBQUU7SUFDakMsSUFBSUEsR0FBR1UsS0FBSyxDQUFDZ0IsWUFBWSxLQUFLbkIsV0FBVztRQUNyQyxPQUFPUCxHQUFHVSxLQUFLLENBQUNnQixZQUFZO0lBQ2hDO0lBQ0EsTUFBTUMsVUFBVTNCLEdBQUc0QiwyQkFBMkI7SUFDOUMsTUFBTSxFQUFFeEIsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRSxHQUFHTjtJQUNwQnVCLGNBQWN2QjtJQUNkLElBQUk7UUFDQSxNQUFNNkIsU0FBU2xDLDJEQUFTQSxDQUFDZ0MsU0FBU3ZCLEdBQUdWLHVFQUFxQkEsQ0FBQ1csSUFBSVgsdUVBQXFCQSxDQUFDWSxJQUFJTixHQUFHOEIsUUFBUSxDQUFDaEMsaURBQVVBLENBQUNpQyxzQkFBc0IsSUFBSS9CLEdBQUdhLE1BQU0sQ0FBQ21CLE9BQU8sS0FBS3pCO1FBQ2hLLElBQUlXLE9BQU9DLFFBQVEsQ0FBQ25CLEtBQUs7WUFDckJBLEdBQUdVLEtBQUssQ0FBQ2dCLFlBQVksR0FBR0c7UUFDNUI7UUFDQSxPQUFPQTtJQUNYLEVBQ0EsT0FBT0ksR0FBRztRQUNOLE1BQU1oQyxNQUFNRixTQUFTQyxJQUFJO1FBQ3pCLE1BQU0sSUFBSXFCLE1BQU1wQjtJQUNwQjtBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3R4L2Rpc3QvZXNtL2NhcGFiaWxpdGllcy9sZWdhY3kuanM/NDUwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTRUNQMjU2SzFfT1JERVJfRElWXzIsIGJpZ0ludFRvVW5wYWRkZWRCeXRlcywgZWNyZWNvdmVyIH0gZnJvbSAnQGV0aGVyZXVtanMvdXRpbCc7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tICdldGhlcmV1bS1jcnlwdG9ncmFwaHkva2VjY2FrLmpzJztcbmltcG9ydCB7IEJhc2VUcmFuc2FjdGlvbiB9IGZyb20gJy4uL2Jhc2VUcmFuc2FjdGlvbi5qcyc7XG5pbXBvcnQgeyBDYXBhYmlsaXR5IH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTXNnKHR4LCBtc2cpIHtcbiAgICByZXR1cm4gYCR7bXNnfSAoJHt0eC5lcnJvclN0cigpfSlgO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2lnbmVkKHR4KSB7XG4gICAgY29uc3QgeyB2LCByLCBzIH0gPSB0eDtcbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHIgPT09IHVuZGVmaW5lZCB8fCBzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgYW1vdW50IG9mIGdhcyBwYWlkIGZvciB0aGUgZGF0YSBpbiB0aGlzIHR4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhRmVlKHR4LCBleHRyYUNvc3QpIHtcbiAgICBpZiAodHguY2FjaGUuZGF0YUZlZSAmJiB0eC5jYWNoZS5kYXRhRmVlLmhhcmRmb3JrID09PSB0eC5jb21tb24uaGFyZGZvcmsoKSkge1xuICAgICAgICByZXR1cm4gdHguY2FjaGUuZGF0YUZlZS52YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgY29zdCA9IEJhc2VUcmFuc2FjdGlvbi5wcm90b3R5cGUuZ2V0RGF0YUZlZS5iaW5kKHR4KSgpICsgKGV4dHJhQ29zdCA/PyAwbik7XG4gICAgaWYgKE9iamVjdC5pc0Zyb3plbih0eCkpIHtcbiAgICAgICAgdHguY2FjaGUuZGF0YUZlZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBjb3N0LFxuICAgICAgICAgICAgaGFyZGZvcms6IHR4LmNvbW1vbi5oYXJkZm9yaygpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gY29zdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNoKHR4KSB7XG4gICAgaWYgKCF0eC5pc1NpZ25lZCgpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGVycm9yTXNnKHR4LCAnQ2Fubm90IGNhbGwgaGFzaCBtZXRob2QgaWYgdHJhbnNhY3Rpb24gaXMgbm90IHNpZ25lZCcpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5pc0Zyb3plbih0eCkpIHtcbiAgICAgICAgaWYgKCF0eC5jYWNoZS5oYXNoKSB7XG4gICAgICAgICAgICB0eC5jYWNoZS5oYXNoID0ga2VjY2FrMjU2KHR4LnNlcmlhbGl6ZSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHguY2FjaGUuaGFzaDtcbiAgICB9XG4gICAgcmV0dXJuIGtlY2NhazI1Nih0eC5zZXJpYWxpemUoKSk7XG59XG4vKipcbiAqIEVJUC0yOiBBbGwgdHJhbnNhY3Rpb24gc2lnbmF0dXJlcyB3aG9zZSBzLXZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBzZWNwMjU2azFuLzJhcmUgY29uc2lkZXJlZCBpbnZhbGlkLlxuICogUmVhc29uaW5nOiBodHRwczovL2V0aGVyZXVtLnN0YWNrZXhjaGFuZ2UuY29tL2EvNTU3MjhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSGlnaFModHgpIHtcbiAgICBjb25zdCB7IHMgfSA9IHR4O1xuICAgIGlmICh0eC5jb21tb24uZ3RlSGFyZGZvcmsoJ2hvbWVzdGVhZCcpICYmIHMgIT09IHVuZGVmaW5lZCAmJiBzID4gU0VDUDI1NksxX09SREVSX0RJVl8yKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGVycm9yTXNnKHR4LCAnSW52YWxpZCBTaWduYXR1cmU6IHMtdmFsdWVzIGdyZWF0ZXIgdGhhbiBzZWNwMjU2azFuLzIgYXJlIGNvbnNpZGVyZWQgaW52YWxpZCcpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VuZGVyUHVibGljS2V5KHR4KSB7XG4gICAgaWYgKHR4LmNhY2hlLnNlbmRlclB1YktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0eC5jYWNoZS5zZW5kZXJQdWJLZXk7XG4gICAgfVxuICAgIGNvbnN0IG1zZ0hhc2ggPSB0eC5nZXRNZXNzYWdlVG9WZXJpZnlTaWduYXR1cmUoKTtcbiAgICBjb25zdCB7IHYsIHIsIHMgfSA9IHR4O1xuICAgIHZhbGlkYXRlSGlnaFModHgpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNlbmRlciA9IGVjcmVjb3Zlcihtc2dIYXNoLCB2LCBiaWdJbnRUb1VucGFkZGVkQnl0ZXMociksIGJpZ0ludFRvVW5wYWRkZWRCeXRlcyhzKSwgdHguc3VwcG9ydHMoQ2FwYWJpbGl0eS5FSVAxNTVSZXBsYXlQcm90ZWN0aW9uKSA/IHR4LmNvbW1vbi5jaGFpbklkKCkgOiB1bmRlZmluZWQpO1xuICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuKHR4KSkge1xuICAgICAgICAgICAgdHguY2FjaGUuc2VuZGVyUHViS2V5ID0gc2VuZGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZW5kZXI7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGVycm9yTXNnKHR4LCAnSW52YWxpZCBTaWduYXR1cmUnKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGVnYWN5LmpzLm1hcCJdLCJuYW1lcyI6WyJTRUNQMjU2SzFfT1JERVJfRElWXzIiLCJiaWdJbnRUb1VucGFkZGVkQnl0ZXMiLCJlY3JlY292ZXIiLCJrZWNjYWsyNTYiLCJCYXNlVHJhbnNhY3Rpb24iLCJDYXBhYmlsaXR5IiwiZXJyb3JNc2ciLCJ0eCIsIm1zZyIsImVycm9yU3RyIiwiaXNTaWduZWQiLCJ2IiwiciIsInMiLCJ1bmRlZmluZWQiLCJnZXREYXRhRmVlIiwiZXh0cmFDb3N0IiwiY2FjaGUiLCJkYXRhRmVlIiwiaGFyZGZvcmsiLCJjb21tb24iLCJ2YWx1ZSIsImNvc3QiLCJwcm90b3R5cGUiLCJiaW5kIiwiT2JqZWN0IiwiaXNGcm96ZW4iLCJoYXNoIiwiRXJyb3IiLCJzZXJpYWxpemUiLCJ2YWxpZGF0ZUhpZ2hTIiwiZ3RlSGFyZGZvcmsiLCJnZXRTZW5kZXJQdWJsaWNLZXkiLCJzZW5kZXJQdWJLZXkiLCJtc2dIYXNoIiwiZ2V0TWVzc2FnZVRvVmVyaWZ5U2lnbmF0dXJlIiwic2VuZGVyIiwic3VwcG9ydHMiLCJFSVAxNTVSZXBsYXlQcm90ZWN0aW9uIiwiY2hhaW5JZCIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/constants.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/constants.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BYTES_PER_FIELD_ELEMENT: () => (/* binding */ BYTES_PER_FIELD_ELEMENT),\n/* harmony export */   FIELD_ELEMENTS_PER_BLOB: () => (/* binding */ FIELD_ELEMENTS_PER_BLOB),\n/* harmony export */   LIMIT_BLOBS_PER_TX: () => (/* binding */ LIMIT_BLOBS_PER_TX),\n/* harmony export */   MAX_ACCESS_LIST_SIZE: () => (/* binding */ MAX_ACCESS_LIST_SIZE),\n/* harmony export */   MAX_CALLDATA_SIZE: () => (/* binding */ MAX_CALLDATA_SIZE),\n/* harmony export */   MAX_TX_WRAP_KZG_COMMITMENTS: () => (/* binding */ MAX_TX_WRAP_KZG_COMMITMENTS),\n/* harmony export */   MAX_VERSIONED_HASHES_LIST_SIZE: () => (/* binding */ MAX_VERSIONED_HASHES_LIST_SIZE)\n/* harmony export */ });\n/** EIP4844 constants */ const MAX_CALLDATA_SIZE = 16777216; // 2 ** 24\nconst MAX_ACCESS_LIST_SIZE = 16777216; // 2 ** 24\nconst MAX_VERSIONED_HASHES_LIST_SIZE = 16777216; // 2 ** 24\nconst LIMIT_BLOBS_PER_TX = 16777216; // 2 ** 24\nconst MAX_TX_WRAP_KZG_COMMITMENTS = 16777216; // 2 ** 24\nconst FIELD_ELEMENTS_PER_BLOB = 4096; // This is also in the Common 4844 parameters but needed here since types can't access Common params\nconst BYTES_PER_FIELD_ELEMENT = 32; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHNCQUFzQixHQUNmLE1BQU1BLG9CQUFvQixTQUFTLENBQUMsVUFBVTtBQUM5QyxNQUFNQyx1QkFBdUIsU0FBUyxDQUFDLFVBQVU7QUFDakQsTUFBTUMsaUNBQWlDLFNBQVMsQ0FBQyxVQUFVO0FBQzNELE1BQU1DLHFCQUFxQixTQUFTLENBQUMsVUFBVTtBQUMvQyxNQUFNQyw4QkFBOEIsU0FBUyxDQUFDLFVBQVU7QUFDeEQsTUFBTUMsMEJBQTBCLEtBQUssQ0FBQyxvR0FBb0c7QUFDMUksTUFBTUMsMEJBQTBCLEdBQUcsQ0FDMUMscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3R4L2Rpc3QvZXNtL2NvbnN0YW50cy5qcz82YWMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBFSVA0ODQ0IGNvbnN0YW50cyAqL1xuZXhwb3J0IGNvbnN0IE1BWF9DQUxMREFUQV9TSVpFID0gMTY3NzcyMTY7IC8vIDIgKiogMjRcbmV4cG9ydCBjb25zdCBNQVhfQUNDRVNTX0xJU1RfU0laRSA9IDE2Nzc3MjE2OyAvLyAyICoqIDI0XG5leHBvcnQgY29uc3QgTUFYX1ZFUlNJT05FRF9IQVNIRVNfTElTVF9TSVpFID0gMTY3NzcyMTY7IC8vIDIgKiogMjRcbmV4cG9ydCBjb25zdCBMSU1JVF9CTE9CU19QRVJfVFggPSAxNjc3NzIxNjsgLy8gMiAqKiAyNFxuZXhwb3J0IGNvbnN0IE1BWF9UWF9XUkFQX0taR19DT01NSVRNRU5UUyA9IDE2Nzc3MjE2OyAvLyAyICoqIDI0XG5leHBvcnQgY29uc3QgRklFTERfRUxFTUVOVFNfUEVSX0JMT0IgPSA0MDk2OyAvLyBUaGlzIGlzIGFsc28gaW4gdGhlIENvbW1vbiA0ODQ0IHBhcmFtZXRlcnMgYnV0IG5lZWRlZCBoZXJlIHNpbmNlIHR5cGVzIGNhbid0IGFjY2VzcyBDb21tb24gcGFyYW1zXG5leHBvcnQgY29uc3QgQllURVNfUEVSX0ZJRUxEX0VMRU1FTlQgPSAzMjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOlsiTUFYX0NBTExEQVRBX1NJWkUiLCJNQVhfQUNDRVNTX0xJU1RfU0laRSIsIk1BWF9WRVJTSU9ORURfSEFTSEVTX0xJU1RfU0laRSIsIkxJTUlUX0JMT0JTX1BFUl9UWCIsIk1BWF9UWF9XUkFQX0taR19DT01NSVRNRU5UUyIsIkZJRUxEX0VMRU1FTlRTX1BFUl9CTE9CIiwiQllURVNfUEVSX0ZJRUxEX0VMRU1FTlQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip1559Transaction.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip1559Transaction.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FeeMarketEIP1559Transaction: () => (/* binding */ FeeMarketEIP1559Transaction)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseTransaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\");\n/* harmony import */ var _capabilities_eip1559_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./capabilities/eip1559.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip1559.js\");\n/* harmony import */ var _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./capabilities/eip2718.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js\");\n/* harmony import */ var _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./capabilities/eip2930.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js\");\n/* harmony import */ var _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./capabilities/legacy.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n\n\n\n\n\n\n\n\n\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */ class FeeMarketEIP1559Transaction extends _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */ constructor(txData, opts = {}){\n        super({\n            ...txData,\n            type: _types_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.FeeMarketEIP1559\n        }, opts);\n        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (this.common.isActivatedEIP(1559) === false) {\n            throw new Error(\"EIP-1559 not enabled on Common\");\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([\n            1559,\n            2718,\n            2930\n        ]);\n        // Populate the access list fields\n        const accessListData = _util_js__WEBPACK_IMPORTED_MODULE_8__.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        _util_js__WEBPACK_IMPORTED_MODULE_8__.AccessLists.verifyAccessList(this.accessList);\n        this.maxFeePerGas = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(maxFeePerGas === \"\" ? \"0x\" : maxFeePerGas));\n        this.maxPriorityFeePerGas = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(maxPriorityFeePerGas === \"\" ? \"0x\" : maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas\n        });\n        _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n            const msg = this._errorMsg(\"gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)\");\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg(\"maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)\");\n            throw new Error(msg);\n        }\n        _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.validateYParity(this);\n        _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.validateHighS(this);\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */ static fromTxData(txData, opts = {}) {\n        return new FeeMarketEIP1559Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */ static fromSerializedTx(serialized, opts = {}) {\n        if ((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(serialized.subarray(0, 1), (0,_util_js__WEBPACK_IMPORTED_MODULE_8__.txTypeBytes)(_types_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.FeeMarketEIP1559)) === false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${_types_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.FeeMarketEIP1559}, received: ${(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized.subarray(1));\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized tx input: must be array\");\n        }\n        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */ static fromValuesArray(values, opts = {}) {\n        if (values.length !== 9 && values.length !== 12) {\n            throw new Error(\"Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).\");\n        }\n        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s] = values;\n        this._validateNotArray({\n            chainId,\n            v\n        });\n        (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.validateNoLeadingZeroes)({\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            value,\n            v,\n            r,\n            s\n        });\n        return new FeeMarketEIP1559Transaction({\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(chainId),\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? [],\n            v: v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(v) : undefined,\n            r,\n            s\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */ getDataFee() {\n        return _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_5__.getDataFee(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */ getUpfrontCost(baseFee = _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_0) {\n        return _capabilities_eip1559_js__WEBPACK_IMPORTED_MODULE_3__.getUpfrontCost(this, baseFee);\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytes of the EIP-1559 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Bytes values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n     */ raw() {\n        return [\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.chainId),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.maxPriorityFeePerGas),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.maxFeePerGas),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0)\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-1559 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */ serialize() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.serialize(this);\n    }\n    /**\n     * Returns the raw serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input\n     * ```\n     */ getMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.serialize(this, this.raw().slice(0, 9));\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     */ getHashedMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.getHashedMessageToSign(this);\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */ hash() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.hash(this);\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */ getMessageToVerifySignature() {\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */ getSenderPublicKey() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.getSenderPublicKey(this);\n    }\n    _processSignature(v, r, s) {\n        const opts = {\n            ...this.txOptions,\n            common: this.common\n        };\n        return FeeMarketEIP1559Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_27,\n            r: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(r),\n            s: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(s)\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */ toJSON() {\n        const accessListJSON = _util_js__WEBPACK_IMPORTED_MODULE_8__.AccessLists.getAccessListJSON(this.accessList);\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.chainId),\n            maxPriorityFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.maxFeePerGas),\n            accessList: accessListJSON\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */ errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */ _errorMsg(msg) {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.errorMsg(this, msg);\n    }\n} //# sourceMappingURL=eip1559Transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip1559Transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip2930Transaction.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip2930Transaction.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessListEIP2930Transaction: () => (/* binding */ AccessListEIP2930Transaction)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseTransaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\");\n/* harmony import */ var _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./capabilities/eip2718.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js\");\n/* harmony import */ var _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./capabilities/eip2930.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js\");\n/* harmony import */ var _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./capabilities/legacy.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n\n\n\n\n\n\n\n\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */ class AccessListEIP2930Transaction extends _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */ constructor(txData, opts = {}){\n        super({\n            ...txData,\n            type: _types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.AccessListEIP2930\n        }, opts);\n        const { chainId, accessList, gasPrice } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        // EIP-2718 check is done in Common\n        if (!this.common.isActivatedEIP(2930)) {\n            throw new Error(\"EIP-2930 not enabled on Common\");\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([\n            2718,\n            2930\n        ]);\n        // Populate the access list fields\n        const accessListData = _util_js__WEBPACK_IMPORTED_MODULE_7__.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        _util_js__WEBPACK_IMPORTED_MODULE_7__.AccessLists.verifyAccessList(this.accessList);\n        this.gasPrice = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(gasPrice === \"\" ? \"0x\" : gasPrice));\n        this._validateCannotExceedMaxInteger({\n            gasPrice: this.gasPrice\n        });\n        _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction._validateNotArray(txData);\n        if (this.gasPrice * this.gasLimit > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n            const msg = this._errorMsg(\"gasLimit * gasPrice cannot exceed MAX_INTEGER\");\n            throw new Error(msg);\n        }\n        _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_3__.validateYParity(this);\n        _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_5__.validateHighS(this);\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */ static fromTxData(txData, opts = {}) {\n        return new AccessListEIP2930Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     */ static fromSerializedTx(serialized, opts = {}) {\n        if ((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(serialized.subarray(0, 1), (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.txTypeBytes)(_types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.AccessListEIP2930)) === false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${_types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.AccessListEIP2930}, received: ${(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(Uint8Array.from(serialized.subarray(1)));\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized tx input: must be array\");\n        }\n        return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     */ static fromValuesArray(values, opts = {}) {\n        if (values.length !== 8 && values.length !== 11) {\n            throw new Error(\"Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).\");\n        }\n        const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n        this._validateNotArray({\n            chainId,\n            v\n        });\n        (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.validateNoLeadingZeroes)({\n            nonce,\n            gasPrice,\n            gasLimit,\n            value,\n            v,\n            r,\n            s\n        });\n        const emptyAccessList = [];\n        return new AccessListEIP2930Transaction({\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(chainId),\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? emptyAccessList,\n            v: v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(v) : undefined,\n            r,\n            s\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */ getDataFee() {\n        return _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_4__.getDataFee(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */ getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytess of the EIP-2930 transaction, in order.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     *\n     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Bytes values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n     */ raw() {\n        return [\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.chainId),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasPrice),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0)\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-2930 transaction.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */ serialize() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_3__.serialize(this);\n    }\n    /**\n     * Returns the raw serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input\n     * ```\n     */ getMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_3__.serialize(this, this.raw().slice(0, 8));\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     */ getHashedMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_3__.getHashedMessageToSign(this);\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */ hash() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_5__.hash(this);\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */ getMessageToVerifySignature() {\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */ getSenderPublicKey() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_5__.getSenderPublicKey(this);\n    }\n    _processSignature(v, r, s) {\n        const opts = {\n            ...this.txOptions,\n            common: this.common\n        };\n        return AccessListEIP2930Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_27,\n            r: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(r),\n            s: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(s)\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */ toJSON() {\n        const accessListJSON = _util_js__WEBPACK_IMPORTED_MODULE_7__.AccessLists.getAccessListJSON(this.accessList);\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.chainId),\n            gasPrice: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.gasPrice),\n            accessList: accessListJSON\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */ errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n        errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */ _errorMsg(msg) {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_5__.errorMsg(this, msg);\n    }\n} //# sourceMappingURL=eip2930Transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip2930Transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip4844Transaction.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip4844Transaction.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobEIP4844Transaction: () => (/* binding */ BlobEIP4844Transaction)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseTransaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\");\n/* harmony import */ var _capabilities_eip1559_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./capabilities/eip1559.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip1559.js\");\n/* harmony import */ var _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./capabilities/eip2718.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js\");\n/* harmony import */ var _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./capabilities/eip2930.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js\");\n/* harmony import */ var _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./capabilities/legacy.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/constants.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n\n\n\n\n\n\n\n\n\n\nconst validateBlobTransactionNetworkWrapper = (blobVersionedHashes, blobs, commitments, kzgProofs, version)=>{\n    if (!(blobVersionedHashes.length === blobs.length && blobs.length === commitments.length)) {\n        throw new Error(\"Number of blobVersionedHashes, blobs, and commitments not all equal\");\n    }\n    if (blobVersionedHashes.length === 0) {\n        throw new Error(\"Invalid transaction with empty blobs\");\n    }\n    let isValid;\n    try {\n        isValid = _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.kzg.verifyBlobKzgProofBatch(blobs, commitments, kzgProofs);\n    } catch (error) {\n        throw new Error(`KZG verification of blobs fail with error=${error}`);\n    }\n    if (!isValid) {\n        throw new Error(\"KZG proof cannot be verified from blobs/commitments\");\n    }\n    for(let x = 0; x < blobVersionedHashes.length; x++){\n        const computedVersionedHash = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.computeVersionedHash)(commitments[x], version);\n        if (!(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(computedVersionedHash, blobVersionedHashes[x])) {\n            throw new Error(`commitment for blob at index ${x} does not match versionedHash`);\n        }\n    }\n};\n/**\n * Typed transaction with a new gas fee market mechanism for transactions that include \"blobs\" of data\n *\n * - TransactionType: 3\n * - EIP: [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844)\n */ class BlobEIP4844Transaction extends _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static constructors or factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */ constructor(txData, opts = {}){\n        super({\n            ...txData,\n            type: _types_js__WEBPACK_IMPORTED_MODULE_8__.TransactionType.BlobEIP4844\n        }, opts);\n        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas, maxFeePerBlobGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (this.common.isActivatedEIP(1559) === false) {\n            throw new Error(\"EIP-1559 not enabled on Common\");\n        }\n        if (this.common.isActivatedEIP(4844) === false) {\n            throw new Error(\"EIP-4844 not enabled on Common\");\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([\n            1559,\n            2718,\n            2930\n        ]);\n        // Populate the access list fields\n        const accessListData = _util_js__WEBPACK_IMPORTED_MODULE_9__.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        _util_js__WEBPACK_IMPORTED_MODULE_9__.AccessLists.verifyAccessList(this.accessList);\n        this.maxFeePerGas = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(maxFeePerGas === \"\" ? \"0x\" : maxFeePerGas));\n        this.maxPriorityFeePerGas = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(maxPriorityFeePerGas === \"\" ? \"0x\" : maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas\n        });\n        _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n            const msg = this._errorMsg(\"gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)\");\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg(\"maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)\");\n            throw new Error(msg);\n        }\n        this.maxFeePerBlobGas = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)((maxFeePerBlobGas ?? \"\") === \"\" ? \"0x\" : maxFeePerBlobGas));\n        this.blobVersionedHashes = (txData.blobVersionedHashes ?? []).map((vh)=>(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(vh));\n        _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.validateYParity(this);\n        _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.validateHighS(this);\n        for (const hash of this.blobVersionedHashes){\n            if (hash.length !== 32) {\n                const msg = this._errorMsg(\"versioned hash is invalid length\");\n                throw new Error(msg);\n            }\n            if (BigInt(hash[0]) !== this.common.param(\"sharding\", \"blobCommitmentVersionKzg\")) {\n                const msg = this._errorMsg(\"versioned hash does not start with KZG commitment version\");\n                throw new Error(msg);\n            }\n        }\n        if (this.blobVersionedHashes.length > _constants_js__WEBPACK_IMPORTED_MODULE_7__.LIMIT_BLOBS_PER_TX) {\n            const msg = this._errorMsg(`tx can contain at most ${_constants_js__WEBPACK_IMPORTED_MODULE_7__.LIMIT_BLOBS_PER_TX} blobs`);\n            throw new Error(msg);\n        }\n        this.blobs = txData.blobs?.map((blob)=>(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(blob));\n        this.kzgCommitments = txData.kzgCommitments?.map((commitment)=>(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(commitment));\n        this.kzgProofs = txData.kzgProofs?.map((proof)=>(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(proof));\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    static fromTxData(txData, opts) {\n        if (txData.blobsData !== undefined) {\n            if (txData.blobs !== undefined) {\n                throw new Error(\"cannot have both raw blobs data and encoded blobs in constructor\");\n            }\n            if (txData.kzgCommitments !== undefined) {\n                throw new Error(\"cannot have both raw blobs data and KZG commitments in constructor\");\n            }\n            if (txData.blobVersionedHashes !== undefined) {\n                throw new Error(\"cannot have both raw blobs data and versioned hashes in constructor\");\n            }\n            if (txData.kzgProofs !== undefined) {\n                throw new Error(\"cannot have both raw blobs data and KZG proofs in constructor\");\n            }\n            txData.blobs = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.getBlobs)(txData.blobsData.reduce((acc, cur)=>acc + cur));\n            txData.kzgCommitments = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.blobsToCommitments)(txData.blobs);\n            txData.blobVersionedHashes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.commitmentsToVersionedHashes)(txData.kzgCommitments);\n            txData.kzgProofs = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.blobsToProofs)(txData.blobs, txData.kzgCommitments);\n        }\n        return new BlobEIP4844Transaction(txData, opts);\n    }\n    /**\n     * Creates the minimal representation of a blob transaction from the network wrapper version.\n     * The minimal representation is used when adding transactions to an execution payload/block\n     * @param txData a {@link BlobEIP4844Transaction} containing optional blobs/kzg commitments\n     * @param opts - dictionary of {@link TxOptions}\n     * @returns the \"minimal\" representation of a BlobEIP4844Transaction (i.e. transaction object minus blobs and kzg commitments)\n     */ static minimalFromNetworkWrapper(txData, opts) {\n        const tx = BlobEIP4844Transaction.fromTxData({\n            ...txData,\n            ...{\n                blobs: undefined,\n                kzgCommitments: undefined,\n                kzgProofs: undefined\n            }\n        }, opts);\n        return tx;\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x03 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data,\n     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s])`\n     */ static fromSerializedTx(serialized, opts = {}) {\n        if ((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(serialized.subarray(0, 1), (0,_util_js__WEBPACK_IMPORTED_MODULE_9__.txTypeBytes)(_types_js__WEBPACK_IMPORTED_MODULE_8__.TransactionType.BlobEIP4844)) === false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-4844 transaction (wrong tx type, expected: ${_types_js__WEBPACK_IMPORTED_MODULE_8__.TransactionType.BlobEIP4844}, received: ${(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized.subarray(1));\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized tx input: must be array\");\n        }\n        return BlobEIP4844Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */ static fromValuesArray(values, opts = {}) {\n        if (values.length !== 11 && values.length !== 14) {\n            throw new Error(\"Invalid EIP-4844 transaction. Only expecting 11 values (for unsigned tx) or 14 values (for signed tx).\");\n        }\n        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, maxFeePerBlobGas, blobVersionedHashes, v, r, s] = values;\n        this._validateNotArray({\n            chainId,\n            v\n        });\n        (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.validateNoLeadingZeroes)({\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            value,\n            maxFeePerBlobGas,\n            v,\n            r,\n            s\n        });\n        return new BlobEIP4844Transaction({\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(chainId),\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? [],\n            maxFeePerBlobGas,\n            blobVersionedHashes,\n            v: v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(v) : undefined,\n            r,\n            s\n        }, opts);\n    }\n    /**\n     * Creates a transaction from the network encoding of a blob transaction (with blobs/commitments/proof)\n     * @param serialized a buffer representing a serialized BlobTransactionNetworkWrapper\n     * @param opts any TxOptions defined\n     * @returns a BlobEIP4844Transaction\n     */ static fromSerializedBlobTxNetworkWrapper(serialized, opts) {\n        if (!opts || !opts.common) {\n            throw new Error(\"common instance required to validate versioned hashes\");\n        }\n        if ((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(serialized.subarray(0, 1), (0,_util_js__WEBPACK_IMPORTED_MODULE_9__.txTypeBytes)(_types_js__WEBPACK_IMPORTED_MODULE_8__.TransactionType.BlobEIP4844)) === false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-4844 transaction (wrong tx type, expected: ${_types_js__WEBPACK_IMPORTED_MODULE_8__.TransactionType.BlobEIP4844}, received: ${(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        // Validate network wrapper\n        const networkTxValues = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized.subarray(1));\n        if (networkTxValues.length !== 4) {\n            throw Error(`Expected 4 values in the deserialized network transaction`);\n        }\n        const [txValues, blobs, kzgCommitments, kzgProofs] = networkTxValues;\n        // Construct the tx but don't freeze yet, we will assign blobs etc once validated\n        const decodedTx = BlobEIP4844Transaction.fromValuesArray(txValues, {\n            ...opts,\n            freeze: false\n        });\n        if (decodedTx.to === undefined) {\n            throw Error(\"BlobEIP4844Transaction can not be send without a valid `to`\");\n        }\n        const version = Number(opts.common.param(\"sharding\", \"blobCommitmentVersionKzg\"));\n        validateBlobTransactionNetworkWrapper(decodedTx.blobVersionedHashes, blobs, kzgCommitments, kzgProofs, version);\n        // set the network blob data on the tx\n        decodedTx.blobs = blobs;\n        decodedTx.kzgCommitments = kzgCommitments;\n        decodedTx.kzgProofs = kzgProofs;\n        // freeze the tx\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(decodedTx);\n        }\n        return decodedTx;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */ getDataFee() {\n        return _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_5__.getDataFee(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */ getUpfrontCost(baseFee = _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_0) {\n        return _capabilities_eip1559_js__WEBPACK_IMPORTED_MODULE_3__.getUpfrontCost(this, baseFee);\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytes of the EIP-4844 transaction, in order.\n     *\n     * Format: [chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data,\n     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s]`.\n     *\n     * Use {@link BlobEIP4844Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Bytes values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link BlobEIP4844Transaction.getMessageToSign}.\n     */ raw() {\n        return [\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.chainId),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.maxPriorityFeePerGas),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.maxFeePerGas),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.accessList,\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.maxFeePerBlobGas),\n            this.blobVersionedHashes,\n            this.v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0)\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-4844 transaction.\n     *\n     * Format: `0x03 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s])`.\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */ serialize() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.serialize(this);\n    }\n    /**\n     * @returns the serialized form of a blob transaction in the network wrapper format (used for gossipping mempool transactions over devp2p)\n     */ serializeNetworkWrapper() {\n        if (this.blobs === undefined || this.kzgCommitments === undefined || this.kzgProofs === undefined) {\n            throw new Error(\"cannot serialize network wrapper without blobs, KZG commitments and KZG proofs provided\");\n        }\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.serialize(this, [\n            this.raw(),\n            this.blobs,\n            this.kzgCommitments,\n            this.kzgProofs\n        ]);\n    }\n    /**\n     * Returns the raw serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input\n     * ```\n     */ getMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.serialize(this, this.raw().slice(0, 11));\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     */ getHashedMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.getHashedMessageToSign(this);\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link BlobEIP4844Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */ hash() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.hash(this);\n    }\n    getMessageToVerifySignature() {\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */ getSenderPublicKey() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.getSenderPublicKey(this);\n    }\n    toJSON() {\n        const accessListJSON = _util_js__WEBPACK_IMPORTED_MODULE_9__.AccessLists.getAccessListJSON(this.accessList);\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.chainId),\n            maxPriorityFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.maxFeePerGas),\n            accessList: accessListJSON,\n            maxFeePerBlobGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.maxFeePerBlobGas),\n            blobVersionedHashes: this.blobVersionedHashes.map((hash)=>(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(hash))\n        };\n    }\n    _processSignature(v, r, s) {\n        const opts = {\n            ...this.txOptions,\n            common: this.common\n        };\n        return BlobEIP4844Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_27,\n            r: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(r),\n            s: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(s),\n            maxFeePerBlobGas: this.maxFeePerBlobGas,\n            blobVersionedHashes: this.blobVersionedHashes,\n            blobs: this.blobs,\n            kzgCommitments: this.kzgCommitments,\n            kzgProofs: this.kzgProofs\n        }, opts);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */ errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */ _errorMsg(msg) {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.errorMsg(this, msg);\n    }\n    /**\n     * @returns the number of blobs included with this transaction\n     */ numBlobs() {\n        return this.blobVersionedHashes.length;\n    }\n} //# sourceMappingURL=eip4844Transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip4844Transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/fromRpc.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/fromRpc.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeTxParams: () => (/* binding */ normalizeTxParams)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n\nconst normalizeTxParams = (_txParams)=>{\n    const txParams = Object.assign({}, _txParams);\n    txParams.gasLimit = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(txParams.gasLimit ?? txParams.gas, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n    txParams.data = txParams.data === undefined ? txParams.input : txParams.data;\n    // check and convert gasPrice and value params\n    txParams.gasPrice = txParams.gasPrice !== undefined ? BigInt(txParams.gasPrice) : undefined;\n    txParams.value = txParams.value !== undefined ? BigInt(txParams.value) : undefined;\n    // strict byte length checking\n    txParams.to = txParams.to !== null && txParams.to !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.setLengthLeft)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toBytes)(txParams.to), 20) : null;\n    // Normalize the v/r/s values. If RPC returns '0x0', ensure v/r/s are set to `undefined` in the tx.\n    // If this is not done, then the transaction creation will throw, because `v` is `0`.\n    // Note: this still means that `isSigned` will return `false`.\n    // v/r/s values are `0x0` on networks like Optimism, where the tx is a system tx.\n    // For instance: https://optimistic.etherscan.io/tx/0xf4304cb09b3f58a8e5d20fec5f393c96ccffe0269aaf632cb2be7a8a0f0c91cc\n    txParams.v = txParams.v === \"0x0\" ? \"0x\" : txParams.v;\n    txParams.r = txParams.r === \"0x0\" ? \"0x\" : txParams.r;\n    txParams.s = txParams.s === \"0x0\" ? \"0x\" : txParams.s;\n    if (txParams.v !== \"0x\" || txParams.r !== \"0x\" || txParams.s !== \"0x\") {\n        txParams.v = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(txParams.v, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n    }\n    return txParams;\n}; //# sourceMappingURL=fromRpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9mcm9tUnBjLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThFO0FBQ3ZFLE1BQU1JLG9CQUFvQixDQUFDQztJQUM5QixNQUFNQyxXQUFXQyxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHSDtJQUNuQ0MsU0FBU0csUUFBUSxHQUFHTix3REFBTUEsQ0FBQ0csU0FBU0csUUFBUSxJQUFJSCxTQUFTSSxHQUFHLEVBQUVWLHdEQUFVQSxDQUFDVyxNQUFNO0lBQy9FTCxTQUFTTSxJQUFJLEdBQUdOLFNBQVNNLElBQUksS0FBS0MsWUFBWVAsU0FBU1EsS0FBSyxHQUFHUixTQUFTTSxJQUFJO0lBQzVFLDhDQUE4QztJQUM5Q04sU0FBU1MsUUFBUSxHQUFHVCxTQUFTUyxRQUFRLEtBQUtGLFlBQVlGLE9BQU9MLFNBQVNTLFFBQVEsSUFBSUY7SUFDbEZQLFNBQVNVLEtBQUssR0FBR1YsU0FBU1UsS0FBSyxLQUFLSCxZQUFZRixPQUFPTCxTQUFTVSxLQUFLLElBQUlIO0lBQ3pFLDhCQUE4QjtJQUM5QlAsU0FBU1csRUFBRSxHQUNQWCxTQUFTVyxFQUFFLEtBQUssUUFBUVgsU0FBU1csRUFBRSxLQUFLSixZQUNsQ1osK0RBQWFBLENBQUNDLHlEQUFPQSxDQUFDSSxTQUFTVyxFQUFFLEdBQUcsTUFDcEM7SUFDVixtR0FBbUc7SUFDbkcscUZBQXFGO0lBQ3JGLDhEQUE4RDtJQUM5RCxpRkFBaUY7SUFDakYsc0hBQXNIO0lBQ3RIWCxTQUFTWSxDQUFDLEdBQUdaLFNBQVNZLENBQUMsS0FBSyxRQUFRLE9BQU9aLFNBQVNZLENBQUM7SUFDckRaLFNBQVNhLENBQUMsR0FBR2IsU0FBU2EsQ0FBQyxLQUFLLFFBQVEsT0FBT2IsU0FBU2EsQ0FBQztJQUNyRGIsU0FBU2MsQ0FBQyxHQUFHZCxTQUFTYyxDQUFDLEtBQUssUUFBUSxPQUFPZCxTQUFTYyxDQUFDO0lBQ3JELElBQUlkLFNBQVNZLENBQUMsS0FBSyxRQUFRWixTQUFTYSxDQUFDLEtBQUssUUFBUWIsU0FBU2MsQ0FBQyxLQUFLLE1BQU07UUFDbkVkLFNBQVNZLENBQUMsR0FBR2Ysd0RBQU1BLENBQUNHLFNBQVNZLENBQUMsRUFBRWxCLHdEQUFVQSxDQUFDVyxNQUFNO0lBQ3JEO0lBQ0EsT0FBT0w7QUFDWCxFQUFFLENBQ0YsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3R4L2Rpc3QvZXNtL2Zyb21ScGMuanM/NzRiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlT3V0cHV0LCBzZXRMZW5ndGhMZWZ0LCB0b0J5dGVzLCB0b1R5cGUgfSBmcm9tICdAZXRoZXJldW1qcy91dGlsJztcbmV4cG9ydCBjb25zdCBub3JtYWxpemVUeFBhcmFtcyA9IChfdHhQYXJhbXMpID0+IHtcbiAgICBjb25zdCB0eFBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIF90eFBhcmFtcyk7XG4gICAgdHhQYXJhbXMuZ2FzTGltaXQgPSB0b1R5cGUodHhQYXJhbXMuZ2FzTGltaXQgPz8gdHhQYXJhbXMuZ2FzLCBUeXBlT3V0cHV0LkJpZ0ludCk7XG4gICAgdHhQYXJhbXMuZGF0YSA9IHR4UGFyYW1zLmRhdGEgPT09IHVuZGVmaW5lZCA/IHR4UGFyYW1zLmlucHV0IDogdHhQYXJhbXMuZGF0YTtcbiAgICAvLyBjaGVjayBhbmQgY29udmVydCBnYXNQcmljZSBhbmQgdmFsdWUgcGFyYW1zXG4gICAgdHhQYXJhbXMuZ2FzUHJpY2UgPSB0eFBhcmFtcy5nYXNQcmljZSAhPT0gdW5kZWZpbmVkID8gQmlnSW50KHR4UGFyYW1zLmdhc1ByaWNlKSA6IHVuZGVmaW5lZDtcbiAgICB0eFBhcmFtcy52YWx1ZSA9IHR4UGFyYW1zLnZhbHVlICE9PSB1bmRlZmluZWQgPyBCaWdJbnQodHhQYXJhbXMudmFsdWUpIDogdW5kZWZpbmVkO1xuICAgIC8vIHN0cmljdCBieXRlIGxlbmd0aCBjaGVja2luZ1xuICAgIHR4UGFyYW1zLnRvID1cbiAgICAgICAgdHhQYXJhbXMudG8gIT09IG51bGwgJiYgdHhQYXJhbXMudG8gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBzZXRMZW5ndGhMZWZ0KHRvQnl0ZXModHhQYXJhbXMudG8pLCAyMClcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAvLyBOb3JtYWxpemUgdGhlIHYvci9zIHZhbHVlcy4gSWYgUlBDIHJldHVybnMgJzB4MCcsIGVuc3VyZSB2L3IvcyBhcmUgc2V0IHRvIGB1bmRlZmluZWRgIGluIHRoZSB0eC5cbiAgICAvLyBJZiB0aGlzIGlzIG5vdCBkb25lLCB0aGVuIHRoZSB0cmFuc2FjdGlvbiBjcmVhdGlvbiB3aWxsIHRocm93LCBiZWNhdXNlIGB2YCBpcyBgMGAuXG4gICAgLy8gTm90ZTogdGhpcyBzdGlsbCBtZWFucyB0aGF0IGBpc1NpZ25lZGAgd2lsbCByZXR1cm4gYGZhbHNlYC5cbiAgICAvLyB2L3IvcyB2YWx1ZXMgYXJlIGAweDBgIG9uIG5ldHdvcmtzIGxpa2UgT3B0aW1pc20sIHdoZXJlIHRoZSB0eCBpcyBhIHN5c3RlbSB0eC5cbiAgICAvLyBGb3IgaW5zdGFuY2U6IGh0dHBzOi8vb3B0aW1pc3RpYy5ldGhlcnNjYW4uaW8vdHgvMHhmNDMwNGNiMDliM2Y1OGE4ZTVkMjBmZWM1ZjM5M2M5NmNjZmZlMDI2OWFhZjYzMmNiMmJlN2E4YTBmMGM5MWNjXG4gICAgdHhQYXJhbXMudiA9IHR4UGFyYW1zLnYgPT09ICcweDAnID8gJzB4JyA6IHR4UGFyYW1zLnY7XG4gICAgdHhQYXJhbXMuciA9IHR4UGFyYW1zLnIgPT09ICcweDAnID8gJzB4JyA6IHR4UGFyYW1zLnI7XG4gICAgdHhQYXJhbXMucyA9IHR4UGFyYW1zLnMgPT09ICcweDAnID8gJzB4JyA6IHR4UGFyYW1zLnM7XG4gICAgaWYgKHR4UGFyYW1zLnYgIT09ICcweCcgfHwgdHhQYXJhbXMuciAhPT0gJzB4JyB8fCB0eFBhcmFtcy5zICE9PSAnMHgnKSB7XG4gICAgICAgIHR4UGFyYW1zLnYgPSB0b1R5cGUodHhQYXJhbXMudiwgVHlwZU91dHB1dC5CaWdJbnQpO1xuICAgIH1cbiAgICByZXR1cm4gdHhQYXJhbXM7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbVJwYy5qcy5tYXAiXSwibmFtZXMiOlsiVHlwZU91dHB1dCIsInNldExlbmd0aExlZnQiLCJ0b0J5dGVzIiwidG9UeXBlIiwibm9ybWFsaXplVHhQYXJhbXMiLCJfdHhQYXJhbXMiLCJ0eFBhcmFtcyIsIk9iamVjdCIsImFzc2lnbiIsImdhc0xpbWl0IiwiZ2FzIiwiQmlnSW50IiwiZGF0YSIsInVuZGVmaW5lZCIsImlucHV0IiwiZ2FzUHJpY2UiLCJ2YWx1ZSIsInRvIiwidiIsInIiLCJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/fromRpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessListEIP2930Transaction: () => (/* reexport safe */ _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_1__.AccessListEIP2930Transaction),\n/* harmony export */   BlobEIP4844Transaction: () => (/* reexport safe */ _eip4844Transaction_js__WEBPACK_IMPORTED_MODULE_2__.BlobEIP4844Transaction),\n/* harmony export */   Capability: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.Capability),\n/* harmony export */   FeeMarketEIP1559Transaction: () => (/* reexport safe */ _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_0__.FeeMarketEIP1559Transaction),\n/* harmony export */   LegacyTransaction: () => (/* reexport safe */ _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_3__.LegacyTransaction),\n/* harmony export */   TransactionFactory: () => (/* reexport safe */ _transactionFactory_js__WEBPACK_IMPORTED_MODULE_4__.TransactionFactory),\n/* harmony export */   TransactionType: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.TransactionType),\n/* harmony export */   isAccessList: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.isAccessList),\n/* harmony export */   isAccessListBytes: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.isAccessListBytes),\n/* harmony export */   isAccessListEIP2930Tx: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.isAccessListEIP2930Tx),\n/* harmony export */   isAccessListEIP2930TxData: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.isAccessListEIP2930TxData),\n/* harmony export */   isBlobEIP4844Tx: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.isBlobEIP4844Tx),\n/* harmony export */   isBlobEIP4844TxData: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.isBlobEIP4844TxData),\n/* harmony export */   isFeeMarketEIP1559Tx: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.isFeeMarketEIP1559Tx),\n/* harmony export */   isFeeMarketEIP1559TxData: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.isFeeMarketEIP1559TxData),\n/* harmony export */   isLegacyTx: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.isLegacyTx),\n/* harmony export */   isLegacyTxData: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_5__.isLegacyTxData)\n/* harmony export */ });\n/* harmony import */ var _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eip1559Transaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip1559Transaction.js\");\n/* harmony import */ var _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eip2930Transaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip2930Transaction.js\");\n/* harmony import */ var _eip4844Transaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eip4844Transaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip4844Transaction.js\");\n/* harmony import */ var _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./legacyTransaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/legacyTransaction.js\");\n/* harmony import */ var _transactionFactory_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transactionFactory.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/transactionFactory.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRTtBQUNDO0FBQ047QUFDTjtBQUNFO0FBQ2xDLENBQzNCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9pbmRleC5qcz85NWQyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEZlZU1hcmtldEVJUDE1NTlUcmFuc2FjdGlvbiB9IGZyb20gJy4vZWlwMTU1OVRyYW5zYWN0aW9uLmpzJztcbmV4cG9ydCB7IEFjY2Vzc0xpc3RFSVAyOTMwVHJhbnNhY3Rpb24gfSBmcm9tICcuL2VpcDI5MzBUcmFuc2FjdGlvbi5qcyc7XG5leHBvcnQgeyBCbG9iRUlQNDg0NFRyYW5zYWN0aW9uIH0gZnJvbSAnLi9laXA0ODQ0VHJhbnNhY3Rpb24uanMnO1xuZXhwb3J0IHsgTGVnYWN5VHJhbnNhY3Rpb24gfSBmcm9tICcuL2xlZ2FjeVRyYW5zYWN0aW9uLmpzJztcbmV4cG9ydCB7IFRyYW5zYWN0aW9uRmFjdG9yeSB9IGZyb20gJy4vdHJhbnNhY3Rpb25GYWN0b3J5LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkZlZU1hcmtldEVJUDE1NTlUcmFuc2FjdGlvbiIsIkFjY2Vzc0xpc3RFSVAyOTMwVHJhbnNhY3Rpb24iLCJCbG9iRUlQNDg0NFRyYW5zYWN0aW9uIiwiTGVnYWN5VHJhbnNhY3Rpb24iLCJUcmFuc2FjdGlvbkZhY3RvcnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/legacyTransaction.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/legacyTransaction.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LegacyTransaction: () => (/* binding */ LegacyTransaction)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./baseTransaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\");\n/* harmony import */ var _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./capabilities/legacy.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n\n\n\n\n\n\nfunction meetsEIP155(_v, chainId) {\n    const v = Number(_v);\n    const chainIdDoubled = Number(chainId) * 2;\n    return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */ class LegacyTransaction extends _baseTransaction_js__WEBPACK_IMPORTED_MODULE_3__.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */ constructor(txData, opts = {}){\n        super({\n            ...txData,\n            type: _types_js__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Legacy\n        }, opts);\n        this.common = this._validateTxV(this.v, opts.common);\n        this.gasPrice = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(txData.gasPrice === \"\" ? \"0x\" : txData.gasPrice));\n        if (this.gasPrice * this.gasLimit > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n            const msg = this._errorMsg(\"gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)\");\n            throw new Error(msg);\n        }\n        this._validateCannotExceedMaxInteger({\n            gasPrice: this.gasPrice\n        });\n        _baseTransaction_js__WEBPACK_IMPORTED_MODULE_3__.BaseTransaction._validateNotArray(txData);\n        if (this.common.gteHardfork(\"spuriousDragon\")) {\n            if (!this.isSigned()) {\n                this.activeCapabilities.push(_types_js__WEBPACK_IMPORTED_MODULE_5__.Capability.EIP155ReplayProtection);\n            } else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                // v and chain ID meet EIP-155 conditions\n                if (meetsEIP155(this.v, this.common.chainId())) {\n                    this.activeCapabilities.push(_types_js__WEBPACK_IMPORTED_MODULE_5__.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */ static fromTxData(txData, opts = {}) {\n        return new LegacyTransaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */ static fromSerializedTx(serialized, opts = {}) {\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized tx input. Must be array\");\n        }\n        return this.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */ static fromValuesArray(values, opts = {}) {\n        // If length is not 6, it has length 9. If v/r/s are empty Uint8Arrays, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error(\"Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).\");\n        }\n        const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n        (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.validateNoLeadingZeroes)({\n            nonce,\n            gasPrice,\n            gasLimit,\n            value,\n            v,\n            r,\n            s\n        });\n        return new LegacyTransaction({\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            v,\n            r,\n            s\n        }, opts);\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytes of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For legacy txs this is also the correct format to add transactions\n     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n     * for typed txs).\n     *\n     * For an unsigned tx this method returns the empty Bytes values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */ raw() {\n        return [\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasPrice),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0)\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned tx this method uses the empty Uint8Array values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link Transaction.getMessageToSign}.\n     */ serialize() {\n        return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(this.raw());\n    }\n    /**\n     * Returns the raw unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: the raw message message format for the legacy tx is not RLP encoded\n     * and you might need to do yourself with:\n     *\n     * ```javascript\n     * import { RLP } from '@ethereumjs/rlp'\n     * const message = tx.getMessageToSign()\n     * const serializedMessage = RLP.encode(message)) // use this for the HW wallet input\n     * ```\n     */ getMessageToSign() {\n        const message = [\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasPrice),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.value),\n            this.data\n        ];\n        if (this.supports(_types_js__WEBPACK_IMPORTED_MODULE_5__.Capability.EIP155ReplayProtection)) {\n            message.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.common.chainId()));\n            message.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.unpadBytes)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(0)));\n            message.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.unpadBytes)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(0)));\n        }\n        return message;\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     */ getHashedMessageToSign() {\n        const message = this.getMessageToSign();\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(message));\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */ getDataFee() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_4__.getDataFee(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */ getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */ hash() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_4__.hash(this);\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */ getMessageToVerifySignature() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg(\"This transaction is not signed\");\n            throw new Error(msg);\n        }\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */ getSenderPublicKey() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_4__.getSenderPublicKey(this);\n    }\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */ _processSignature(v, r, s) {\n        if (this.supports(_types_js__WEBPACK_IMPORTED_MODULE_5__.Capability.EIP155ReplayProtection)) {\n            v += this.common.chainId() * _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_2 + _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_8;\n        }\n        const opts = {\n            ...this.txOptions,\n            common: this.common\n        };\n        return LegacyTransaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v,\n            r: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(r),\n            s: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(s)\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */ toJSON() {\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            gasPrice: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.gasPrice)\n        };\n    }\n    /**\n     * Validates tx's `v` value\n     */ _validateTxV(_v, common) {\n        let chainIdBigInt;\n        const v = _v !== undefined ? Number(_v) : undefined;\n        // Check for valid v values in the scope of a signed legacy tx\n        if (v !== undefined) {\n            // v is 1. not matching the EIP-155 chainId included case and...\n            // v is 2. not matching the classic v=27 or v=28 case\n            if (v < 37 && v !== 27 && v !== 28) {\n                throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n            }\n        }\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined && v !== 0 && (!common || common.gteHardfork(\"spuriousDragon\")) && v !== 27 && v !== 28) {\n            if (common) {\n                if (!meetsEIP155(BigInt(v), common.chainId())) {\n                    throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n                }\n            } else {\n                // Derive the original chain ID\n                let numSub;\n                if ((v - 35) % 2 === 0) {\n                    numSub = 35;\n                } else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBigInt = BigInt(v - numSub) / _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_2;\n            }\n        }\n        return this._getCommon(common, chainIdBigInt);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */ errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` gasPrice=${this.gasPrice}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */ _errorMsg(msg) {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_4__.errorMsg(this, msg);\n    }\n} //# sourceMappingURL=legacyTransaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/legacyTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/transactionFactory.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/transactionFactory.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransactionFactory: () => (/* binding */ TransactionFactory)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eip1559Transaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip1559Transaction.js\");\n/* harmony import */ var _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eip2930Transaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip2930Transaction.js\");\n/* harmony import */ var _eip4844Transaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eip4844Transaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip4844Transaction.js\");\n/* harmony import */ var _fromRpc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromRpc.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/fromRpc.js\");\n/* harmony import */ var _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./legacyTransaction.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/legacyTransaction.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n\n\n\n\n\n\n\nclass TransactionFactory {\n    // It is not possible to instantiate a TransactionFactory object.\n    constructor(){}\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param txOptions - Options to pass on to the constructor of the transaction\n     */ static fromTxData(txData, txOptions = {}) {\n        if (!(\"type\" in txData) || txData.type === undefined) {\n            // Assume legacy transaction\n            return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_5__.LegacyTransaction.fromTxData(txData, txOptions);\n        } else {\n            if ((0,_types_js__WEBPACK_IMPORTED_MODULE_6__.isLegacyTxData)(txData)) {\n                return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_5__.LegacyTransaction.fromTxData(txData, txOptions);\n            } else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_6__.isAccessListEIP2930TxData)(txData)) {\n                return _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_2__.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n            } else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_6__.isFeeMarketEIP1559TxData)(txData)) {\n                return _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_1__.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n            } else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_6__.isBlobEIP4844TxData)(txData)) {\n                return _eip4844Transaction_js__WEBPACK_IMPORTED_MODULE_3__.BlobEIP4844Transaction.fromTxData(txData, txOptions);\n            } else {\n                throw new Error(`Tx instantiation with type ${txData?.type} not supported`);\n            }\n        }\n    }\n    /**\n     * This method tries to decode serialized data.\n     *\n     * @param data - The data Uint8Array\n     * @param txOptions - The transaction options\n     */ static fromSerializedData(data, txOptions = {}) {\n        if (data[0] <= 0x7f) {\n            // Determine the type.\n            switch(data[0]){\n                case _types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.AccessListEIP2930:\n                    return _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_2__.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n                case _types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.FeeMarketEIP1559:\n                    return _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_1__.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n                case _types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.BlobEIP4844:\n                    return _eip4844Transaction_js__WEBPACK_IMPORTED_MODULE_3__.BlobEIP4844Transaction.fromSerializedTx(data, txOptions);\n                default:\n                    throw new Error(`TypedTransaction with ID ${data[0]} unknown`);\n            }\n        } else {\n            return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_5__.LegacyTransaction.fromSerializedTx(data, txOptions);\n        }\n    }\n    /**\n     * When decoding a BlockBody, in the transactions field, a field is either:\n     * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n     * A Uint8Array[] (Legacy Transaction)\n     * This method returns the right transaction.\n     *\n     * @param data - A Uint8Array or Uint8Array[]\n     * @param txOptions - The transaction options\n     */ static fromBlockBodyData(data, txOptions = {}) {\n        if (data instanceof Uint8Array) {\n            return this.fromSerializedData(data, txOptions);\n        } else if (Array.isArray(data)) {\n            // It is a legacy transaction\n            return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_5__.LegacyTransaction.fromValuesArray(data, txOptions);\n        } else {\n            throw new Error(\"Cannot decode transaction: unknown type input\");\n        }\n    }\n    /**\n     *  Method to retrieve a transaction from the provider\n     * @param provider - a url string for a JSON-RPC provider or an Ethers JsonRPCProvider object\n     * @param txHash - Transaction hash\n     * @param txOptions - The transaction options\n     * @returns the transaction specified by `txHash`\n     */ static async fromJsonRpcProvider(provider, txHash, txOptions) {\n        const prov = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.getProvider)(provider);\n        const txData = await (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.fetchFromProvider)(prov, {\n            method: \"eth_getTransactionByHash\",\n            params: [\n                txHash\n            ]\n        });\n        if (txData === null) {\n            throw new Error(\"No data returned from provider\");\n        }\n        return TransactionFactory.fromRPC(txData, txOptions);\n    }\n    /**\n     * Method to decode data retrieved from RPC, such as `eth_getTransactionByHash`\n     * Note that this normalizes some of the parameters\n     * @param txData The RPC-encoded data\n     * @param txOptions The transaction options\n     * @returns\n     */ static async fromRPC(txData, txOptions = {}) {\n        return TransactionFactory.fromTxData((0,_fromRpc_js__WEBPACK_IMPORTED_MODULE_4__.normalizeTxParams)(txData), txOptions);\n    }\n} //# sourceMappingURL=transactionFactory.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/transactionFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Capability: () => (/* binding */ Capability),\n/* harmony export */   TransactionType: () => (/* binding */ TransactionType),\n/* harmony export */   isAccessList: () => (/* binding */ isAccessList),\n/* harmony export */   isAccessListBytes: () => (/* binding */ isAccessListBytes),\n/* harmony export */   isAccessListEIP2930Tx: () => (/* binding */ isAccessListEIP2930Tx),\n/* harmony export */   isAccessListEIP2930TxData: () => (/* binding */ isAccessListEIP2930TxData),\n/* harmony export */   isBlobEIP4844Tx: () => (/* binding */ isBlobEIP4844Tx),\n/* harmony export */   isBlobEIP4844TxData: () => (/* binding */ isBlobEIP4844TxData),\n/* harmony export */   isFeeMarketEIP1559Tx: () => (/* binding */ isFeeMarketEIP1559Tx),\n/* harmony export */   isFeeMarketEIP1559TxData: () => (/* binding */ isFeeMarketEIP1559TxData),\n/* harmony export */   isLegacyTx: () => (/* binding */ isLegacyTx),\n/* harmony export */   isLegacyTxData: () => (/* binding */ isLegacyTxData)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n\n/**\n * Can be used in conjunction with {@link Transaction[TransactionType].supports}\n * to query on tx capabilities\n */ var Capability;\n(function(Capability) {\n    /**\n     * Tx supports EIP-155 replay protection\n     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n     */ Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\n    /**\n     * Tx supports EIP-1559 gas fee market mechanism\n     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n     */ Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\n    /**\n     * Tx is a typed transaction as defined in EIP-2718\n     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n     */ Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\n    /**\n     * Tx supports access list generation as defined in EIP-2930\n     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n     */ Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\n})(Capability || (Capability = {}));\nfunction isAccessListBytes(input) {\n    if (input.length === 0) {\n        return true;\n    }\n    const firstItem = input[0];\n    if (Array.isArray(firstItem)) {\n        return true;\n    }\n    return false;\n}\nfunction isAccessList(input) {\n    return !isAccessListBytes(input); // This is exactly the same method, except the output is negated.\n}\n/**\n * Encompassing type for all transaction types.\n */ var TransactionType;\n(function(TransactionType) {\n    TransactionType[TransactionType[\"Legacy\"] = 0] = \"Legacy\";\n    TransactionType[TransactionType[\"AccessListEIP2930\"] = 1] = \"AccessListEIP2930\";\n    TransactionType[TransactionType[\"FeeMarketEIP1559\"] = 2] = \"FeeMarketEIP1559\";\n    TransactionType[TransactionType[\"BlobEIP4844\"] = 3] = \"BlobEIP4844\";\n})(TransactionType || (TransactionType = {}));\nfunction isLegacyTx(tx) {\n    return tx.type === TransactionType.Legacy;\n}\nfunction isAccessListEIP2930Tx(tx) {\n    return tx.type === TransactionType.AccessListEIP2930;\n}\nfunction isFeeMarketEIP1559Tx(tx) {\n    return tx.type === TransactionType.FeeMarketEIP1559;\n}\nfunction isBlobEIP4844Tx(tx) {\n    return tx.type === TransactionType.BlobEIP4844;\n}\nfunction isLegacyTxData(txData) {\n    const txType = Number((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toBytes)(txData.type)));\n    return txType === TransactionType.Legacy;\n}\nfunction isAccessListEIP2930TxData(txData) {\n    const txType = Number((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toBytes)(txData.type)));\n    return txType === TransactionType.AccessListEIP2930;\n}\nfunction isFeeMarketEIP1559TxData(txData) {\n    const txType = Number((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toBytes)(txData.type)));\n    return txType === TransactionType.FeeMarketEIP1559;\n}\nfunction isBlobEIP4844TxData(txData) {\n    const txType = Number((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toBytes)(txData.type)));\n    return txType === TransactionType.BlobEIP4844;\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQTBEO0FBQzFEOzs7Q0FHQyxHQUNNLElBQUlFLFdBQVc7QUFDckIsVUFBVUEsVUFBVTtJQUNqQjs7O0tBR0MsR0FDREEsVUFBVSxDQUFDQSxVQUFVLENBQUMseUJBQXlCLEdBQUcsSUFBSSxHQUFHO0lBQ3pEOzs7S0FHQyxHQUNEQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLEdBQUc7SUFDcEQ7OztLQUdDLEdBQ0RBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLDBCQUEwQixHQUFHLEtBQUssR0FBRztJQUMzRDs7O0tBR0MsR0FDREEsVUFBVSxDQUFDQSxVQUFVLENBQUMscUJBQXFCLEdBQUcsS0FBSyxHQUFHO0FBQzFELEdBQUdBLGNBQWVBLENBQUFBLGFBQWEsQ0FBQztBQUN6QixTQUFTQyxrQkFBa0JDLEtBQUs7SUFDbkMsSUFBSUEsTUFBTUMsTUFBTSxLQUFLLEdBQUc7UUFDcEIsT0FBTztJQUNYO0lBQ0EsTUFBTUMsWUFBWUYsS0FBSyxDQUFDLEVBQUU7SUFDMUIsSUFBSUcsTUFBTUMsT0FBTyxDQUFDRixZQUFZO1FBQzFCLE9BQU87SUFDWDtJQUNBLE9BQU87QUFDWDtBQUNPLFNBQVNHLGFBQWFMLEtBQUs7SUFDOUIsT0FBTyxDQUFDRCxrQkFBa0JDLFFBQVEsaUVBQWlFO0FBQ3ZHO0FBQ0E7O0NBRUMsR0FDTSxJQUFJTSxnQkFBZ0I7QUFDMUIsVUFBVUEsZUFBZTtJQUN0QkEsZUFBZSxDQUFDQSxlQUFlLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUNqREEsZUFBZSxDQUFDQSxlQUFlLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxHQUFHO0lBQzVEQSxlQUFlLENBQUNBLGVBQWUsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLEdBQUc7SUFDM0RBLGVBQWUsQ0FBQ0EsZUFBZSxDQUFDLGNBQWMsR0FBRyxFQUFFLEdBQUc7QUFDMUQsR0FBR0EsbUJBQW9CQSxDQUFBQSxrQkFBa0IsQ0FBQztBQUNuQyxTQUFTQyxXQUFXQyxFQUFFO0lBQ3pCLE9BQU9BLEdBQUdDLElBQUksS0FBS0gsZ0JBQWdCSSxNQUFNO0FBQzdDO0FBQ08sU0FBU0Msc0JBQXNCSCxFQUFFO0lBQ3BDLE9BQU9BLEdBQUdDLElBQUksS0FBS0gsZ0JBQWdCTSxpQkFBaUI7QUFDeEQ7QUFDTyxTQUFTQyxxQkFBcUJMLEVBQUU7SUFDbkMsT0FBT0EsR0FBR0MsSUFBSSxLQUFLSCxnQkFBZ0JRLGdCQUFnQjtBQUN2RDtBQUNPLFNBQVNDLGdCQUFnQlAsRUFBRTtJQUM5QixPQUFPQSxHQUFHQyxJQUFJLEtBQUtILGdCQUFnQlUsV0FBVztBQUNsRDtBQUNPLFNBQVNDLGVBQWVDLE1BQU07SUFDakMsTUFBTUMsU0FBU0MsT0FBT3hCLCtEQUFhQSxDQUFDQyx5REFBT0EsQ0FBQ3FCLE9BQU9ULElBQUk7SUFDdkQsT0FBT1UsV0FBV2IsZ0JBQWdCSSxNQUFNO0FBQzVDO0FBQ08sU0FBU1csMEJBQTBCSCxNQUFNO0lBQzVDLE1BQU1DLFNBQVNDLE9BQU94QiwrREFBYUEsQ0FBQ0MseURBQU9BLENBQUNxQixPQUFPVCxJQUFJO0lBQ3ZELE9BQU9VLFdBQVdiLGdCQUFnQk0saUJBQWlCO0FBQ3ZEO0FBQ08sU0FBU1UseUJBQXlCSixNQUFNO0lBQzNDLE1BQU1DLFNBQVNDLE9BQU94QiwrREFBYUEsQ0FBQ0MseURBQU9BLENBQUNxQixPQUFPVCxJQUFJO0lBQ3ZELE9BQU9VLFdBQVdiLGdCQUFnQlEsZ0JBQWdCO0FBQ3REO0FBQ08sU0FBU1Msb0JBQW9CTCxNQUFNO0lBQ3RDLE1BQU1DLFNBQVNDLE9BQU94QiwrREFBYUEsQ0FBQ0MseURBQU9BLENBQUNxQixPQUFPVCxJQUFJO0lBQ3ZELE9BQU9VLFdBQVdiLGdCQUFnQlUsV0FBVztBQUNqRCxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS90eXBlcy5qcz8wODAyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ5dGVzVG9CaWdJbnQsIHRvQnl0ZXMgfSBmcm9tICdAZXRoZXJldW1qcy91dGlsJztcbi8qKlxuICogQ2FuIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB7QGxpbmsgVHJhbnNhY3Rpb25bVHJhbnNhY3Rpb25UeXBlXS5zdXBwb3J0c31cbiAqIHRvIHF1ZXJ5IG9uIHR4IGNhcGFiaWxpdGllc1xuICovXG5leHBvcnQgdmFyIENhcGFiaWxpdHk7XG4oZnVuY3Rpb24gKENhcGFiaWxpdHkpIHtcbiAgICAvKipcbiAgICAgKiBUeCBzdXBwb3J0cyBFSVAtMTU1IHJlcGxheSBwcm90ZWN0aW9uXG4gICAgICogU2VlOiBbMTU1XShodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTE1NSkgUmVwbGF5IEF0dGFjayBQcm90ZWN0aW9uIEVJUFxuICAgICAqL1xuICAgIENhcGFiaWxpdHlbQ2FwYWJpbGl0eVtcIkVJUDE1NVJlcGxheVByb3RlY3Rpb25cIl0gPSAxNTVdID0gXCJFSVAxNTVSZXBsYXlQcm90ZWN0aW9uXCI7XG4gICAgLyoqXG4gICAgICogVHggc3VwcG9ydHMgRUlQLTE1NTkgZ2FzIGZlZSBtYXJrZXQgbWVjaGFuaXNtXG4gICAgICogU2VlOiBbMTU1OV0oaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xNTU5KSBGZWUgTWFya2V0IEVJUFxuICAgICAqL1xuICAgIENhcGFiaWxpdHlbQ2FwYWJpbGl0eVtcIkVJUDE1NTlGZWVNYXJrZXRcIl0gPSAxNTU5XSA9IFwiRUlQMTU1OUZlZU1hcmtldFwiO1xuICAgIC8qKlxuICAgICAqIFR4IGlzIGEgdHlwZWQgdHJhbnNhY3Rpb24gYXMgZGVmaW5lZCBpbiBFSVAtMjcxOFxuICAgICAqIFNlZTogWzI3MThdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMjcxOCkgVHJhbnNhY3Rpb24gVHlwZSBFSVBcbiAgICAgKi9cbiAgICBDYXBhYmlsaXR5W0NhcGFiaWxpdHlbXCJFSVAyNzE4VHlwZWRUcmFuc2FjdGlvblwiXSA9IDI3MThdID0gXCJFSVAyNzE4VHlwZWRUcmFuc2FjdGlvblwiO1xuICAgIC8qKlxuICAgICAqIFR4IHN1cHBvcnRzIGFjY2VzcyBsaXN0IGdlbmVyYXRpb24gYXMgZGVmaW5lZCBpbiBFSVAtMjkzMFxuICAgICAqIFNlZTogWzI5MzBdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMjkzMCkgQWNjZXNzIExpc3RzIEVJUFxuICAgICAqL1xuICAgIENhcGFiaWxpdHlbQ2FwYWJpbGl0eVtcIkVJUDI5MzBBY2Nlc3NMaXN0c1wiXSA9IDI5MzBdID0gXCJFSVAyOTMwQWNjZXNzTGlzdHNcIjtcbn0pKENhcGFiaWxpdHkgfHwgKENhcGFiaWxpdHkgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWNjZXNzTGlzdEJ5dGVzKGlucHV0KSB7XG4gICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZmlyc3RJdGVtID0gaW5wdXRbMF07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmlyc3RJdGVtKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQWNjZXNzTGlzdChpbnB1dCkge1xuICAgIHJldHVybiAhaXNBY2Nlc3NMaXN0Qnl0ZXMoaW5wdXQpOyAvLyBUaGlzIGlzIGV4YWN0bHkgdGhlIHNhbWUgbWV0aG9kLCBleGNlcHQgdGhlIG91dHB1dCBpcyBuZWdhdGVkLlxufVxuLyoqXG4gKiBFbmNvbXBhc3NpbmcgdHlwZSBmb3IgYWxsIHRyYW5zYWN0aW9uIHR5cGVzLlxuICovXG5leHBvcnQgdmFyIFRyYW5zYWN0aW9uVHlwZTtcbihmdW5jdGlvbiAoVHJhbnNhY3Rpb25UeXBlKSB7XG4gICAgVHJhbnNhY3Rpb25UeXBlW1RyYW5zYWN0aW9uVHlwZVtcIkxlZ2FjeVwiXSA9IDBdID0gXCJMZWdhY3lcIjtcbiAgICBUcmFuc2FjdGlvblR5cGVbVHJhbnNhY3Rpb25UeXBlW1wiQWNjZXNzTGlzdEVJUDI5MzBcIl0gPSAxXSA9IFwiQWNjZXNzTGlzdEVJUDI5MzBcIjtcbiAgICBUcmFuc2FjdGlvblR5cGVbVHJhbnNhY3Rpb25UeXBlW1wiRmVlTWFya2V0RUlQMTU1OVwiXSA9IDJdID0gXCJGZWVNYXJrZXRFSVAxNTU5XCI7XG4gICAgVHJhbnNhY3Rpb25UeXBlW1RyYW5zYWN0aW9uVHlwZVtcIkJsb2JFSVA0ODQ0XCJdID0gM10gPSBcIkJsb2JFSVA0ODQ0XCI7XG59KShUcmFuc2FjdGlvblR5cGUgfHwgKFRyYW5zYWN0aW9uVHlwZSA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gaXNMZWdhY3lUeCh0eCkge1xuICAgIHJldHVybiB0eC50eXBlID09PSBUcmFuc2FjdGlvblR5cGUuTGVnYWN5O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQWNjZXNzTGlzdEVJUDI5MzBUeCh0eCkge1xuICAgIHJldHVybiB0eC50eXBlID09PSBUcmFuc2FjdGlvblR5cGUuQWNjZXNzTGlzdEVJUDI5MzA7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNGZWVNYXJrZXRFSVAxNTU5VHgodHgpIHtcbiAgICByZXR1cm4gdHgudHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlLkZlZU1hcmtldEVJUDE1NTk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNCbG9iRUlQNDg0NFR4KHR4KSB7XG4gICAgcmV0dXJuIHR4LnR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5CbG9iRUlQNDg0NDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0xlZ2FjeVR4RGF0YSh0eERhdGEpIHtcbiAgICBjb25zdCB0eFR5cGUgPSBOdW1iZXIoYnl0ZXNUb0JpZ0ludCh0b0J5dGVzKHR4RGF0YS50eXBlKSkpO1xuICAgIHJldHVybiB0eFR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5MZWdhY3k7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBY2Nlc3NMaXN0RUlQMjkzMFR4RGF0YSh0eERhdGEpIHtcbiAgICBjb25zdCB0eFR5cGUgPSBOdW1iZXIoYnl0ZXNUb0JpZ0ludCh0b0J5dGVzKHR4RGF0YS50eXBlKSkpO1xuICAgIHJldHVybiB0eFR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5BY2Nlc3NMaXN0RUlQMjkzMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0ZlZU1hcmtldEVJUDE1NTlUeERhdGEodHhEYXRhKSB7XG4gICAgY29uc3QgdHhUeXBlID0gTnVtYmVyKGJ5dGVzVG9CaWdJbnQodG9CeXRlcyh0eERhdGEudHlwZSkpKTtcbiAgICByZXR1cm4gdHhUeXBlID09PSBUcmFuc2FjdGlvblR5cGUuRmVlTWFya2V0RUlQMTU1OTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Jsb2JFSVA0ODQ0VHhEYXRhKHR4RGF0YSkge1xuICAgIGNvbnN0IHR4VHlwZSA9IE51bWJlcihieXRlc1RvQmlnSW50KHRvQnl0ZXModHhEYXRhLnR5cGUpKSk7XG4gICAgcmV0dXJuIHR4VHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlLkJsb2JFSVA0ODQ0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbImJ5dGVzVG9CaWdJbnQiLCJ0b0J5dGVzIiwiQ2FwYWJpbGl0eSIsImlzQWNjZXNzTGlzdEJ5dGVzIiwiaW5wdXQiLCJsZW5ndGgiLCJmaXJzdEl0ZW0iLCJBcnJheSIsImlzQXJyYXkiLCJpc0FjY2Vzc0xpc3QiLCJUcmFuc2FjdGlvblR5cGUiLCJpc0xlZ2FjeVR4IiwidHgiLCJ0eXBlIiwiTGVnYWN5IiwiaXNBY2Nlc3NMaXN0RUlQMjkzMFR4IiwiQWNjZXNzTGlzdEVJUDI5MzAiLCJpc0ZlZU1hcmtldEVJUDE1NTlUeCIsIkZlZU1hcmtldEVJUDE1NTkiLCJpc0Jsb2JFSVA0ODQ0VHgiLCJCbG9iRUlQNDg0NCIsImlzTGVnYWN5VHhEYXRhIiwidHhEYXRhIiwidHhUeXBlIiwiTnVtYmVyIiwiaXNBY2Nlc3NMaXN0RUlQMjkzMFR4RGF0YSIsImlzRmVlTWFya2V0RUlQMTU1OVR4RGF0YSIsImlzQmxvYkVJUDQ4NDRUeERhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessLists: () => (/* binding */ AccessLists),\n/* harmony export */   checkMaxInitCodeSize: () => (/* binding */ checkMaxInitCodeSize),\n/* harmony export */   txTypeBytes: () => (/* binding */ txTypeBytes)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n\n\nfunction checkMaxInitCodeSize(common, length) {\n    const maxInitCodeSize = common.param(\"vm\", \"maxInitCodeSize\");\n    if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n        throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param(\"vm\", \"maxInitCodeSize\")}`);\n    }\n}\nclass AccessLists {\n    static getAccessListData(accessList) {\n        let AccessListJSON;\n        let bufferAccessList;\n        if ((0,_types_js__WEBPACK_IMPORTED_MODULE_1__.isAccessList)(accessList)) {\n            AccessListJSON = accessList;\n            const newAccessList = [];\n            for(let i = 0; i < accessList.length; i++){\n                const item = accessList[i];\n                const addressBytes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(item.address);\n                const storageItems = [];\n                for(let index = 0; index < item.storageKeys.length; index++){\n                    storageItems.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(item.storageKeys[index]));\n                }\n                newAccessList.push([\n                    addressBytes,\n                    storageItems\n                ]);\n            }\n            bufferAccessList = newAccessList;\n        } else {\n            bufferAccessList = accessList ?? [];\n            // build the JSON\n            const json = [];\n            for(let i = 0; i < bufferAccessList.length; i++){\n                const data = bufferAccessList[i];\n                const address = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(data[0]);\n                const storageKeys = [];\n                for(let item = 0; item < data[1].length; item++){\n                    storageKeys.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(data[1][item]));\n                }\n                const jsonItem = {\n                    address,\n                    storageKeys\n                };\n                json.push(jsonItem);\n            }\n            AccessListJSON = json;\n        }\n        return {\n            AccessListJSON,\n            accessList: bufferAccessList\n        };\n    }\n    static verifyAccessList(accessList) {\n        for(let key = 0; key < accessList.length; key++){\n            const accessListItem = accessList[key];\n            const address = accessListItem[0];\n            const storageSlots = accessListItem[1];\n            if (accessListItem[2] !== undefined) {\n                throw new Error(\"Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.\");\n            }\n            if (address.length !== 20) {\n                throw new Error(\"Invalid EIP-2930 transaction: address length should be 20 bytes\");\n            }\n            for(let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++){\n                if (storageSlots[storageSlot].length !== 32) {\n                    throw new Error(\"Invalid EIP-2930 transaction: storage slot length should be 32 bytes\");\n                }\n            }\n        }\n    }\n    static getAccessListJSON(accessList) {\n        const accessListJSON = [];\n        for(let index = 0; index < accessList.length; index++){\n            const item = accessList[index];\n            const JSONItem = {\n                address: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.setLengthLeft)(item[0], 20)),\n                storageKeys: []\n            };\n            const storageSlots = item[1];\n            for(let slot = 0; slot < storageSlots.length; slot++){\n                const storageSlot = storageSlots[slot];\n                JSONItem.storageKeys.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.setLengthLeft)(storageSlot, 32)));\n            }\n            accessListJSON.push(JSONItem);\n        }\n        return accessListJSON;\n    }\n    static getDataFeeEIP2930(accessList, common) {\n        const accessListStorageKeyCost = common.param(\"gasPrices\", \"accessListStorageKeyCost\");\n        const accessListAddressCost = common.param(\"gasPrices\", \"accessListAddressCost\");\n        let slots = 0;\n        for(let index = 0; index < accessList.length; index++){\n            const item = accessList[index];\n            const storageSlots = item[1];\n            slots += storageSlots.length;\n        }\n        const addresses = accessList.length;\n        return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);\n    }\n}\nfunction txTypeBytes(txType) {\n    return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(\"0x\" + txType.toString(16).padStart(2, \"0\"));\n} //# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/account.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/account.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   accountBodyFromSlim: () => (/* binding */ accountBodyFromSlim),\n/* harmony export */   accountBodyToRLP: () => (/* binding */ accountBodyToRLP),\n/* harmony export */   accountBodyToSlim: () => (/* binding */ accountBodyToSlim),\n/* harmony export */   generateAddress: () => (/* binding */ generateAddress),\n/* harmony export */   generateAddress2: () => (/* binding */ generateAddress2),\n/* harmony export */   importPublic: () => (/* binding */ importPublic),\n/* harmony export */   isValidAddress: () => (/* binding */ isValidAddress),\n/* harmony export */   isValidChecksumAddress: () => (/* binding */ isValidChecksumAddress),\n/* harmony export */   isValidPrivate: () => (/* binding */ isValidPrivate),\n/* harmony export */   isValidPublic: () => (/* binding */ isValidPublic),\n/* harmony export */   isZeroAddress: () => (/* binding */ isZeroAddress),\n/* harmony export */   privateToAddress: () => (/* binding */ privateToAddress),\n/* harmony export */   privateToPublic: () => (/* binding */ privateToPublic),\n/* harmony export */   pubToAddress: () => (/* binding */ pubToAddress),\n/* harmony export */   publicToAddress: () => (/* binding */ publicToAddress),\n/* harmony export */   toChecksumAddress: () => (/* binding */ toChecksumAddress),\n/* harmony export */   zeroAddress: () => (/* binding */ zeroAddress)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n\n\n\n\n\nclass Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */ constructor(nonce = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, balance = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, storageRoot = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP, codeHash = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL){\n        this.nonce = nonce;\n        this.balance = balance;\n        this.storageRoot = storageRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, storageRoot, codeHash } = accountData;\n        return new Account(nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(nonce)) : undefined, balance !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(balance)) : undefined, storageRoot !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(storageRoot) : undefined, codeHash !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(codeHash) : undefined);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized account input. Must be array\");\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, storageRoot, codeHash] = values;\n        return new Account((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(balance), storageRoot, codeHash);\n    }\n    _validate() {\n        if (this.nonce < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error(\"nonce must be greater than zero\");\n        }\n        if (this.balance < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error(\"balance must be greater than zero\");\n        }\n        if (this.storageRoot.length !== 32) {\n            throw new Error(\"storageRoot must have a length of 32\");\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error(\"codeHash must have a length of 32\");\n        }\n    }\n    /**\n     * Returns an array of Uint8Arrays of the raw bytes for the account, in order.\n     */ raw() {\n        return [\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.balance),\n            this.storageRoot,\n            this.codeHash\n        ];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Uint8Array`.\n     */ serialize() {\n        return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(this.raw());\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */ isContract() {\n        return !(0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */ isEmpty() {\n        return this.balance === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 && this.nonce === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 && (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL);\n    }\n}\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */ const isValidAddress = function(hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    } catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */ const toChecksumAddress = function(hexAddress, eip1191ChainId) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsHexString)(hexAddress);\n    const address = (0,_internal_js__WEBPACK_IMPORTED_MODULE_6__.stripHexPrefix)(hexAddress).toLowerCase();\n    let prefix = \"\";\n    if (eip1191ChainId !== undefined) {\n        const chainId = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(eip1191ChainId));\n        prefix = chainId.toString() + \"0x\";\n    }\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.utf8ToBytes)(prefix + address);\n    const hash = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)((0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(bytes)).slice(2);\n    let ret = \"0x\";\n    for(let i = 0; i < address.length; i++){\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        } else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */ const isValidChecksumAddress = function(hexAddress, eip1191ChainId) {\n    return isValidAddress(hexAddress) && toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */ const generateAddress = function(from, nonce) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(nonce);\n    if ((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce) === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([\n            from,\n            Uint8Array.from([])\n        ])).subarray(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([\n        from,\n        nonce\n    ])).subarray(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */ const generateAddress2 = function(from, salt, initCode) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(salt);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(initCode);\n    if (from.length !== 20) {\n        throw new Error(\"Expected from to be of length 20\");\n    }\n    if (salt.length !== 32) {\n        throw new Error(\"Expected salt to be of length 32\");\n    }\n    const address = (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(\"0xff\"), from, salt, (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(initCode)));\n    return address.subarray(-20);\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */ const isValidPrivate = function(privateKey) {\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.utils.isValidPrivateKey(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */ const isValidPublic = function(publicKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        // Automatically checks whether point is on curve\n        try {\n            ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(Uint8Array.from([\n                4\n            ]), publicKey));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    if (!sanitize) {\n        return false;\n    }\n    try {\n        ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */ const pubToAddress = function(pubKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n    }\n    if (pubKey.length !== 64) {\n        throw new Error(\"Expected pubKey to be of length 64\");\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(pubKey).subarray(-20);\n};\nconst publicToAddress = pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */ const privateToPublic = function(privateKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(privateKey);\n    // skip the type flag and use the X, Y points\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1);\n};\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */ const privateToAddress = function(privateKey) {\n    return publicToAddress(privateToPublic(privateKey));\n};\n/**\n * Converts a public key to the Ethereum format.\n */ const importPublic = function(publicKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1);\n    }\n    return publicKey;\n};\n/**\n * Returns the zero address.\n */ const zeroAddress = function() {\n    const addressLength = 20;\n    const addr = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.zeros)(addressLength);\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(addr);\n};\n/**\n * Checks if a given address is the zero address.\n */ const isZeroAddress = function(hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    } catch (e) {\n        return false;\n    }\n    const zeroAddr = zeroAddress();\n    return zeroAddr === hexAddress;\n};\nfunction accountBodyFromSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        storageRoot.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP : storageRoot,\n        codeHash.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL : codeHash\n    ];\n}\nconst emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(storageRoot, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL) ? emptyUint8Arr : codeHash\n    ];\n}\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Uint8Array-like items to represent the account\n * @returns RLP encoded version of the account\n */ function accountBodyToRLP(body, couldBeSlim = true) {\n    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n    return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(accountBody);\n} //# sourceMappingURL=account.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/address.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/address.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: () => (/* binding */ Address)\n/* harmony export */ });\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./account.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n\n\n/**\n * Handling and generating Ethereum addresses\n */ class Address {\n    constructor(bytes){\n        if (bytes.length !== 20) {\n            throw new Error(\"Invalid address length\");\n        }\n        this.bytes = bytes;\n    }\n    /**\n     * Returns the zero address.\n     */ static zero() {\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.zeros)(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */ static fromString(str) {\n        if (!(0,_account_js__WEBPACK_IMPORTED_MODULE_0__.isValidAddress)(str)) {\n            throw new Error(\"Invalid address\");\n        }\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */ static fromPublicKey(pubKey) {\n        if (!(pubKey instanceof Uint8Array)) {\n            throw new Error(\"Public key should be Uint8Array\");\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.pubToAddress)(pubKey);\n        return new Address(bytes);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */ static fromPrivateKey(privateKey) {\n        if (!(privateKey instanceof Uint8Array)) {\n            throw new Error(\"Private key should be Uint8Array\");\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.privateToAddress)(privateKey);\n        return new Address(bytes);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */ static generate(from, nonce) {\n        if (typeof nonce !== \"bigint\") {\n            throw new Error(\"Expected nonce to be a bigint\");\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress)(from.bytes, (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(nonce)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */ static generate2(from, salt, initCode) {\n        if (!(salt instanceof Uint8Array)) {\n            throw new Error(\"Expected salt to be a Uint8Array\");\n        }\n        if (!(initCode instanceof Uint8Array)) {\n            throw new Error(\"Expected initCode to be a Uint8Array\");\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress2)(from.bytes, salt, initCode));\n    }\n    /**\n     * Is address equal to another.\n     */ equals(address) {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(this.bytes, address.bytes);\n    }\n    /**\n     * Is address zero.\n     */ isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */ isPrecompileOrSystemAddress() {\n        const address = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(this.bytes);\n        const rangeMin = _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0;\n        const rangeMax = BigInt(\"0xffff\");\n        return address >= rangeMin && address <= rangeMax;\n    }\n    /**\n     * Returns hex encoding of address.\n     */ toString() {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.bytes);\n    }\n    /**\n     * Returns a new Uint8Array representation of address.\n     */ toBytes() {\n        return new Uint8Array(this.bytes);\n    }\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncEventEmitter: () => (/* binding */ AsyncEventEmitter)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/**\n * Ported to Typescript from original implementation below:\n * https://github.com/ahultgren/async-eventemitter -- MIT licensed\n *\n * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed\n * that was contributed to Definitely Typed below:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter\n */ \nasync function runInSeries(context, tasks, data) {\n    let error;\n    for await (const task of tasks){\n        try {\n            if (task.length < 2) {\n                //sync\n                task.call(context, data);\n            } else {\n                await new Promise((resolve, reject)=>{\n                    task.call(context, data, (error)=>{\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve();\n                        }\n                    });\n                });\n            }\n        } catch (e) {\n            error = e;\n        }\n    }\n    if (error) {\n        throw error;\n    }\n}\nclass AsyncEventEmitter extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    emit(event, ...args) {\n        let [data, callback] = args;\n        const self = this;\n        let listeners = self._events[event] ?? [];\n        // Optional data argument\n        if (callback === undefined && typeof data === \"function\") {\n            callback = data;\n            data = undefined;\n        }\n        // Special treatment of internal newListener and removeListener events\n        if (event === \"newListener\" || event === \"removeListener\") {\n            data = {\n                event: data,\n                fn: callback\n            };\n            callback = undefined;\n        }\n        // A single listener is just a function not an array...\n        listeners = Array.isArray(listeners) ? listeners : [\n            listeners\n        ];\n        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);\n        return self.listenerCount(event) > 0;\n    }\n    once(event, listener) {\n        const self = this;\n        let g;\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        // Hack to support set arity\n        if (listener.length >= 2) {\n            g = function(e, next) {\n                self.removeListener(event, g);\n                void listener(e, next);\n            };\n        } else {\n            g = function(e) {\n                self.removeListener(event, g);\n                void listener(e, g);\n            };\n        }\n        self.on(event, g);\n        return self;\n    }\n    first(event, listener) {\n        let listeners = this._events[event] ?? [];\n        // Contract\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [\n                listeners\n            ];\n        }\n        listeners.unshift(listener);\n        return this;\n    }\n    before(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener);\n    }\n    after(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener, \"after\");\n    }\n    beforeOrAfter(event, target, listener, beforeOrAfter) {\n        let listeners = this._events[event] ?? [];\n        let i;\n        let index;\n        const add = beforeOrAfter === \"after\" ? 1 : 0;\n        // Contract\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        if (typeof target !== \"function\") {\n            throw new TypeError(\"target must be a function\");\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [\n                listeners\n            ];\n        }\n        index = listeners.length;\n        for(i = listeners.length; i--;){\n            if (listeners[i] === target) {\n                index = i + add;\n                break;\n            }\n        }\n        listeners.splice(index, 0, listener);\n        return this;\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    addListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    prependListener(event, listener) {\n        return super.prependListener(event, listener);\n    }\n    prependOnceListener(event, listener) {\n        return super.prependOnceListener(event, listener);\n    }\n    removeAllListeners(event) {\n        return super.removeAllListeners(event);\n    }\n    removeListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    eventNames() {\n        return super.eventNames();\n    }\n    listeners(event) {\n        return super.listeners(event);\n    }\n    listenerCount(event) {\n        return super.listenerCount(event);\n    }\n    getMaxListeners() {\n        return super.getMaxListeners();\n    }\n    setMaxListeners(maxListeners) {\n        return super.setMaxListeners(maxListeners);\n    }\n} //# sourceMappingURL=asyncEventEmitter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/blobs.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/blobs.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blobsToCommitments: () => (/* binding */ blobsToCommitments),\n/* harmony export */   blobsToProofs: () => (/* binding */ blobsToProofs),\n/* harmony export */   commitmentsToVersionedHashes: () => (/* binding */ commitmentsToVersionedHashes),\n/* harmony export */   computeVersionedHash: () => (/* binding */ computeVersionedHash),\n/* harmony export */   getBlobs: () => (/* binding */ getBlobs)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/sha256.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/sha256.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _kzg_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./kzg.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/kzg.js\");\n\n\n\n/**\n * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git\n */ const BYTES_PER_FIELD_ELEMENT = 32;\nconst FIELD_ELEMENTS_PER_BLOB = 4096;\nconst USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB;\nconst MAX_BLOBS_PER_TX = 2;\nconst MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1;\nconst BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB;\nfunction get_padded(data, blobs_len) {\n    const pdata = new Uint8Array(blobs_len * USEFUL_BYTES_PER_BLOB).fill(0);\n    pdata.set(data);\n    pdata[data.byteLength] = 0x80;\n    return pdata;\n}\nfunction get_blob(data) {\n    const blob = new Uint8Array(BLOB_SIZE);\n    for(let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++){\n        const chunk = new Uint8Array(32);\n        chunk.set(data.subarray(i * 31, (i + 1) * 31), 0);\n        blob.set(chunk, i * 32);\n    }\n    return blob;\n}\nconst getBlobs = (input)=>{\n    const data = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)(input);\n    const len = data.byteLength;\n    if (len === 0) {\n        throw Error(\"invalid blob data\");\n    }\n    if (len > MAX_USEFUL_BYTES_PER_TX) {\n        throw Error(\"blob data is too large\");\n    }\n    const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB);\n    const pdata = get_padded(data, blobs_len);\n    const blobs = [];\n    for(let i = 0; i < blobs_len; i++){\n        const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB);\n        const blob = get_blob(chunk);\n        blobs.push(blob);\n    }\n    return blobs;\n};\nconst blobsToCommitments = (blobs)=>{\n    const commitments = [];\n    for (const blob of blobs){\n        commitments.push(_kzg_js__WEBPACK_IMPORTED_MODULE_2__.kzg.blobToKzgCommitment(blob));\n    }\n    return commitments;\n};\nconst blobsToProofs = (blobs, commitments)=>{\n    const proofs = blobs.map((blob, ctx)=>_kzg_js__WEBPACK_IMPORTED_MODULE_2__.kzg.computeBlobKzgProof(blob, commitments[ctx]));\n    return proofs;\n};\n/**\n * Converts a vector commitment for a given data blob to its versioned hash.  For 4844, this version\n * number will be 0x01 for KZG vector commitments but could be different if future vector commitment\n * types are introduced\n * @param commitment a vector commitment to a blob\n * @param blobCommitmentVersion the version number corresponding to the type of vector commitment\n * @returns a versioned hash corresponding to a given blob vector commitment\n */ const computeVersionedHash = (commitment, blobCommitmentVersion)=>{\n    const computedVersionedHash = new Uint8Array(32);\n    computedVersionedHash.set([\n        blobCommitmentVersion\n    ], 0);\n    computedVersionedHash.set((0,ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__.sha256)(commitment).subarray(1), 1);\n    return computedVersionedHash;\n};\n/**\n * Generate an array of versioned hashes from corresponding kzg commitments\n * @param commitments array of kzg commitments\n * @returns array of versioned hashes\n * Note: assumes KZG commitments (version 1 version hashes)\n */ const commitmentsToVersionedHashes = (commitments)=>{\n    const hashes = [];\n    for (const commitment of commitments){\n        hashes.push(computeVersionedHash(commitment, 0x01));\n    }\n    return hashes;\n}; //# sourceMappingURL=blobs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2Jsb2JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXlEO0FBQ2hCO0FBQ1Y7QUFDL0I7O0NBRUMsR0FDRCxNQUFNRywwQkFBMEI7QUFDaEMsTUFBTUMsMEJBQTBCO0FBQ2hDLE1BQU1DLHdCQUF3QixLQUFLRDtBQUNuQyxNQUFNRSxtQkFBbUI7QUFDekIsTUFBTUMsMEJBQTBCRix3QkFBd0JDLG1CQUFtQjtBQUMzRSxNQUFNRSxZQUFZTCwwQkFBMEJDO0FBQzVDLFNBQVNLLFdBQVdDLElBQUksRUFBRUMsU0FBUztJQUMvQixNQUFNQyxRQUFRLElBQUlDLFdBQVdGLFlBQVlOLHVCQUF1QlMsSUFBSSxDQUFDO0lBQ3JFRixNQUFNRyxHQUFHLENBQUNMO0lBQ1ZFLEtBQUssQ0FBQ0YsS0FBS00sVUFBVSxDQUFDLEdBQUc7SUFDekIsT0FBT0o7QUFDWDtBQUNBLFNBQVNLLFNBQVNQLElBQUk7SUFDbEIsTUFBTVEsT0FBTyxJQUFJTCxXQUFXTDtJQUM1QixJQUFLLElBQUlXLElBQUksR0FBR0EsSUFBSWYseUJBQXlCZSxJQUFLO1FBQzlDLE1BQU1DLFFBQVEsSUFBSVAsV0FBVztRQUM3Qk8sTUFBTUwsR0FBRyxDQUFDTCxLQUFLVyxRQUFRLENBQUNGLElBQUksSUFBSSxDQUFDQSxJQUFJLEtBQUssS0FBSztRQUMvQ0QsS0FBS0gsR0FBRyxDQUFDSyxPQUFPRCxJQUFJO0lBQ3hCO0lBQ0EsT0FBT0Q7QUFDWDtBQUNPLE1BQU1JLFdBQVcsQ0FBQ0M7SUFDckIsTUFBTWIsT0FBT1Qsc0RBQVdBLENBQUNzQjtJQUN6QixNQUFNQyxNQUFNZCxLQUFLTSxVQUFVO0lBQzNCLElBQUlRLFFBQVEsR0FBRztRQUNYLE1BQU1DLE1BQU07SUFDaEI7SUFDQSxJQUFJRCxNQUFNakIseUJBQXlCO1FBQy9CLE1BQU1rQixNQUFNO0lBQ2hCO0lBQ0EsTUFBTWQsWUFBWWUsS0FBS0MsSUFBSSxDQUFDSCxNQUFNbkI7SUFDbEMsTUFBTU8sUUFBUUgsV0FBV0MsTUFBTUM7SUFDL0IsTUFBTWlCLFFBQVEsRUFBRTtJQUNoQixJQUFLLElBQUlULElBQUksR0FBR0EsSUFBSVIsV0FBV1EsSUFBSztRQUNoQyxNQUFNQyxRQUFRUixNQUFNUyxRQUFRLENBQUNGLElBQUlkLHVCQUF1QixDQUFDYyxJQUFJLEtBQUtkO1FBQ2xFLE1BQU1hLE9BQU9ELFNBQVNHO1FBQ3RCUSxNQUFNQyxJQUFJLENBQUNYO0lBQ2Y7SUFDQSxPQUFPVTtBQUNYLEVBQUU7QUFDSyxNQUFNRSxxQkFBcUIsQ0FBQ0Y7SUFDL0IsTUFBTUcsY0FBYyxFQUFFO0lBQ3RCLEtBQUssTUFBTWIsUUFBUVUsTUFBTztRQUN0QkcsWUFBWUYsSUFBSSxDQUFDM0Isd0NBQUdBLENBQUM4QixtQkFBbUIsQ0FBQ2Q7SUFDN0M7SUFDQSxPQUFPYTtBQUNYLEVBQUU7QUFDSyxNQUFNRSxnQkFBZ0IsQ0FBQ0wsT0FBT0c7SUFDakMsTUFBTUcsU0FBU04sTUFBTU8sR0FBRyxDQUFDLENBQUNqQixNQUFNa0IsTUFBUWxDLHdDQUFHQSxDQUFDbUMsbUJBQW1CLENBQUNuQixNQUFNYSxXQUFXLENBQUNLLElBQUk7SUFDdEYsT0FBT0Y7QUFDWCxFQUFFO0FBQ0Y7Ozs7Ozs7Q0FPQyxHQUNNLE1BQU1JLHVCQUF1QixDQUFDQyxZQUFZQztJQUM3QyxNQUFNQyx3QkFBd0IsSUFBSTVCLFdBQVc7SUFDN0M0QixzQkFBc0IxQixHQUFHLENBQUM7UUFBQ3lCO0tBQXNCLEVBQUU7SUFDbkRDLHNCQUFzQjFCLEdBQUcsQ0FBQ2YsdUVBQU1BLENBQUN1QyxZQUFZbEIsUUFBUSxDQUFDLElBQUk7SUFDMUQsT0FBT29CO0FBQ1gsRUFBRTtBQUNGOzs7OztDQUtDLEdBQ00sTUFBTUMsK0JBQStCLENBQUNYO0lBQ3pDLE1BQU1ZLFNBQVMsRUFBRTtJQUNqQixLQUFLLE1BQU1KLGNBQWNSLFlBQWE7UUFDbENZLE9BQU9kLElBQUksQ0FBQ1MscUJBQXFCQyxZQUFZO0lBQ2pEO0lBQ0EsT0FBT0k7QUFDWCxFQUFFLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vYmxvYnMuanM/NzdmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGEyNTYgfSBmcm9tICdldGhlcmV1bS1jcnlwdG9ncmFwaHkvc2hhMjU2LmpzJztcbmltcG9ydCB7IHV0ZjhUb0J5dGVzIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5pbXBvcnQgeyBremcgfSBmcm9tICcuL2t6Zy5qcyc7XG4vKipcbiAqIFRoZXNlIHV0aWxpdGllcyBmb3IgY29uc3RydWN0aW5nIGJsb2JzIGFyZSBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9JbnBoaS9laXA0ODQ0LWludGVyb3AuZ2l0XG4gKi9cbmNvbnN0IEJZVEVTX1BFUl9GSUVMRF9FTEVNRU5UID0gMzI7XG5jb25zdCBGSUVMRF9FTEVNRU5UU19QRVJfQkxPQiA9IDQwOTY7XG5jb25zdCBVU0VGVUxfQllURVNfUEVSX0JMT0IgPSAzMiAqIEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9CO1xuY29uc3QgTUFYX0JMT0JTX1BFUl9UWCA9IDI7XG5jb25zdCBNQVhfVVNFRlVMX0JZVEVTX1BFUl9UWCA9IFVTRUZVTF9CWVRFU19QRVJfQkxPQiAqIE1BWF9CTE9CU19QRVJfVFggLSAxO1xuY29uc3QgQkxPQl9TSVpFID0gQllURVNfUEVSX0ZJRUxEX0VMRU1FTlQgKiBGSUVMRF9FTEVNRU5UU19QRVJfQkxPQjtcbmZ1bmN0aW9uIGdldF9wYWRkZWQoZGF0YSwgYmxvYnNfbGVuKSB7XG4gICAgY29uc3QgcGRhdGEgPSBuZXcgVWludDhBcnJheShibG9ic19sZW4gKiBVU0VGVUxfQllURVNfUEVSX0JMT0IpLmZpbGwoMCk7XG4gICAgcGRhdGEuc2V0KGRhdGEpO1xuICAgIHBkYXRhW2RhdGEuYnl0ZUxlbmd0aF0gPSAweDgwO1xuICAgIHJldHVybiBwZGF0YTtcbn1cbmZ1bmN0aW9uIGdldF9ibG9iKGRhdGEpIHtcbiAgICBjb25zdCBibG9iID0gbmV3IFVpbnQ4QXJyYXkoQkxPQl9TSVpFKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9COyBpKyspIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgICAgIGNodW5rLnNldChkYXRhLnN1YmFycmF5KGkgKiAzMSwgKGkgKyAxKSAqIDMxKSwgMCk7XG4gICAgICAgIGJsb2Iuc2V0KGNodW5rLCBpICogMzIpO1xuICAgIH1cbiAgICByZXR1cm4gYmxvYjtcbn1cbmV4cG9ydCBjb25zdCBnZXRCbG9icyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSB1dGY4VG9CeXRlcyhpbnB1dCk7XG4gICAgY29uc3QgbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ2ludmFsaWQgYmxvYiBkYXRhJyk7XG4gICAgfVxuICAgIGlmIChsZW4gPiBNQVhfVVNFRlVMX0JZVEVTX1BFUl9UWCkge1xuICAgICAgICB0aHJvdyBFcnJvcignYmxvYiBkYXRhIGlzIHRvbyBsYXJnZScpO1xuICAgIH1cbiAgICBjb25zdCBibG9ic19sZW4gPSBNYXRoLmNlaWwobGVuIC8gVVNFRlVMX0JZVEVTX1BFUl9CTE9CKTtcbiAgICBjb25zdCBwZGF0YSA9IGdldF9wYWRkZWQoZGF0YSwgYmxvYnNfbGVuKTtcbiAgICBjb25zdCBibG9icyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvYnNfbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBwZGF0YS5zdWJhcnJheShpICogVVNFRlVMX0JZVEVTX1BFUl9CTE9CLCAoaSArIDEpICogVVNFRlVMX0JZVEVTX1BFUl9CTE9CKTtcbiAgICAgICAgY29uc3QgYmxvYiA9IGdldF9ibG9iKGNodW5rKTtcbiAgICAgICAgYmxvYnMucHVzaChibG9iKTtcbiAgICB9XG4gICAgcmV0dXJuIGJsb2JzO1xufTtcbmV4cG9ydCBjb25zdCBibG9ic1RvQ29tbWl0bWVudHMgPSAoYmxvYnMpID0+IHtcbiAgICBjb25zdCBjb21taXRtZW50cyA9IFtdO1xuICAgIGZvciAoY29uc3QgYmxvYiBvZiBibG9icykge1xuICAgICAgICBjb21taXRtZW50cy5wdXNoKGt6Zy5ibG9iVG9LemdDb21taXRtZW50KGJsb2IpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1pdG1lbnRzO1xufTtcbmV4cG9ydCBjb25zdCBibG9ic1RvUHJvb2ZzID0gKGJsb2JzLCBjb21taXRtZW50cykgPT4ge1xuICAgIGNvbnN0IHByb29mcyA9IGJsb2JzLm1hcCgoYmxvYiwgY3R4KSA9PiBremcuY29tcHV0ZUJsb2JLemdQcm9vZihibG9iLCBjb21taXRtZW50c1tjdHhdKSk7XG4gICAgcmV0dXJuIHByb29mcztcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgdmVjdG9yIGNvbW1pdG1lbnQgZm9yIGEgZ2l2ZW4gZGF0YSBibG9iIHRvIGl0cyB2ZXJzaW9uZWQgaGFzaC4gIEZvciA0ODQ0LCB0aGlzIHZlcnNpb25cbiAqIG51bWJlciB3aWxsIGJlIDB4MDEgZm9yIEtaRyB2ZWN0b3IgY29tbWl0bWVudHMgYnV0IGNvdWxkIGJlIGRpZmZlcmVudCBpZiBmdXR1cmUgdmVjdG9yIGNvbW1pdG1lbnRcbiAqIHR5cGVzIGFyZSBpbnRyb2R1Y2VkXG4gKiBAcGFyYW0gY29tbWl0bWVudCBhIHZlY3RvciBjb21taXRtZW50IHRvIGEgYmxvYlxuICogQHBhcmFtIGJsb2JDb21taXRtZW50VmVyc2lvbiB0aGUgdmVyc2lvbiBudW1iZXIgY29ycmVzcG9uZGluZyB0byB0aGUgdHlwZSBvZiB2ZWN0b3IgY29tbWl0bWVudFxuICogQHJldHVybnMgYSB2ZXJzaW9uZWQgaGFzaCBjb3JyZXNwb25kaW5nIHRvIGEgZ2l2ZW4gYmxvYiB2ZWN0b3IgY29tbWl0bWVudFxuICovXG5leHBvcnQgY29uc3QgY29tcHV0ZVZlcnNpb25lZEhhc2ggPSAoY29tbWl0bWVudCwgYmxvYkNvbW1pdG1lbnRWZXJzaW9uKSA9PiB7XG4gICAgY29uc3QgY29tcHV0ZWRWZXJzaW9uZWRIYXNoID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICAgIGNvbXB1dGVkVmVyc2lvbmVkSGFzaC5zZXQoW2Jsb2JDb21taXRtZW50VmVyc2lvbl0sIDApO1xuICAgIGNvbXB1dGVkVmVyc2lvbmVkSGFzaC5zZXQoc2hhMjU2KGNvbW1pdG1lbnQpLnN1YmFycmF5KDEpLCAxKTtcbiAgICByZXR1cm4gY29tcHV0ZWRWZXJzaW9uZWRIYXNoO1xufTtcbi8qKlxuICogR2VuZXJhdGUgYW4gYXJyYXkgb2YgdmVyc2lvbmVkIGhhc2hlcyBmcm9tIGNvcnJlc3BvbmRpbmcga3pnIGNvbW1pdG1lbnRzXG4gKiBAcGFyYW0gY29tbWl0bWVudHMgYXJyYXkgb2Yga3pnIGNvbW1pdG1lbnRzXG4gKiBAcmV0dXJucyBhcnJheSBvZiB2ZXJzaW9uZWQgaGFzaGVzXG4gKiBOb3RlOiBhc3N1bWVzIEtaRyBjb21taXRtZW50cyAodmVyc2lvbiAxIHZlcnNpb24gaGFzaGVzKVxuICovXG5leHBvcnQgY29uc3QgY29tbWl0bWVudHNUb1ZlcnNpb25lZEhhc2hlcyA9IChjb21taXRtZW50cykgPT4ge1xuICAgIGNvbnN0IGhhc2hlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgY29tbWl0bWVudCBvZiBjb21taXRtZW50cykge1xuICAgICAgICBoYXNoZXMucHVzaChjb21wdXRlVmVyc2lvbmVkSGFzaChjb21taXRtZW50LCAweDAxKSk7XG4gICAgfVxuICAgIHJldHVybiBoYXNoZXM7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmxvYnMuanMubWFwIl0sIm5hbWVzIjpbInNoYTI1NiIsInV0ZjhUb0J5dGVzIiwia3pnIiwiQllURVNfUEVSX0ZJRUxEX0VMRU1FTlQiLCJGSUVMRF9FTEVNRU5UU19QRVJfQkxPQiIsIlVTRUZVTF9CWVRFU19QRVJfQkxPQiIsIk1BWF9CTE9CU19QRVJfVFgiLCJNQVhfVVNFRlVMX0JZVEVTX1BFUl9UWCIsIkJMT0JfU0laRSIsImdldF9wYWRkZWQiLCJkYXRhIiwiYmxvYnNfbGVuIiwicGRhdGEiLCJVaW50OEFycmF5IiwiZmlsbCIsInNldCIsImJ5dGVMZW5ndGgiLCJnZXRfYmxvYiIsImJsb2IiLCJpIiwiY2h1bmsiLCJzdWJhcnJheSIsImdldEJsb2JzIiwiaW5wdXQiLCJsZW4iLCJFcnJvciIsIk1hdGgiLCJjZWlsIiwiYmxvYnMiLCJwdXNoIiwiYmxvYnNUb0NvbW1pdG1lbnRzIiwiY29tbWl0bWVudHMiLCJibG9iVG9LemdDb21taXRtZW50IiwiYmxvYnNUb1Byb29mcyIsInByb29mcyIsIm1hcCIsImN0eCIsImNvbXB1dGVCbG9iS3pnUHJvb2YiLCJjb21wdXRlVmVyc2lvbmVkSGFzaCIsImNvbW1pdG1lbnQiLCJibG9iQ29tbWl0bWVudFZlcnNpb24iLCJjb21wdXRlZFZlcnNpb25lZEhhc2giLCJjb21taXRtZW50c1RvVmVyc2lvbmVkSGFzaGVzIiwiaGFzaGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/blobs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHexPrefix: () => (/* binding */ addHexPrefix),\n/* harmony export */   bigInt64ToBytes: () => (/* binding */ bigInt64ToBytes),\n/* harmony export */   bigIntToBytes: () => (/* binding */ bigIntToBytes),\n/* harmony export */   bigIntToHex: () => (/* binding */ bigIntToHex),\n/* harmony export */   bigIntToUnpaddedBytes: () => (/* binding */ bigIntToUnpaddedBytes),\n/* harmony export */   bytesToBigInt: () => (/* binding */ bytesToBigInt),\n/* harmony export */   bytesToBigInt64: () => (/* binding */ bytesToBigInt64),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToInt: () => (/* binding */ bytesToInt),\n/* harmony export */   bytesToInt32: () => (/* binding */ bytesToInt32),\n/* harmony export */   bytesToUnprefixedHex: () => (/* binding */ bytesToUnprefixedHex),\n/* harmony export */   bytesToUtf8: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToUtf8),\n/* harmony export */   compareBytes: () => (/* binding */ compareBytes),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   equalsBytes: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes),\n/* harmony export */   fromSigned: () => (/* binding */ fromSigned),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   int32ToBytes: () => (/* binding */ int32ToBytes),\n/* harmony export */   intToBytes: () => (/* binding */ intToBytes),\n/* harmony export */   intToHex: () => (/* binding */ intToHex),\n/* harmony export */   intToUnpaddedBytes: () => (/* binding */ intToUnpaddedBytes),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   setLengthLeft: () => (/* binding */ setLengthLeft),\n/* harmony export */   setLengthRight: () => (/* binding */ setLengthRight),\n/* harmony export */   short: () => (/* binding */ short),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toUnsigned: () => (/* binding */ toUnsigned),\n/* harmony export */   unpadArray: () => (/* binding */ unpadArray),\n/* harmony export */   unpadBytes: () => (/* binding */ unpadBytes),\n/* harmony export */   unpadHex: () => (/* binding */ unpadHex),\n/* harmony export */   unprefixedHexToBytes: () => (/* binding */ unprefixedHexToBytes),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes),\n/* harmony export */   validateNoLeadingZeroes: () => (/* binding */ validateNoLeadingZeroes),\n/* harmony export */   zeros: () => (/* binding */ zeros)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/random.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/random.js\");\n/* harmony import */ var ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/utils.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/utils.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n// eslint-disable-next-line no-restricted-imports\n\n\n\nconst BIGINT_0 = BigInt(0);\n/**\n * @deprecated\n */ const bytesToUnprefixedHex = ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex;\n/**\n * @deprecated\n */ const unprefixedHexToBytes = (inp)=>{\n    if (inp.slice(0, 2) === \"0x\") {\n        throw new Error(\"hex string is prefixed with 0x, should be unprefixed\");\n    } else {\n        return (0,ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)((0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(inp));\n    }\n};\n/****************  Borrowed from @chainsafe/ssz */ // Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = Array.from({\n    length: 256\n}, (v, i)=>i.toString(16).padStart(2, \"0\"));\nconst bytesToHex = (bytes)=>{\n    let hex = \"0x\";\n    if (bytes === undefined || bytes.length === 0) return hex;\n    for (const byte of bytes){\n        hex += hexByByte[byte];\n    }\n    return hex;\n};\n// BigInt cache for the numbers 0 - 256*256-1 (two-byte bytes)\nconst BIGINT_CACHE = [];\nfor(let i = 0; i <= 256 * 256 - 1; i++){\n    BIGINT_CACHE[i] = BigInt(i);\n}\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n * @param {Uint8Array} bytes the bytes to convert\n * @returns {bigint}\n */ const bytesToBigInt = (bytes)=>{\n    const hex = bytesToHex(bytes);\n    if (hex === \"0x\") {\n        return BIGINT_0;\n    }\n    if (hex.length === 4) {\n        // If the byte length is 1 (this is faster than checking `bytes.length === 1`)\n        return BIGINT_CACHE[bytes[0]];\n    }\n    if (hex.length === 6) {\n        return BIGINT_CACHE[bytes[0] * 256 + bytes[1]];\n    }\n    return BigInt(hex);\n};\n/**\n * Converts a {@link Uint8Array} to a {@link number}.\n * @param {Uint8Array} bytes the bytes to convert\n * @return  {number}\n * @throws If the input number exceeds 53 bits.\n */ const bytesToInt = (bytes)=>{\n    const res = Number(bytesToBigInt(bytes));\n    if (!Number.isSafeInteger(res)) throw new Error(\"Number exceeds 53 bits\");\n    return res;\n};\nconst hexToBytes = (hex)=>{\n    if (typeof hex !== \"string\") {\n        throw new Error(`hex argument type ${typeof hex} must be of type string`);\n    }\n    if (!hex.startsWith(\"0x\")) {\n        throw new Error(`prefixed hex input should start with 0x, got ${hex.substring(0, 2)}`);\n    }\n    hex = hex.slice(2);\n    if (hex.length % 2 !== 0) {\n        hex = (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(hex);\n    }\n    const byteLen = hex.length / 2;\n    const bytes = new Uint8Array(byteLen);\n    for(let i = 0; i < byteLen; i++){\n        const byte = parseInt(hex.slice(i * 2, (i + 1) * 2), 16);\n        bytes[i] = byte;\n    }\n    return bytes;\n};\n/******************************************/ /**\n * Converts a {@link number} into a {@link PrefixedHexString}\n * @param {number} i\n * @return {PrefixedHexString}\n */ const intToHex = (i)=>{\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\n/**\n * Converts an {@link number} to a {@link Uint8Array}\n * @param {Number} i\n * @return {Uint8Array}\n */ const intToBytes = (i)=>{\n    const hex = intToHex(i);\n    return hexToBytes(hex);\n};\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n *  * @param {bigint} num the bigint to convert\n * @returns {Uint8Array}\n */ const bigIntToBytes = (num)=>{\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return toBytes(\"0x\" + (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(num.toString(16)));\n};\n/**\n * Returns a Uint8Array filled with 0s.\n * @param {number} bytes the number of bytes of the Uint8Array\n * @return {Uint8Array}\n */ const zeros = (bytes)=>{\n    return new Uint8Array(bytes);\n};\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @param {boolean} right whether to start padding form the left or right\n * @return {Uint8Array}\n */ const setLength = (msg, length, right)=>{\n    if (right) {\n        if (msg.length < length) {\n            return new Uint8Array([\n                ...msg,\n                ...zeros(length - msg.length)\n            ]);\n        }\n        return msg.subarray(0, length);\n    } else {\n        if (msg.length < length) {\n            return new Uint8Array([\n                ...zeros(length - msg.length),\n                ...msg\n            ]);\n        }\n        return msg.subarray(-length);\n    }\n};\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */ const setLengthLeft = (msg, length)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Uint8Array` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */ const setLengthRight = (msg, length)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Uint8Array`, `number[]` or PrefixedHexString`.\n * @param {Uint8Array|number[]|PrefixedHexString} a\n * @return {Uint8Array|number[]|PrefixedHexString}\n */ const stripZeros = (a)=>{\n    let first = a[0];\n    while(a.length > 0 && first.toString() === \"0\"){\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param {Uint8Array} a\n * @return {Uint8Array}\n */ const unpadBytes = (a)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param  {number[]} a\n * @return {number[]}\n */ const unpadArray = (a)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsArray)(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from a `PrefixedHexString`.\n * @param {PrefixedHexString} a\n * @return {PrefixedHexString}\n */ const unpadHex = (a)=>{\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsHexString)(a);\n    a = (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(a);\n    return \"0x\" + stripZeros(a);\n};\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Buffer`, `Uint8Array`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBytes()` method.\n * @param {ToBytesInputTypes} v the value\n * @return {Uint8Array}\n */ const toBytes = (v)=>{\n    if (v === null || v === undefined) {\n        return new Uint8Array();\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Uint8Array.from(v);\n    }\n    if (typeof v === \"string\") {\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexString)(v)) {\n            throw new Error(`Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return hexToBytes(v);\n    }\n    if (typeof v === \"number\") {\n        return intToBytes(v);\n    }\n    if (typeof v === \"bigint\") {\n        if (v < BIGINT_0) {\n            throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2) n = \"0\" + n;\n        return unprefixedHexToBytes(n);\n    }\n    if (v.toBytes !== undefined) {\n        // converts a `TransformableToBytes` object to a Uint8Array\n        return v.toBytes();\n    }\n    throw new Error(\"invalid type\");\n};\n/**\n * Interprets a `Uint8Array` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param {Uint8Array} num Signed integer value\n * @returns {bigint}\n */ const fromSigned = (num)=>{\n    return BigInt.asIntN(256, bytesToBigInt(num));\n};\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Uint8Array`. Assumes 256-bit numbers.\n * @param {bigint} num\n * @returns {Uint8Array}\n */ const toUnsigned = (num)=>{\n    return bigIntToBytes(BigInt.asUintN(256, num));\n};\n/**\n * Adds \"0x\" to a given `string` if it does not already start with \"0x\".\n * @param {string} str\n * @return {PrefixedHexString}\n */ const addHexPrefix = (str)=>{\n    if (typeof str !== \"string\") {\n        return str;\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexPrefixed)(str) ? str : \"0x\" + str;\n};\n/**\n * Shortens a string  or Uint8Array's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n * @param {Uint8Array | string} bytes\n * @param {number} maxLength\n * @return {string}\n */ const short = (bytes, maxLength = 50)=>{\n    const byteStr = bytes instanceof Uint8Array ? bytesToHex(bytes) : bytes;\n    const len = byteStr.slice(0, 2) === \"0x\" ? maxLength + 2 : maxLength;\n    if (byteStr.length <= len) {\n        return byteStr;\n    }\n    return byteStr.slice(0, len) + \"…\";\n};\n/**\n * Checks provided Uint8Array for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Uint8Array values\n * @throws if any provided value is found to have leading zero bytes\n */ const validateNoLeadingZeroes = (values)=>{\n    for (const [k, v] of Object.entries(values)){\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${bytesToHex(v)}`);\n        }\n    }\n};\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n * @param {bigint} num the bigint to convert\n * @returns {PrefixedHexString}\n */ const bigIntToHex = (num)=>{\n    return \"0x\" + num.toString(16);\n};\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {bigint} value the bigint to convert\n * @returns {Uint8Array}\n */ const bigIntToUnpaddedBytes = (value)=>{\n    return unpadBytes(bigIntToBytes(value));\n};\n/**\n * Convert value from number to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {number} value the bigint to convert\n * @returns {Uint8Array}\n */ const intToUnpaddedBytes = (value)=>{\n    return unpadBytes(intToBytes(value));\n};\n/**\n * Compares two Uint8Arrays and returns a number indicating their order in a sorted array.\n *\n * @param {Uint8Array} value1 - The first Uint8Array to compare.\n * @param {Uint8Array} value2 - The second Uint8Array to compare.\n * @returns {number} A positive number if value1 is larger than value2,\n *                   A negative number if value1 is smaller than value2,\n *                   or 0 if value1 and value2 are equal.\n */ const compareBytes = (value1, value2)=>{\n    const bigIntValue1 = bytesToBigInt(value1);\n    const bigIntValue2 = bytesToBigInt(value2);\n    return bigIntValue1 > bigIntValue2 ? 1 : bigIntValue1 < bigIntValue2 ? -1 : 0;\n};\n/**\n * Generates a Uint8Array of random bytes of specified length.\n *\n * @param {number} length - The length of the Uint8Array.\n * @returns {Uint8Array} A Uint8Array of random bytes of specified length.\n */ const randomBytes = (length)=>{\n    return (0,ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__.getRandomBytesSync)(length);\n};\n/**\n * This mirrors the functionality of the `ethereum-cryptography` export except\n * it skips the check to validate that every element of `arrays` is indead a `uint8Array`\n * Can give small performance gains on large arrays\n * @param {Uint8Array[]} arrays an array of Uint8Arrays\n * @returns {Uint8Array} one Uint8Array with all the elements of the original set\n * works like `Buffer.concat`\n */ const concatBytes = (...arrays)=>{\n    if (arrays.length === 1) return arrays[0];\n    const length = arrays.reduce((a, arr)=>a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n};\n/**\n * @notice Convert a Uint8Array to a 32-bit integer\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 32-bit integer.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @throws {Error} If the input Uint8Array has a length less than 4.\n * @return {number} The 32-bit integer read from the input Uint8Array.\n */ function bytesToInt32(bytes, littleEndian = false) {\n    if (bytes.length < 4) {\n        throw new Error(\"The input Uint8Array must have at least 4 bytes.\");\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getInt32(0, littleEndian);\n}\n/**\n * @notice Convert a Uint8Array to a 64-bit bigint\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 64-bit bigint.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @throws {Error} If the input Uint8Array has a length less than 8.\n * @return {bigint} The 64-bit bigint read from the input Uint8Array.\n */ function bytesToBigInt64(bytes, littleEndian = false) {\n    if (bytes.length < 8) {\n        throw new Error(\"The input Uint8Array must have at least 8 bytes.\");\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getBigInt64(0, littleEndian);\n}\n/**\n * @notice Convert a 32-bit integer to a Uint8Array.\n * @param {number} value The 32-bit integer to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 4 containing the integer.\n */ function int32ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(4);\n    const dataView = new DataView(buffer);\n    dataView.setInt32(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n/**\n * @notice Convert a 64-bit bigint to a Uint8Array.\n * @param {bigint} value The 64-bit bigint to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 8 containing the bigint.\n */ function bigInt64ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(8);\n    const dataView = new DataView(buffer);\n    dataView.setBigInt64(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n// eslint-disable-next-line no-restricted-imports\n //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIGINT_0: () => (/* binding */ BIGINT_0),\n/* harmony export */   BIGINT_1: () => (/* binding */ BIGINT_1),\n/* harmony export */   BIGINT_100: () => (/* binding */ BIGINT_100),\n/* harmony export */   BIGINT_128: () => (/* binding */ BIGINT_128),\n/* harmony export */   BIGINT_160: () => (/* binding */ BIGINT_160),\n/* harmony export */   BIGINT_2: () => (/* binding */ BIGINT_2),\n/* harmony export */   BIGINT_224: () => (/* binding */ BIGINT_224),\n/* harmony export */   BIGINT_255: () => (/* binding */ BIGINT_255),\n/* harmony export */   BIGINT_256: () => (/* binding */ BIGINT_256),\n/* harmony export */   BIGINT_27: () => (/* binding */ BIGINT_27),\n/* harmony export */   BIGINT_28: () => (/* binding */ BIGINT_28),\n/* harmony export */   BIGINT_2EXP160: () => (/* binding */ BIGINT_2EXP160),\n/* harmony export */   BIGINT_2EXP224: () => (/* binding */ BIGINT_2EXP224),\n/* harmony export */   BIGINT_2EXP256: () => (/* binding */ BIGINT_2EXP256),\n/* harmony export */   BIGINT_2EXP96: () => (/* binding */ BIGINT_2EXP96),\n/* harmony export */   BIGINT_3: () => (/* binding */ BIGINT_3),\n/* harmony export */   BIGINT_31: () => (/* binding */ BIGINT_31),\n/* harmony export */   BIGINT_32: () => (/* binding */ BIGINT_32),\n/* harmony export */   BIGINT_64: () => (/* binding */ BIGINT_64),\n/* harmony export */   BIGINT_7: () => (/* binding */ BIGINT_7),\n/* harmony export */   BIGINT_8: () => (/* binding */ BIGINT_8),\n/* harmony export */   BIGINT_96: () => (/* binding */ BIGINT_96),\n/* harmony export */   BIGINT_NEG1: () => (/* binding */ BIGINT_NEG1),\n/* harmony export */   KECCAK256_NULL: () => (/* binding */ KECCAK256_NULL),\n/* harmony export */   KECCAK256_NULL_S: () => (/* binding */ KECCAK256_NULL_S),\n/* harmony export */   KECCAK256_RLP: () => (/* binding */ KECCAK256_RLP),\n/* harmony export */   KECCAK256_RLP_ARRAY: () => (/* binding */ KECCAK256_RLP_ARRAY),\n/* harmony export */   KECCAK256_RLP_ARRAY_S: () => (/* binding */ KECCAK256_RLP_ARRAY_S),\n/* harmony export */   KECCAK256_RLP_S: () => (/* binding */ KECCAK256_RLP_S),\n/* harmony export */   MAX_INTEGER: () => (/* binding */ MAX_INTEGER),\n/* harmony export */   MAX_INTEGER_BIGINT: () => (/* binding */ MAX_INTEGER_BIGINT),\n/* harmony export */   MAX_UINT64: () => (/* binding */ MAX_UINT64),\n/* harmony export */   MAX_WITHDRAWALS_PER_PAYLOAD: () => (/* binding */ MAX_WITHDRAWALS_PER_PAYLOAD),\n/* harmony export */   RIPEMD160_ADDRESS_STRING: () => (/* binding */ RIPEMD160_ADDRESS_STRING),\n/* harmony export */   RLP_EMPTY_STRING: () => (/* binding */ RLP_EMPTY_STRING),\n/* harmony export */   SECP256K1_ORDER: () => (/* binding */ SECP256K1_ORDER),\n/* harmony export */   SECP256K1_ORDER_DIV_2: () => (/* binding */ SECP256K1_ORDER_DIV_2),\n/* harmony export */   TWO_POW256: () => (/* binding */ TWO_POW256)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\n\n/**\n * 2^64-1\n */ const MAX_UINT64 = BigInt(\"0xffffffffffffffff\");\n/**\n * The max integer that the evm can handle (2^256-1)\n */ const MAX_INTEGER = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */ const MAX_INTEGER_BIGINT = BigInt(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\");\nconst SECP256K1_ORDER = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n;\nconst SECP256K1_ORDER_DIV_2 = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */ const TWO_POW256 = BigInt(\"0x10000000000000000000000000000000000000000000000000000000000000000\");\n/**\n * Keccak-256 hash of null\n */ const KECCAK256_NULL_S = \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\";\n/**\n * Keccak-256 hash of null\n */ const KECCAK256_NULL = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_NULL_S);\n/**\n * Keccak-256 of an RLP of an empty array\n */ const KECCAK256_RLP_ARRAY_S = \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\";\n/**\n * Keccak-256 of an RLP of an empty array\n */ const KECCAK256_RLP_ARRAY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_ARRAY_S);\n/**\n * Keccak-256 hash of the RLP of null\n */ const KECCAK256_RLP_S = \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\";\n/**\n * Keccak-256 hash of the RLP of null\n */ const KECCAK256_RLP = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_S);\n/**\n *  RLP encoded empty string\n */ const RLP_EMPTY_STRING = Uint8Array.from([\n    0x80\n]);\nconst MAX_WITHDRAWALS_PER_PAYLOAD = 16;\nconst RIPEMD160_ADDRESS_STRING = \"0000000000000000000000000000000000000003\";\n/**\n * BigInt constants\n */ const BIGINT_NEG1 = BigInt(-1);\nconst BIGINT_0 = BigInt(0);\nconst BIGINT_1 = BigInt(1);\nconst BIGINT_2 = BigInt(2);\nconst BIGINT_3 = BigInt(3);\nconst BIGINT_7 = BigInt(7);\nconst BIGINT_8 = BigInt(8);\nconst BIGINT_27 = BigInt(27);\nconst BIGINT_28 = BigInt(28);\nconst BIGINT_31 = BigInt(31);\nconst BIGINT_32 = BigInt(32);\nconst BIGINT_64 = BigInt(64);\nconst BIGINT_128 = BigInt(128);\nconst BIGINT_255 = BigInt(255);\nconst BIGINT_256 = BigInt(256);\nconst BIGINT_96 = BigInt(96);\nconst BIGINT_100 = BigInt(100);\nconst BIGINT_160 = BigInt(160);\nconst BIGINT_224 = BigInt(224);\nconst BIGINT_2EXP96 = BigInt(79228162514264337593543950336);\nconst BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976);\nconst BIGINT_2EXP224 = BigInt(26959946667150639794667015087019630673637144422540572481103610249216);\nconst BIGINT_2EXP256 = BIGINT_2 ** BIGINT_256; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStEO0FBQ3ZCO0FBQ3hDOztDQUVDLEdBQ00sTUFBTUUsYUFBYUMsT0FBTyxzQkFBc0I7QUFDdkQ7O0NBRUMsR0FDTSxNQUFNQyxjQUFjRCxPQUFPLHNFQUFzRTtBQUN4Rzs7OztDQUlDLEdBQ00sTUFBTUUscUJBQXFCRixPQUFPLGtGQUFrRjtBQUNwSCxNQUFNRyxrQkFBa0JOLHlFQUFTQSxDQUFDTyxLQUFLLENBQUNDLENBQUMsQ0FBQztBQUMxQyxNQUFNQyx3QkFBd0JULHlFQUFTQSxDQUFDTyxLQUFLLENBQUNDLENBQUMsR0FBR0wsT0FBTyxHQUFHO0FBQ25FOztDQUVDLEdBQ00sTUFBTU8sYUFBYVAsT0FBTyx1RUFBdUU7QUFDeEc7O0NBRUMsR0FDTSxNQUFNUSxtQkFBbUIscUVBQXFFO0FBQ3JHOztDQUVDLEdBQ00sTUFBTUMsaUJBQWlCWCxxREFBVUEsQ0FBQ1Usa0JBQWtCO0FBQzNEOztDQUVDLEdBQ00sTUFBTUUsd0JBQXdCLHFFQUFxRTtBQUMxRzs7Q0FFQyxHQUNNLE1BQU1DLHNCQUFzQmIscURBQVVBLENBQUNZLHVCQUF1QjtBQUNyRTs7Q0FFQyxHQUNNLE1BQU1FLGtCQUFrQixxRUFBcUU7QUFDcEc7O0NBRUMsR0FDTSxNQUFNQyxnQkFBZ0JmLHFEQUFVQSxDQUFDYyxpQkFBaUI7QUFDekQ7O0NBRUMsR0FDTSxNQUFNRSxtQkFBbUJDLFdBQVdDLElBQUksQ0FBQztJQUFDO0NBQUssRUFBRTtBQUNqRCxNQUFNQyw4QkFBOEIsR0FBRztBQUN2QyxNQUFNQywyQkFBMkIsMkNBQTJDO0FBQ25GOztDQUVDLEdBQ00sTUFBTUMsY0FBY25CLE9BQU8sQ0FBQyxHQUFHO0FBQy9CLE1BQU1vQixXQUFXcEIsT0FBTyxHQUFHO0FBQzNCLE1BQU1xQixXQUFXckIsT0FBTyxHQUFHO0FBQzNCLE1BQU1zQixXQUFXdEIsT0FBTyxHQUFHO0FBQzNCLE1BQU11QixXQUFXdkIsT0FBTyxHQUFHO0FBQzNCLE1BQU13QixXQUFXeEIsT0FBTyxHQUFHO0FBQzNCLE1BQU15QixXQUFXekIsT0FBTyxHQUFHO0FBQzNCLE1BQU0wQixZQUFZMUIsT0FBTyxJQUFJO0FBQzdCLE1BQU0yQixZQUFZM0IsT0FBTyxJQUFJO0FBQzdCLE1BQU00QixZQUFZNUIsT0FBTyxJQUFJO0FBQzdCLE1BQU02QixZQUFZN0IsT0FBTyxJQUFJO0FBQzdCLE1BQU04QixZQUFZOUIsT0FBTyxJQUFJO0FBQzdCLE1BQU0rQixhQUFhL0IsT0FBTyxLQUFLO0FBQy9CLE1BQU1nQyxhQUFhaEMsT0FBTyxLQUFLO0FBQy9CLE1BQU1pQyxhQUFhakMsT0FBTyxLQUFLO0FBQy9CLE1BQU1rQyxZQUFZbEMsT0FBTyxJQUFJO0FBQzdCLE1BQU1tQyxhQUFhbkMsT0FBTyxLQUFLO0FBQy9CLE1BQU1vQyxhQUFhcEMsT0FBTyxLQUFLO0FBQy9CLE1BQU1xQyxhQUFhckMsT0FBTyxLQUFLO0FBQy9CLE1BQU1zQyxnQkFBZ0J0QyxPQUFPLCtCQUErQjtBQUM1RCxNQUFNdUMsaUJBQWlCdkMsT0FBTyxtREFBbUQ7QUFDakYsTUFBTXdDLGlCQUFpQnhDLE9BQU8sc0VBQXNFO0FBQ3BHLE1BQU15QyxpQkFBaUJuQixZQUFZVyxXQUFXLENBQ3JELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2NvbnN0YW50cy5qcz80ZWZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlY3AyNTZrMSB9IGZyb20gJ2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9zZWNwMjU2azEuanMnO1xuaW1wb3J0IHsgaGV4VG9CeXRlcyB9IGZyb20gJy4vYnl0ZXMuanMnO1xuLyoqXG4gKiAyXjY0LTFcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9VSU5UNjQgPSBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpO1xuLyoqXG4gKiBUaGUgbWF4IGludGVnZXIgdGhhdCB0aGUgZXZtIGNhbiBoYW5kbGUgKDJeMjU2LTEpXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfSU5URUdFUiA9IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmJyk7XG4vKipcbiAqIFRoZSBtYXggaW50ZWdlciB0aGF0IHRoZSBldm0gY2FuIGhhbmRsZSAoMl4yNTYtMSkgYXMgYSBiaWdpbnRcbiAqIDJeMjU2LTEgZXF1YWxzIHRvIDM0MDI4MjM2NjkyMDkzODQ2MzQ2MzM3NDYwNzQzMTc2ODIxMTQ1NVxuICogV2UgdXNlIGxpdGVyYWwgdmFsdWUgaW5zdGVhZCBvZiBjYWxjdWxhdGVkIHZhbHVlIGZvciBjb21wYXRpYmlsaXR5IGlzc3VlLlxuICovXG5leHBvcnQgY29uc3QgTUFYX0lOVEVHRVJfQklHSU5UID0gQmlnSW50KCcxMTU3OTIwODkyMzczMTYxOTU0MjM1NzA5ODUwMDg2ODc5MDc4NTMyNjk5ODQ2NjU2NDA1NjQwMzk0NTc1ODQwMDc5MTMxMjk2Mzk5MzUnKTtcbmV4cG9ydCBjb25zdCBTRUNQMjU2SzFfT1JERVIgPSBzZWNwMjU2azEuQ1VSVkUubjtcbmV4cG9ydCBjb25zdCBTRUNQMjU2SzFfT1JERVJfRElWXzIgPSBzZWNwMjU2azEuQ1VSVkUubiAvIEJpZ0ludCgyKTtcbi8qKlxuICogMl4yNTZcbiAqL1xuZXhwb3J0IGNvbnN0IFRXT19QT1cyNTYgPSBCaWdJbnQoJzB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnKTtcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIG51bGxcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9OVUxMX1MgPSAnMHhjNWQyNDYwMTg2ZjcyMzNjOTI3ZTdkYjJkY2M3MDNjMGU1MDBiNjUzY2E4MjI3M2I3YmZhZDgwNDVkODVhNDcwJztcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIG51bGxcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9OVUxMID0gaGV4VG9CeXRlcyhLRUNDQUsyNTZfTlVMTF9TKTtcbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9STFBfQVJSQVlfUyA9ICcweDFkY2M0ZGU4ZGVjNzVkN2FhYjg1YjU2N2I2Y2NkNDFhZDMxMjQ1MWI5NDhhNzQxM2YwYTE0MmZkNDBkNDkzNDcnO1xuLyoqXG4gKiBLZWNjYWstMjU2IG9mIGFuIFJMUCBvZiBhbiBlbXB0eSBhcnJheVxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X1JMUF9BUlJBWSA9IGhleFRvQnl0ZXMoS0VDQ0FLMjU2X1JMUF9BUlJBWV9TKTtcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbFxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X1JMUF9TID0gJzB4NTZlODFmMTcxYmNjNTVhNmZmODM0NWU2OTJjMGY4NmU1YjQ4ZTAxYjk5NmNhZGMwMDE2MjJmYjVlMzYzYjQyMSc7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGxcbiAqL1xuZXhwb3J0IGNvbnN0IEtFQ0NBSzI1Nl9STFAgPSBoZXhUb0J5dGVzKEtFQ0NBSzI1Nl9STFBfUyk7XG4vKipcbiAqICBSTFAgZW5jb2RlZCBlbXB0eSBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IFJMUF9FTVBUWV9TVFJJTkcgPSBVaW50OEFycmF5LmZyb20oWzB4ODBdKTtcbmV4cG9ydCBjb25zdCBNQVhfV0lUSERSQVdBTFNfUEVSX1BBWUxPQUQgPSAxNjtcbmV4cG9ydCBjb25zdCBSSVBFTUQxNjBfQUREUkVTU19TVFJJTkcgPSAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMyc7XG4vKipcbiAqIEJpZ0ludCBjb25zdGFudHNcbiAqL1xuZXhwb3J0IGNvbnN0IEJJR0lOVF9ORUcxID0gQmlnSW50KC0xKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMCA9IEJpZ0ludCgwKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMSA9IEJpZ0ludCgxKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMiA9IEJpZ0ludCgyKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMyA9IEJpZ0ludCgzKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfNyA9IEJpZ0ludCg3KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfOCA9IEJpZ0ludCg4KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMjcgPSBCaWdJbnQoMjcpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yOCA9IEJpZ0ludCgyOCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzMxID0gQmlnSW50KDMxKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMzIgPSBCaWdJbnQoMzIpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF82NCA9IEJpZ0ludCg2NCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzEyOCA9IEJpZ0ludCgxMjgpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yNTUgPSBCaWdJbnQoMjU1KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMjU2ID0gQmlnSW50KDI1Nik7XG5leHBvcnQgY29uc3QgQklHSU5UXzk2ID0gQmlnSW50KDk2KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMTAwID0gQmlnSW50KDEwMCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzE2MCA9IEJpZ0ludCgxNjApO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yMjQgPSBCaWdJbnQoMjI0KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMkVYUDk2ID0gQmlnSW50KDc5MjI4MTYyNTE0MjY0MzM3NTkzNTQzOTUwMzM2KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMkVYUDE2MCA9IEJpZ0ludCgxNDYxNTAxNjM3MzMwOTAyOTE4MjAzNjg0ODMyNzE2MjgzMDE5NjU1OTMyNTQyOTc2KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMkVYUDIyNCA9IEJpZ0ludCgyNjk1OTk0NjY2NzE1MDYzOTc5NDY2NzAxNTA4NzAxOTYzMDY3MzYzNzE0NDQyMjU0MDU3MjQ4MTEwMzYxMDI0OTIxNik7XG5leHBvcnQgY29uc3QgQklHSU5UXzJFWFAyNTYgPSBCSUdJTlRfMiAqKiBCSUdJTlRfMjU2O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJzZWNwMjU2azEiLCJoZXhUb0J5dGVzIiwiTUFYX1VJTlQ2NCIsIkJpZ0ludCIsIk1BWF9JTlRFR0VSIiwiTUFYX0lOVEVHRVJfQklHSU5UIiwiU0VDUDI1NksxX09SREVSIiwiQ1VSVkUiLCJuIiwiU0VDUDI1NksxX09SREVSX0RJVl8yIiwiVFdPX1BPVzI1NiIsIktFQ0NBSzI1Nl9OVUxMX1MiLCJLRUNDQUsyNTZfTlVMTCIsIktFQ0NBSzI1Nl9STFBfQVJSQVlfUyIsIktFQ0NBSzI1Nl9STFBfQVJSQVkiLCJLRUNDQUsyNTZfUkxQX1MiLCJLRUNDQUsyNTZfUkxQIiwiUkxQX0VNUFRZX1NUUklORyIsIlVpbnQ4QXJyYXkiLCJmcm9tIiwiTUFYX1dJVEhEUkFXQUxTX1BFUl9QQVlMT0FEIiwiUklQRU1EMTYwX0FERFJFU1NfU1RSSU5HIiwiQklHSU5UX05FRzEiLCJCSUdJTlRfMCIsIkJJR0lOVF8xIiwiQklHSU5UXzIiLCJCSUdJTlRfMyIsIkJJR0lOVF83IiwiQklHSU5UXzgiLCJCSUdJTlRfMjciLCJCSUdJTlRfMjgiLCJCSUdJTlRfMzEiLCJCSUdJTlRfMzIiLCJCSUdJTlRfNjQiLCJCSUdJTlRfMTI4IiwiQklHSU5UXzI1NSIsIkJJR0lOVF8yNTYiLCJCSUdJTlRfOTYiLCJCSUdJTlRfMTAwIiwiQklHSU5UXzE2MCIsIkJJR0lOVF8yMjQiLCJCSUdJTlRfMkVYUDk2IiwiQklHSU5UXzJFWFAxNjAiLCJCSUdJTlRfMkVYUDIyNCIsIkJJR0lOVF8yRVhQMjU2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/db.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/db.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyEncoding: () => (/* binding */ KeyEncoding),\n/* harmony export */   ValueEncoding: () => (/* binding */ ValueEncoding)\n/* harmony export */ });\nvar KeyEncoding;\n(function(KeyEncoding) {\n    KeyEncoding[\"String\"] = \"string\";\n    KeyEncoding[\"Bytes\"] = \"view\";\n    KeyEncoding[\"Number\"] = \"number\";\n})(KeyEncoding || (KeyEncoding = {}));\nvar ValueEncoding;\n(function(ValueEncoding) {\n    ValueEncoding[\"String\"] = \"string\";\n    ValueEncoding[\"Bytes\"] = \"view\";\n    ValueEncoding[\"JSON\"] = \"json\";\n})(ValueEncoding || (ValueEncoding = {})); //# sourceMappingURL=db.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2RiLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sSUFBSUEsWUFBWTtBQUN0QixVQUFVQSxXQUFXO0lBQ2xCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0FBQzVCLEdBQUdBLGVBQWdCQSxDQUFBQSxjQUFjLENBQUM7QUFDM0IsSUFBSUMsY0FBYztBQUN4QixVQUFVQSxhQUFhO0lBQ3BCQSxhQUFhLENBQUMsU0FBUyxHQUFHO0lBQzFCQSxhQUFhLENBQUMsUUFBUSxHQUFHO0lBQ3pCQSxhQUFhLENBQUMsT0FBTyxHQUFHO0FBQzVCLEdBQUdBLGlCQUFrQkEsQ0FBQUEsZ0JBQWdCLENBQUMsS0FDdEMsOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vZGIuanM/YzdkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIEtleUVuY29kaW5nO1xuKGZ1bmN0aW9uIChLZXlFbmNvZGluZykge1xuICAgIEtleUVuY29kaW5nW1wiU3RyaW5nXCJdID0gXCJzdHJpbmdcIjtcbiAgICBLZXlFbmNvZGluZ1tcIkJ5dGVzXCJdID0gXCJ2aWV3XCI7XG4gICAgS2V5RW5jb2RpbmdbXCJOdW1iZXJcIl0gPSBcIm51bWJlclwiO1xufSkoS2V5RW5jb2RpbmcgfHwgKEtleUVuY29kaW5nID0ge30pKTtcbmV4cG9ydCB2YXIgVmFsdWVFbmNvZGluZztcbihmdW5jdGlvbiAoVmFsdWVFbmNvZGluZykge1xuICAgIFZhbHVlRW5jb2RpbmdbXCJTdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICAgIFZhbHVlRW5jb2RpbmdbXCJCeXRlc1wiXSA9IFwidmlld1wiO1xuICAgIFZhbHVlRW5jb2RpbmdbXCJKU09OXCJdID0gXCJqc29uXCI7XG59KShWYWx1ZUVuY29kaW5nIHx8IChWYWx1ZUVuY29kaW5nID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRiLmpzLm1hcCJdLCJuYW1lcyI6WyJLZXlFbmNvZGluZyIsIlZhbHVlRW5jb2RpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/genesis.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/genesis.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseGethGenesisState: () => (/* binding */ parseGethGenesisState)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n/**\n * Parses the geth genesis state into Blockchain {@link GenesisState}\n * @param json representing the `alloc` key in a Geth genesis file\n */ function parseGethGenesisState(json) {\n    const state = {};\n    for (let address of Object.keys(json.alloc)){\n        let { balance, code, storage, nonce } = json.alloc[address];\n        // create a map with lowercase for easy lookups\n        address = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(address.toLowerCase());\n        balance = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexPrefixed)(balance) ? balance : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bigIntToHex)(BigInt(balance));\n        code = code !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(code) : undefined;\n        storage = storage !== undefined ? Object.entries(storage) : undefined;\n        nonce = nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(nonce) : undefined;\n        state[address] = [\n            balance,\n            code,\n            storage,\n            nonce\n        ];\n    }\n    return state;\n} //# sourceMappingURL=genesis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2dlbmVzaXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVEO0FBQ1Q7QUFDOUM7OztDQUdDLEdBQ00sU0FBU0csc0JBQXNCQyxJQUFJO0lBQ3RDLE1BQU1DLFFBQVEsQ0FBQztJQUNmLEtBQUssSUFBSUMsV0FBV0MsT0FBT0MsSUFBSSxDQUFDSixLQUFLSyxLQUFLLEVBQUc7UUFDekMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUUsR0FBR1QsS0FBS0ssS0FBSyxDQUFDSCxRQUFRO1FBQzNELCtDQUErQztRQUMvQ0EsVUFBVU4sdURBQVlBLENBQUNNLFFBQVFRLFdBQVc7UUFDMUNKLFVBQVVSLDJEQUFhQSxDQUFDUSxXQUFXQSxVQUFVVCxzREFBV0EsQ0FBQ2MsT0FBT0w7UUFDaEVDLE9BQU9BLFNBQVNLLFlBQVloQix1REFBWUEsQ0FBQ1csUUFBUUs7UUFDakRKLFVBQVVBLFlBQVlJLFlBQVlULE9BQU9VLE9BQU8sQ0FBQ0wsV0FBV0k7UUFDNURILFFBQVFBLFVBQVVHLFlBQVloQix1REFBWUEsQ0FBQ2EsU0FBU0c7UUFDcERYLEtBQUssQ0FBQ0MsUUFBUSxHQUFHO1lBQUNJO1lBQVNDO1lBQU1DO1lBQVNDO1NBQU07SUFDcEQ7SUFDQSxPQUFPUjtBQUNYLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vZ2VuZXNpcy5qcz85N2U2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZEhleFByZWZpeCwgYmlnSW50VG9IZXggfSBmcm9tICcuL2J5dGVzLmpzJztcbmltcG9ydCB7IGlzSGV4UHJlZml4ZWQgfSBmcm9tICcuL2ludGVybmFsLmpzJztcbi8qKlxuICogUGFyc2VzIHRoZSBnZXRoIGdlbmVzaXMgc3RhdGUgaW50byBCbG9ja2NoYWluIHtAbGluayBHZW5lc2lzU3RhdGV9XG4gKiBAcGFyYW0ganNvbiByZXByZXNlbnRpbmcgdGhlIGBhbGxvY2Aga2V5IGluIGEgR2V0aCBnZW5lc2lzIGZpbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2V0aEdlbmVzaXNTdGF0ZShqc29uKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7fTtcbiAgICBmb3IgKGxldCBhZGRyZXNzIG9mIE9iamVjdC5rZXlzKGpzb24uYWxsb2MpKSB7XG4gICAgICAgIGxldCB7IGJhbGFuY2UsIGNvZGUsIHN0b3JhZ2UsIG5vbmNlIH0gPSBqc29uLmFsbG9jW2FkZHJlc3NdO1xuICAgICAgICAvLyBjcmVhdGUgYSBtYXAgd2l0aCBsb3dlcmNhc2UgZm9yIGVhc3kgbG9va3Vwc1xuICAgICAgICBhZGRyZXNzID0gYWRkSGV4UHJlZml4KGFkZHJlc3MudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGJhbGFuY2UgPSBpc0hleFByZWZpeGVkKGJhbGFuY2UpID8gYmFsYW5jZSA6IGJpZ0ludFRvSGV4KEJpZ0ludChiYWxhbmNlKSk7XG4gICAgICAgIGNvZGUgPSBjb2RlICE9PSB1bmRlZmluZWQgPyBhZGRIZXhQcmVmaXgoY29kZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHN0b3JhZ2UgPSBzdG9yYWdlICE9PSB1bmRlZmluZWQgPyBPYmplY3QuZW50cmllcyhzdG9yYWdlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgbm9uY2UgPSBub25jZSAhPT0gdW5kZWZpbmVkID8gYWRkSGV4UHJlZml4KG5vbmNlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgc3RhdGVbYWRkcmVzc10gPSBbYmFsYW5jZSwgY29kZSwgc3RvcmFnZSwgbm9uY2VdO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lc2lzLmpzLm1hcCJdLCJuYW1lcyI6WyJhZGRIZXhQcmVmaXgiLCJiaWdJbnRUb0hleCIsImlzSGV4UHJlZml4ZWQiLCJwYXJzZUdldGhHZW5lc2lzU3RhdGUiLCJqc29uIiwic3RhdGUiLCJhZGRyZXNzIiwiT2JqZWN0Iiwia2V5cyIsImFsbG9jIiwiYmFsYW5jZSIsImNvZGUiLCJzdG9yYWdlIiwibm9uY2UiLCJ0b0xvd2VyQ2FzZSIsIkJpZ0ludCIsInVuZGVmaW5lZCIsImVudHJpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/genesis.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertIsArray: () => (/* binding */ assertIsArray),\n/* harmony export */   assertIsBytes: () => (/* binding */ assertIsBytes),\n/* harmony export */   assertIsHexString: () => (/* binding */ assertIsHexString),\n/* harmony export */   assertIsString: () => (/* binding */ assertIsString)\n/* harmony export */ });\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */ const assertIsHexString = function(input) {\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */ const assertIsBytes = function(input) {\n    if (!(input instanceof Uint8Array)) {\n        const msg = `This method only supports Uint8Array but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */ const assertIsArray = function(input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */ const assertIsString = function(input) {\n    if (typeof input !== \"string\") {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n}; //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEM7QUFDNUM7OztDQUdDLEdBQ00sTUFBTUMsb0JBQW9CLFNBQVVDLEtBQUs7SUFDNUMsSUFBSSxDQUFDRix5REFBV0EsQ0FBQ0UsUUFBUTtRQUNyQixNQUFNQyxNQUFNLENBQUMsaUVBQWlFLEVBQUVELE1BQU0sQ0FBQztRQUN2RixNQUFNLElBQUlFLE1BQU1EO0lBQ3BCO0FBQ0osRUFBRTtBQUNGOzs7Q0FHQyxHQUNNLE1BQU1FLGdCQUFnQixTQUFVSCxLQUFLO0lBQ3hDLElBQUksQ0FBRUEsQ0FBQUEsaUJBQWlCSSxVQUFTLEdBQUk7UUFDaEMsTUFBTUgsTUFBTSxDQUFDLG9EQUFvRCxFQUFFRCxNQUFNLENBQUM7UUFDMUUsTUFBTSxJQUFJRSxNQUFNRDtJQUNwQjtBQUNKLEVBQUU7QUFDRjs7O0NBR0MsR0FDTSxNQUFNSSxnQkFBZ0IsU0FBVUwsS0FBSztJQUN4QyxJQUFJLENBQUNNLE1BQU1DLE9BQU8sQ0FBQ1AsUUFBUTtRQUN2QixNQUFNQyxNQUFNLENBQUMsdURBQXVELEVBQUVELE1BQU0sQ0FBQztRQUM3RSxNQUFNLElBQUlFLE1BQU1EO0lBQ3BCO0FBQ0osRUFBRTtBQUNGOzs7Q0FHQyxHQUNNLE1BQU1PLGlCQUFpQixTQUFVUixLQUFLO0lBQ3pDLElBQUksT0FBT0EsVUFBVSxVQUFVO1FBQzNCLE1BQU1DLE1BQU0sQ0FBQyxpREFBaUQsRUFBRUQsTUFBTSxDQUFDO1FBQ3ZFLE1BQU0sSUFBSUUsTUFBTUQ7SUFDcEI7QUFDSixFQUFFLENBQ0YsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vaGVscGVycy5qcz82YmYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSGV4U3RyaW5nIH0gZnJvbSAnLi9pbnRlcm5hbC5qcyc7XG4vKipcbiAqIFRocm93cyBpZiBhIHN0cmluZyBpcyBub3QgaGV4IHByZWZpeGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgc3RyaW5nIHRvIGNoZWNrIGhleCBwcmVmaXggb2ZcbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydElzSGV4U3RyaW5nID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKCFpc0hleFN0cmluZyhpbnB1dCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgMHgtcHJlZml4ZWQgaGV4IHN0cmluZ3MgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGEgYnVmZmVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydElzQnl0ZXMgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIShpbnB1dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIFVpbnQ4QXJyYXkgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGFuIGFycmF5XG4gKiBAcGFyYW0ge251bWJlcltdfSBpbnB1dCB2YWx1ZSB0byBjaGVja1xuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0SXNBcnJheSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgbnVtYmVyIGFycmF5cyBidXQgaW5wdXQgd2FzOiAke2lucHV0fWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG4vKipcbiAqIFRocm93cyBpZiBpbnB1dCBpcyBub3QgYSBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCB2YWx1ZSB0byBjaGVja1xuICovXG5leHBvcnQgY29uc3QgYXNzZXJ0SXNTdHJpbmcgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCBtc2cgPSBgVGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyBzdHJpbmdzIGJ1dCBpbnB1dCB3YXM6ICR7aW5wdXR9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbImlzSGV4U3RyaW5nIiwiYXNzZXJ0SXNIZXhTdHJpbmciLCJpbnB1dCIsIm1zZyIsIkVycm9yIiwiYXNzZXJ0SXNCeXRlcyIsIlVpbnQ4QXJyYXkiLCJhc3NlcnRJc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiYXNzZXJ0SXNTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.Account),\n/* harmony export */   Address: () => (/* reexport safe */ _address_js__WEBPACK_IMPORTED_MODULE_3__.Address),\n/* harmony export */   AsyncEventEmitter: () => (/* reexport safe */ _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__.AsyncEventEmitter),\n/* harmony export */   BIGINT_0: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0),\n/* harmony export */   BIGINT_1: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_1),\n/* harmony export */   BIGINT_100: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_100),\n/* harmony export */   BIGINT_128: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_128),\n/* harmony export */   BIGINT_160: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_160),\n/* harmony export */   BIGINT_2: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2),\n/* harmony export */   BIGINT_224: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_224),\n/* harmony export */   BIGINT_255: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_255),\n/* harmony export */   BIGINT_256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_256),\n/* harmony export */   BIGINT_27: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_27),\n/* harmony export */   BIGINT_28: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_28),\n/* harmony export */   BIGINT_2EXP160: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP160),\n/* harmony export */   BIGINT_2EXP224: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP224),\n/* harmony export */   BIGINT_2EXP256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP256),\n/* harmony export */   BIGINT_2EXP96: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_2EXP96),\n/* harmony export */   BIGINT_3: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_3),\n/* harmony export */   BIGINT_31: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_31),\n/* harmony export */   BIGINT_32: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_32),\n/* harmony export */   BIGINT_64: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_64),\n/* harmony export */   BIGINT_7: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_7),\n/* harmony export */   BIGINT_8: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_8),\n/* harmony export */   BIGINT_96: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_96),\n/* harmony export */   BIGINT_NEG1: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_NEG1),\n/* harmony export */   GWEI_TO_WEI: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_1__.GWEI_TO_WEI),\n/* harmony export */   KECCAK256_NULL: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_NULL),\n/* harmony export */   KECCAK256_NULL_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_NULL_S),\n/* harmony export */   KECCAK256_RLP: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP),\n/* harmony export */   KECCAK256_RLP_ARRAY: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_ARRAY),\n/* harmony export */   KECCAK256_RLP_ARRAY_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_ARRAY_S),\n/* harmony export */   KECCAK256_RLP_S: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.KECCAK256_RLP_S),\n/* harmony export */   KeyEncoding: () => (/* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_4__.KeyEncoding),\n/* harmony export */   Lock: () => (/* reexport safe */ _lock_js__WEBPACK_IMPORTED_MODULE_14__.Lock),\n/* harmony export */   MAX_INTEGER: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INTEGER),\n/* harmony export */   MAX_INTEGER_BIGINT: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INTEGER_BIGINT),\n/* harmony export */   MAX_UINT64: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_UINT64),\n/* harmony export */   MAX_WITHDRAWALS_PER_PAYLOAD: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_WITHDRAWALS_PER_PAYLOAD),\n/* harmony export */   MapDB: () => (/* reexport safe */ _mapDB_js__WEBPACK_IMPORTED_MODULE_15__.MapDB),\n/* harmony export */   RIPEMD160_ADDRESS_STRING: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.RIPEMD160_ADDRESS_STRING),\n/* harmony export */   RLP_EMPTY_STRING: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.RLP_EMPTY_STRING),\n/* harmony export */   SECP256K1_ORDER: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER),\n/* harmony export */   SECP256K1_ORDER_DIV_2: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER_DIV_2),\n/* harmony export */   TWO_POW256: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.TWO_POW256),\n/* harmony export */   TypeOutput: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.TypeOutput),\n/* harmony export */   ValueEncoding: () => (/* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_4__.ValueEncoding),\n/* harmony export */   Withdrawal: () => (/* reexport safe */ _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__.Withdrawal),\n/* harmony export */   accountBodyFromSlim: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyFromSlim),\n/* harmony export */   accountBodyToRLP: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyToRLP),\n/* harmony export */   accountBodyToSlim: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.accountBodyToSlim),\n/* harmony export */   addHexPrefix: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.addHexPrefix),\n/* harmony export */   arrayContainsArray: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.arrayContainsArray),\n/* harmony export */   bigInt64ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigInt64ToBytes),\n/* harmony export */   bigIntToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToBytes),\n/* harmony export */   bigIntToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex),\n/* harmony export */   bigIntToUnpaddedBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedBytes),\n/* harmony export */   blobsToCommitments: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.blobsToCommitments),\n/* harmony export */   blobsToProofs: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.blobsToProofs),\n/* harmony export */   bytesToBigInt: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToBigInt),\n/* harmony export */   bytesToBigInt64: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToBigInt64),\n/* harmony export */   bytesToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToHex),\n/* harmony export */   bytesToInt: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToInt),\n/* harmony export */   bytesToInt32: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToInt32),\n/* harmony export */   bytesToUnprefixedHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToUnprefixedHex),\n/* harmony export */   bytesToUtf8: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.bytesToUtf8),\n/* harmony export */   commitmentsToVersionedHashes: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.commitmentsToVersionedHashes),\n/* harmony export */   compareBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.compareBytes),\n/* harmony export */   computeVersionedHash: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.computeVersionedHash),\n/* harmony export */   concatBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.concatBytes),\n/* harmony export */   ecrecover: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.ecrecover),\n/* harmony export */   ecsign: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.ecsign),\n/* harmony export */   equalsBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.equalsBytes),\n/* harmony export */   fetchFromProvider: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_16__.fetchFromProvider),\n/* harmony export */   formatBigDecimal: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_1__.formatBigDecimal),\n/* harmony export */   fromAscii: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromAscii),\n/* harmony export */   fromRpcSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.fromRpcSig),\n/* harmony export */   fromSigned: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.fromSigned),\n/* harmony export */   fromUtf8: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromUtf8),\n/* harmony export */   generateAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.generateAddress),\n/* harmony export */   generateAddress2: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.generateAddress2),\n/* harmony export */   getBinarySize: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getBinarySize),\n/* harmony export */   getBlobs: () => (/* reexport safe */ _blobs_js__WEBPACK_IMPORTED_MODULE_10__.getBlobs),\n/* harmony export */   getKeys: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getKeys),\n/* harmony export */   getProvider: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_16__.getProvider),\n/* harmony export */   hashPersonalMessage: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.hashPersonalMessage),\n/* harmony export */   hexToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.hexToBytes),\n/* harmony export */   importPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.importPublic),\n/* harmony export */   initKZG: () => (/* reexport safe */ _kzg_js__WEBPACK_IMPORTED_MODULE_13__.initKZG),\n/* harmony export */   int32ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.int32ToBytes),\n/* harmony export */   intToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToBytes),\n/* harmony export */   intToHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToHex),\n/* harmony export */   intToUnpaddedBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.intToUnpaddedBytes),\n/* harmony export */   isHexPrefixed: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.isHexPrefixed),\n/* harmony export */   isHexString: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.isHexString),\n/* harmony export */   isValidAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidAddress),\n/* harmony export */   isValidChecksumAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidChecksumAddress),\n/* harmony export */   isValidPrivate: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidPrivate),\n/* harmony export */   isValidPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isValidPublic),\n/* harmony export */   isValidSignature: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.isValidSignature),\n/* harmony export */   isZeroAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.isZeroAddress),\n/* harmony export */   kzg: () => (/* reexport safe */ _kzg_js__WEBPACK_IMPORTED_MODULE_13__.kzg),\n/* harmony export */   padToEven: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.padToEven),\n/* harmony export */   parseGethGenesisState: () => (/* reexport safe */ _genesis_js__WEBPACK_IMPORTED_MODULE_11__.parseGethGenesisState),\n/* harmony export */   privateToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.privateToAddress),\n/* harmony export */   privateToPublic: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.privateToPublic),\n/* harmony export */   pubToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.pubToAddress),\n/* harmony export */   publicToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.publicToAddress),\n/* harmony export */   randomBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.randomBytes),\n/* harmony export */   setLengthLeft: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.setLengthLeft),\n/* harmony export */   setLengthRight: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.setLengthRight),\n/* harmony export */   short: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.short),\n/* harmony export */   stripHexPrefix: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.stripHexPrefix),\n/* harmony export */   toAscii: () => (/* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.toAscii),\n/* harmony export */   toBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.toBytes),\n/* harmony export */   toChecksumAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.toChecksumAddress),\n/* harmony export */   toCompactSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.toCompactSig),\n/* harmony export */   toRpcSig: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_6__.toRpcSig),\n/* harmony export */   toType: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.toType),\n/* harmony export */   toUnsigned: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.toUnsigned),\n/* harmony export */   unpadArray: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadArray),\n/* harmony export */   unpadBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadBytes),\n/* harmony export */   unpadHex: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unpadHex),\n/* harmony export */   unprefixedHexToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.unprefixedHexToBytes),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.utf8ToBytes),\n/* harmony export */   validateNoLeadingZeroes: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.validateNoLeadingZeroes),\n/* harmony export */   zeroAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_2__.zeroAddress),\n/* harmony export */   zeros: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_7__.zeros)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _units_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./units.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/units.js\");\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./account.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./address.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./db.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/db.js\");\n/* harmony import */ var _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./withdrawal.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/withdrawal.js\");\n/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./signature.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/signature.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/types.js\");\n/* harmony import */ var _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./asyncEventEmitter.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\");\n/* harmony import */ var _blobs_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./blobs.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/blobs.js\");\n/* harmony import */ var _genesis_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./genesis.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/genesis.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n/* harmony import */ var _kzg_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kzg.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/kzg.js\");\n/* harmony import */ var _lock_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lock.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/lock.js\");\n/* harmony import */ var _mapDB_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./mapDB.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/mapDB.js\");\n/* harmony import */ var _provider_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./provider.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/provider.js\");\n/**\n * Constants\n */ \n/**\n * Units helpers\n */ \n/**\n * Account class and helper functions\n */ \n/**\n * Address type\n */ \n/**\n * DB type\n */ \n/**\n * Withdrawal type\n */ \n/**\n * ECDSA signature\n */ \n/**\n * Utilities for manipulating bytes, Uint8Arrays, etc.\n */ \n/**\n * Helpful TypeScript types\n */ \n/**\n * Export ethjs-util methods\n */ \n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Q0FFQyxHQUM4QjtBQUMvQjs7Q0FFQyxHQUMwQjtBQUMzQjs7Q0FFQyxHQUM0QjtBQUM3Qjs7Q0FFQyxHQUM0QjtBQUM3Qjs7Q0FFQyxHQUN1QjtBQUN4Qjs7Q0FFQyxHQUMrQjtBQUNoQzs7Q0FFQyxHQUM4QjtBQUMvQjs7Q0FFQyxHQUMwQjtBQUMzQjs7Q0FFQyxHQUMwQjtBQUMzQjs7Q0FFQyxHQUNzQztBQUNaO0FBQ0U7QUFDb0k7QUFDeEk7QUFDQztBQUNDO0FBQ0csQ0FDOUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vaW5kZXguanM/ZDdiZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnN0YW50c1xuICovXG5leHBvcnQgKiBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG4vKipcbiAqIFVuaXRzIGhlbHBlcnNcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi91bml0cy5qcyc7XG4vKipcbiAqIEFjY291bnQgY2xhc3MgYW5kIGhlbHBlciBmdW5jdGlvbnNcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9hY2NvdW50LmpzJztcbi8qKlxuICogQWRkcmVzcyB0eXBlXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vYWRkcmVzcy5qcyc7XG4vKipcbiAqIERCIHR5cGVcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9kYi5qcyc7XG4vKipcbiAqIFdpdGhkcmF3YWwgdHlwZVxuICovXG5leHBvcnQgKiBmcm9tICcuL3dpdGhkcmF3YWwuanMnO1xuLyoqXG4gKiBFQ0RTQSBzaWduYXR1cmVcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9zaWduYXR1cmUuanMnO1xuLyoqXG4gKiBVdGlsaXRpZXMgZm9yIG1hbmlwdWxhdGluZyBieXRlcywgVWludDhBcnJheXMsIGV0Yy5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9ieXRlcy5qcyc7XG4vKipcbiAqIEhlbHBmdWwgVHlwZVNjcmlwdCB0eXBlc1xuICovXG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbi8qKlxuICogRXhwb3J0IGV0aGpzLXV0aWwgbWV0aG9kc1xuICovXG5leHBvcnQgKiBmcm9tICcuL2FzeW5jRXZlbnRFbWl0dGVyLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vYmxvYnMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9nZW5lc2lzLmpzJztcbmV4cG9ydCB7IGFycmF5Q29udGFpbnNBcnJheSwgZnJvbUFzY2lpLCBmcm9tVXRmOCwgZ2V0QmluYXJ5U2l6ZSwgZ2V0S2V5cywgaXNIZXhQcmVmaXhlZCwgaXNIZXhTdHJpbmcsIHBhZFRvRXZlbiwgc3RyaXBIZXhQcmVmaXgsIHRvQXNjaWksIH0gZnJvbSAnLi9pbnRlcm5hbC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2t6Zy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xvY2suanMnO1xuZXhwb3J0ICogZnJvbSAnLi9tYXBEQi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3Byb3ZpZGVyLmpzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJhcnJheUNvbnRhaW5zQXJyYXkiLCJmcm9tQXNjaWkiLCJmcm9tVXRmOCIsImdldEJpbmFyeVNpemUiLCJnZXRLZXlzIiwiaXNIZXhQcmVmaXhlZCIsImlzSGV4U3RyaW5nIiwicGFkVG9FdmVuIiwic3RyaXBIZXhQcmVmaXgiLCJ0b0FzY2lpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayContainsArray: () => (/* binding */ arrayContainsArray),\n/* harmony export */   fromAscii: () => (/* binding */ fromAscii),\n/* harmony export */   fromUtf8: () => (/* binding */ fromUtf8),\n/* harmony export */   getBinarySize: () => (/* binding */ getBinarySize),\n/* harmony export */   getKeys: () => (/* binding */ getKeys),\n/* harmony export */   isHexPrefixed: () => (/* binding */ isHexPrefixed),\n/* harmony export */   isHexString: () => (/* binding */ isHexString),\n/* harmony export */   padToEven: () => (/* binding */ padToEven),\n/* harmony export */   stripHexPrefix: () => (/* binding */ stripHexPrefix),\n/* harmony export */   toAscii: () => (/* binding */ toAscii)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */ \n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */ function isHexPrefixed(str) {\n    if (typeof str !== \"string\") {\n        throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);\n    }\n    return str[0] === \"0\" && str[1] === \"x\";\n}\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */ const stripHexPrefix = (str)=>{\n    if (typeof str !== \"string\") throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n    return isHexPrefixed(str) ? str.slice(2) : str;\n};\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */ function padToEven(value) {\n    let a = value;\n    if (typeof a !== \"string\") {\n        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n    }\n    if (a.length % 2) a = `0${a}`;\n    return a;\n}\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */ function getBinarySize(str) {\n    if (typeof str !== \"string\") {\n        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(str).byteLength;\n}\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */ function arrayContainsArray(superset, subset, some) {\n    if (Array.isArray(superset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);\n    }\n    if (Array.isArray(subset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);\n    }\n    return subset[some === true ? \"some\" : \"every\"]((value)=>superset.indexOf(value) >= 0);\n}\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */ function toAscii(hex) {\n    let str = \"\";\n    let i = 0;\n    const l = hex.length;\n    if (hex.substring(0, 2) === \"0x\") i = 2;\n    for(; i < l; i += 2){\n        const code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string.\n * Strips leading and trailing 0's.\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */ function fromUtf8(stringValue) {\n    const str = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(stringValue);\n    return `0x${padToEven((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(str)).replace(/^0+|0+$/g, \"\")}`;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */ function fromAscii(stringValue) {\n    let hex = \"\";\n    for(let i = 0; i < stringValue.length; i++){\n        const code = stringValue.charCodeAt(i);\n        const n = code.toString(16);\n        hex += n.length < 2 ? `0${n}` : n;\n    }\n    return `0x${hex}`;\n}\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */ function getKeys(params, key, allowEmpty) {\n    if (!Array.isArray(params)) {\n        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);\n    }\n    if (typeof key !== \"string\") {\n        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);\n    }\n    const result = [];\n    for(let i = 0; i < params.length; i++){\n        let value = params[i][key];\n        if (allowEmpty === true && !value) {\n            value = \"\";\n        } else if (typeof value !== \"string\") {\n            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);\n        }\n        result.push(value);\n    }\n    return result;\n}\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */ function isHexString(value, length) {\n    if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;\n    if (typeof length !== \"undefined\" && length > 0 && value.length !== 2 + 2 * length) return false;\n    return true;\n} //# sourceMappingURL=internal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/kzg.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/kzg.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initKZG: () => (/* binding */ initKZG),\n/* harmony export */   kzg: () => (/* binding */ kzg)\n/* harmony export */ });\nfunction kzgNotLoaded() {\n    throw Error(\"kzg library not loaded\");\n}\n// eslint-disable-next-line import/no-mutable-exports\nlet kzg = {\n    loadTrustedSetup: kzgNotLoaded,\n    blobToKzgCommitment: kzgNotLoaded,\n    computeBlobKzgProof: kzgNotLoaded,\n    verifyKzgProof: kzgNotLoaded,\n    verifyBlobKzgProofBatch: kzgNotLoaded\n};\n/**\n * @param kzgLib a KZG implementation (defaults to c-kzg)\n * @param trustedSetupPath the full path (e.g. \"/home/linux/devnet4.txt\") to a kzg trusted setup text file\n */ function initKZG(kzgLib, trustedSetupPath) {\n    kzg = kzgLib;\n    kzg.loadTrustedSetup(trustedSetupPath);\n} //# sourceMappingURL=kzg.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2t6Zy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBO0lBQ0wsTUFBTUMsTUFBTTtBQUNoQjtBQUNBLHFEQUFxRDtBQUM5QyxJQUFJQyxNQUFNO0lBQ2JDLGtCQUFrQkg7SUFDbEJJLHFCQUFxQko7SUFDckJLLHFCQUFxQkw7SUFDckJNLGdCQUFnQk47SUFDaEJPLHlCQUF5QlA7QUFDN0IsRUFBRTtBQUNGOzs7Q0FHQyxHQUNNLFNBQVNRLFFBQVFDLE1BQU0sRUFBRUMsZ0JBQWdCO0lBQzVDUixNQUFNTztJQUNOUCxJQUFJQyxnQkFBZ0IsQ0FBQ087QUFDekIsRUFDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9remcuanM/YmU2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBremdOb3RMb2FkZWQoKSB7XG4gICAgdGhyb3cgRXJyb3IoJ2t6ZyBsaWJyYXJ5IG5vdCBsb2FkZWQnKTtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tbXV0YWJsZS1leHBvcnRzXG5leHBvcnQgbGV0IGt6ZyA9IHtcbiAgICBsb2FkVHJ1c3RlZFNldHVwOiBremdOb3RMb2FkZWQsXG4gICAgYmxvYlRvS3pnQ29tbWl0bWVudDoga3pnTm90TG9hZGVkLFxuICAgIGNvbXB1dGVCbG9iS3pnUHJvb2Y6IGt6Z05vdExvYWRlZCxcbiAgICB2ZXJpZnlLemdQcm9vZjoga3pnTm90TG9hZGVkLFxuICAgIHZlcmlmeUJsb2JLemdQcm9vZkJhdGNoOiBremdOb3RMb2FkZWQsXG59O1xuLyoqXG4gKiBAcGFyYW0ga3pnTGliIGEgS1pHIGltcGxlbWVudGF0aW9uIChkZWZhdWx0cyB0byBjLWt6ZylcbiAqIEBwYXJhbSB0cnVzdGVkU2V0dXBQYXRoIHRoZSBmdWxsIHBhdGggKGUuZy4gXCIvaG9tZS9saW51eC9kZXZuZXQ0LnR4dFwiKSB0byBhIGt6ZyB0cnVzdGVkIHNldHVwIHRleHQgZmlsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdEtaRyhremdMaWIsIHRydXN0ZWRTZXR1cFBhdGgpIHtcbiAgICBremcgPSBremdMaWI7XG4gICAga3pnLmxvYWRUcnVzdGVkU2V0dXAodHJ1c3RlZFNldHVwUGF0aCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1remcuanMubWFwIl0sIm5hbWVzIjpbImt6Z05vdExvYWRlZCIsIkVycm9yIiwia3pnIiwibG9hZFRydXN0ZWRTZXR1cCIsImJsb2JUb0t6Z0NvbW1pdG1lbnQiLCJjb21wdXRlQmxvYkt6Z1Byb29mIiwidmVyaWZ5S3pnUHJvb2YiLCJ2ZXJpZnlCbG9iS3pnUHJvb2ZCYXRjaCIsImluaXRLWkciLCJremdMaWIiLCJ0cnVzdGVkU2V0dXBQYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/kzg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/lock.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/lock.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lock: () => (/* binding */ Lock)\n/* harmony export */ });\n// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nclass Lock {\n    constructor(){\n        this.permits = 1;\n        this.promiseResolverQueue = [];\n    }\n    /**\n     * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */ async acquire() {\n        if (this.permits > 0) {\n            this.permits -= 1;\n            return Promise.resolve(true);\n        }\n        // If there is no permit available, we return a promise that resolves once the semaphore gets\n        // signaled enough times that permits is equal to one.\n        return new Promise((resolver)=>this.promiseResolverQueue.push(resolver));\n    }\n    /**\n     * Increases the number of permits by one. If there are other functions waiting, one of them will\n     * continue to execute in a future iteration of the event loop.\n     */ release() {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            // eslint-disable-next-line no-console\n            console.warn(\"Lock.permits should never be > 0 when there is someone waiting.\");\n        } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n            const nextResolver = this.promiseResolverQueue.shift();\n            if (nextResolver) {\n                nextResolver(true);\n            }\n        }\n    }\n} //# sourceMappingURL=lock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2xvY2suanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDhGQUE4RjtBQUN2RixNQUFNQTtJQUNUQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLG9CQUFvQixHQUFHLEVBQUU7SUFDbEM7SUFDQTs7O0tBR0MsR0FDRCxNQUFNQyxVQUFVO1FBQ1osSUFBSSxJQUFJLENBQUNGLE9BQU8sR0FBRyxHQUFHO1lBQ2xCLElBQUksQ0FBQ0EsT0FBTyxJQUFJO1lBQ2hCLE9BQU9HLFFBQVFDLE9BQU8sQ0FBQztRQUMzQjtRQUNBLDZGQUE2RjtRQUM3RixzREFBc0Q7UUFDdEQsT0FBTyxJQUFJRCxRQUFRLENBQUNFLFdBQWEsSUFBSSxDQUFDSixvQkFBb0IsQ0FBQ0ssSUFBSSxDQUFDRDtJQUNwRTtJQUNBOzs7S0FHQyxHQUNERSxVQUFVO1FBQ04sSUFBSSxDQUFDUCxPQUFPLElBQUk7UUFDaEIsSUFBSSxJQUFJLENBQUNBLE9BQU8sR0FBRyxLQUFLLElBQUksQ0FBQ0Msb0JBQW9CLENBQUNPLE1BQU0sR0FBRyxHQUFHO1lBQzFELHNDQUFzQztZQUN0Q0MsUUFBUUMsSUFBSSxDQUFDO1FBQ2pCLE9BQ0ssSUFBSSxJQUFJLENBQUNWLE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQ0Msb0JBQW9CLENBQUNPLE1BQU0sR0FBRyxHQUFHO1lBQ2pFLHFGQUFxRjtZQUNyRix5RUFBeUU7WUFDekUsSUFBSSxDQUFDUixPQUFPLElBQUk7WUFDaEIsTUFBTVcsZUFBZSxJQUFJLENBQUNWLG9CQUFvQixDQUFDVyxLQUFLO1lBQ3BELElBQUlELGNBQWM7Z0JBQ2RBLGFBQWE7WUFDakI7UUFDSjtJQUNKO0FBQ0osRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9sb2NrLmpzP2M1ODMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2pzb2VuZGVybWFubi9zZW1hcGhvcmUtYXN5bmMtYXdhaXQvYmxvYi9tYXN0ZXIvc3JjL1NlbWFwaG9yZS50c1xuZXhwb3J0IGNsYXNzIExvY2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnBlcm1pdHMgPSAxO1xuICAgICAgICB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBwcm9taXNlIHVzZWQgdG8gd2FpdCBmb3IgYSBwZXJtaXQgdG8gYmVjb21lIGF2YWlsYWJsZS4gVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGF3YWl0ZWQgb24uXG4gICAgICogQHJldHVybnMgIEEgcHJvbWlzZSB0aGF0IGdldHMgcmVzb2x2ZWQgd2hlbiBleGVjdXRpb24gaXMgYWxsb3dlZCB0byBwcm9jZWVkLlxuICAgICAqL1xuICAgIGFzeW5jIGFjcXVpcmUoKSB7XG4gICAgICAgIGlmICh0aGlzLnBlcm1pdHMgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnBlcm1pdHMgLT0gMTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gcGVybWl0IGF2YWlsYWJsZSwgd2UgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2UgdGhlIHNlbWFwaG9yZSBnZXRzXG4gICAgICAgIC8vIHNpZ25hbGVkIGVub3VnaCB0aW1lcyB0aGF0IHBlcm1pdHMgaXMgZXF1YWwgdG8gb25lLlxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmVyKSA9PiB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLnB1c2gocmVzb2x2ZXIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jcmVhc2VzIHRoZSBudW1iZXIgb2YgcGVybWl0cyBieSBvbmUuIElmIHRoZXJlIGFyZSBvdGhlciBmdW5jdGlvbnMgd2FpdGluZywgb25lIG9mIHRoZW0gd2lsbFxuICAgICAqIGNvbnRpbnVlIHRvIGV4ZWN1dGUgaW4gYSBmdXR1cmUgaXRlcmF0aW9uIG9mIHRoZSBldmVudCBsb29wLlxuICAgICAqL1xuICAgIHJlbGVhc2UoKSB7XG4gICAgICAgIHRoaXMucGVybWl0cyArPSAxO1xuICAgICAgICBpZiAodGhpcy5wZXJtaXRzID4gMSAmJiB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0xvY2sucGVybWl0cyBzaG91bGQgbmV2ZXIgYmUgPiAwIHdoZW4gdGhlcmUgaXMgc29tZW9uZSB3YWl0aW5nLicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVybWl0cyA9PT0gMSAmJiB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIHNvbWVvbmUgZWxzZSB3YWl0aW5nLCBpbW1lZGlhdGVseSBjb25zdW1lIHRoZSBwZXJtaXQgdGhhdCB3YXMgcmVsZWFzZWRcbiAgICAgICAgICAgIC8vIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBmdW5jdGlvbiBhbmQgbGV0IHRoZSB3YWl0aW5nIGZ1bmN0aW9uIHJlc3VtZS5cbiAgICAgICAgICAgIHRoaXMucGVybWl0cyAtPSAxO1xuICAgICAgICAgICAgY29uc3QgbmV4dFJlc29sdmVyID0gdGhpcy5wcm9taXNlUmVzb2x2ZXJRdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKG5leHRSZXNvbHZlcikge1xuICAgICAgICAgICAgICAgIG5leHRSZXNvbHZlcih0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2suanMubWFwIl0sIm5hbWVzIjpbIkxvY2siLCJjb25zdHJ1Y3RvciIsInBlcm1pdHMiLCJwcm9taXNlUmVzb2x2ZXJRdWV1ZSIsImFjcXVpcmUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlc29sdmVyIiwicHVzaCIsInJlbGVhc2UiLCJsZW5ndGgiLCJjb25zb2xlIiwid2FybiIsIm5leHRSZXNvbHZlciIsInNoaWZ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/lock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/mapDB.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/mapDB.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapDB: () => (/* binding */ MapDB)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\nclass MapDB {\n    constructor(database){\n        this._database = database ?? new Map();\n    }\n    async get(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        return this._database.get(dbKey);\n    }\n    async put(key, val) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.set(dbKey, val);\n    }\n    async del(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.delete(dbKey);\n    }\n    async batch(opStack) {\n        for (const op of opStack){\n            if (op.type === \"del\") {\n                await this.del(op.key);\n            }\n            if (op.type === \"put\") {\n                await this.put(op.key, op.value);\n            }\n        }\n    }\n    /**\n     * Note that the returned shallow copy will share the underlying database with the original\n     *\n     * @returns DB\n     */ shallowCopy() {\n        return new MapDB(this._database);\n    }\n    open() {\n        return Promise.resolve();\n    }\n} //# sourceMappingURL=mapDB.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL21hcERCLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtEO0FBQzNDLE1BQU1DO0lBQ1RDLFlBQVlDLFFBQVEsQ0FBRTtRQUNsQixJQUFJLENBQUNDLFNBQVMsR0FBR0QsWUFBWSxJQUFJRTtJQUNyQztJQUNBLE1BQU1DLElBQUlDLEdBQUcsRUFBRTtRQUNYLE1BQU1DLFFBQVFELGVBQWVFLGFBQWFULCtEQUFvQkEsQ0FBQ08sT0FBT0EsSUFBSUcsUUFBUTtRQUNsRixPQUFPLElBQUksQ0FBQ04sU0FBUyxDQUFDRSxHQUFHLENBQUNFO0lBQzlCO0lBQ0EsTUFBTUcsSUFBSUosR0FBRyxFQUFFSyxHQUFHLEVBQUU7UUFDaEIsTUFBTUosUUFBUUQsZUFBZUUsYUFBYVQsK0RBQW9CQSxDQUFDTyxPQUFPQSxJQUFJRyxRQUFRO1FBQ2xGLElBQUksQ0FBQ04sU0FBUyxDQUFDUyxHQUFHLENBQUNMLE9BQU9JO0lBQzlCO0lBQ0EsTUFBTUUsSUFBSVAsR0FBRyxFQUFFO1FBQ1gsTUFBTUMsUUFBUUQsZUFBZUUsYUFBYVQsK0RBQW9CQSxDQUFDTyxPQUFPQSxJQUFJRyxRQUFRO1FBQ2xGLElBQUksQ0FBQ04sU0FBUyxDQUFDVyxNQUFNLENBQUNQO0lBQzFCO0lBQ0EsTUFBTVEsTUFBTUMsT0FBTyxFQUFFO1FBQ2pCLEtBQUssTUFBTUMsTUFBTUQsUUFBUztZQUN0QixJQUFJQyxHQUFHQyxJQUFJLEtBQUssT0FBTztnQkFDbkIsTUFBTSxJQUFJLENBQUNMLEdBQUcsQ0FBQ0ksR0FBR1gsR0FBRztZQUN6QjtZQUNBLElBQUlXLEdBQUdDLElBQUksS0FBSyxPQUFPO2dCQUNuQixNQUFNLElBQUksQ0FBQ1IsR0FBRyxDQUFDTyxHQUFHWCxHQUFHLEVBQUVXLEdBQUdFLEtBQUs7WUFDbkM7UUFDSjtJQUNKO0lBQ0E7Ozs7S0FJQyxHQUNEQyxjQUFjO1FBQ1YsT0FBTyxJQUFJcEIsTUFBTSxJQUFJLENBQUNHLFNBQVM7SUFDbkM7SUFDQWtCLE9BQU87UUFDSCxPQUFPQyxRQUFRQyxPQUFPO0lBQzFCO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9tYXBEQi5qcz9iZmJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ5dGVzVG9VbnByZWZpeGVkSGV4IH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5leHBvcnQgY2xhc3MgTWFwREIge1xuICAgIGNvbnN0cnVjdG9yKGRhdGFiYXNlKSB7XG4gICAgICAgIHRoaXMuX2RhdGFiYXNlID0gZGF0YWJhc2UgPz8gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBhc3luYyBnZXQoa2V5KSB7XG4gICAgICAgIGNvbnN0IGRiS2V5ID0ga2V5IGluc3RhbmNlb2YgVWludDhBcnJheSA/IGJ5dGVzVG9VbnByZWZpeGVkSGV4KGtleSkgOiBrZXkudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFiYXNlLmdldChkYktleSk7XG4gICAgfVxuICAgIGFzeW5jIHB1dChrZXksIHZhbCkge1xuICAgICAgICBjb25zdCBkYktleSA9IGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBieXRlc1RvVW5wcmVmaXhlZEhleChrZXkpIDoga2V5LnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuX2RhdGFiYXNlLnNldChkYktleSwgdmFsKTtcbiAgICB9XG4gICAgYXN5bmMgZGVsKGtleSkge1xuICAgICAgICBjb25zdCBkYktleSA9IGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBieXRlc1RvVW5wcmVmaXhlZEhleChrZXkpIDoga2V5LnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuX2RhdGFiYXNlLmRlbGV0ZShkYktleSk7XG4gICAgfVxuICAgIGFzeW5jIGJhdGNoKG9wU3RhY2spIHtcbiAgICAgICAgZm9yIChjb25zdCBvcCBvZiBvcFN0YWNrKSB7XG4gICAgICAgICAgICBpZiAob3AudHlwZSA9PT0gJ2RlbCcpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmRlbChvcC5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wLnR5cGUgPT09ICdwdXQnKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wdXQob3Aua2V5LCBvcC52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTm90ZSB0aGF0IHRoZSByZXR1cm5lZCBzaGFsbG93IGNvcHkgd2lsbCBzaGFyZSB0aGUgdW5kZXJseWluZyBkYXRhYmFzZSB3aXRoIHRoZSBvcmlnaW5hbFxuICAgICAqXG4gICAgICogQHJldHVybnMgREJcbiAgICAgKi9cbiAgICBzaGFsbG93Q29weSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXBEQih0aGlzLl9kYXRhYmFzZSk7XG4gICAgfVxuICAgIG9wZW4oKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBEQi5qcy5tYXAiXSwibmFtZXMiOlsiYnl0ZXNUb1VucHJlZml4ZWRIZXgiLCJNYXBEQiIsImNvbnN0cnVjdG9yIiwiZGF0YWJhc2UiLCJfZGF0YWJhc2UiLCJNYXAiLCJnZXQiLCJrZXkiLCJkYktleSIsIlVpbnQ4QXJyYXkiLCJ0b1N0cmluZyIsInB1dCIsInZhbCIsInNldCIsImRlbCIsImRlbGV0ZSIsImJhdGNoIiwib3BTdGFjayIsIm9wIiwidHlwZSIsInZhbHVlIiwic2hhbGxvd0NvcHkiLCJvcGVuIiwiUHJvbWlzZSIsInJlc29sdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/mapDB.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/provider.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/provider.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchFromProvider: () => (/* binding */ fetchFromProvider),\n/* harmony export */   getProvider: () => (/* binding */ getProvider)\n/* harmony export */ });\n/**\n * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.\n * No parameter or response validation is done.\n *\n * @param url the URL for the JSON RPC provider\n * @param params the parameters for the JSON-RPC method - refer to\n * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods\n * @returns the `result` field from the JSON-RPC response\n */ const fetchFromProvider = async (url, params)=>{\n    const data = JSON.stringify({\n        method: params.method,\n        params: params.params,\n        jsonrpc: \"2.0\",\n        id: 1\n    });\n    const res = await fetch(url, {\n        headers: {\n            \"content-type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: data\n    });\n    const json = await res.json();\n    return json.result;\n};\n/**\n *\n * @param provider a URL string or {@link EthersProvider}\n * @returns the extracted URL string for the JSON-RPC Provider\n */ const getProvider = (provider)=>{\n    if (typeof provider === \"string\") {\n        return provider;\n    } else if (typeof provider === \"object\" && provider._getConnection !== undefined) {\n        return provider._getConnection().url;\n    } else {\n        throw new Error(\"Must provide valid provider URL or Web3Provider\");\n    }\n}; //# sourceMappingURL=provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7O0NBUUMsR0FDTSxNQUFNQSxvQkFBb0IsT0FBT0MsS0FBS0M7SUFDekMsTUFBTUMsT0FBT0MsS0FBS0MsU0FBUyxDQUFDO1FBQ3hCQyxRQUFRSixPQUFPSSxNQUFNO1FBQ3JCSixRQUFRQSxPQUFPQSxNQUFNO1FBQ3JCSyxTQUFTO1FBQ1RDLElBQUk7SUFDUjtJQUNBLE1BQU1DLE1BQU0sTUFBTUMsTUFBTVQsS0FBSztRQUN6QlUsU0FBUztZQUNMLGdCQUFnQjtRQUNwQjtRQUNBTCxRQUFRO1FBQ1JNLE1BQU1UO0lBQ1Y7SUFDQSxNQUFNVSxPQUFPLE1BQU1KLElBQUlJLElBQUk7SUFDM0IsT0FBT0EsS0FBS0MsTUFBTTtBQUN0QixFQUFFO0FBQ0Y7Ozs7Q0FJQyxHQUNNLE1BQU1DLGNBQWMsQ0FBQ0M7SUFDeEIsSUFBSSxPQUFPQSxhQUFhLFVBQVU7UUFDOUIsT0FBT0E7SUFDWCxPQUNLLElBQUksT0FBT0EsYUFBYSxZQUFZQSxTQUFTQyxjQUFjLEtBQUtDLFdBQVc7UUFDNUUsT0FBT0YsU0FBU0MsY0FBYyxHQUFHaEIsR0FBRztJQUN4QyxPQUNLO1FBQ0QsTUFBTSxJQUFJa0IsTUFBTTtJQUNwQjtBQUNKLEVBQUUsQ0FDRixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9wcm92aWRlci5qcz82YjlkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFrZXMgYSBzaW1wbGUgUlBDIGNhbGwgdG8gYSByZW1vdGUgRXRoZXJldW0gSlNPTi1SUEMgcHJvdmlkZXIgYW5kIHBhc3NlcyB0aHJvdWdoIHRoZSByZXNwb25zZS5cbiAqIE5vIHBhcmFtZXRlciBvciByZXNwb25zZSB2YWxpZGF0aW9uIGlzIGRvbmUuXG4gKlxuICogQHBhcmFtIHVybCB0aGUgVVJMIGZvciB0aGUgSlNPTiBSUEMgcHJvdmlkZXJcbiAqIEBwYXJhbSBwYXJhbXMgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBKU09OLVJQQyBtZXRob2QgLSByZWZlciB0b1xuICogaHR0cHM6Ly9ldGhlcmV1bS5vcmcvZW4vZGV2ZWxvcGVycy9kb2NzL2FwaXMvanNvbi1ycGMvIGZvciBkZXRhaWxzIG9uIFJQQyBtZXRob2RzXG4gKiBAcmV0dXJucyB0aGUgYHJlc3VsdGAgZmllbGQgZnJvbSB0aGUgSlNPTi1SUEMgcmVzcG9uc2VcbiAqL1xuZXhwb3J0IGNvbnN0IGZldGNoRnJvbVByb3ZpZGVyID0gYXN5bmMgKHVybCwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbWV0aG9kOiBwYXJhbXMubWV0aG9kLFxuICAgICAgICBwYXJhbXM6IHBhcmFtcy5wYXJhbXMsXG4gICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgICBpZDogMSxcbiAgICB9KTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgfSk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIGpzb24ucmVzdWx0O1xufTtcbi8qKlxuICpcbiAqIEBwYXJhbSBwcm92aWRlciBhIFVSTCBzdHJpbmcgb3Ige0BsaW5rIEV0aGVyc1Byb3ZpZGVyfVxuICogQHJldHVybnMgdGhlIGV4dHJhY3RlZCBVUkwgc3RyaW5nIGZvciB0aGUgSlNPTi1SUEMgUHJvdmlkZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFByb3ZpZGVyID0gKHByb3ZpZGVyKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBwcm92aWRlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcHJvdmlkZXIgPT09ICdvYmplY3QnICYmIHByb3ZpZGVyLl9nZXRDb25uZWN0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyLl9nZXRDb25uZWN0aW9uKCkudXJsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgdmFsaWQgcHJvdmlkZXIgVVJMIG9yIFdlYjNQcm92aWRlcicpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOlsiZmV0Y2hGcm9tUHJvdmlkZXIiLCJ1cmwiLCJwYXJhbXMiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ldGhvZCIsImpzb25ycGMiLCJpZCIsInJlcyIsImZldGNoIiwiaGVhZGVycyIsImJvZHkiLCJqc29uIiwicmVzdWx0IiwiZ2V0UHJvdmlkZXIiLCJwcm92aWRlciIsIl9nZXRDb25uZWN0aW9uIiwidW5kZWZpbmVkIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/signature.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/signature.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ecrecover: () => (/* binding */ ecrecover),\n/* harmony export */   ecsign: () => (/* binding */ ecsign),\n/* harmony export */   fromRpcSig: () => (/* binding */ fromRpcSig),\n/* harmony export */   hashPersonalMessage: () => (/* binding */ hashPersonalMessage),\n/* harmony export */   isValidSignature: () => (/* binding */ isValidSignature),\n/* harmony export */   toCompactSig: () => (/* binding */ toCompactSig),\n/* harmony export */   toRpcSig: () => (/* binding */ toRpcSig)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n\n\n\n\n\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */ function ecsign(msgHash, privateKey, chainId) {\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.sign(msgHash, privateKey);\n    const buf = sig.toCompactRawBytes();\n    const r = buf.slice(0, 32);\n    const s = buf.slice(32, 64);\n    const v = chainId === undefined ? BigInt(sig.recovery + 27) : BigInt(sig.recovery + 35) + BigInt(chainId) * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2;\n    return {\n        r,\n        s,\n        v\n    };\n}\nfunction calculateSigRecovery(v, chainId) {\n    if (v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1) return v;\n    if (chainId === undefined) {\n        return v - _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return v - (chainId * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1;\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */ const ecrecover = function(msgHash, v, r, s, chainId) {\n    const signature = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32));\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n    const senderPubKey = sig.recoverPublicKey(msgHash);\n    return senderPubKey.toRawBytes(false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */ const toRpcSig = function(v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(v)));\n};\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */ const toCompactSig = function(v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    const ss = Uint8Array.from([\n        ...s\n    ]);\n    if (v > BigInt(28) && v % _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1 || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1 || v === BigInt(28)) {\n        ss[0] |= 0x80;\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(ss, 32)));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */ const fromRpcSig = function(sig) {\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(sig);\n    let r;\n    let s;\n    let v;\n    if (bytes.length >= 65) {\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(bytes.subarray(64));\n    } else if (bytes.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = BigInt((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToInt)(bytes.subarray(32, 33)) >> 7);\n        s[0] &= 0x7f;\n    } else {\n        throw new Error(\"Invalid signature length\");\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v = v + _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return {\n        v,\n        r,\n        s\n    };\n};\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */ const isValidSignature = function(v, r, s, homesteadOrLater = true, chainId) {\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(r);\n    const sBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(s);\n    if (rBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || rBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER || sBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER) {\n        return false;\n    }\n    if (homesteadOrLater && sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER_DIV_2) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */ const hashPersonalMessage = function(message) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.assertIsBytes)(message);\n    const prefix = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)(`\\u0019Ethereum Signed Message:\\n${message.length}`);\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)(prefix, message));\n}; //# sourceMappingURL=signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/types.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/types.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOutput: () => (/* binding */ TypeOutput),\n/* harmony export */   toType: () => (/* binding */ toType)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n/**\n * Type output options\n */ var TypeOutput;\n(function(TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n    TypeOutput[TypeOutput[\"Uint8Array\"] = 2] = \"Uint8Array\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput || (TypeOutput = {}));\nfunction toType(input, outputType) {\n    if (input === null) {\n        return null;\n    }\n    if (input === undefined) {\n        return undefined;\n    }\n    if (typeof input === \"string\" && !(0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    } else if (typeof input === \"number\" && !Number.isSafeInteger(input)) {\n        throw new Error(\"The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)\");\n    }\n    const output = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(input);\n    switch(outputType){\n        case TypeOutput.Uint8Array:\n            return output;\n        case TypeOutput.BigInt:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n        case TypeOutput.Number:\n            {\n                const bigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n                if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n                    throw new Error(\"The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)\");\n                }\n                return Number(bigInt);\n            }\n        case TypeOutput.PrefixedHexString:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(output);\n        default:\n            throw new Error(\"unknown outputType\");\n    }\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0U7QUFDcEI7QUFDNUM7O0NBRUMsR0FDTSxJQUFJSSxXQUFXO0FBQ3JCLFVBQVVBLFVBQVU7SUFDakJBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDM0NBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsR0FBRztBQUN0RCxHQUFHQSxjQUFlQSxDQUFBQSxhQUFhLENBQUM7QUFDekIsU0FBU0MsT0FBT0MsS0FBSyxFQUFFQyxVQUFVO0lBQ3BDLElBQUlELFVBQVUsTUFBTTtRQUNoQixPQUFPO0lBQ1g7SUFDQSxJQUFJQSxVQUFVRSxXQUFXO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQSxJQUFJLE9BQU9GLFVBQVUsWUFBWSxDQUFDSCx5REFBV0EsQ0FBQ0csUUFBUTtRQUNsRCxNQUFNLElBQUlHLE1BQU0sQ0FBQyxtREFBbUQsRUFBRUgsTUFBTSxDQUFDO0lBQ2pGLE9BQ0ssSUFBSSxPQUFPQSxVQUFVLFlBQVksQ0FBQ0ksT0FBT0MsYUFBYSxDQUFDTCxRQUFRO1FBQ2hFLE1BQU0sSUFBSUcsTUFBTTtJQUNwQjtJQUNBLE1BQU1HLFNBQVNWLGtEQUFPQSxDQUFDSTtJQUN2QixPQUFRQztRQUNKLEtBQUtILFdBQVdTLFVBQVU7WUFDdEIsT0FBT0Q7UUFDWCxLQUFLUixXQUFXVSxNQUFNO1lBQ2xCLE9BQU9kLHdEQUFhQSxDQUFDWTtRQUN6QixLQUFLUixXQUFXTSxNQUFNO1lBQUU7Z0JBQ3BCLE1BQU1LLFNBQVNmLHdEQUFhQSxDQUFDWTtnQkFDN0IsSUFBSUcsU0FBU0QsT0FBT0osT0FBT00sZ0JBQWdCLEdBQUc7b0JBQzFDLE1BQU0sSUFBSVAsTUFBTTtnQkFDcEI7Z0JBQ0EsT0FBT0MsT0FBT0s7WUFDbEI7UUFDQSxLQUFLWCxXQUFXYSxpQkFBaUI7WUFDN0IsT0FBT2hCLHFEQUFVQSxDQUFDVztRQUN0QjtZQUNJLE1BQU0sSUFBSUgsTUFBTTtJQUN4QjtBQUNKLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ja2V0aC8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vdHlwZXMuanM/N2Y2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBieXRlc1RvQmlnSW50LCBieXRlc1RvSGV4LCB0b0J5dGVzIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5pbXBvcnQgeyBpc0hleFN0cmluZyB9IGZyb20gJy4vaW50ZXJuYWwuanMnO1xuLyoqXG4gKiBUeXBlIG91dHB1dCBvcHRpb25zXG4gKi9cbmV4cG9ydCB2YXIgVHlwZU91dHB1dDtcbihmdW5jdGlvbiAoVHlwZU91dHB1dCkge1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIk51bWJlclwiXSA9IDBdID0gXCJOdW1iZXJcIjtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJCaWdJbnRcIl0gPSAxXSA9IFwiQmlnSW50XCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiVWludDhBcnJheVwiXSA9IDJdID0gXCJVaW50OEFycmF5XCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiUHJlZml4ZWRIZXhTdHJpbmdcIl0gPSAzXSA9IFwiUHJlZml4ZWRIZXhTdHJpbmdcIjtcbn0pKFR5cGVPdXRwdXQgfHwgKFR5cGVPdXRwdXQgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIHRvVHlwZShpbnB1dCwgb3V0cHV0VHlwZSkge1xuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiYgIWlzSGV4U3RyaW5nKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgc3RyaW5nIG11c3QgYmUgcHJvdmlkZWQgd2l0aCBhIDB4LXByZWZpeCwgZ2l2ZW46ICR7aW5wdXR9YCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc1NhZmVJbnRlZ2VyKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlZCBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIE1BWF9TQUZFX0lOVEVHRVIgKHBsZWFzZSB1c2UgYW4gYWx0ZXJuYXRpdmUgaW5wdXQgdHlwZSknKTtcbiAgICB9XG4gICAgY29uc3Qgb3V0cHV0ID0gdG9CeXRlcyhpbnB1dCk7XG4gICAgc3dpdGNoIChvdXRwdXRUeXBlKSB7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5VaW50OEFycmF5OlxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgY2FzZSBUeXBlT3V0cHV0LkJpZ0ludDpcbiAgICAgICAgICAgIHJldHVybiBieXRlc1RvQmlnSW50KG91dHB1dCk7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5OdW1iZXI6IHtcbiAgICAgICAgICAgIGNvbnN0IGJpZ0ludCA9IGJ5dGVzVG9CaWdJbnQob3V0cHV0KTtcbiAgICAgICAgICAgIGlmIChiaWdJbnQgPiBCaWdJbnQoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBNQVhfU0FGRV9JTlRFR0VSIChwbGVhc2UgdXNlIGFuIGFsdGVybmF0aXZlIG91dHB1dCB0eXBlKScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcihiaWdJbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5QcmVmaXhlZEhleFN0cmluZzpcbiAgICAgICAgICAgIHJldHVybiBieXRlc1RvSGV4KG91dHB1dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gb3V0cHV0VHlwZScpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJieXRlc1RvQmlnSW50IiwiYnl0ZXNUb0hleCIsInRvQnl0ZXMiLCJpc0hleFN0cmluZyIsIlR5cGVPdXRwdXQiLCJ0b1R5cGUiLCJpbnB1dCIsIm91dHB1dFR5cGUiLCJ1bmRlZmluZWQiLCJFcnJvciIsIk51bWJlciIsImlzU2FmZUludGVnZXIiLCJvdXRwdXQiLCJVaW50OEFycmF5IiwiQmlnSW50IiwiYmlnSW50IiwiTUFYX1NBRkVfSU5URUdFUiIsIlByZWZpeGVkSGV4U3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/units.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/units.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GWEI_TO_WEI: () => (/* binding */ GWEI_TO_WEI),\n/* harmony export */   formatBigDecimal: () => (/* binding */ formatBigDecimal)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n/** Easy conversion from Gwei to wei */ const GWEI_TO_WEI = BigInt(1000000000);\nfunction formatBigDecimal(numerator, denominator, maxDecimalFactor) {\n    if (denominator === _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0) {\n        denominator = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_1;\n    }\n    const full = numerator / denominator;\n    const fraction = (numerator - full * denominator) * maxDecimalFactor / denominator;\n    // zeros to be added post decimal are number of zeros in maxDecimalFactor - number of digits in fraction\n    const zerosPostDecimal = String(maxDecimalFactor).length - 1 - String(fraction).length;\n    return `${full}.${\"0\".repeat(zerosPostDecimal)}${fraction}`;\n} //# sourceMappingURL=units.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3VuaXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDtBQUNwRCxxQ0FBcUMsR0FDOUIsTUFBTUUsY0FBY0MsT0FBTyxZQUFZO0FBQ3ZDLFNBQVNDLGlCQUFpQkMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLGdCQUFnQjtJQUNyRSxJQUFJRCxnQkFBZ0JOLG1EQUFRQSxFQUFFO1FBQzFCTSxjQUFjTCxtREFBUUE7SUFDMUI7SUFDQSxNQUFNTyxPQUFPSCxZQUFZQztJQUN6QixNQUFNRyxXQUFXLENBQUVKLFlBQVlHLE9BQU9GLFdBQVUsSUFBS0MsbUJBQW9CRDtJQUN6RSx3R0FBd0c7SUFDeEcsTUFBTUksbUJBQW1CQyxPQUFPSixrQkFBa0JLLE1BQU0sR0FBRyxJQUFJRCxPQUFPRixVQUFVRyxNQUFNO0lBQ3RGLE9BQU8sQ0FBQyxFQUFFSixLQUFLLENBQUMsRUFBRSxJQUFJSyxNQUFNLENBQUNILGtCQUFrQixFQUFFRCxTQUFTLENBQUM7QUFDL0QsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2NrZXRoLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS91bml0cy5qcz9iYzZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJJR0lOVF8wLCBCSUdJTlRfMSB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbi8qKiBFYXN5IGNvbnZlcnNpb24gZnJvbSBHd2VpIHRvIHdlaSAqL1xuZXhwb3J0IGNvbnN0IEdXRUlfVE9fV0VJID0gQmlnSW50KDEwMDAwMDAwMDApO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEJpZ0RlY2ltYWwobnVtZXJhdG9yLCBkZW5vbWluYXRvciwgbWF4RGVjaW1hbEZhY3Rvcikge1xuICAgIGlmIChkZW5vbWluYXRvciA9PT0gQklHSU5UXzApIHtcbiAgICAgICAgZGVub21pbmF0b3IgPSBCSUdJTlRfMTtcbiAgICB9XG4gICAgY29uc3QgZnVsbCA9IG51bWVyYXRvciAvIGRlbm9taW5hdG9yO1xuICAgIGNvbnN0IGZyYWN0aW9uID0gKChudW1lcmF0b3IgLSBmdWxsICogZGVub21pbmF0b3IpICogbWF4RGVjaW1hbEZhY3RvcikgLyBkZW5vbWluYXRvcjtcbiAgICAvLyB6ZXJvcyB0byBiZSBhZGRlZCBwb3N0IGRlY2ltYWwgYXJlIG51bWJlciBvZiB6ZXJvcyBpbiBtYXhEZWNpbWFsRmFjdG9yIC0gbnVtYmVyIG9mIGRpZ2l0cyBpbiBmcmFjdGlvblxuICAgIGNvbnN0IHplcm9zUG9zdERlY2ltYWwgPSBTdHJpbmcobWF4RGVjaW1hbEZhY3RvcikubGVuZ3RoIC0gMSAtIFN0cmluZyhmcmFjdGlvbikubGVuZ3RoO1xuICAgIHJldHVybiBgJHtmdWxsfS4keycwJy5yZXBlYXQoemVyb3NQb3N0RGVjaW1hbCl9JHtmcmFjdGlvbn1gO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pdHMuanMubWFwIl0sIm5hbWVzIjpbIkJJR0lOVF8wIiwiQklHSU5UXzEiLCJHV0VJX1RPX1dFSSIsIkJpZ0ludCIsImZvcm1hdEJpZ0RlY2ltYWwiLCJudW1lcmF0b3IiLCJkZW5vbWluYXRvciIsIm1heERlY2ltYWxGYWN0b3IiLCJmdWxsIiwiZnJhY3Rpb24iLCJ6ZXJvc1Bvc3REZWNpbWFsIiwiU3RyaW5nIiwibGVuZ3RoIiwicmVwZWF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/units.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/withdrawal.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/withdrawal.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Withdrawal: () => (/* binding */ Withdrawal)\n/* harmony export */ });\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/types.js\");\n\n\n\n\n/**\n * Representation of EIP-4895 withdrawal data\n */ class Withdrawal {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n     */ constructor(index, validatorIndex, address, /**\n     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n     */ amount){\n        this.index = index;\n        this.validatorIndex = validatorIndex;\n        this.address = address;\n        this.amount = amount;\n    }\n    static fromWithdrawalData(withdrawalData) {\n        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData } = withdrawalData;\n        const index = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(indexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const validatorIndex = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const address = addressData instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? addressData : new _address_js__WEBPACK_IMPORTED_MODULE_0__.Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(addressData));\n        const amount = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amountData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        return new Withdrawal(index, validatorIndex, address, amount);\n    }\n    static fromValuesArray(withdrawalArray) {\n        if (withdrawalArray.length !== 4) {\n            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n        }\n        const [index, validatorIndex, address, amount] = withdrawalArray;\n        return Withdrawal.fromWithdrawalData({\n            index,\n            validatorIndex,\n            address,\n            amount\n        });\n    }\n    /**\n     * Convert a withdrawal to a buffer array\n     * @param withdrawal the withdrawal to convert\n     * @returns buffer array of the withdrawal\n     */ static toBytesArray(withdrawal) {\n        const { index, validatorIndex, address, amount } = withdrawal;\n        const indexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0 ? new Uint8Array() : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const validatorIndexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0 ? new Uint8Array() : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const addressBytes = address instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? address.bytes : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(address, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const amountBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0 ? new Uint8Array() : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        return [\n            indexBytes,\n            validatorIndexBytes,\n            addressBytes,\n            amountBytes\n        ];\n    }\n    raw() {\n        return Withdrawal.toBytesArray(this);\n    }\n    toValue() {\n        return {\n            index: this.index,\n            validatorIndex: this.validatorIndex,\n            address: this.address.bytes,\n            amount: this.amount\n        };\n    }\n    toJSON() {\n        return {\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.index),\n            validatorIndex: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.validatorIndex),\n            address: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.address.bytes),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.amount)\n        };\n    }\n} //# sourceMappingURL=withdrawal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3dpdGhkcmF3YWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBdUM7QUFDdUI7QUFDcEI7QUFDTTtBQUNoRDs7Q0FFQyxHQUNNLE1BQU1PO0lBQ1Q7Ozs7S0FJQyxHQUNEQyxZQUFZQyxLQUFLLEVBQUVDLGNBQWMsRUFBRUMsT0FBTyxFQUMxQzs7S0FFQyxHQUNEQyxNQUFNLENBQUU7UUFDSixJQUFJLENBQUNILEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNDLGNBQWMsR0FBR0E7UUFDdEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO0lBQ2xCO0lBQ0EsT0FBT0MsbUJBQW1CQyxjQUFjLEVBQUU7UUFDdEMsTUFBTSxFQUFFTCxPQUFPTSxTQUFTLEVBQUVMLGdCQUFnQk0sa0JBQWtCLEVBQUVMLFNBQVNNLFdBQVcsRUFBRUwsUUFBUU0sVUFBVSxFQUFHLEdBQUdKO1FBQzVHLE1BQU1MLFFBQVFILGlEQUFNQSxDQUFDUyxXQUFXVixpREFBVUEsQ0FBQ2MsTUFBTTtRQUNqRCxNQUFNVCxpQkFBaUJKLGlEQUFNQSxDQUFDVSxvQkFBb0JYLGlEQUFVQSxDQUFDYyxNQUFNO1FBQ25FLE1BQU1SLFVBQVVNLHVCQUF1QmpCLGdEQUFPQSxHQUFHaUIsY0FBYyxJQUFJakIsZ0RBQU9BLENBQUNHLGtEQUFPQSxDQUFDYztRQUNuRixNQUFNTCxTQUFTTixpREFBTUEsQ0FBQ1ksWUFBWWIsaURBQVVBLENBQUNjLE1BQU07UUFDbkQsT0FBTyxJQUFJWixXQUFXRSxPQUFPQyxnQkFBZ0JDLFNBQVNDO0lBQzFEO0lBQ0EsT0FBT1EsZ0JBQWdCQyxlQUFlLEVBQUU7UUFDcEMsSUFBSUEsZ0JBQWdCQyxNQUFNLEtBQUssR0FBRztZQUM5QixNQUFNQyxNQUFNLENBQUMsaURBQWlELEVBQUVGLGdCQUFnQkMsTUFBTSxDQUFDLENBQUM7UUFDNUY7UUFDQSxNQUFNLENBQUNiLE9BQU9DLGdCQUFnQkMsU0FBU0MsT0FBTyxHQUFHUztRQUNqRCxPQUFPZCxXQUFXTSxrQkFBa0IsQ0FBQztZQUFFSjtZQUFPQztZQUFnQkM7WUFBU0M7UUFBTztJQUNsRjtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPWSxhQUFhQyxVQUFVLEVBQUU7UUFDNUIsTUFBTSxFQUFFaEIsS0FBSyxFQUFFQyxjQUFjLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFLEdBQUdhO1FBQ25ELE1BQU1DLGFBQWFwQixpREFBTUEsQ0FBQ0csT0FBT0osaURBQVVBLENBQUNjLE1BQU0sTUFBTWYsbURBQVFBLEdBQzFELElBQUl1QixlQUNKckIsaURBQU1BLENBQUNHLE9BQU9KLGlEQUFVQSxDQUFDc0IsVUFBVTtRQUN6QyxNQUFNQyxzQkFBc0J0QixpREFBTUEsQ0FBQ0ksZ0JBQWdCTCxpREFBVUEsQ0FBQ2MsTUFBTSxNQUFNZixtREFBUUEsR0FDNUUsSUFBSXVCLGVBQ0pyQixpREFBTUEsQ0FBQ0ksZ0JBQWdCTCxpREFBVUEsQ0FBQ3NCLFVBQVU7UUFDbEQsTUFBTUUsZUFBZWxCLG1CQUFtQlgsZ0RBQU9BLEdBQUdXLFFBQVFtQixLQUFLLEdBQUd4QixpREFBTUEsQ0FBQ0ssU0FBU04saURBQVVBLENBQUNzQixVQUFVO1FBQ3ZHLE1BQU1JLGNBQWN6QixpREFBTUEsQ0FBQ00sUUFBUVAsaURBQVVBLENBQUNjLE1BQU0sTUFBTWYsbURBQVFBLEdBQzVELElBQUl1QixlQUNKckIsaURBQU1BLENBQUNNLFFBQVFQLGlEQUFVQSxDQUFDc0IsVUFBVTtRQUMxQyxPQUFPO1lBQUNEO1lBQVlFO1lBQXFCQztZQUFjRTtTQUFZO0lBQ3ZFO0lBQ0FDLE1BQU07UUFDRixPQUFPekIsV0FBV2lCLFlBQVksQ0FBQyxJQUFJO0lBQ3ZDO0lBQ0FTLFVBQVU7UUFDTixPQUFPO1lBQ0h4QixPQUFPLElBQUksQ0FBQ0EsS0FBSztZQUNqQkMsZ0JBQWdCLElBQUksQ0FBQ0EsY0FBYztZQUNuQ0MsU0FBUyxJQUFJLENBQUNBLE9BQU8sQ0FBQ21CLEtBQUs7WUFDM0JsQixRQUFRLElBQUksQ0FBQ0EsTUFBTTtRQUN2QjtJQUNKO0lBQ0FzQixTQUFTO1FBQ0wsT0FBTztZQUNIekIsT0FBT1Isc0RBQVdBLENBQUMsSUFBSSxDQUFDUSxLQUFLO1lBQzdCQyxnQkFBZ0JULHNEQUFXQSxDQUFDLElBQUksQ0FBQ1MsY0FBYztZQUMvQ0MsU0FBU1QscURBQVVBLENBQUMsSUFBSSxDQUFDUyxPQUFPLENBQUNtQixLQUFLO1lBQ3RDbEIsUUFBUVgsc0RBQVdBLENBQUMsSUFBSSxDQUFDVyxNQUFNO1FBQ25DO0lBQ0o7QUFDSixFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvY2tldGgvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3dpdGhkcmF3YWwuanM/MjhlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnLi9hZGRyZXNzLmpzJztcbmltcG9ydCB7IGJpZ0ludFRvSGV4LCBieXRlc1RvSGV4LCB0b0J5dGVzIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5pbXBvcnQgeyBCSUdJTlRfMCB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IFR5cGVPdXRwdXQsIHRvVHlwZSB9IGZyb20gJy4vdHlwZXMuanMnO1xuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBFSVAtNDg5NSB3aXRoZHJhd2FsIGRhdGFcbiAqL1xuZXhwb3J0IGNsYXNzIFdpdGhkcmF3YWwge1xuICAgIC8qKlxuICAgICAqIFRoaXMgY29uc3RydWN0b3IgYXNzaWducyBhbmQgdmFsaWRhdGVzIHRoZSB2YWx1ZXMuXG4gICAgICogVXNlIHRoZSBzdGF0aWMgZmFjdG9yeSBtZXRob2RzIHRvIGFzc2lzdCBpbiBjcmVhdGluZyBhIFdpdGhkcmF3YWwgb2JqZWN0IGZyb20gdmFyeWluZyBkYXRhIHR5cGVzLlxuICAgICAqIEl0cyBhbW91bnQgaXMgaW4gR3dlaSB0byBtYXRjaCBDTCByZXByZXNlbnRhdGlvbiBhbmQgZm9yIGV2ZW50dWFsIHNzeiB3aXRoZHJhd2Fsc1Jvb3RcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpbmRleCwgdmFsaWRhdG9ySW5kZXgsIGFkZHJlc3MsIFxuICAgIC8qKlxuICAgICAqIHdpdGhkcmF3YWwgYW1vdW50IGluIEd3ZWkgdG8gbWF0Y2ggdGhlIENMIHJlcGVzZW50YXRpb24gYW5kIGV2ZW50dWFsbHkgc3N6IHdpdGhkcmF3YWxzUm9vdFxuICAgICAqL1xuICAgIGFtb3VudCkge1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMudmFsaWRhdG9ySW5kZXggPSB2YWxpZGF0b3JJbmRleDtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICAgICAgdGhpcy5hbW91bnQgPSBhbW91bnQ7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tV2l0aGRyYXdhbERhdGEod2l0aGRyYXdhbERhdGEpIHtcbiAgICAgICAgY29uc3QgeyBpbmRleDogaW5kZXhEYXRhLCB2YWxpZGF0b3JJbmRleDogdmFsaWRhdG9ySW5kZXhEYXRhLCBhZGRyZXNzOiBhZGRyZXNzRGF0YSwgYW1vdW50OiBhbW91bnREYXRhLCB9ID0gd2l0aGRyYXdhbERhdGE7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdG9UeXBlKGluZGV4RGF0YSwgVHlwZU91dHB1dC5CaWdJbnQpO1xuICAgICAgICBjb25zdCB2YWxpZGF0b3JJbmRleCA9IHRvVHlwZSh2YWxpZGF0b3JJbmRleERhdGEsIFR5cGVPdXRwdXQuQmlnSW50KTtcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IGFkZHJlc3NEYXRhIGluc3RhbmNlb2YgQWRkcmVzcyA/IGFkZHJlc3NEYXRhIDogbmV3IEFkZHJlc3ModG9CeXRlcyhhZGRyZXNzRGF0YSkpO1xuICAgICAgICBjb25zdCBhbW91bnQgPSB0b1R5cGUoYW1vdW50RGF0YSwgVHlwZU91dHB1dC5CaWdJbnQpO1xuICAgICAgICByZXR1cm4gbmV3IFdpdGhkcmF3YWwoaW5kZXgsIHZhbGlkYXRvckluZGV4LCBhZGRyZXNzLCBhbW91bnQpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVZhbHVlc0FycmF5KHdpdGhkcmF3YWxBcnJheSkge1xuICAgICAgICBpZiAod2l0aGRyYXdhbEFycmF5Lmxlbmd0aCAhPT0gNCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYEludmFsaWQgd2l0aGRyYXdhbEFycmF5IGxlbmd0aCBleHBlY3RlZD00IGFjdHVhbD0ke3dpdGhkcmF3YWxBcnJheS5sZW5ndGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2luZGV4LCB2YWxpZGF0b3JJbmRleCwgYWRkcmVzcywgYW1vdW50XSA9IHdpdGhkcmF3YWxBcnJheTtcbiAgICAgICAgcmV0dXJuIFdpdGhkcmF3YWwuZnJvbVdpdGhkcmF3YWxEYXRhKHsgaW5kZXgsIHZhbGlkYXRvckluZGV4LCBhZGRyZXNzLCBhbW91bnQgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYSB3aXRoZHJhd2FsIHRvIGEgYnVmZmVyIGFycmF5XG4gICAgICogQHBhcmFtIHdpdGhkcmF3YWwgdGhlIHdpdGhkcmF3YWwgdG8gY29udmVydFxuICAgICAqIEByZXR1cm5zIGJ1ZmZlciBhcnJheSBvZiB0aGUgd2l0aGRyYXdhbFxuICAgICAqL1xuICAgIHN0YXRpYyB0b0J5dGVzQXJyYXkod2l0aGRyYXdhbCkge1xuICAgICAgICBjb25zdCB7IGluZGV4LCB2YWxpZGF0b3JJbmRleCwgYWRkcmVzcywgYW1vdW50IH0gPSB3aXRoZHJhd2FsO1xuICAgICAgICBjb25zdCBpbmRleEJ5dGVzID0gdG9UeXBlKGluZGV4LCBUeXBlT3V0cHV0LkJpZ0ludCkgPT09IEJJR0lOVF8wXG4gICAgICAgICAgICA/IG5ldyBVaW50OEFycmF5KClcbiAgICAgICAgICAgIDogdG9UeXBlKGluZGV4LCBUeXBlT3V0cHV0LlVpbnQ4QXJyYXkpO1xuICAgICAgICBjb25zdCB2YWxpZGF0b3JJbmRleEJ5dGVzID0gdG9UeXBlKHZhbGlkYXRvckluZGV4LCBUeXBlT3V0cHV0LkJpZ0ludCkgPT09IEJJR0lOVF8wXG4gICAgICAgICAgICA/IG5ldyBVaW50OEFycmF5KClcbiAgICAgICAgICAgIDogdG9UeXBlKHZhbGlkYXRvckluZGV4LCBUeXBlT3V0cHV0LlVpbnQ4QXJyYXkpO1xuICAgICAgICBjb25zdCBhZGRyZXNzQnl0ZXMgPSBhZGRyZXNzIGluc3RhbmNlb2YgQWRkcmVzcyA/IGFkZHJlc3MuYnl0ZXMgOiB0b1R5cGUoYWRkcmVzcywgVHlwZU91dHB1dC5VaW50OEFycmF5KTtcbiAgICAgICAgY29uc3QgYW1vdW50Qnl0ZXMgPSB0b1R5cGUoYW1vdW50LCBUeXBlT3V0cHV0LkJpZ0ludCkgPT09IEJJR0lOVF8wXG4gICAgICAgICAgICA/IG5ldyBVaW50OEFycmF5KClcbiAgICAgICAgICAgIDogdG9UeXBlKGFtb3VudCwgVHlwZU91dHB1dC5VaW50OEFycmF5KTtcbiAgICAgICAgcmV0dXJuIFtpbmRleEJ5dGVzLCB2YWxpZGF0b3JJbmRleEJ5dGVzLCBhZGRyZXNzQnl0ZXMsIGFtb3VudEJ5dGVzXTtcbiAgICB9XG4gICAgcmF3KCkge1xuICAgICAgICByZXR1cm4gV2l0aGRyYXdhbC50b0J5dGVzQXJyYXkodGhpcyk7XG4gICAgfVxuICAgIHRvVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICAgIHZhbGlkYXRvckluZGV4OiB0aGlzLnZhbGlkYXRvckluZGV4LFxuICAgICAgICAgICAgYWRkcmVzczogdGhpcy5hZGRyZXNzLmJ5dGVzLFxuICAgICAgICAgICAgYW1vdW50OiB0aGlzLmFtb3VudCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5kZXg6IGJpZ0ludFRvSGV4KHRoaXMuaW5kZXgpLFxuICAgICAgICAgICAgdmFsaWRhdG9ySW5kZXg6IGJpZ0ludFRvSGV4KHRoaXMudmFsaWRhdG9ySW5kZXgpLFxuICAgICAgICAgICAgYWRkcmVzczogYnl0ZXNUb0hleCh0aGlzLmFkZHJlc3MuYnl0ZXMpLFxuICAgICAgICAgICAgYW1vdW50OiBiaWdJbnRUb0hleCh0aGlzLmFtb3VudCksXG4gICAgICAgIH07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2l0aGRyYXdhbC5qcy5tYXAiXSwibmFtZXMiOlsiQWRkcmVzcyIsImJpZ0ludFRvSGV4IiwiYnl0ZXNUb0hleCIsInRvQnl0ZXMiLCJCSUdJTlRfMCIsIlR5cGVPdXRwdXQiLCJ0b1R5cGUiLCJXaXRoZHJhd2FsIiwiY29uc3RydWN0b3IiLCJpbmRleCIsInZhbGlkYXRvckluZGV4IiwiYWRkcmVzcyIsImFtb3VudCIsImZyb21XaXRoZHJhd2FsRGF0YSIsIndpdGhkcmF3YWxEYXRhIiwiaW5kZXhEYXRhIiwidmFsaWRhdG9ySW5kZXhEYXRhIiwiYWRkcmVzc0RhdGEiLCJhbW91bnREYXRhIiwiQmlnSW50IiwiZnJvbVZhbHVlc0FycmF5Iiwid2l0aGRyYXdhbEFycmF5IiwibGVuZ3RoIiwiRXJyb3IiLCJ0b0J5dGVzQXJyYXkiLCJ3aXRoZHJhd2FsIiwiaW5kZXhCeXRlcyIsIlVpbnQ4QXJyYXkiLCJ2YWxpZGF0b3JJbmRleEJ5dGVzIiwiYWRkcmVzc0J5dGVzIiwiYnl0ZXMiLCJhbW91bnRCeXRlcyIsInJhdyIsInRvVmFsdWUiLCJ0b0pTT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/withdrawal.js\n");

/***/ })

};
;