// "use client";
// import { ethers } from "ethers";
// import abi from "./factoryAbi.json";

// console.log("abi is ", abi);
// const provider = new ethers.providers.JsonRpcProvider(
//   "https://polygon-mumbai.g.alchemy.com/v2/N_-JU1B2XbGAPiCpCE0CSv7Y9P5CFP-D"
// );

// async function fetchVariables(PocketContractAddress) {
//   // Initialize the ethers.js contract object
//   const PocketContract = new ethers.Contract(
//     PocketContractAddress,
//     abi,
//     provider
//   );

//   let title = await PocketContract.title();
//   let description = await PocketContract.description();
//   let targetAmount = await PocketContract.targetAmount();

//   const value = {
//     title: title,
//     description: description,
//     targetAmount: targetAmount,
//   };
//   console.log("value is ", value);
//   return value;
// }

// // fetchVariables(0xc4b6716EBEFbA295f29E58D5e56B4eE23c8860B9);

// import { useEffect, useState } from "react";
// import "./App.css";

// import { AlchemyProvider } from "@alchemy/aa-alchemy";
// import {
//   LightSmartContractAccount,
//   getDefaultLightAccountFactoryAddress,
// } from "@alchemy/aa-accounts";
// import { polygonMumbai } from "viem/chains";
// // import { createMagicSigner } from "./magic";
// import { WalletClientSigner } from "@alchemy/aa-core";
// // import { web3authSigner } from "./web3Auth";
// import { web3auth } from "./web3Auth";
// import {
//   createWalletClient,
//   custom,
//   createPublicClient,
//   http,
//   PublicClient,
// } from "viem";
// import { encodeFunctionData } from "viem";
// import { Card } from "@mui/material";
// import { Button } from "@mui/material";
// import { abi } from "./factoryAbi.json";
// import { ethers } from "ethers";

// const chain = polygonMumbai;

// function App() {
//   const [provider, setProvider] = useState<any>(null);
//   const [owner, setOwner] = useState<WalletClientSigner | null>(null);
//   const [address, setAddress] = useState<any>(null);
//   const [isConnected, setIsConnected] = useState(false);
//   const [data, setData] = useState(null); //addresses of pockets
//   const [pocketsData, setPocketsData] = useState([]);
//   const [client, setClient] = useState<PublicClient | null>(null);

//   //   const [web3AuthSigner,setWeb3AuthSigner]=useState(null);

//   useEffect(() => {
//     console.log("abi is ", abi);
//     const init = async () => {
//       await web3auth.initModal();
//       const temp_client = createPublicClient({
//         chain: chain,
//         transport: http(),
//       });
//       setClient(temp_client);
//     };
//     init();
//   }, []);

//   useEffect(() => {
//     if (owner) {
//       //get Alchemy provider from web3Auth signer
//       console.log("inside");
//       const getProvider = async () => {
//         const fetch_prov = new AlchemyProvider({
//           apiKey: "N_-JU1B2XbGAPiCpCE0CSv7Y9P5CFP-D",
//           chain,
//         }).connect(
//           (rpcClient) =>
//             new LightSmartContractAccount({
//               chain: rpcClient.chain,
//               owner: owner, // this is link to web3
//               factoryAddress: getDefaultLightAccountFactoryAddress(chain),
//               rpcClient,
//             })
//         );
//         setProvider(fetch_prov);
//       };
//       getProvider();
//     } else {
//       console.log("no owner");
//     }
//   }, [owner]);

//   useEffect(() => {
//     if (provider) {
//       const getAddress = async () => {
//         const add = await provider?.getAddress();
//         setAddress(add);
//         setIsConnected(true);
//         console.log(address);
//       };
//       getAddress();
//     }
//   }, [provider]);

//   const handleConnect = async () => {
//     try {
//       await web3auth.connect();
//       const web3authClient = createWalletClient({
//         transport: custom(web3auth.provider),
//       });

//       // a smart account signer you can use as an owner on ISmartContractAccount
//       const web3authSigner = new WalletClientSigner(
//         web3authClient,
//         "web3auth" // signerType
//       );
//       setOwner(web3authSigner);
//     } catch (error) {
//       console.log("Error creating signer:", error);
//     }
//   };

//   const handleDisconnect = async () => {
//     await web3auth.logout();
//     setProvider(null);
//     setOwner(null);
//     setIsConnected(false);
//   };

//   const sendTx = async () => {
//     //use this block for sending write requests
//     const uoCallData = encodeFunctionData({
//       abi: abi,
//       functionName: "createPocket",
//       args: ["blu", "zk", 10],
//     });

//     provider.withAlchemyGasManager({
//       policyId: "c1e552f7-5557-42aa-8a24-0c55895f35db", // replace with your policy id, get yours at https://dashboard.alchemy.com/
//     });
//     const uo = await provider.sendUserOperation({
//       target: "0x2BeC4b3df9362A60a73A36f1D04208aBe542a3a7", //factory contract
//       data: uoCallData,
//     });

//     const txHash = await provider.waitForUserOperationTransaction(uo.hash);

//     console.log(txHash, uo);
//     readRequest();
//   };
//   const readRequest = async () => {
//     //use this block for sending read requests.it uses publicClient.

//     // console.log("client is ",client)
//     const pockets = await client.readContract({
//       address: "0x2BeC4b3df9362A60a73A36f1D04208aBe542a3a7",
//       abi: abi,
//       functionName: "getPocketsByOwner",
//       args: [address],
//     });
//     setData(pockets);
//   };

//   useEffect(() => {
//     if (data) {
//       console.log("data is ", data);
//       const fetchData = async () => {
//         let pocketDataArray = [];
//         for (let i = 0; i < data.length; i++) {
//           const pocketData = await fetchVariables(data[i]);
//           pocketDataArray.push(pocketData);
//         }
//         setPocketsData(pocketDataArray);
//         console.log("fetching pockets data");
//       };
//       fetchData();
//     }
//   }, [data]);

//   async function fetchVariables(PocketContractAddress) {
//     // Initialize the ethers.js contract object
//     const PocketContract = new ethers.Contract(
//       PocketContractAddress,
//       abi,
//       provider
//     );

//     let title = await PocketContract.title();
//     let description = await PocketContract.description();
//     let targetAmount = await PocketContract.targetAmount();

//     const value = {
//       title: title,
//       description: description,
//       targetAmount: targetAmount,
//     };
//     return value;
//   }

//   return (
//     <>
//       <div>
//         <Card>
//           <h1>magic -alchemy</h1>
//           <button onClick={handleConnect}>Connect</button>

//           {isConnected ? (
//             <p>smart account address is {address} </p>
//           ) : (
//             <p>..loading</p>
//           )}
//           {isConnected && (
//             <button onClick={handleDisconnect}>Disconnect</button>
//           )}

//           <Button variant="contained" onClick={sendTx}>
//             Make a Tx
//           </Button>
//           <div>
//             {pocketsData.length > 0 &&
//               pocketsData.map((pocket, index) => {
//                 return <p key={index}>{pocket.title}</p>;
//               })}
//           </div>
//         </Card>
//       </div>
//     </>
//   );
// }

// export default App;
